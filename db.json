{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/avatar.jpeg","path":"img/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/favicon.jpeg","path":"img/favicon.jpeg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1554987557621},{"_id":"themes/hexo-theme-yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1554987557622},{"_id":"themes/hexo-theme-yilia/.git","hash":"0576ed892d3b3085d35ae98e0f28076ad460ddba","modified":1554987557536},{"_id":"themes/hexo-theme-yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1554987557623},{"_id":"themes/hexo-theme-yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1554987557622},{"_id":"themes/hexo-theme-yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1554987557622},{"_id":"themes/hexo-theme-yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1554987557623},{"_id":"themes/hexo-theme-yilia/_config.yml","hash":"24e6aea4fb763190f42a87bc1466a3a45a647de8","modified":1555150367095},{"_id":"themes/hexo-theme-yilia/package.json","hash":"125355e5f78dc25fe2a0819076c9df2f904fa0e4","modified":1554987557636},{"_id":"themes/hexo-theme-yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1554987557670},{"_id":"themes/hexo-theme-yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1554987557622},{"_id":"source/_posts/mutex_or_channel.md","hash":"5340627defa7cd6e7f6c16148a14132ac8b460e1","modified":1555659588763},{"_id":"source/_posts/rss.md","hash":"cd09939619221d832866a6840cad86f064023cd4","modified":1555297222517},{"_id":"themes/hexo-theme-yilia/package-lock.json","hash":"3bdbd8058e14d4c18008cb63efe1869446c30bae","modified":1554987557636},{"_id":"themes/hexo-theme-yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1554987557624},{"_id":"themes/hexo-theme-yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1554987557624},{"_id":"themes/hexo-theme-yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1554987557624},{"_id":"themes/hexo-theme-yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1554987557624},{"_id":"themes/hexo-theme-yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1554987557625},{"_id":"themes/hexo-theme-yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1554987557625},{"_id":"themes/hexo-theme-yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1554987557625},{"_id":"themes/hexo-theme-yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1554987557631},{"_id":"themes/hexo-theme-yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1554987557632},{"_id":"themes/hexo-theme-yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1554987557632},{"_id":"themes/hexo-theme-yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1554987557633},{"_id":"themes/hexo-theme-yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1554987557633},{"_id":"themes/hexo-theme-yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1554987557635},{"_id":"themes/hexo-theme-yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1554987557634},{"_id":"themes/hexo-theme-yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1554987557637},{"_id":"themes/hexo-theme-yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1554987557670},{"_id":"themes/hexo-theme-yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1554987557661},{"_id":"source/_posts/logrotate.md","hash":"9d8ba20465cf1a0cb85b5909c5dea33f5b14ba92","modified":1555659684548},{"_id":"themes/hexo-theme-yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1554987557666},{"_id":"themes/hexo-theme-yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554987557631},{"_id":"themes/hexo-theme-yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1554987557667},{"_id":"themes/hexo-theme-yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1554987557669},{"_id":"themes/hexo-theme-yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1554987557625},{"_id":"themes/hexo-theme-yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1554987557625},{"_id":"themes/hexo-theme-yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1554987557626},{"_id":"themes/hexo-theme-yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1554987557626},{"_id":"themes/hexo-theme-yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1554987557626},{"_id":"themes/hexo-theme-yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1554987557626},{"_id":"themes/hexo-theme-yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1554987557626},{"_id":"themes/hexo-theme-yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1554987557626},{"_id":"themes/hexo-theme-yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1554987557627},{"_id":"themes/hexo-theme-yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1554987557627},{"_id":"themes/hexo-theme-yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1554987557627},{"_id":"themes/hexo-theme-yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1554987557627},{"_id":"themes/hexo-theme-yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1555149450081},{"_id":"themes/hexo-theme-yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1554987557631},{"_id":"themes/hexo-theme-yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1554987557631},{"_id":"themes/hexo-theme-yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1554987557662},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1554987557663},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1554987557663},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1554987557664},{"_id":"themes/hexo-theme-yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1554987557665},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1554987557665},{"_id":"themes/hexo-theme-yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1554987557665},{"_id":"themes/hexo-theme-yilia/source/img/avatar.jpeg","hash":"d651d08592d23104364b134661a1551e86d35129","modified":1555135393037},{"_id":"themes/hexo-theme-yilia/source/img/favicon.jpeg","hash":"986d62be409c5883fefb4e8577260616553e1880","modified":1555135405387},{"_id":"themes/hexo-theme-yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1554987557666},{"_id":"themes/hexo-theme-yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1554987557666},{"_id":"themes/hexo-theme-yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1554987557638},{"_id":"themes/hexo-theme-yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1554987557637},{"_id":"themes/hexo-theme-yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1554987557639},{"_id":"themes/hexo-theme-yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1554987557638},{"_id":"themes/hexo-theme-yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1554987557639},{"_id":"themes/hexo-theme-yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1554987557639},{"_id":"themes/hexo-theme-yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1554987557640},{"_id":"themes/hexo-theme-yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1554987557641},{"_id":"themes/hexo-theme-yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1554987557640},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1554987557644},{"_id":"themes/hexo-theme-yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1554987557647},{"_id":"themes/hexo-theme-yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1554987557647},{"_id":"themes/hexo-theme-yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1554987557647},{"_id":"themes/hexo-theme-yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1554987557647},{"_id":"themes/hexo-theme-yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1554987557649},{"_id":"themes/hexo-theme-yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1554987557649},{"_id":"themes/hexo-theme-yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1554987557649},{"_id":"themes/hexo-theme-yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1554987557650},{"_id":"themes/hexo-theme-yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1554987557650},{"_id":"themes/hexo-theme-yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1554987557650},{"_id":"themes/hexo-theme-yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1554987557650},{"_id":"themes/hexo-theme-yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1554987557650},{"_id":"themes/hexo-theme-yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1554987557651},{"_id":"themes/hexo-theme-yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1554987557652},{"_id":"themes/hexo-theme-yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1554987557652},{"_id":"themes/hexo-theme-yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1554987557653},{"_id":"themes/hexo-theme-yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1554987557653},{"_id":"themes/hexo-theme-yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1554987557655},{"_id":"themes/hexo-theme-yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1554987557656},{"_id":"themes/hexo-theme-yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1554987557656},{"_id":"themes/hexo-theme-yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1554987557657},{"_id":"themes/hexo-theme-yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1554987557658},{"_id":"themes/hexo-theme-yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1554987557658},{"_id":"themes/hexo-theme-yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1554987557659},{"_id":"themes/hexo-theme-yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1554987557659},{"_id":"themes/hexo-theme-yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1554987557660},{"_id":"themes/hexo-theme-yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1554987557661},{"_id":"themes/hexo-theme-yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1554987557660},{"_id":"themes/hexo-theme-yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1554987557626},{"_id":"themes/hexo-theme-yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1554987557631},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1554987557628},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1554987557628},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1554987557628},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1554987557628},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1554987557629},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1554987557629},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1554987557629},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1554987557629},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1554987557630},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1554987557642},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1554987557642},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1554987557643},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1554987557642},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1554987557643},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1554987557645},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1554987557646},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1554987557646},{"_id":"themes/hexo-theme-yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1554987557647},{"_id":"themes/hexo-theme-yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1554987557648},{"_id":"themes/hexo-theme-yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1554987557648},{"_id":"themes/hexo-theme-yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1554987557655},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1554987557628},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1554987557645},{"_id":"public/content.json","hash":"c63853606a56afc7fe626fe61f2f894e7020827f","modified":1555659894632},{"_id":"public/2019/04/19/mutex_or_channel/index.html","hash":"a8dcc3415340020ddd4cb10426f1ad10f0f08b33","modified":1555659894873},{"_id":"public/2019/04/18/logrotate/index.html","hash":"cd97b7b40002a531db853b25f43286fd24a6eb31","modified":1555659894873},{"_id":"public/2019/04/14/rss/index.html","hash":"719ffc12ae282b0598309359385c4cb88e94dd82","modified":1555659894887},{"_id":"public/archives/index.html","hash":"e7640377c6c8b8a6bf1d54195ab05d25c31341e0","modified":1555659894887},{"_id":"public/archives/2019/index.html","hash":"379d3619ed8408790a9f54035b8430599b811177","modified":1555659894888},{"_id":"public/archives/2019/04/index.html","hash":"f1190ba284cc52d7f8cab9fcafd43cce3e7f9189","modified":1555659894888},{"_id":"public/index.html","hash":"25168077d19cbfaed48de3444391e1a89f62afb4","modified":1555659894888},{"_id":"public/tags/Go/index.html","hash":"a1de8de6f5b0afe866a87ce0c7e449782ecb1faa","modified":1555659894888},{"_id":"public/tags/技术名词/index.html","hash":"eff8fc59eaa23da853ff4b0678ed39634e906579","modified":1555659894888},{"_id":"public/tags/运维/index.html","hash":"c37abbbde66b4fd9e734d1f0582200df1bd52883","modified":1555659894889},{"_id":"public/tags/Log/index.html","hash":"4b2ea7ad06d9da04c608b53ffa854d0cb690a917","modified":1555659894891},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1555659894893},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1555659894893},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1555659894893},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1555659894893},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1555659894893},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1555659894894},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1555659894894},{"_id":"public/img/avatar.jpeg","hash":"d651d08592d23104364b134661a1551e86d35129","modified":1555659894894},{"_id":"public/img/favicon.jpeg","hash":"986d62be409c5883fefb4e8577260616553e1880","modified":1555659894894},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1555659894894},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1555659894894},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1555659894906},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1555659894907},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1555659894910},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1555659894916}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"加锁 Mutex 和 Channel 性能对比","date":"2019-04-19T06:38:40.000Z","toc":true,"_content":"\n## 性能对比\n\n首先在一个目录下新建两个文件：\n\nmain.go\n\n```go\n// main.go\npackage main\n\nimport \"sync\"\n\nvar mutex = sync.Mutex{}\nvar ch = make(chan bool, 1)\n\nfunc UseMutex() {\n    mutex.Lock()\n    mutex.Unlock()\n}\n\nfunc UseChan() {\n    ch <- true\n    <-ch\n}\n```\n\n<!-- more -->\n\nmain_test.go\n\n```go\n// main_test.go\npackage main\n\nimport \"testing\"\n\nfunc BenchmarkUseMutex(b *testing.B) {\n    for n := 0; n < b.N; n++ {\n        UseMutex()\n    }\n}\n\nfunc BenchmarkUseChan(b *testing.B) {\n    for n := 0; n < b.N; n++ {\n        UseChan()\n    }\n}\n```\n\n然后在该文件路径下执行 benchmark：\n\n```bash\ngo test -bench=.\n```\n\n结果如下：\n\n```bash\ngoos: darwin\ngoarch: amd64\npkg: testproject/race\nBenchmarkUseMutex-4     100000000               15.9 ns/op\nBenchmarkUseChan-4      30000000                50.1 ns/op\nPASS\nok      testproject/race        3.173s\n```\n\n从压测结果来看，加锁的方式是使用 Channel 方式的 3.1 倍\n\n## 原因分析\n\n* channel 的成本高于 Mutex\n\n    1. channel 内部有 Mutex，是通过共享内存实现的。(TODO:这里少一个传送门)\n    2. channel 内部可能有 Cond，用来等待或唤醒满足条件的 goroutine(TODO:这里少一个传送门)\n    3. 出让 cpu 并且让另一个 goroutine 获得执行机会，这个切换周期不低，远高于 Mutex 检查竞争状态的成本（后者通常只是一个原子操作）\n\n## 相关链接\n\n* [加锁 Mutex 和 Channel 性能对比](https://www.colabug.com/278134.html)\n* [Golang并发：再也不愁选channel还是选锁](http://lessisbetter.site/2019/01/14/golang-channel-and-mutex/)\n","source":"_posts/mutex_or_channel.md","raw":"---\ntitle: 加锁 Mutex 和 Channel 性能对比\ndate: 2019-04-19 14:38:40\ntoc: true\ntags:\n- Go\n---\n\n## 性能对比\n\n首先在一个目录下新建两个文件：\n\nmain.go\n\n```go\n// main.go\npackage main\n\nimport \"sync\"\n\nvar mutex = sync.Mutex{}\nvar ch = make(chan bool, 1)\n\nfunc UseMutex() {\n    mutex.Lock()\n    mutex.Unlock()\n}\n\nfunc UseChan() {\n    ch <- true\n    <-ch\n}\n```\n\n<!-- more -->\n\nmain_test.go\n\n```go\n// main_test.go\npackage main\n\nimport \"testing\"\n\nfunc BenchmarkUseMutex(b *testing.B) {\n    for n := 0; n < b.N; n++ {\n        UseMutex()\n    }\n}\n\nfunc BenchmarkUseChan(b *testing.B) {\n    for n := 0; n < b.N; n++ {\n        UseChan()\n    }\n}\n```\n\n然后在该文件路径下执行 benchmark：\n\n```bash\ngo test -bench=.\n```\n\n结果如下：\n\n```bash\ngoos: darwin\ngoarch: amd64\npkg: testproject/race\nBenchmarkUseMutex-4     100000000               15.9 ns/op\nBenchmarkUseChan-4      30000000                50.1 ns/op\nPASS\nok      testproject/race        3.173s\n```\n\n从压测结果来看，加锁的方式是使用 Channel 方式的 3.1 倍\n\n## 原因分析\n\n* channel 的成本高于 Mutex\n\n    1. channel 内部有 Mutex，是通过共享内存实现的。(TODO:这里少一个传送门)\n    2. channel 内部可能有 Cond，用来等待或唤醒满足条件的 goroutine(TODO:这里少一个传送门)\n    3. 出让 cpu 并且让另一个 goroutine 获得执行机会，这个切换周期不低，远高于 Mutex 检查竞争状态的成本（后者通常只是一个原子操作）\n\n## 相关链接\n\n* [加锁 Mutex 和 Channel 性能对比](https://www.colabug.com/278134.html)\n* [Golang并发：再也不愁选channel还是选锁](http://lessisbetter.site/2019/01/14/golang-channel-and-mutex/)\n","slug":"mutex_or_channel","published":1,"updated":"2019-04-19T07:39:48.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjunrqgo70000o79v85x0f1pc","content":"<h2 id=\"性能对比\"><a href=\"#性能对比\" class=\"headerlink\" title=\"性能对比\"></a>性能对比</h2><p>首先在一个目录下新建两个文件：</p>\n<p>main.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"sync\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mutex = sync.Mutex&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ch = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UseMutex</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mutex.Lock()</span><br><span class=\"line\">    mutex.Unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UseChan</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    ch &lt;- <span class=\"literal\">true</span></span><br><span class=\"line\">    &lt;-ch</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>main_test.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main_test.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"testing\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkUseMutex</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> n := <span class=\"number\">0</span>; n &lt; b.N; n++ &#123;</span><br><span class=\"line\">        UseMutex()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkUseChan</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> n := <span class=\"number\">0</span>; n &lt; b.N; n++ &#123;</span><br><span class=\"line\">        UseChan()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在该文件路径下执行 benchmark：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go <span class=\"built_in\">test</span> -bench=.</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goos: darwin</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: testproject/race</span><br><span class=\"line\">BenchmarkUseMutex-4     100000000               15.9 ns/op</span><br><span class=\"line\">BenchmarkUseChan-4      30000000                50.1 ns/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      testproject/race        3.173s</span><br></pre></td></tr></table></figure>\n<p>从压测结果来看，加锁的方式是使用 Channel 方式的 3.1 倍</p>\n<h2 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h2><ul>\n<li><p>channel 的成本高于 Mutex</p>\n<ol>\n<li>channel 内部有 Mutex，是通过共享内存实现的。(TODO:这里少一个传送门)</li>\n<li>channel 内部可能有 Cond，用来等待或唤醒满足条件的 goroutine(TODO:这里少一个传送门)</li>\n<li>出让 cpu 并且让另一个 goroutine 获得执行机会，这个切换周期不低，远高于 Mutex 检查竞争状态的成本（后者通常只是一个原子操作）</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li><a href=\"https://www.colabug.com/278134.html\" target=\"_blank\" rel=\"noopener\">加锁 Mutex 和 Channel 性能对比</a></li>\n<li><a href=\"http://lessisbetter.site/2019/01/14/golang-channel-and-mutex/\" target=\"_blank\" rel=\"noopener\">Golang并发：再也不愁选channel还是选锁</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"性能对比\"><a href=\"#性能对比\" class=\"headerlink\" title=\"性能对比\"></a>性能对比</h2><p>首先在一个目录下新建两个文件：</p>\n<p>main.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"sync\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mutex = sync.Mutex&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ch = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UseMutex</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mutex.Lock()</span><br><span class=\"line\">    mutex.Unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UseChan</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    ch &lt;- <span class=\"literal\">true</span></span><br><span class=\"line\">    &lt;-ch</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>main_test.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main_test.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"testing\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkUseMutex</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> n := <span class=\"number\">0</span>; n &lt; b.N; n++ &#123;</span><br><span class=\"line\">        UseMutex()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkUseChan</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> n := <span class=\"number\">0</span>; n &lt; b.N; n++ &#123;</span><br><span class=\"line\">        UseChan()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在该文件路径下执行 benchmark：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go <span class=\"built_in\">test</span> -bench=.</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goos: darwin</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: testproject/race</span><br><span class=\"line\">BenchmarkUseMutex-4     100000000               15.9 ns/op</span><br><span class=\"line\">BenchmarkUseChan-4      30000000                50.1 ns/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      testproject/race        3.173s</span><br></pre></td></tr></table></figure>\n<p>从压测结果来看，加锁的方式是使用 Channel 方式的 3.1 倍</p>\n<h2 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h2><ul>\n<li><p>channel 的成本高于 Mutex</p>\n<ol>\n<li>channel 内部有 Mutex，是通过共享内存实现的。(TODO:这里少一个传送门)</li>\n<li>channel 内部可能有 Cond，用来等待或唤醒满足条件的 goroutine(TODO:这里少一个传送门)</li>\n<li>出让 cpu 并且让另一个 goroutine 获得执行机会，这个切换周期不低，远高于 Mutex 检查竞争状态的成本（后者通常只是一个原子操作）</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li><a href=\"https://www.colabug.com/278134.html\" target=\"_blank\" rel=\"noopener\">加锁 Mutex 和 Channel 性能对比</a></li>\n<li><a href=\"http://lessisbetter.site/2019/01/14/golang-channel-and-mutex/\" target=\"_blank\" rel=\"noopener\">Golang并发：再也不愁选channel还是选锁</a></li>\n</ul>"},{"title":"什么是 RSS ？","date":"2019-04-14T10:28:44.000Z","toc":true,"_content":"\n## 什么是 RSS ？\n\n\b在解释 RSS 是什么之前，让我先来打一个比方。\n\n读大学的时候，我有个习惯，就是每天要去看食堂后面的海报栏。在那里，会贴出各种各样最新的消息，比如哪个系要开讲座了、星期二晚上的电影放什么、二手货转让等等。只要看一下海报栏，就会对学校的各种活动心中有数。\n\n如果没有海报栏的话，要想知道这些消息就会很麻烦。讲座消息会贴在各个系自己的公告栏里，电影排片表是贴在电影院里的，二手货消息则会贴在各幢宿舍的楼道里。我所在的大学有 20 几个系，一万多人，要想知道所有这些消息的话，即使是可能的话，也会相当的麻烦。\n\n从这个例子出发，让我们来考虑一下互联网。\n\n<!-- more -->\n\n互联网是什么？最直观的说，就是一个杂乱无章的巨大信息源，其丰富和杂乱的程度，不仅是巨大的，而且几乎是无限的。\n\n一个使用者，要想及时掌握的互联网上出现的最新信息，有办法吗？\n\n答案是没有办法，他只有一个网站一个网站的打开，去看有什么最新内容，就好比每天都必须去每一个系里走一遍，看有什么最新讲座。如果是几个网站，哪倒也不难，都去看一遍也花不了多少时间。但是随着你关注的网站数量上升，这项工作会迅速的变为 \"Mission Impossible\"。想象一下，如果你每天关注几十个、甚至几百个网站，会是怎样的情景。光是打开它们的首页，就要花费多少时间啊，更别说浏览花去的时间了。\n\n也许有人会说，普通人的话，谁会关心那么多网站啊？\n\n我要说，哪怕你只是一个网络的初级或最单纯的使用者，与你发生关系的网站数量也在急剧增加，因为 Blog 出现了。越来越多的人开始写作网络日志（Blog），把自己的想法和生活在网上展示，其中也必然包括你的朋友，或者其他你感兴趣的人。你想知道他/她的最新动向，就势必要留心他/她的 Blog。所以，你的网站浏览清单总有一天会和你的电话本、MSN Message 好友列表一样多，甚至更多。\n\n那时，你会发现浏览网站会变成一种困难和低效率的行为。\n\n有没有办法找到互联网上的\"海报栏\"，只去一个地方就知道你所想知道的所有最新内容？\n\n有，那就是 RSS。\n\n## 如何使用？\n\n准确的说，RSS 就像一个网站的海报，里面包括这个网站的最新内容，会自动更新。所以，我们只要订阅了 RSS，就不会错过自己喜欢的网站的更新了。\n\n但是光有海报还不行，还必须有海报栏，也就是说必须有 RSS 阅读器才行。因为 RSS 只是数据源，它本身是写给程序看的，必须经过阅读器转换，才能成为可以浏览的格式。\n\nRSS 阅读器多种多样，大致分为两种，一种是桌面型的，需要安装；另一种是在线型，直接使用浏览器进行阅读。\n\n在浏览器中订阅 RSS，就必须先知道 RSS 的地址。一般来说，各个网站的首页都会用显著位置标明。名称可能会有些不同，比如 RSS、XML、FEED，大家知道它们指的都是同样的东西就可以了。有时 RSS 后面还会带有版本号，比如 2.0、1.0，甚至 0.92，这个不必理会，它们只是内部格式不同，内容都是一样。\n\n将 RSS 地址复制下来以后，你就可以在在线阅读器中添加。\n\n以后，只用打开这一个网页，就可以看到所有你喜欢的网站的最新内容了。\n\n## 相关链接\n\n- wiki：https://en.wikipedia.org/wiki/RSS\n- 菜鸟教程：http://www.runoob.com/rss/rss-tutorial.html\n- [转自]阮一峰：http://www.ruanyifeng.com/blog/2006/01/rss.html","source":"_posts/rss.md","raw":"---\ntitle: 什么是 RSS ？\ndate: 2019-04-14 18:28:44\ntoc: true\ntags:\n- 技术名词\n---\n\n## 什么是 RSS ？\n\n\b在解释 RSS 是什么之前，让我先来打一个比方。\n\n读大学的时候，我有个习惯，就是每天要去看食堂后面的海报栏。在那里，会贴出各种各样最新的消息，比如哪个系要开讲座了、星期二晚上的电影放什么、二手货转让等等。只要看一下海报栏，就会对学校的各种活动心中有数。\n\n如果没有海报栏的话，要想知道这些消息就会很麻烦。讲座消息会贴在各个系自己的公告栏里，电影排片表是贴在电影院里的，二手货消息则会贴在各幢宿舍的楼道里。我所在的大学有 20 几个系，一万多人，要想知道所有这些消息的话，即使是可能的话，也会相当的麻烦。\n\n从这个例子出发，让我们来考虑一下互联网。\n\n<!-- more -->\n\n互联网是什么？最直观的说，就是一个杂乱无章的巨大信息源，其丰富和杂乱的程度，不仅是巨大的，而且几乎是无限的。\n\n一个使用者，要想及时掌握的互联网上出现的最新信息，有办法吗？\n\n答案是没有办法，他只有一个网站一个网站的打开，去看有什么最新内容，就好比每天都必须去每一个系里走一遍，看有什么最新讲座。如果是几个网站，哪倒也不难，都去看一遍也花不了多少时间。但是随着你关注的网站数量上升，这项工作会迅速的变为 \"Mission Impossible\"。想象一下，如果你每天关注几十个、甚至几百个网站，会是怎样的情景。光是打开它们的首页，就要花费多少时间啊，更别说浏览花去的时间了。\n\n也许有人会说，普通人的话，谁会关心那么多网站啊？\n\n我要说，哪怕你只是一个网络的初级或最单纯的使用者，与你发生关系的网站数量也在急剧增加，因为 Blog 出现了。越来越多的人开始写作网络日志（Blog），把自己的想法和生活在网上展示，其中也必然包括你的朋友，或者其他你感兴趣的人。你想知道他/她的最新动向，就势必要留心他/她的 Blog。所以，你的网站浏览清单总有一天会和你的电话本、MSN Message 好友列表一样多，甚至更多。\n\n那时，你会发现浏览网站会变成一种困难和低效率的行为。\n\n有没有办法找到互联网上的\"海报栏\"，只去一个地方就知道你所想知道的所有最新内容？\n\n有，那就是 RSS。\n\n## 如何使用？\n\n准确的说，RSS 就像一个网站的海报，里面包括这个网站的最新内容，会自动更新。所以，我们只要订阅了 RSS，就不会错过自己喜欢的网站的更新了。\n\n但是光有海报还不行，还必须有海报栏，也就是说必须有 RSS 阅读器才行。因为 RSS 只是数据源，它本身是写给程序看的，必须经过阅读器转换，才能成为可以浏览的格式。\n\nRSS 阅读器多种多样，大致分为两种，一种是桌面型的，需要安装；另一种是在线型，直接使用浏览器进行阅读。\n\n在浏览器中订阅 RSS，就必须先知道 RSS 的地址。一般来说，各个网站的首页都会用显著位置标明。名称可能会有些不同，比如 RSS、XML、FEED，大家知道它们指的都是同样的东西就可以了。有时 RSS 后面还会带有版本号，比如 2.0、1.0，甚至 0.92，这个不必理会，它们只是内部格式不同，内容都是一样。\n\n将 RSS 地址复制下来以后，你就可以在在线阅读器中添加。\n\n以后，只用打开这一个网页，就可以看到所有你喜欢的网站的最新内容了。\n\n## 相关链接\n\n- wiki：https://en.wikipedia.org/wiki/RSS\n- 菜鸟教程：http://www.runoob.com/rss/rss-tutorial.html\n- [转自]阮一峰：http://www.ruanyifeng.com/blog/2006/01/rss.html","slug":"rss","published":1,"updated":"2019-04-15T03:00:22.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjunrqgob0001o79vs3i6gnpq","content":"<h2 id=\"什么是-RSS-？\"><a href=\"#什么是-RSS-？\" class=\"headerlink\" title=\"什么是 RSS ？\"></a>什么是 RSS ？</h2><p>\b在解释 RSS 是什么之前，让我先来打一个比方。</p>\n<p>读大学的时候，我有个习惯，就是每天要去看食堂后面的海报栏。在那里，会贴出各种各样最新的消息，比如哪个系要开讲座了、星期二晚上的电影放什么、二手货转让等等。只要看一下海报栏，就会对学校的各种活动心中有数。</p>\n<p>如果没有海报栏的话，要想知道这些消息就会很麻烦。讲座消息会贴在各个系自己的公告栏里，电影排片表是贴在电影院里的，二手货消息则会贴在各幢宿舍的楼道里。我所在的大学有 20 几个系，一万多人，要想知道所有这些消息的话，即使是可能的话，也会相当的麻烦。</p>\n<p>从这个例子出发，让我们来考虑一下互联网。</p>\n<a id=\"more\"></a>\n<p>互联网是什么？最直观的说，就是一个杂乱无章的巨大信息源，其丰富和杂乱的程度，不仅是巨大的，而且几乎是无限的。</p>\n<p>一个使用者，要想及时掌握的互联网上出现的最新信息，有办法吗？</p>\n<p>答案是没有办法，他只有一个网站一个网站的打开，去看有什么最新内容，就好比每天都必须去每一个系里走一遍，看有什么最新讲座。如果是几个网站，哪倒也不难，都去看一遍也花不了多少时间。但是随着你关注的网站数量上升，这项工作会迅速的变为 “Mission Impossible”。想象一下，如果你每天关注几十个、甚至几百个网站，会是怎样的情景。光是打开它们的首页，就要花费多少时间啊，更别说浏览花去的时间了。</p>\n<p>也许有人会说，普通人的话，谁会关心那么多网站啊？</p>\n<p>我要说，哪怕你只是一个网络的初级或最单纯的使用者，与你发生关系的网站数量也在急剧增加，因为 Blog 出现了。越来越多的人开始写作网络日志（Blog），把自己的想法和生活在网上展示，其中也必然包括你的朋友，或者其他你感兴趣的人。你想知道他/她的最新动向，就势必要留心他/她的 Blog。所以，你的网站浏览清单总有一天会和你的电话本、MSN Message 好友列表一样多，甚至更多。</p>\n<p>那时，你会发现浏览网站会变成一种困难和低效率的行为。</p>\n<p>有没有办法找到互联网上的”海报栏”，只去一个地方就知道你所想知道的所有最新内容？</p>\n<p>有，那就是 RSS。</p>\n<h2 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h2><p>准确的说，RSS 就像一个网站的海报，里面包括这个网站的最新内容，会自动更新。所以，我们只要订阅了 RSS，就不会错过自己喜欢的网站的更新了。</p>\n<p>但是光有海报还不行，还必须有海报栏，也就是说必须有 RSS 阅读器才行。因为 RSS 只是数据源，它本身是写给程序看的，必须经过阅读器转换，才能成为可以浏览的格式。</p>\n<p>RSS 阅读器多种多样，大致分为两种，一种是桌面型的，需要安装；另一种是在线型，直接使用浏览器进行阅读。</p>\n<p>在浏览器中订阅 RSS，就必须先知道 RSS 的地址。一般来说，各个网站的首页都会用显著位置标明。名称可能会有些不同，比如 RSS、XML、FEED，大家知道它们指的都是同样的东西就可以了。有时 RSS 后面还会带有版本号，比如 2.0、1.0，甚至 0.92，这个不必理会，它们只是内部格式不同，内容都是一样。</p>\n<p>将 RSS 地址复制下来以后，你就可以在在线阅读器中添加。</p>\n<p>以后，只用打开这一个网页，就可以看到所有你喜欢的网站的最新内容了。</p>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li>wiki：<a href=\"https://en.wikipedia.org/wiki/RSS\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/RSS</a></li>\n<li>菜鸟教程：<a href=\"http://www.runoob.com/rss/rss-tutorial.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/rss/rss-tutorial.html</a></li>\n<li>[转自]阮一峰：<a href=\"http://www.ruanyifeng.com/blog/2006/01/rss.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2006/01/rss.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是-RSS-？\"><a href=\"#什么是-RSS-？\" class=\"headerlink\" title=\"什么是 RSS ？\"></a>什么是 RSS ？</h2><p>\b在解释 RSS 是什么之前，让我先来打一个比方。</p>\n<p>读大学的时候，我有个习惯，就是每天要去看食堂后面的海报栏。在那里，会贴出各种各样最新的消息，比如哪个系要开讲座了、星期二晚上的电影放什么、二手货转让等等。只要看一下海报栏，就会对学校的各种活动心中有数。</p>\n<p>如果没有海报栏的话，要想知道这些消息就会很麻烦。讲座消息会贴在各个系自己的公告栏里，电影排片表是贴在电影院里的，二手货消息则会贴在各幢宿舍的楼道里。我所在的大学有 20 几个系，一万多人，要想知道所有这些消息的话，即使是可能的话，也会相当的麻烦。</p>\n<p>从这个例子出发，让我们来考虑一下互联网。</p>","more":"<p>互联网是什么？最直观的说，就是一个杂乱无章的巨大信息源，其丰富和杂乱的程度，不仅是巨大的，而且几乎是无限的。</p>\n<p>一个使用者，要想及时掌握的互联网上出现的最新信息，有办法吗？</p>\n<p>答案是没有办法，他只有一个网站一个网站的打开，去看有什么最新内容，就好比每天都必须去每一个系里走一遍，看有什么最新讲座。如果是几个网站，哪倒也不难，都去看一遍也花不了多少时间。但是随着你关注的网站数量上升，这项工作会迅速的变为 “Mission Impossible”。想象一下，如果你每天关注几十个、甚至几百个网站，会是怎样的情景。光是打开它们的首页，就要花费多少时间啊，更别说浏览花去的时间了。</p>\n<p>也许有人会说，普通人的话，谁会关心那么多网站啊？</p>\n<p>我要说，哪怕你只是一个网络的初级或最单纯的使用者，与你发生关系的网站数量也在急剧增加，因为 Blog 出现了。越来越多的人开始写作网络日志（Blog），把自己的想法和生活在网上展示，其中也必然包括你的朋友，或者其他你感兴趣的人。你想知道他/她的最新动向，就势必要留心他/她的 Blog。所以，你的网站浏览清单总有一天会和你的电话本、MSN Message 好友列表一样多，甚至更多。</p>\n<p>那时，你会发现浏览网站会变成一种困难和低效率的行为。</p>\n<p>有没有办法找到互联网上的”海报栏”，只去一个地方就知道你所想知道的所有最新内容？</p>\n<p>有，那就是 RSS。</p>\n<h2 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h2><p>准确的说，RSS 就像一个网站的海报，里面包括这个网站的最新内容，会自动更新。所以，我们只要订阅了 RSS，就不会错过自己喜欢的网站的更新了。</p>\n<p>但是光有海报还不行，还必须有海报栏，也就是说必须有 RSS 阅读器才行。因为 RSS 只是数据源，它本身是写给程序看的，必须经过阅读器转换，才能成为可以浏览的格式。</p>\n<p>RSS 阅读器多种多样，大致分为两种，一种是桌面型的，需要安装；另一种是在线型，直接使用浏览器进行阅读。</p>\n<p>在浏览器中订阅 RSS，就必须先知道 RSS 的地址。一般来说，各个网站的首页都会用显著位置标明。名称可能会有些不同，比如 RSS、XML、FEED，大家知道它们指的都是同样的东西就可以了。有时 RSS 后面还会带有版本号，比如 2.0、1.0，甚至 0.92，这个不必理会，它们只是内部格式不同，内容都是一样。</p>\n<p>将 RSS 地址复制下来以后，你就可以在在线阅读器中添加。</p>\n<p>以后，只用打开这一个网页，就可以看到所有你喜欢的网站的最新内容了。</p>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li>wiki：<a href=\"https://en.wikipedia.org/wiki/RSS\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/RSS</a></li>\n<li>菜鸟教程：<a href=\"http://www.runoob.com/rss/rss-tutorial.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/rss/rss-tutorial.html</a></li>\n<li>[转自]阮一峰：<a href=\"http://www.ruanyifeng.com/blog/2006/01/rss.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2006/01/rss.html</a></li>\n</ul>"},{"title":"什么是 logrotate ？","date":"2019-04-18T10:28:44.000Z","toc":true,"_content":"\n## 什么是 logrotate\n\nlogrotate 旨在简化生成大量日志文件的系统的管理。它允许自动循环、压缩、删除和邮寄日志文件。每个日志文件可以按每天、每周、每月的粒度来处理，也可以在其增长过大时处理。\n\n通常来说，logrotate 作为日常 cron 作业运行。它一天内修改日志的次数不会超过一次，除非该日志的标准基于日志的大小，并且 logrotate 每天运行一次以上，或者使用 `-f` 或 `-force` 的选项。\n\n在命令行上可以给出任意数量的配置文件。稍后的配置文件可能会覆盖前面文件中给出的选项，因此列出 logrotate 配置文件的顺序很重要。通常，应该使用一个配置文件，其中包含需要的任何其他配置文件。有关如何使用 include 指令来完成此任务的更多信息，请参见 man page。如果在命令行上给出一个目录，则该目录中的每个文件都是配置文件。\n\n如果没有给出命令行参数，logrotate 将打印版本和版权信息，以及一个简短的使用总结。如果在循环日志时发生任何错误，logrotate 将以非零状态退出。\n\n<!-- more -->\n\n## 如何安装 logrotate\n\n### 如何在 Mac 上安装 logrotate\n\n* 先安装 Homebrew\n\n    ```bash\n    /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n    ```\n\n* 利用 Homebrew 安装 logrotate\n\n    ```bash\n    brew install logrotate\n    ```\n\n### 可能会遇到的问题\n\n安装 logroate 后可能会遇到 logrotate 命令找不到的问题，其原因是 logrotate 安装到了 `/usr/local/sbin` 下，如果你的 PATH 环境变量没有该路径就找不到 logrotate，所以你需要将该路径加入 PATH 下。\n\n## 查看 logrotate 文档\n\n* `man logrotate` 命令可以在终端查看 logrotate 文档\n* 如果你没有安装 logrotate 在终端 man page 下是找不到 logrotate 文档的，你可以点击[传送门](https://linux.die.net/man/8/logrotate)查看文档\n\n## 怎么使用 logrotate\n\n* 启动与停止\n\n    ```bash\n    brew services start logrotate   # 启动\n    brew services stop logrotate    # 停止\n    ```\n\n* 选项\n\n  * `-?，--help`：帮助。\n  * `-d，--debug`：打开 debug 模式，日志和 logrotate 的状态文件不会被更新，只会打印 debug 信息。详细显示指令执行过程，便于排错活了解程序执行的情况。\n  * `-f，--force`：让 logrotate 强制执行一次循环。有时，在向 logrotate 配置文件添加新条目之后，或者在手动删除旧日志文件时，这是非常有用的，因为将创建新文件，并且日志记录将正确地继续。\n  * `-l，--log file`：让 logrotate 的 log 详细输出到 log_file 文件中。记录到该文件的详细输出与使用 -v 运行 logrotate 时相同。每次执行 logrotate 时都会覆盖日志文件。\n  * `-m，--mail command`：邮寄日志，接受以下参数\n    1. `-s subject`：标题\n    2. 收件人\n\n    然后命令必须读取标准输入上的消息并将其发送给收件人。默认的邮件命令是 `/bin/mail`。\n  * `-s，--state statefile`：让 logrotate 使用别用状态文件。如果 logrotate 作为不同的用户运行于不同的日志文件集，这将非常有用。默认的状态文件为 `/usr/local/var/lib/logrotate.status`。\n  * `usage`：使用指南\n  * `-v，--verbose`：打开 verbose 模式，例如在循环期间显示消息\n  * `--version`：版本\n","source":"_posts/logrotate.md","raw":"---\ntitle: 什么是 logrotate ？\ndate: 2019-04-18 18:28:44\ntoc: true\ntags:\n- 技术名词\n- 运维\n- Log\n---\n\n## 什么是 logrotate\n\nlogrotate 旨在简化生成大量日志文件的系统的管理。它允许自动循环、压缩、删除和邮寄日志文件。每个日志文件可以按每天、每周、每月的粒度来处理，也可以在其增长过大时处理。\n\n通常来说，logrotate 作为日常 cron 作业运行。它一天内修改日志的次数不会超过一次，除非该日志的标准基于日志的大小，并且 logrotate 每天运行一次以上，或者使用 `-f` 或 `-force` 的选项。\n\n在命令行上可以给出任意数量的配置文件。稍后的配置文件可能会覆盖前面文件中给出的选项，因此列出 logrotate 配置文件的顺序很重要。通常，应该使用一个配置文件，其中包含需要的任何其他配置文件。有关如何使用 include 指令来完成此任务的更多信息，请参见 man page。如果在命令行上给出一个目录，则该目录中的每个文件都是配置文件。\n\n如果没有给出命令行参数，logrotate 将打印版本和版权信息，以及一个简短的使用总结。如果在循环日志时发生任何错误，logrotate 将以非零状态退出。\n\n<!-- more -->\n\n## 如何安装 logrotate\n\n### 如何在 Mac 上安装 logrotate\n\n* 先安装 Homebrew\n\n    ```bash\n    /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n    ```\n\n* 利用 Homebrew 安装 logrotate\n\n    ```bash\n    brew install logrotate\n    ```\n\n### 可能会遇到的问题\n\n安装 logroate 后可能会遇到 logrotate 命令找不到的问题，其原因是 logrotate 安装到了 `/usr/local/sbin` 下，如果你的 PATH 环境变量没有该路径就找不到 logrotate，所以你需要将该路径加入 PATH 下。\n\n## 查看 logrotate 文档\n\n* `man logrotate` 命令可以在终端查看 logrotate 文档\n* 如果你没有安装 logrotate 在终端 man page 下是找不到 logrotate 文档的，你可以点击[传送门](https://linux.die.net/man/8/logrotate)查看文档\n\n## 怎么使用 logrotate\n\n* 启动与停止\n\n    ```bash\n    brew services start logrotate   # 启动\n    brew services stop logrotate    # 停止\n    ```\n\n* 选项\n\n  * `-?，--help`：帮助。\n  * `-d，--debug`：打开 debug 模式，日志和 logrotate 的状态文件不会被更新，只会打印 debug 信息。详细显示指令执行过程，便于排错活了解程序执行的情况。\n  * `-f，--force`：让 logrotate 强制执行一次循环。有时，在向 logrotate 配置文件添加新条目之后，或者在手动删除旧日志文件时，这是非常有用的，因为将创建新文件，并且日志记录将正确地继续。\n  * `-l，--log file`：让 logrotate 的 log 详细输出到 log_file 文件中。记录到该文件的详细输出与使用 -v 运行 logrotate 时相同。每次执行 logrotate 时都会覆盖日志文件。\n  * `-m，--mail command`：邮寄日志，接受以下参数\n    1. `-s subject`：标题\n    2. 收件人\n\n    然后命令必须读取标准输入上的消息并将其发送给收件人。默认的邮件命令是 `/bin/mail`。\n  * `-s，--state statefile`：让 logrotate 使用别用状态文件。如果 logrotate 作为不同的用户运行于不同的日志文件集，这将非常有用。默认的状态文件为 `/usr/local/var/lib/logrotate.status`。\n  * `usage`：使用指南\n  * `-v，--verbose`：打开 verbose 模式，例如在循环期间显示消息\n  * `--version`：版本\n","slug":"logrotate","published":1,"updated":"2019-04-19T07:41:24.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjunrqgok0006o79vnzrdx9ta","content":"<h2 id=\"什么是-logrotate\"><a href=\"#什么是-logrotate\" class=\"headerlink\" title=\"什么是 logrotate\"></a>什么是 logrotate</h2><p>logrotate 旨在简化生成大量日志文件的系统的管理。它允许自动循环、压缩、删除和邮寄日志文件。每个日志文件可以按每天、每周、每月的粒度来处理，也可以在其增长过大时处理。</p>\n<p>通常来说，logrotate 作为日常 cron 作业运行。它一天内修改日志的次数不会超过一次，除非该日志的标准基于日志的大小，并且 logrotate 每天运行一次以上，或者使用 <code>-f</code> 或 <code>-force</code> 的选项。</p>\n<p>在命令行上可以给出任意数量的配置文件。稍后的配置文件可能会覆盖前面文件中给出的选项，因此列出 logrotate 配置文件的顺序很重要。通常，应该使用一个配置文件，其中包含需要的任何其他配置文件。有关如何使用 include 指令来完成此任务的更多信息，请参见 man page。如果在命令行上给出一个目录，则该目录中的每个文件都是配置文件。</p>\n<p>如果没有给出命令行参数，logrotate 将打印版本和版权信息，以及一个简短的使用总结。如果在循环日志时发生任何错误，logrotate 将以非零状态退出。</p>\n<a id=\"more\"></a>\n<h2 id=\"如何安装-logrotate\"><a href=\"#如何安装-logrotate\" class=\"headerlink\" title=\"如何安装 logrotate\"></a>如何安装 logrotate</h2><h3 id=\"如何在-Mac-上安装-logrotate\"><a href=\"#如何在-Mac-上安装-logrotate\" class=\"headerlink\" title=\"如何在 Mac 上安装 logrotate\"></a>如何在 Mac 上安装 logrotate</h3><ul>\n<li><p>先安装 Homebrew</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用 Homebrew 安装 logrotate</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install logrotate</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"可能会遇到的问题\"><a href=\"#可能会遇到的问题\" class=\"headerlink\" title=\"可能会遇到的问题\"></a>可能会遇到的问题</h3><p>安装 logroate 后可能会遇到 logrotate 命令找不到的问题，其原因是 logrotate 安装到了 <code>/usr/local/sbin</code> 下，如果你的 PATH 环境变量没有该路径就找不到 logrotate，所以你需要将该路径加入 PATH 下。</p>\n<h2 id=\"查看-logrotate-文档\"><a href=\"#查看-logrotate-文档\" class=\"headerlink\" title=\"查看 logrotate 文档\"></a>查看 logrotate 文档</h2><ul>\n<li><code>man logrotate</code> 命令可以在终端查看 logrotate 文档</li>\n<li>如果你没有安装 logrotate 在终端 man page 下是找不到 logrotate 文档的，你可以点击<a href=\"https://linux.die.net/man/8/logrotate\" target=\"_blank\" rel=\"noopener\">传送门</a>查看文档</li>\n</ul>\n<h2 id=\"怎么使用-logrotate\"><a href=\"#怎么使用-logrotate\" class=\"headerlink\" title=\"怎么使用 logrotate\"></a>怎么使用 logrotate</h2><ul>\n<li><p>启动与停止</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start logrotate   <span class=\"comment\"># 启动</span></span><br><span class=\"line\">brew services stop logrotate    <span class=\"comment\"># 停止</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选项</p>\n<ul>\n<li><code>-?，--help</code>：帮助。</li>\n<li><code>-d，--debug</code>：打开 debug 模式，日志和 logrotate 的状态文件不会被更新，只会打印 debug 信息。详细显示指令执行过程，便于排错活了解程序执行的情况。</li>\n<li><code>-f，--force</code>：让 logrotate 强制执行一次循环。有时，在向 logrotate 配置文件添加新条目之后，或者在手动删除旧日志文件时，这是非常有用的，因为将创建新文件，并且日志记录将正确地继续。</li>\n<li><code>-l，--log file</code>：让 logrotate 的 log 详细输出到 log_file 文件中。记录到该文件的详细输出与使用 -v 运行 logrotate 时相同。每次执行 logrotate 时都会覆盖日志文件。</li>\n<li><p><code>-m，--mail command</code>：邮寄日志，接受以下参数</p>\n<ol>\n<li><code>-s subject</code>：标题</li>\n<li>收件人</li>\n</ol>\n<p>然后命令必须读取标准输入上的消息并将其发送给收件人。默认的邮件命令是 <code>/bin/mail</code>。</p>\n</li>\n<li><code>-s，--state statefile</code>：让 logrotate 使用别用状态文件。如果 logrotate 作为不同的用户运行于不同的日志文件集，这将非常有用。默认的状态文件为 <code>/usr/local/var/lib/logrotate.status</code>。</li>\n<li><code>usage</code>：使用指南</li>\n<li><code>-v，--verbose</code>：打开 verbose 模式，例如在循环期间显示消息</li>\n<li><code>--version</code>：版本</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是-logrotate\"><a href=\"#什么是-logrotate\" class=\"headerlink\" title=\"什么是 logrotate\"></a>什么是 logrotate</h2><p>logrotate 旨在简化生成大量日志文件的系统的管理。它允许自动循环、压缩、删除和邮寄日志文件。每个日志文件可以按每天、每周、每月的粒度来处理，也可以在其增长过大时处理。</p>\n<p>通常来说，logrotate 作为日常 cron 作业运行。它一天内修改日志的次数不会超过一次，除非该日志的标准基于日志的大小，并且 logrotate 每天运行一次以上，或者使用 <code>-f</code> 或 <code>-force</code> 的选项。</p>\n<p>在命令行上可以给出任意数量的配置文件。稍后的配置文件可能会覆盖前面文件中给出的选项，因此列出 logrotate 配置文件的顺序很重要。通常，应该使用一个配置文件，其中包含需要的任何其他配置文件。有关如何使用 include 指令来完成此任务的更多信息，请参见 man page。如果在命令行上给出一个目录，则该目录中的每个文件都是配置文件。</p>\n<p>如果没有给出命令行参数，logrotate 将打印版本和版权信息，以及一个简短的使用总结。如果在循环日志时发生任何错误，logrotate 将以非零状态退出。</p>","more":"<h2 id=\"如何安装-logrotate\"><a href=\"#如何安装-logrotate\" class=\"headerlink\" title=\"如何安装 logrotate\"></a>如何安装 logrotate</h2><h3 id=\"如何在-Mac-上安装-logrotate\"><a href=\"#如何在-Mac-上安装-logrotate\" class=\"headerlink\" title=\"如何在 Mac 上安装 logrotate\"></a>如何在 Mac 上安装 logrotate</h3><ul>\n<li><p>先安装 Homebrew</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用 Homebrew 安装 logrotate</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install logrotate</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"可能会遇到的问题\"><a href=\"#可能会遇到的问题\" class=\"headerlink\" title=\"可能会遇到的问题\"></a>可能会遇到的问题</h3><p>安装 logroate 后可能会遇到 logrotate 命令找不到的问题，其原因是 logrotate 安装到了 <code>/usr/local/sbin</code> 下，如果你的 PATH 环境变量没有该路径就找不到 logrotate，所以你需要将该路径加入 PATH 下。</p>\n<h2 id=\"查看-logrotate-文档\"><a href=\"#查看-logrotate-文档\" class=\"headerlink\" title=\"查看 logrotate 文档\"></a>查看 logrotate 文档</h2><ul>\n<li><code>man logrotate</code> 命令可以在终端查看 logrotate 文档</li>\n<li>如果你没有安装 logrotate 在终端 man page 下是找不到 logrotate 文档的，你可以点击<a href=\"https://linux.die.net/man/8/logrotate\" target=\"_blank\" rel=\"noopener\">传送门</a>查看文档</li>\n</ul>\n<h2 id=\"怎么使用-logrotate\"><a href=\"#怎么使用-logrotate\" class=\"headerlink\" title=\"怎么使用 logrotate\"></a>怎么使用 logrotate</h2><ul>\n<li><p>启动与停止</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start logrotate   <span class=\"comment\"># 启动</span></span><br><span class=\"line\">brew services stop logrotate    <span class=\"comment\"># 停止</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选项</p>\n<ul>\n<li><code>-?，--help</code>：帮助。</li>\n<li><code>-d，--debug</code>：打开 debug 模式，日志和 logrotate 的状态文件不会被更新，只会打印 debug 信息。详细显示指令执行过程，便于排错活了解程序执行的情况。</li>\n<li><code>-f，--force</code>：让 logrotate 强制执行一次循环。有时，在向 logrotate 配置文件添加新条目之后，或者在手动删除旧日志文件时，这是非常有用的，因为将创建新文件，并且日志记录将正确地继续。</li>\n<li><code>-l，--log file</code>：让 logrotate 的 log 详细输出到 log_file 文件中。记录到该文件的详细输出与使用 -v 运行 logrotate 时相同。每次执行 logrotate 时都会覆盖日志文件。</li>\n<li><p><code>-m，--mail command</code>：邮寄日志，接受以下参数</p>\n<ol>\n<li><code>-s subject</code>：标题</li>\n<li>收件人</li>\n</ol>\n<p>然后命令必须读取标准输入上的消息并将其发送给收件人。默认的邮件命令是 <code>/bin/mail</code>。</p>\n</li>\n<li><code>-s，--state statefile</code>：让 logrotate 使用别用状态文件。如果 logrotate 作为不同的用户运行于不同的日志文件集，这将非常有用。默认的状态文件为 <code>/usr/local/var/lib/logrotate.status</code>。</li>\n<li><code>usage</code>：使用指南</li>\n<li><code>-v，--verbose</code>：打开 verbose 模式，例如在循环期间显示消息</li>\n<li><code>--version</code>：版本</li>\n</ul>\n</li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjunrqgo70000o79v85x0f1pc","tag_id":"cjunrqgod0002o79v0ponawge","_id":"cjunrqgog0004o79vgbxxl538"},{"post_id":"cjunrqgob0001o79vs3i6gnpq","tag_id":"cjunrqgof0003o79v9gvnvaw1","_id":"cjunrqgoh0005o79vyb5dzi6a"},{"post_id":"cjunrqgok0006o79vnzrdx9ta","tag_id":"cjunrqgof0003o79v9gvnvaw1","_id":"cjunrqgom0009o79v28ztkyhp"},{"post_id":"cjunrqgok0006o79vnzrdx9ta","tag_id":"cjunrqgol0007o79vd12fuw4b","_id":"cjunrqgom000ao79vl8y0il6d"},{"post_id":"cjunrqgok0006o79vnzrdx9ta","tag_id":"cjunrqgom0008o79v2t7d9vlt","_id":"cjunrqgom000bo79vm4ohupst"}],"Tag":[{"name":"Go","_id":"cjunrqgod0002o79v0ponawge"},{"name":"技术名词","_id":"cjunrqgof0003o79v9gvnvaw1"},{"name":"运维","_id":"cjunrqgol0007o79vd12fuw4b"},{"name":"Log","_id":"cjunrqgom0008o79v2t7d9vlt"}]}}