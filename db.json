{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/avatar.jpeg","path":"img/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/favicon.jpeg","path":"img/favicon.jpeg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1554987557621},{"_id":"themes/hexo-theme-yilia/.git","hash":"0576ed892d3b3085d35ae98e0f28076ad460ddba","modified":1554987557536},{"_id":"themes/hexo-theme-yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1554987557622},{"_id":"themes/hexo-theme-yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1554987557623},{"_id":"themes/hexo-theme-yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1554987557622},{"_id":"themes/hexo-theme-yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1554987557622},{"_id":"themes/hexo-theme-yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1554987557622},{"_id":"themes/hexo-theme-yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1554987557623},{"_id":"themes/hexo-theme-yilia/_config.yml","hash":"f66e1114d83c58e91b1921c9257ef57242665ef1","modified":1556182630349},{"_id":"themes/hexo-theme-yilia/package.json","hash":"125355e5f78dc25fe2a0819076c9df2f904fa0e4","modified":1554987557636},{"_id":"themes/hexo-theme-yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1554987557670},{"_id":"themes/hexo-theme-yilia/package-lock.json","hash":"3bdbd8058e14d4c18008cb63efe1869446c30bae","modified":1554987557636},{"_id":"source/_posts/commit_message.md","hash":"9dbe1c4c9759c23490d92f3282825590d84923d6","modified":1560325100550},{"_id":"source/_posts/closure.md","hash":"3f2b3b041d30e980739289f738136f65cd54e47e","modified":1556106826415},{"_id":"source/_posts/go_slice.md","hash":"b93b4c7d38df1a89a715e4306a4864a703f708b2","modified":1559118648103},{"_id":"source/_posts/grpc.md","hash":"6e0fb19b4e7d043ecbb49418f935f9d105f9711e","modified":1561789596738},{"_id":"source/_posts/read.md","hash":"78241f89a17bb4ad9630bf4a253843e36c74531c","modified":1561794306997},{"_id":"source/_posts/logrotate.md","hash":"9d8ba20465cf1a0cb85b5909c5dea33f5b14ba92","modified":1555659684548},{"_id":"source/_posts/mac_path.md","hash":"15b0ef55ee58f0def0bdf85fa802d698aad3f1b0","modified":1555671762633},{"_id":"source/_posts/mutex_or_channel.md","hash":"5340627defa7cd6e7f6c16148a14132ac8b460e1","modified":1556104066909},{"_id":"source/_posts/rss.md","hash":"cd09939619221d832866a6840cad86f064023cd4","modified":1555297222517},{"_id":"source/_posts/soft_hard_link.md","hash":"74989f9268d820b74823141db442f372dcdc9310","modified":1555916861780},{"_id":"themes/hexo-theme-yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1554987557624},{"_id":"themes/hexo-theme-yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1554987557624},{"_id":"themes/hexo-theme-yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1554987557624},{"_id":"themes/hexo-theme-yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1554987557624},{"_id":"themes/hexo-theme-yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1554987557625},{"_id":"themes/hexo-theme-yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1554987557625},{"_id":"themes/hexo-theme-yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1554987557625},{"_id":"themes/hexo-theme-yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1554987557631},{"_id":"themes/hexo-theme-yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1554987557632},{"_id":"themes/hexo-theme-yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1554987557632},{"_id":"themes/hexo-theme-yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1554987557633},{"_id":"themes/hexo-theme-yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1554987557634},{"_id":"themes/hexo-theme-yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1557306641214},{"_id":"themes/hexo-theme-yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1554987557635},{"_id":"themes/hexo-theme-yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1554987557670},{"_id":"themes/hexo-theme-yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1557306401533},{"_id":"themes/hexo-theme-yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1554987557637},{"_id":"themes/hexo-theme-yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1554987557661},{"_id":"themes/hexo-theme-yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554987557631},{"_id":"themes/hexo-theme-yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1554987557669},{"_id":"themes/hexo-theme-yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1554987557667},{"_id":"source/plugins/prettify/lang-basic.js","hash":"565276ee5ea2f117e07a8997d792b7d734e4063c","modified":1556611785625},{"_id":"source/plugins/prettify/lang-css.js","hash":"9df3f79343a2104339e5c3ab9d94a39c0291b37b","modified":1556611785625},{"_id":"source/plugins/prettify/lang-apollo.js","hash":"e19c633557b10eab4daad0c2586b3ecb44937ba3","modified":1556611785659},{"_id":"source/plugins/prettify/lang-clj.js","hash":"fff2857ba9919e7a2e8b61b08f1b87be41ed3a46","modified":1556611785664},{"_id":"source/plugins/prettify/lang-erlang.js","hash":"6cb9234429b62d55ff078346668725d6c08efea9","modified":1556611785658},{"_id":"source/plugins/prettify/lang-dart.js","hash":"34c6c4897cf7d22e230ff9db55f2821c5eddbca8","modified":1556611785645},{"_id":"source/plugins/prettify/lang-ex.js","hash":"4a73c2a674799327a2dbe2691aff72d909034b7a","modified":1556611785645},{"_id":"source/plugins/prettify/lang-go.js","hash":"9cfcf1a3e4f9884b369910d7ed2cd67f644ac284","modified":1556611785638},{"_id":"source/plugins/prettify/lang-hs.js","hash":"602e2ff0c97f814773d3895f08c07b5efa8a63d5","modified":1556611785661},{"_id":"source/plugins/prettify/lang-kotlin.js","hash":"4aa66901437d588ccaf669d40a91a5cf36f2ffaa","modified":1556611785634},{"_id":"source/plugins/prettify/lang-lisp.js","hash":"48d79c12e1915e1166c3cb8cb1798f8ec2443cc9","modified":1556611785656},{"_id":"source/plugins/prettify/lang-lasso.js","hash":"ba0b1a3ac1ad041a1adf6b90154713d1248391e1","modified":1556611785649},{"_id":"source/plugins/prettify/lang-llvm.js","hash":"5138b9a56f063688205157703c629fefdb8ed4d0","modified":1556611785663},{"_id":"source/plugins/prettify/lang-logtalk.js","hash":"7836eccb85957e1dae2ca02a9530cf0c7369f949","modified":1556611785663},{"_id":"source/plugins/prettify/lang-lua.js","hash":"d907fa9f1e43aa6f86530d9803b6150b0852140b","modified":1556611785659},{"_id":"source/plugins/prettify/lang-ml.js","hash":"968bdc15137ae94b206e485b5bdfa5c96eff5857","modified":1556611785624},{"_id":"source/plugins/prettify/lang-pascal.js","hash":"17d60d30e6a73b3a8657baba733bb04ecbd53039","modified":1556611785635},{"_id":"source/plugins/prettify/lang-n.js","hash":"c2c992ba29d96410a93109ec2505b8e7a96782b9","modified":1556611785654},{"_id":"source/plugins/prettify/lang-mumps.js","hash":"9a1cae257b9b028b22ac2c4c9e4c3d2873898566","modified":1556611785634},{"_id":"source/plugins/prettify/lang-matlab.js","hash":"b71302c9a2aa5ed2b31a75ff364ec6270ac52b1b","modified":1556611785662},{"_id":"source/plugins/prettify/lang-proto.js","hash":"8dc02debbff302b7d75df5728888abea01d885ae","modified":1556611785658},{"_id":"source/plugins/prettify/lang-r.js","hash":"0c6b75d79b64f603b5e66e4824e51b01df7dc841","modified":1556611785649},{"_id":"source/plugins/prettify/lang-rd.js","hash":"5421a7fe15ddf2b5ea4ab37805e7b7df9784cb34","modified":1556611785654},{"_id":"source/plugins/prettify/lang-scala.js","hash":"74e6aef0b3c6ee2208d0ee3a4887766271724763","modified":1556611785656},{"_id":"source/plugins/prettify/lang-rust.js","hash":"541baaafa2b35447f6588cf7a54ed9001b285a40","modified":1556611785660},{"_id":"source/plugins/prettify/lang-sql.js","hash":"75c9fcd8145b0312c103841ba4fa80bcb76c01e7","modified":1556611785647},{"_id":"source/plugins/prettify/lang-swift.js","hash":"0b12cb29773ac59b3e86a709982c06d1fb903e21","modified":1556611785644},{"_id":"source/plugins/prettify/lang-tcl.js","hash":"2270ce056e525578c4fdff32947fa44baeb3475a","modified":1556611785626},{"_id":"source/plugins/prettify/lang-tex.js","hash":"c30f64b85d576afbb7586a85bcfb471c4dace462","modified":1556611785661},{"_id":"source/plugins/prettify/lang-vb.js","hash":"ba5046fe3caa09c7e2b7e1b3a643b710285a1efa","modified":1556611785660},{"_id":"source/plugins/prettify/lang-vhdl.js","hash":"d19fd1f281d3f7b9583bbf446790d8c7f0022d9c","modified":1556611785627},{"_id":"source/plugins/prettify/lang-wiki.js","hash":"197ed2adc974afa9eba86f6eec4dbb864a8649c7","modified":1556611785661},{"_id":"source/plugins/prettify/lang-yaml.js","hash":"a3a509eb7a2298b962d8b132bd19d093c5e75b25","modified":1556611785662},{"_id":"source/plugins/prettify/lang-xq.js","hash":"dd0c434083a0fd01b144eb506caedf481abc4052","modified":1556611785643},{"_id":"source/plugins/prettify/prettify.css","hash":"3f5dc3139f7385092d5dd567bb273c4585dee82d","modified":1557306558614},{"_id":"source/plugins/prettify/node_prettify.js","hash":"a3b9a2e9b334ffd6fd1b59534b260a270c96c5c1","modified":1556611785664},{"_id":"source/plugins/prettify/prettify.js","hash":"2e65f08fda177e52dfbe403fadaf1009ae11a85c","modified":1556624511807},{"_id":"themes/hexo-theme-yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1554987557625},{"_id":"themes/hexo-theme-yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1557306639421},{"_id":"themes/hexo-theme-yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1554987557626},{"_id":"themes/hexo-theme-yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1554987557626},{"_id":"themes/hexo-theme-yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1554987557626},{"_id":"themes/hexo-theme-yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1554987557626},{"_id":"themes/hexo-theme-yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1554987557626},{"_id":"themes/hexo-theme-yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1557304535216},{"_id":"themes/hexo-theme-yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1554987557627},{"_id":"themes/hexo-theme-yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1554987557626},{"_id":"themes/hexo-theme-yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1554987557627},{"_id":"themes/hexo-theme-yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1554987557627},{"_id":"themes/hexo-theme-yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1557306635050},{"_id":"themes/hexo-theme-yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1554987557631},{"_id":"themes/hexo-theme-yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1554987557631},{"_id":"themes/hexo-theme-yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1555149450081},{"_id":"themes/hexo-theme-yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1554987557662},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1554987557663},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1554987557663},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1554987557664},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1554987557665},{"_id":"themes/hexo-theme-yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1554987557665},{"_id":"themes/hexo-theme-yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1554987557665},{"_id":"themes/hexo-theme-yilia/source/img/avatar.jpeg","hash":"d651d08592d23104364b134661a1551e86d35129","modified":1555135393037},{"_id":"themes/hexo-theme-yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1554987557666},{"_id":"themes/hexo-theme-yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1554987557666},{"_id":"themes/hexo-theme-yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1554987557638},{"_id":"themes/hexo-theme-yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1554987557637},{"_id":"themes/hexo-theme-yilia/source/img/favicon.jpeg","hash":"986d62be409c5883fefb4e8577260616553e1880","modified":1555135405387},{"_id":"themes/hexo-theme-yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1554987557639},{"_id":"themes/hexo-theme-yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1554987557638},{"_id":"themes/hexo-theme-yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1554987557639},{"_id":"themes/hexo-theme-yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1554987557640},{"_id":"themes/hexo-theme-yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1557306384010},{"_id":"themes/hexo-theme-yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1554987557641},{"_id":"themes/hexo-theme-yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1557306380492},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1554987557644},{"_id":"themes/hexo-theme-yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1554987557647},{"_id":"themes/hexo-theme-yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1554987557647},{"_id":"themes/hexo-theme-yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1554987557647},{"_id":"themes/hexo-theme-yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1557306387843},{"_id":"themes/hexo-theme-yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1554987557649},{"_id":"themes/hexo-theme-yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1554987557649},{"_id":"themes/hexo-theme-yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1554987557650},{"_id":"themes/hexo-theme-yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1554987557650},{"_id":"themes/hexo-theme-yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1554987557650},{"_id":"themes/hexo-theme-yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1557306391894},{"_id":"themes/hexo-theme-yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1557301888186},{"_id":"themes/hexo-theme-yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1554987557650},{"_id":"themes/hexo-theme-yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1554987557652},{"_id":"themes/hexo-theme-yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1554987557651},{"_id":"themes/hexo-theme-yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1554987557652},{"_id":"themes/hexo-theme-yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1554987557653},{"_id":"themes/hexo-theme-yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1554987557653},{"_id":"themes/hexo-theme-yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1554987557655},{"_id":"themes/hexo-theme-yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1554987557656},{"_id":"themes/hexo-theme-yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1554987557656},{"_id":"themes/hexo-theme-yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1554987557657},{"_id":"themes/hexo-theme-yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1554987557658},{"_id":"themes/hexo-theme-yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1554987557655},{"_id":"themes/hexo-theme-yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1554987557659},{"_id":"themes/hexo-theme-yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1554987557659},{"_id":"themes/hexo-theme-yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1554987557660},{"_id":"themes/hexo-theme-yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1554987557658},{"_id":"themes/hexo-theme-yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1554987557661},{"_id":"themes/hexo-theme-yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1554987557660},{"_id":"source/_posts/grpc/overview.png","hash":"a4d7dc938bac94e0a2717fe4e3ec26e5db3be6c4","modified":1556596187483},{"_id":"source/plugins/prettify/run_prettify.js","hash":"eeed2b4a3977e90a709208ffc44cf64c339c3636","modified":1556611785646},{"_id":"themes/hexo-theme-yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1557306636960},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1554987557628},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1554987557628},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1554987557628},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1554987557628},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1554987557628},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1554987557629},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1554987557629},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1554987557629},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1554987557629},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1554987557630},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1554987557643},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1554987557642},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1554987557642},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1554987557642},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1557306397803},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1554987557645},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1554987557646},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1554987557646},{"_id":"themes/hexo-theme-yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1554987557647},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1554987557645},{"_id":"themes/hexo-theme-yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1554987557648},{"_id":"themes/hexo-theme-yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1554987557648},{"_id":"public/plugins/prettify/lang-basic.js","hash":"565276ee5ea2f117e07a8997d792b7d734e4063c","modified":1561794316666},{"_id":"public/plugins/prettify/lang-css.js","hash":"5ef1e1c5d899dfc86122d7c0549963390ff2e2f0","modified":1561794316666},{"_id":"public/plugins/prettify/lang-apollo.js","hash":"515c363fe47379f09a0d4c7866d82386160fef00","modified":1561794317067},{"_id":"public/plugins/prettify/lang-clj.js","hash":"5fe46495bd5a05e0cbaf850ccf265f776a5ce7ea","modified":1561794317067},{"_id":"public/plugins/prettify/lang-erlang.js","hash":"6cb9234429b62d55ff078346668725d6c08efea9","modified":1561794317085},{"_id":"public/plugins/prettify/lang-dart.js","hash":"34c6c4897cf7d22e230ff9db55f2821c5eddbca8","modified":1561794317085},{"_id":"public/plugins/prettify/lang-ex.js","hash":"cbabafd5b1cc64bcba2606a074fe95ef42a8f189","modified":1561794317085},{"_id":"public/plugins/prettify/lang-go.js","hash":"090ff1d14fa4358b16989ace1e44d67d717ba17d","modified":1561794317085},{"_id":"public/plugins/prettify/lang-hs.js","hash":"9f9db75e632fdf928392eaebacf0fd60e4fd9d3c","modified":1561794317086},{"_id":"public/plugins/prettify/lang-kotlin.js","hash":"b0743c799b874c5c997c6b2f76cd83d37d8c2557","modified":1561794317086},{"_id":"public/plugins/prettify/lang-lisp.js","hash":"9d28f1b5bf96971cc34e6487f97c5decc7fc8e8e","modified":1561794317086},{"_id":"public/plugins/prettify/lang-lasso.js","hash":"47ffe11daa8f34def1627fa310ca2202c9414847","modified":1561794317086},{"_id":"public/plugins/prettify/lang-llvm.js","hash":"5138b9a56f063688205157703c629fefdb8ed4d0","modified":1561794317086},{"_id":"public/plugins/prettify/lang-logtalk.js","hash":"7836eccb85957e1dae2ca02a9530cf0c7369f949","modified":1561794317086},{"_id":"public/plugins/prettify/lang-lua.js","hash":"d907fa9f1e43aa6f86530d9803b6150b0852140b","modified":1561794317086},{"_id":"public/plugins/prettify/lang-ml.js","hash":"968bdc15137ae94b206e485b5bdfa5c96eff5857","modified":1561794317086},{"_id":"public/plugins/prettify/lang-pascal.js","hash":"17d60d30e6a73b3a8657baba733bb04ecbd53039","modified":1561794317086},{"_id":"public/plugins/prettify/lang-n.js","hash":"a4c6f191c8cab03d82c94e42fcf9cfa208d62344","modified":1561794317086},{"_id":"public/plugins/prettify/lang-mumps.js","hash":"9a1cae257b9b028b22ac2c4c9e4c3d2873898566","modified":1561794317086},{"_id":"public/plugins/prettify/lang-matlab.js","hash":"aefcb5725f22551dcdc8a1fad16d3c8ba90218fa","modified":1561794317086},{"_id":"public/plugins/prettify/lang-proto.js","hash":"8dc02debbff302b7d75df5728888abea01d885ae","modified":1561794317086},{"_id":"public/plugins/prettify/lang-r.js","hash":"7f773981391ccf93080946a37cf299770ca91d72","modified":1561794317086},{"_id":"public/plugins/prettify/lang-rd.js","hash":"5421a7fe15ddf2b5ea4ab37805e7b7df9784cb34","modified":1561794317086},{"_id":"public/plugins/prettify/lang-scala.js","hash":"77f3b1dcd7c2dbdb54bc9ba745cb26e77309b96c","modified":1561794317086},{"_id":"public/plugins/prettify/lang-rust.js","hash":"541baaafa2b35447f6588cf7a54ed9001b285a40","modified":1561794317086},{"_id":"public/plugins/prettify/lang-sql.js","hash":"75c9fcd8145b0312c103841ba4fa80bcb76c01e7","modified":1561794317086},{"_id":"public/plugins/prettify/lang-swift.js","hash":"c01de02aa1bca8e12da534823c325c97d60701e2","modified":1561794317086},{"_id":"public/plugins/prettify/lang-tcl.js","hash":"2270ce056e525578c4fdff32947fa44baeb3475a","modified":1561794317087},{"_id":"public/plugins/prettify/lang-tex.js","hash":"4ade9950d7daac8973e65334229e4ee11df4bff4","modified":1561794317087},{"_id":"public/plugins/prettify/lang-vb.js","hash":"ba5046fe3caa09c7e2b7e1b3a643b710285a1efa","modified":1561794317087},{"_id":"public/plugins/prettify/lang-vhdl.js","hash":"d19fd1f281d3f7b9583bbf446790d8c7f0022d9c","modified":1561794317087},{"_id":"public/plugins/prettify/lang-wiki.js","hash":"197ed2adc974afa9eba86f6eec4dbb864a8649c7","modified":1561794317087},{"_id":"public/plugins/prettify/lang-yaml.js","hash":"a3a509eb7a2298b962d8b132bd19d093c5e75b25","modified":1561794317087},{"_id":"public/plugins/prettify/prettify.css","hash":"3f5dc3139f7385092d5dd567bb273c4585dee82d","modified":1561794317087},{"_id":"public/plugins/prettify/lang-xq.js","hash":"a4dd855f860996296b4ae55e224aabfa4c75a25f","modified":1561794317087},{"_id":"public/plugins/prettify/node_prettify.js","hash":"157d5570739699a4db9bf16c87f08031a1886be0","modified":1561794317087},{"_id":"public/plugins/prettify/prettify.js","hash":"887fca3060ce6f3d1729379d1435e446321c0713","modified":1561794317087},{"_id":"public/plugins/prettify/run_prettify.js","hash":"a875c5f37702d09afc1581aceacfc917d60da61c","modified":1561794317088},{"_id":"public/content.json","hash":"2fda8a05b1e60ac86f27808189fd421bf0a4c1d8","modified":1561794317088},{"_id":"public/2019/06/29/read/index.html","hash":"06b5517c2a5c405136b8f76d34d586642ca31215","modified":1561794317092},{"_id":"public/2019/06/12/commit_message/index.html","hash":"8cdae8e9914e406ba075c31692e72a4855d05c0d","modified":1561794317092},{"_id":"public/2019/05/28/go_slice/index.html","hash":"1509499d40fcd5264d163a3be0916539c78bb823","modified":1561794317092},{"_id":"public/2019/04/30/grpc/index.html","hash":"265004a86b1e803f1652835596db81d51cd6a612","modified":1561794317092},{"_id":"public/2019/04/24/closure/index.html","hash":"3be2b0afc36a018e8c06f47341a3760774cf44b7","modified":1561794317093},{"_id":"public/2019/04/22/soft_hard_link/index.html","hash":"b0c8b2eec1fb7b93c1594851138a6b271d8b48d8","modified":1561794317093},{"_id":"public/2019/04/19/mac_path/index.html","hash":"8492acba39134d88dfb4f6618f8c47691eeeb22e","modified":1561794317093},{"_id":"public/2019/04/19/mutex_or_channel/index.html","hash":"0b26aa3823dc44920e6f630998d8815e32ed413e","modified":1561794317093},{"_id":"public/2019/04/18/logrotate/index.html","hash":"639fffff42cde07c73a673900ac67067a670a6ba","modified":1561794317093},{"_id":"public/2019/04/14/rss/index.html","hash":"5d864fb24b82118d9bd9d855805f69e610208397","modified":1561794317093},{"_id":"public/archives/index.html","hash":"c88ba04e242adaa5fe20251510ebca6311fddfcb","modified":1561794317094},{"_id":"public/archives/2019/index.html","hash":"97846820bf219d8bacc05d31f99887aadf78a2cc","modified":1561794317094},{"_id":"public/archives/2019/04/index.html","hash":"b6823545174ddb5a4958a84ec6417ed798baeeec","modified":1561794317094},{"_id":"public/archives/2019/05/index.html","hash":"83f6d3ef5b3eef759be5475aa4d61579f0951a25","modified":1561794317094},{"_id":"public/archives/2019/06/index.html","hash":"0575b94005992b838c51211882a387c25751c662","modified":1561794317094},{"_id":"public/index.html","hash":"8e5e7977f2dc53d1e584326a5e5b346262f7c73b","modified":1561794317094},{"_id":"public/tags/技术名词/index.html","hash":"95c0f2bd60423afb28b886c0ac3b74d0ad6061f8","modified":1561794317095},{"_id":"public/tags/Go/index.html","hash":"7643783087d904c289a4295f3edb371f128ff081","modified":1561794317095},{"_id":"public/tags/Javascript/index.html","hash":"304876ca1b2e5434ad4763a324b8f17cc634bc5a","modified":1561794317095},{"_id":"public/tags/已阅/index.html","hash":"d2631761356a0e19bac7ca308039d557dd4f0851","modified":1561794317095},{"_id":"public/tags/运维/index.html","hash":"69ff715f9d3f0f733c5788723ee690c0d5a4d602","modified":1561794317095},{"_id":"public/tags/Log/index.html","hash":"3ecad377622b24bc0b0bff27e56736cb997a80cc","modified":1561794317095},{"_id":"public/tags/PATH/index.html","hash":"e7198f2244ac6c0d4da93ce7ed5c761275b1ccd6","modified":1561794317095},{"_id":"public/tags/MAC/index.html","hash":"749bc184e134142bf6ca7fcb355a8e9ea7a10330","modified":1561794317095},{"_id":"public/tags/Linux/index.html","hash":"eb40e10520c8ea07242e902960c3c08e6fd8c02d","modified":1561794317095},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1561794317100},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1561794317100},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1561794317100},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1561794317101},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1561794317101},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1561794317101},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1561794317101},{"_id":"public/img/avatar.jpeg","hash":"d651d08592d23104364b134661a1551e86d35129","modified":1561794317101},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1561794317101},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1561794317101},{"_id":"public/img/favicon.jpeg","hash":"986d62be409c5883fefb4e8577260616553e1880","modified":1561794317101},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1561794317116},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1561794317116},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1561794317117},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1561794317117}],"Category":[],"Data":[],"Page":[{"_content":"/**\n * @license\n * Copyright (C) 2013 Peter Kofler\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Contributed by peter dot kofler at code minus cop dot org\n\n/**\n * @fileoverview\n * Registers a language handler for Basic.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-basic\">(my BASIC code)</pre>\n *\n * @author peter dot kofler at code minus cop dot org\n */\n\nPR.registerLangHandler(\n    PR.createSimpleLexer(\n        [ // shortcutStylePatterns\n          // \"single-line-string\"\n          [PR.PR_STRING,        /^(?:\"(?:[^\\\\\"\\r\\n]|\\\\.)*(?:\"|$))/, null, '\"'],\n          // Whitespace\n          [PR.PR_PLAIN,         /^\\s+/, null, ' \\r\\n\\t\\xA0']\n        ],\n        [ // fallthroughStylePatterns\n          // A line comment that starts with REM\n          [PR.PR_COMMENT,       /^REM[^\\r\\n]*/, null],\n          [PR.PR_KEYWORD,       /^\\b(?:AND|CLOSE|CLR|CMD|CONT|DATA|DEF ?FN|DIM|END|FOR|GET|GOSUB|GOTO|IF|INPUT|LET|LIST|LOAD|NEW|NEXT|NOT|ON|OPEN|OR|POKE|PRINT|READ|RESTORE|RETURN|RUN|SAVE|STEP|STOP|SYS|THEN|TO|VERIFY|WAIT)\\b/, null],\n          [PR.PR_PLAIN,         /^[A-Z][A-Z0-9]?(?:\\$|%)?/i, null],\n          // Literals .0, 0, 0.0 0E13\n          [PR.PR_LITERAL,       /^(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?/i,  null, '0123456789'],\n          [PR.PR_PUNCTUATION,   /^.[^\\s\\w\\.$%\"]*/, null]\n          // [PR.PR_PUNCTUATION,   /^[-,:;!<>=\\+^\\/\\*]+/]\n        ]),\n    ['basic','cbm']);\n","source":"plugins/prettify/lang-basic.js","raw":"/**\n * @license\n * Copyright (C) 2013 Peter Kofler\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Contributed by peter dot kofler at code minus cop dot org\n\n/**\n * @fileoverview\n * Registers a language handler for Basic.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-basic\">(my BASIC code)</pre>\n *\n * @author peter dot kofler at code minus cop dot org\n */\n\nPR.registerLangHandler(\n    PR.createSimpleLexer(\n        [ // shortcutStylePatterns\n          // \"single-line-string\"\n          [PR.PR_STRING,        /^(?:\"(?:[^\\\\\"\\r\\n]|\\\\.)*(?:\"|$))/, null, '\"'],\n          // Whitespace\n          [PR.PR_PLAIN,         /^\\s+/, null, ' \\r\\n\\t\\xA0']\n        ],\n        [ // fallthroughStylePatterns\n          // A line comment that starts with REM\n          [PR.PR_COMMENT,       /^REM[^\\r\\n]*/, null],\n          [PR.PR_KEYWORD,       /^\\b(?:AND|CLOSE|CLR|CMD|CONT|DATA|DEF ?FN|DIM|END|FOR|GET|GOSUB|GOTO|IF|INPUT|LET|LIST|LOAD|NEW|NEXT|NOT|ON|OPEN|OR|POKE|PRINT|READ|RESTORE|RETURN|RUN|SAVE|STEP|STOP|SYS|THEN|TO|VERIFY|WAIT)\\b/, null],\n          [PR.PR_PLAIN,         /^[A-Z][A-Z0-9]?(?:\\$|%)?/i, null],\n          // Literals .0, 0, 0.0 0E13\n          [PR.PR_LITERAL,       /^(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?/i,  null, '0123456789'],\n          [PR.PR_PUNCTUATION,   /^.[^\\s\\w\\.$%\"]*/, null]\n          // [PR.PR_PUNCTUATION,   /^[-,:;!<>=\\+^\\/\\*]+/]\n        ]),\n    ['basic','cbm']);\n","date":"2019-04-30T08:09:45.625Z","updated":"2019-04-30T08:09:45.625Z","path":"plugins/prettify/lang-basic.js","layout":"false","title":"","comments":1,"_id":"cjxh80elm00116c9vxzmtb1uw","content":"/**\n * @license\n * Copyright (C) 2013 Peter Kofler\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Contributed by peter dot kofler at code minus cop dot org\n\n/**\n * @fileoverview\n * Registers a language handler for Basic.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-basic\">(my BASIC code)</pre>\n *\n * @author peter dot kofler at code minus cop dot org\n */\n\nPR.registerLangHandler(\n    PR.createSimpleLexer(\n        [ // shortcutStylePatterns\n          // \"single-line-string\"\n          [PR.PR_STRING,        /^(?:\"(?:[^\\\\\"\\r\\n]|\\\\.)*(?:\"|$))/, null, '\"'],\n          // Whitespace\n          [PR.PR_PLAIN,         /^\\s+/, null, ' \\r\\n\\t\\xA0']\n        ],\n        [ // fallthroughStylePatterns\n          // A line comment that starts with REM\n          [PR.PR_COMMENT,       /^REM[^\\r\\n]*/, null],\n          [PR.PR_KEYWORD,       /^\\b(?:AND|CLOSE|CLR|CMD|CONT|DATA|DEF ?FN|DIM|END|FOR|GET|GOSUB|GOTO|IF|INPUT|LET|LIST|LOAD|NEW|NEXT|NOT|ON|OPEN|OR|POKE|PRINT|READ|RESTORE|RETURN|RUN|SAVE|STEP|STOP|SYS|THEN|TO|VERIFY|WAIT)\\b/, null],\n          [PR.PR_PLAIN,         /^[A-Z][A-Z0-9]?(?:\\$|%)?/i, null],\n          // Literals .0, 0, 0.0 0E13\n          [PR.PR_LITERAL,       /^(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?/i,  null, '0123456789'],\n          [PR.PR_PUNCTUATION,   /^.[^\\s\\w\\.$%\"]*/, null]\n          // [PR.PR_PUNCTUATION,   /^[-,:;!<>=\\+^\\/\\*]+/]\n        ]),\n    ['basic','cbm']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2013 Peter Kofler\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Contributed by peter dot kofler at code minus cop dot org\n\n/**\n * @fileoverview\n * Registers a language handler for Basic.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-basic\">(my BASIC code)</pre>\n *\n * @author peter dot kofler at code minus cop dot org\n */\n\nPR.registerLangHandler(\n    PR.createSimpleLexer(\n        [ // shortcutStylePatterns\n          // \"single-line-string\"\n          [PR.PR_STRING,        /^(?:\"(?:[^\\\\\"\\r\\n]|\\\\.)*(?:\"|$))/, null, '\"'],\n          // Whitespace\n          [PR.PR_PLAIN,         /^\\s+/, null, ' \\r\\n\\t\\xA0']\n        ],\n        [ // fallthroughStylePatterns\n          // A line comment that starts with REM\n          [PR.PR_COMMENT,       /^REM[^\\r\\n]*/, null],\n          [PR.PR_KEYWORD,       /^\\b(?:AND|CLOSE|CLR|CMD|CONT|DATA|DEF ?FN|DIM|END|FOR|GET|GOSUB|GOTO|IF|INPUT|LET|LIST|LOAD|NEW|NEXT|NOT|ON|OPEN|OR|POKE|PRINT|READ|RESTORE|RETURN|RUN|SAVE|STEP|STOP|SYS|THEN|TO|VERIFY|WAIT)\\b/, null],\n          [PR.PR_PLAIN,         /^[A-Z][A-Z0-9]?(?:\\$|%)?/i, null],\n          // Literals .0, 0, 0.0 0E13\n          [PR.PR_LITERAL,       /^(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?/i,  null, '0123456789'],\n          [PR.PR_PUNCTUATION,   /^.[^\\s\\w\\.$%\"]*/, null]\n          // [PR.PR_PUNCTUATION,   /^[-,:;!<>=\\+^\\/\\*]+/]\n        ]),\n    ['basic','cbm']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for CSS.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-css\"></pre>\n *\n *\n * http://www.w3.org/TR/CSS21/grammar.html Section G2 defines the lexical\n * grammar.  This scheme does not recognize keywords containing escapes.\n *\n * @author mikesamuel@gmail.com\n */\n\n// This file is a call to a function defined in prettify.js which defines a\n// lexical scanner for CSS and maps tokens to styles.\n\n// The call to PR['registerLangHandler'] is quoted so that Closure Compiler\n// will not rename the call so that this language extensions can be\n// compiled/minified separately from one another.  Other symbols defined in\n// prettify.js are similarly quoted.\n\n// The call is structured thus:\n// PR['registerLangHandler'](\n//    PR['createSimpleLexer'](\n//        shortcutPatterns,\n//        fallThroughPatterns),\n//    [languageId0, ..., languageIdN])\n\n// Langugage IDs\n// =============\n// The language IDs are typically the file extensions of source files for\n// that language so that users can syntax highlight arbitrary files based\n// on just the extension.  This is heuristic, but works pretty well in\n// practice.\n\n// Patterns\n// ========\n// Lexers are typically implemented as a set of regular expressions.\n// The SimpleLexer function takes regular expressions, styles, and some\n// pragma-info and produces a lexer.  A token description looks like\n//   [STYLE_NAME, /regular-expression/, pragmas]\n\n// Initially, simple lexer's inner loop looked like:\n\n//    while sourceCode is not empty:\n//      try each regular expression in order until one matches\n//      remove the matched portion from sourceCode\n\n// This was really slow for large files because some JS interpreters\n// do a buffer copy on the matched portion which is O(n*n)\n\n// The current loop now looks like\n\n//    1. use js-modules/combinePrefixPatterns.js to \n//       combine all regular expressions into one \n//    2. use a single global regular expresion match to extract all tokens\n//    3. for each token try regular expressions in order until one matches it\n//       and classify it using the associated style\n\n// This is a lot more efficient but it does mean that lookahead and lookbehind\n// can't be used across boundaries to classify tokens.\n\n// Sometimes we need lookahead and lookbehind and sometimes we want to handle\n// embedded language -- JavaScript or CSS embedded in HTML, or inline assembly\n// in C.\n\n// If a particular pattern has a numbered group, and its style pattern starts\n// with \"lang-\" as in\n//    ['lang-js', /<script>(.*?)<\\/script>/]\n// then the token classification step breaks the token into pieces.\n// Group 1 is re-parsed using the language handler for \"lang-js\", and the\n// surrounding portions are reclassified using the current language handler.\n// This mechanism gives us both lookahead, lookbehind, and language embedding.\n\n// Shortcut Patterns\n// =================\n// A shortcut pattern is one that is tried before other patterns if the first\n// character in the token is in the string of characters.\n// This very effectively lets us make quick correct decisions for common token\n// types.\n\n// All other patterns are fall-through patterns.\n\n\n\n// The comments inline below refer to productions in the CSS specification's\n// lexical grammar.  See link above.\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        // Shortcut patterns.\n        [\n         // The space production <s>\n         [PR['PR_PLAIN'],       /^[ \\t\\r\\n\\f]+/, null, ' \\t\\r\\n\\f']\n        ],\n        // Fall-through patterns.\n        [\n         // Quoted strings.  <string1> and <string2>\n         [PR['PR_STRING'],\n          /^\\\"(?:[^\\n\\r\\f\\\\\\\"]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\\"/, null],\n         [PR['PR_STRING'],\n          /^\\'(?:[^\\n\\r\\f\\\\\\']|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\'/, null],\n         ['lang-css-str', /^url\\(([^\\)\\\"\\']+)\\)/i],\n         [PR['PR_KEYWORD'],\n          /^(?:url|rgb|\\!important|@import|@page|@media|@charset|inherit)(?=[^\\-\\w]|$)/i,\n          null],\n         // A property name -- an identifier followed by a colon.\n         ['lang-css-kw', /^(-?(?:[_a-z]|(?:\\\\[0-9a-f]+ ?))(?:[_a-z0-9\\-]|\\\\(?:\\\\[0-9a-f]+ ?))*)\\s*:/i],\n         // A C style block comment.  The <comment> production.\n         [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//],\n         // Escaping text spans\n         [PR['PR_COMMENT'], /^(?:<!--|-->)/],\n         // A number possibly containing a suffix.\n         [PR['PR_LITERAL'], /^(?:\\d+|\\d*\\.\\d+)(?:%|[a-z]+)?/i],\n         // A hex color\n         [PR['PR_LITERAL'], /^#(?:[0-9a-f]{3}){1,2}\\b/i],\n         // An identifier\n         [PR['PR_PLAIN'],\n          /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\s\\w\\'\\\"]+/]\n        ]),\n    ['css']);\n// Above we use embedded languages to highlight property names (identifiers\n// followed by a colon) differently from identifiers in values.\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([],\n        [\n         [PR['PR_KEYWORD'],\n          /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i]\n        ]),\n    ['css-kw']);\n// The content of an unquoted URL literal like url(http://foo/img.png) should\n// be colored as string content.  This language handler is used above in the\n// URL production to do so.\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([],\n        [\n         [PR['PR_STRING'], /^[^\\)\\\"\\']+/]\n        ]),\n    ['css-str']);\n","source":"plugins/prettify/lang-css.js","raw":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for CSS.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-css\"></pre>\n *\n *\n * http://www.w3.org/TR/CSS21/grammar.html Section G2 defines the lexical\n * grammar.  This scheme does not recognize keywords containing escapes.\n *\n * @author mikesamuel@gmail.com\n */\n\n// This file is a call to a function defined in prettify.js which defines a\n// lexical scanner for CSS and maps tokens to styles.\n\n// The call to PR['registerLangHandler'] is quoted so that Closure Compiler\n// will not rename the call so that this language extensions can be\n// compiled/minified separately from one another.  Other symbols defined in\n// prettify.js are similarly quoted.\n\n// The call is structured thus:\n// PR['registerLangHandler'](\n//    PR['createSimpleLexer'](\n//        shortcutPatterns,\n//        fallThroughPatterns),\n//    [languageId0, ..., languageIdN])\n\n// Langugage IDs\n// =============\n// The language IDs are typically the file extensions of source files for\n// that language so that users can syntax highlight arbitrary files based\n// on just the extension.  This is heuristic, but works pretty well in\n// practice.\n\n// Patterns\n// ========\n// Lexers are typically implemented as a set of regular expressions.\n// The SimpleLexer function takes regular expressions, styles, and some\n// pragma-info and produces a lexer.  A token description looks like\n//   [STYLE_NAME, /regular-expression/, pragmas]\n\n// Initially, simple lexer's inner loop looked like:\n\n//    while sourceCode is not empty:\n//      try each regular expression in order until one matches\n//      remove the matched portion from sourceCode\n\n// This was really slow for large files because some JS interpreters\n// do a buffer copy on the matched portion which is O(n*n)\n\n// The current loop now looks like\n\n//    1. use js-modules/combinePrefixPatterns.js to \n//       combine all regular expressions into one \n//    2. use a single global regular expresion match to extract all tokens\n//    3. for each token try regular expressions in order until one matches it\n//       and classify it using the associated style\n\n// This is a lot more efficient but it does mean that lookahead and lookbehind\n// can't be used across boundaries to classify tokens.\n\n// Sometimes we need lookahead and lookbehind and sometimes we want to handle\n// embedded language -- JavaScript or CSS embedded in HTML, or inline assembly\n// in C.\n\n// If a particular pattern has a numbered group, and its style pattern starts\n// with \"lang-\" as in\n//    ['lang-js', /<script>(.*?)<\\/script>/]\n// then the token classification step breaks the token into pieces.\n// Group 1 is re-parsed using the language handler for \"lang-js\", and the\n// surrounding portions are reclassified using the current language handler.\n// This mechanism gives us both lookahead, lookbehind, and language embedding.\n\n// Shortcut Patterns\n// =================\n// A shortcut pattern is one that is tried before other patterns if the first\n// character in the token is in the string of characters.\n// This very effectively lets us make quick correct decisions for common token\n// types.\n\n// All other patterns are fall-through patterns.\n\n\n\n// The comments inline below refer to productions in the CSS specification's\n// lexical grammar.  See link above.\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        // Shortcut patterns.\n        [\n         // The space production <s>\n         [PR['PR_PLAIN'],       /^[ \\t\\r\\n\\f]+/, null, ' \\t\\r\\n\\f']\n        ],\n        // Fall-through patterns.\n        [\n         // Quoted strings.  <string1> and <string2>\n         [PR['PR_STRING'],\n          /^\\\"(?:[^\\n\\r\\f\\\\\\\"]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\\"/, null],\n         [PR['PR_STRING'],\n          /^\\'(?:[^\\n\\r\\f\\\\\\']|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\'/, null],\n         ['lang-css-str', /^url\\(([^\\)\\\"\\']+)\\)/i],\n         [PR['PR_KEYWORD'],\n          /^(?:url|rgb|\\!important|@import|@page|@media|@charset|inherit)(?=[^\\-\\w]|$)/i,\n          null],\n         // A property name -- an identifier followed by a colon.\n         ['lang-css-kw', /^(-?(?:[_a-z]|(?:\\\\[0-9a-f]+ ?))(?:[_a-z0-9\\-]|\\\\(?:\\\\[0-9a-f]+ ?))*)\\s*:/i],\n         // A C style block comment.  The <comment> production.\n         [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//],\n         // Escaping text spans\n         [PR['PR_COMMENT'], /^(?:<!--|-->)/],\n         // A number possibly containing a suffix.\n         [PR['PR_LITERAL'], /^(?:\\d+|\\d*\\.\\d+)(?:%|[a-z]+)?/i],\n         // A hex color\n         [PR['PR_LITERAL'], /^#(?:[0-9a-f]{3}){1,2}\\b/i],\n         // An identifier\n         [PR['PR_PLAIN'],\n          /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\s\\w\\'\\\"]+/]\n        ]),\n    ['css']);\n// Above we use embedded languages to highlight property names (identifiers\n// followed by a colon) differently from identifiers in values.\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([],\n        [\n         [PR['PR_KEYWORD'],\n          /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i]\n        ]),\n    ['css-kw']);\n// The content of an unquoted URL literal like url(http://foo/img.png) should\n// be colored as string content.  This language handler is used above in the\n// URL production to do so.\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([],\n        [\n         [PR['PR_STRING'], /^[^\\)\\\"\\']+/]\n        ]),\n    ['css-str']);\n","date":"2019-04-30T08:09:45.626Z","updated":"2019-04-30T08:09:45.625Z","path":"plugins/prettify/lang-css.js","layout":"false","title":"","comments":1,"_id":"cjxh80elm00126c9v17qc4zmv","content":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for CSS.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-css\"></pre>\n *\n *\n * http://www.w3.org/TR/CSS21/grammar.html Section G2 defines the lexical\n * grammar.  This scheme does not recognize keywords containing escapes.\n *\n * @author mikesamuel@gmail.com\n */\n\n// This file is a call to a function defined in prettify.js which defines a\n// lexical scanner for CSS and maps tokens to styles.\n\n// The call to PR['registerLangHandler'] is quoted so that Closure Compiler\n// will not rename the call so that this language extensions can be\n// compiled/minified separately from one another.  Other symbols defined in\n// prettify.js are similarly quoted.\n\n// The call is structured thus:\n// PR['registerLangHandler'](\n//    PR['createSimpleLexer'](\n//        shortcutPatterns,\n//        fallThroughPatterns),\n//    [languageId0, ..., languageIdN])\n\n// Langugage IDs\n// =============\n// The language IDs are typically the file extensions of source files for\n// that language so that users can syntax highlight arbitrary files based\n// on just the extension.  This is heuristic, but works pretty well in\n// practice.\n\n// Patterns\n// ========\n// Lexers are typically implemented as a set of regular expressions.\n// The SimpleLexer function takes regular expressions, styles, and some\n// pragma-info and produces a lexer.  A token description looks like\n//   [STYLE_NAME, /regular-expression/, pragmas]\n\n// Initially, simple lexer's inner loop looked like:\n\n//    while sourceCode is not empty:\n//      try each regular expression in order until one matches\n//      remove the matched portion from sourceCode\n\n// This was really slow for large files because some JS interpreters\n// do a buffer copy on the matched portion which is O(n*n)\n\n// The current loop now looks like\n\n//    1. use js-modules/combinePrefixPatterns.js to \n//       combine all regular expressions into one \n//    2. use a single global regular expresion match to extract all tokens\n//    3. for each token try regular expressions in order until one matches it\n//       and classify it using the associated style\n\n// This is a lot more efficient but it does mean that lookahead and lookbehind\n// can't be used across boundaries to classify tokens.\n\n// Sometimes we need lookahead and lookbehind and sometimes we want to handle\n// embedded language -- JavaScript or CSS embedded in HTML, or inline assembly\n// in C.\n\n// If a particular pattern has a numbered group, and its style pattern starts\n// with \"lang-\" as in\n//    ['lang-js', /<script>(.*?)<\\/script>/]\n// then the token classification step breaks the token into pieces.\n// Group 1 is re-parsed using the language handler for \"lang-js\", and the\n// surrounding portions are reclassified using the current language handler.\n// This mechanism gives us both lookahead, lookbehind, and language embedding.\n\n// Shortcut Patterns\n// =================\n// A shortcut pattern is one that is tried before other patterns if the first\n// character in the token is in the string of characters.\n// This very effectively lets us make quick correct decisions for common token\n// types.\n\n// All other patterns are fall-through patterns.\n\n\n\n// The comments inline below refer to productions in the CSS specification's\n// lexical grammar.  See link above.\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        // Shortcut patterns.\n        [\n         // The space production <s>\n         [PR['PR_PLAIN'],       /^[ \\t\\r\\n\\f]+/, null, ' \\t\\r\\n\\f']\n        ],\n        // Fall-through patterns.\n        [\n         // Quoted strings.  <string1> and <string2>\n         [PR['PR_STRING'],\n          /^\\\"(?:[^\\n\\r\\f\\\\\\\"]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\\"/, null],\n         [PR['PR_STRING'],\n          /^\\'(?:[^\\n\\r\\f\\\\\\']|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\'/, null],\n         ['lang-css-str', /^url\\(([^\\)\\\"\\']+)\\)/i],\n         [PR['PR_KEYWORD'],\n          /^(?:url|rgb|\\!important|@import|@page|@media|@charset|inherit)(?=[^\\-\\w]|$)/i,\n          null],\n         // A property name -- an identifier followed by a colon.\n         ['lang-css-kw', /^(-?(?:[_a-z]|(?:\\\\[0-9a-f]+ ?))(?:[_a-z0-9\\-]|\\\\(?:\\\\[0-9a-f]+ ?))*)\\s*:/i],\n         // A C style block comment.  The <comment> production.\n         [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//],\n         // Escaping text spans\n         [PR['PR_COMMENT'], /^(?:<!--|-->)/],\n         // A number possibly containing a suffix.\n         [PR['PR_LITERAL'], /^(?:\\d+|\\d*\\.\\d+)(?:%|[a-z]+)?/i],\n         // A hex color\n         [PR['PR_LITERAL'], /^#(?:[0-9a-f]{3}){1,2}\\b/i],\n         // An identifier\n         [PR['PR_PLAIN'],\n          /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\s\\w\\'\\\"]+/]\n        ]),\n    ['css']);\n// Above we use embedded languages to highlight property names (identifiers\n// followed by a colon) differently from identifiers in values.\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([],\n        [\n         [PR['PR_KEYWORD'],\n          /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i]\n        ]),\n    ['css-kw']);\n// The content of an unquoted URL literal like url(http://foo/img.png) should\n// be colored as string content.  This language handler is used above in the\n// URL production to do so.\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([],\n        [\n         [PR['PR_STRING'], /^[^\\)\\\"\\']+/]\n        ]),\n    ['css-str']);\n</script>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for CSS.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-css\"></pre>\n *\n *\n * http://www.w3.org/TR/CSS21/grammar.html Section G2 defines the lexical\n * grammar.  This scheme does not recognize keywords containing escapes.\n *\n * @author mikesamuel@gmail.com\n */\n\n// This file is a call to a function defined in prettify.js which defines a\n// lexical scanner for CSS and maps tokens to styles.\n\n// The call to PR['registerLangHandler'] is quoted so that Closure Compiler\n// will not rename the call so that this language extensions can be\n// compiled/minified separately from one another.  Other symbols defined in\n// prettify.js are similarly quoted.\n\n// The call is structured thus:\n// PR['registerLangHandler'](\n//    PR['createSimpleLexer'](\n//        shortcutPatterns,\n//        fallThroughPatterns),\n//    [languageId0, ..., languageIdN])\n\n// Langugage IDs\n// =============\n// The language IDs are typically the file extensions of source files for\n// that language so that users can syntax highlight arbitrary files based\n// on just the extension.  This is heuristic, but works pretty well in\n// practice.\n\n// Patterns\n// ========\n// Lexers are typically implemented as a set of regular expressions.\n// The SimpleLexer function takes regular expressions, styles, and some\n// pragma-info and produces a lexer.  A token description looks like\n//   [STYLE_NAME, /regular-expression/, pragmas]\n\n// Initially, simple lexer's inner loop looked like:\n\n//    while sourceCode is not empty:\n//      try each regular expression in order until one matches\n//      remove the matched portion from sourceCode\n\n// This was really slow for large files because some JS interpreters\n// do a buffer copy on the matched portion which is O(n*n)\n\n// The current loop now looks like\n\n//    1. use js-modules/combinePrefixPatterns.js to \n//       combine all regular expressions into one \n//    2. use a single global regular expresion match to extract all tokens\n//    3. for each token try regular expressions in order until one matches it\n//       and classify it using the associated style\n\n// This is a lot more efficient but it does mean that lookahead and lookbehind\n// can't be used across boundaries to classify tokens.\n\n// Sometimes we need lookahead and lookbehind and sometimes we want to handle\n// embedded language -- JavaScript or CSS embedded in HTML, or inline assembly\n// in C.\n\n// If a particular pattern has a numbered group, and its style pattern starts\n// with \"lang-\" as in\n//    ['lang-js', /<script>(.*?)<\\/script>/]\n// then the token classification step breaks the token into pieces.\n// Group 1 is re-parsed using the language handler for \"lang-js\", and the\n// surrounding portions are reclassified using the current language handler.\n// This mechanism gives us both lookahead, lookbehind, and language embedding.\n\n// Shortcut Patterns\n// =================\n// A shortcut pattern is one that is tried before other patterns if the first\n// character in the token is in the string of characters.\n// This very effectively lets us make quick correct decisions for common token\n// types.\n\n// All other patterns are fall-through patterns.\n\n\n\n// The comments inline below refer to productions in the CSS specification's\n// lexical grammar.  See link above.\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        // Shortcut patterns.\n        [\n         // The space production <s>\n         [PR['PR_PLAIN'],       /^[ \\t\\r\\n\\f]+/, null, ' \\t\\r\\n\\f']\n        ],\n        // Fall-through patterns.\n        [\n         // Quoted strings.  <string1> and <string2>\n         [PR['PR_STRING'],\n          /^\\\"(?:[^\\n\\r\\f\\\\\\\"]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\\"/, null],\n         [PR['PR_STRING'],\n          /^\\'(?:[^\\n\\r\\f\\\\\\']|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\'/, null],\n         ['lang-css-str', /^url\\(([^\\)\\\"\\']+)\\)/i],\n         [PR['PR_KEYWORD'],\n          /^(?:url|rgb|\\!important|@import|@page|@media|@charset|inherit)(?=[^\\-\\w]|$)/i,\n          null],\n         // A property name -- an identifier followed by a colon.\n         ['lang-css-kw', /^(-?(?:[_a-z]|(?:\\\\[0-9a-f]+ ?))(?:[_a-z0-9\\-]|\\\\(?:\\\\[0-9a-f]+ ?))*)\\s*:/i],\n         // A C style block comment.  The <comment> production.\n         [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//],\n         // Escaping text spans\n         [PR['PR_COMMENT'], /^(?:<!--|-->)/],\n         // A number possibly containing a suffix.\n         [PR['PR_LITERAL'], /^(?:\\d+|\\d*\\.\\d+)(?:%|[a-z]+)?/i],\n         // A hex color\n         [PR['PR_LITERAL'], /^#(?:[0-9a-f]{3}){1,2}\\b/i],\n         // An identifier\n         [PR['PR_PLAIN'],\n          /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\s\\w\\'\\\"]+/]\n        ]),\n    ['css']);\n// Above we use embedded languages to highlight property names (identifiers\n// followed by a colon) differently from identifiers in values.\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([],\n        [\n         [PR['PR_KEYWORD'],\n          /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i]\n        ]),\n    ['css-kw']);\n// The content of an unquoted URL literal like url(http://foo/img.png) should\n// be colored as string content.  This language handler is used above in the\n// URL production to do so.\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([],\n        [\n         [PR['PR_STRING'], /^[^\\)\\\"\\']+/]\n        ]),\n    ['css-str']);\n</script>"},{"_content":"/**\n * @license\n * Copyright (C) 2009 Onno Hommes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the AGC/AEA Assembly Language as described\n * at http://virtualagc.googlecode.com\n * <p>\n * This file could be used by goodle code to allow syntax highlight for\n * Virtual AGC SVN repository or if you don't want to commonize\n * the header for the agc/aea html assembly listing.\n *\n * @author ohommes@alumni.cmu.edu\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^#[^\\r\\n]*/, null, '#'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'], /^(?:ADS|AD|AUG|BZF|BZMF|CAE|CAF|CA|CCS|COM|CS|DAS|DCA|DCOM|DCS|DDOUBL|DIM|DOUBLE|DTCB|DTCF|DV|DXCH|EDRUPT|EXTEND|INCR|INDEX|NDX|INHINT|LXCH|MASK|MSK|MP|MSU|NOOP|OVSK|QXCH|RAND|READ|RELINT|RESUME|RETURN|ROR|RXOR|SQUARE|SU|TCR|TCAA|OVSK|TCF|TC|TS|WAND|WOR|WRITE|XCH|XLQ|XXALQ|ZL|ZQ|ADD|ADZ|SUB|SUZ|MPY|MPR|MPZ|DVP|COM|ABS|CLA|CLZ|LDQ|STO|STQ|ALS|LLS|LRS|TRA|TSQ|TMI|TOV|AXT|TIX|DLY|INP|OUT)\\s/,null],\n         [PR['PR_TYPE'], /^(?:-?GENADR|=MINUS|2BCADR|VN|BOF|MM|-?2CADR|-?[1-6]DNADR|ADRES|BBCON|[SE]?BANK\\=?|BLOCK|BNKSUM|E?CADR|COUNT\\*?|2?DEC\\*?|-?DNCHAN|-?DNPTR|EQUALS|ERASE|MEMORY|2?OCT|REMADR|SETLOC|SUBRO|ORG|BSS|BES|SYN|EQU|DEFINE|END)\\s/,null],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // Any word including labels that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[!-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['apollo', 'agc', 'aea']);\n","source":"plugins/prettify/lang-apollo.js","raw":"/**\n * @license\n * Copyright (C) 2009 Onno Hommes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the AGC/AEA Assembly Language as described\n * at http://virtualagc.googlecode.com\n * <p>\n * This file could be used by goodle code to allow syntax highlight for\n * Virtual AGC SVN repository or if you don't want to commonize\n * the header for the agc/aea html assembly listing.\n *\n * @author ohommes@alumni.cmu.edu\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^#[^\\r\\n]*/, null, '#'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'], /^(?:ADS|AD|AUG|BZF|BZMF|CAE|CAF|CA|CCS|COM|CS|DAS|DCA|DCOM|DCS|DDOUBL|DIM|DOUBLE|DTCB|DTCF|DV|DXCH|EDRUPT|EXTEND|INCR|INDEX|NDX|INHINT|LXCH|MASK|MSK|MP|MSU|NOOP|OVSK|QXCH|RAND|READ|RELINT|RESUME|RETURN|ROR|RXOR|SQUARE|SU|TCR|TCAA|OVSK|TCF|TC|TS|WAND|WOR|WRITE|XCH|XLQ|XXALQ|ZL|ZQ|ADD|ADZ|SUB|SUZ|MPY|MPR|MPZ|DVP|COM|ABS|CLA|CLZ|LDQ|STO|STQ|ALS|LLS|LRS|TRA|TSQ|TMI|TOV|AXT|TIX|DLY|INP|OUT)\\s/,null],\n         [PR['PR_TYPE'], /^(?:-?GENADR|=MINUS|2BCADR|VN|BOF|MM|-?2CADR|-?[1-6]DNADR|ADRES|BBCON|[SE]?BANK\\=?|BLOCK|BNKSUM|E?CADR|COUNT\\*?|2?DEC\\*?|-?DNCHAN|-?DNPTR|EQUALS|ERASE|MEMORY|2?OCT|REMADR|SETLOC|SUBRO|ORG|BSS|BES|SYN|EQU|DEFINE|END)\\s/,null],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // Any word including labels that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[!-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['apollo', 'agc', 'aea']);\n","date":"2019-04-30T08:09:45.659Z","updated":"2019-04-30T08:09:45.659Z","path":"plugins/prettify/lang-apollo.js","layout":"false","title":"","comments":1,"_id":"cjxh80eln00136c9vczptd0ac","content":"/**\n * @license\n * Copyright (C) 2009 Onno Hommes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the AGC/AEA Assembly Language as described\n * at http://virtualagc.googlecode.com\n * <p>\n * This file could be used by goodle code to allow syntax highlight for\n * Virtual AGC SVN repository or if you don't want to commonize\n * the header for the agc/aea html assembly listing.\n *\n * @author ohommes@alumni.cmu.edu\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^#[^\\r\\n]*/, null, '#'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'], /^(?:ADS|AD|AUG|BZF|BZMF|CAE|CAF|CA|CCS|COM|CS|DAS|DCA|DCOM|DCS|DDOUBL|DIM|DOUBLE|DTCB|DTCF|DV|DXCH|EDRUPT|EXTEND|INCR|INDEX|NDX|INHINT|LXCH|MASK|MSK|MP|MSU|NOOP|OVSK|QXCH|RAND|READ|RELINT|RESUME|RETURN|ROR|RXOR|SQUARE|SU|TCR|TCAA|OVSK|TCF|TC|TS|WAND|WOR|WRITE|XCH|XLQ|XXALQ|ZL|ZQ|ADD|ADZ|SUB|SUZ|MPY|MPR|MPZ|DVP|COM|ABS|CLA|CLZ|LDQ|STO|STQ|ALS|LLS|LRS|TRA|TSQ|TMI|TOV|AXT|TIX|DLY|INP|OUT)\\s/,null],\n         [PR['PR_TYPE'], /^(?:-?GENADR|=MINUS|2BCADR|VN|BOF|MM|-?2CADR|-?[1-6]DNADR|ADRES|BBCON|[SE]?BANK\\=?|BLOCK|BNKSUM|E?CADR|COUNT\\*?|2?DEC\\*?|-?DNCHAN|-?DNPTR|EQUALS|ERASE|MEMORY|2?OCT|REMADR|SETLOC|SUBRO|ORG|BSS|BES|SYN|EQU|DEFINE|END)\\s/,null],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // Any word including labels that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[!-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['apollo', 'agc', 'aea']);\n</p>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2009 Onno Hommes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the AGC/AEA Assembly Language as described\n * at http://virtualagc.googlecode.com\n * <p>\n * This file could be used by goodle code to allow syntax highlight for\n * Virtual AGC SVN repository or if you don't want to commonize\n * the header for the agc/aea html assembly listing.\n *\n * @author ohommes@alumni.cmu.edu\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^#[^\\r\\n]*/, null, '#'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'], /^(?:ADS|AD|AUG|BZF|BZMF|CAE|CAF|CA|CCS|COM|CS|DAS|DCA|DCOM|DCS|DDOUBL|DIM|DOUBLE|DTCB|DTCF|DV|DXCH|EDRUPT|EXTEND|INCR|INDEX|NDX|INHINT|LXCH|MASK|MSK|MP|MSU|NOOP|OVSK|QXCH|RAND|READ|RELINT|RESUME|RETURN|ROR|RXOR|SQUARE|SU|TCR|TCAA|OVSK|TCF|TC|TS|WAND|WOR|WRITE|XCH|XLQ|XXALQ|ZL|ZQ|ADD|ADZ|SUB|SUZ|MPY|MPR|MPZ|DVP|COM|ABS|CLA|CLZ|LDQ|STO|STQ|ALS|LLS|LRS|TRA|TSQ|TMI|TOV|AXT|TIX|DLY|INP|OUT)\\s/,null],\n         [PR['PR_TYPE'], /^(?:-?GENADR|=MINUS|2BCADR|VN|BOF|MM|-?2CADR|-?[1-6]DNADR|ADRES|BBCON|[SE]?BANK\\=?|BLOCK|BNKSUM|E?CADR|COUNT\\*?|2?DEC\\*?|-?DNCHAN|-?DNPTR|EQUALS|ERASE|MEMORY|2?OCT|REMADR|SETLOC|SUBRO|ORG|BSS|BES|SYN|EQU|DEFINE|END)\\s/,null],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // Any word including labels that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[!-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['apollo', 'agc', 'aea']);\n</p>"},{"_content":"/**\n * @license Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Clojure.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lisp\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-clj - Clojure\n *\n *\n * I used lang-lisp.js as the basis for this adding the clojure specific\n * keywords and syntax.\n *\n * \"Name\"    = 'Clojure'\n * \"Author\"  = 'Rich Hickey'\n * \"Version\" = '1.2'\n * \"About\"   = 'Clojure is a lisp for the jvm with concurrency primitives and a richer set of types.'\n *\n *\n * I used <a href=\"http://clojure.org/Reference\">Clojure.org Reference</a> as\n * the basis for the reserved word list.\n *\n *\n * @author jwall@google.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // clojure has more paren types than minimal lisp.\n         ['opn',             /^[\\(\\{\\[]+/, null, '([{'],\n         ['clo',             /^[\\)\\}\\]]+/, null, ')]}'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         // clojure has a much larger set of keywords\n         [PR['PR_KEYWORD'],     /^(?:def|if|do|let|quote|var|fn|loop|recur|throw|try|monitor-enter|monitor-exit|defmacro|defn|defn-|macroexpand|macroexpand-1|for|doseq|dosync|dotimes|and|or|when|not|assert|doto|proxy|defstruct|first|rest|cons|defprotocol|deftype|defrecord|reify|defmulti|defmethod|meta|with-meta|ns|in-ns|create-ns|import|intern|refer|alias|namespace|resolve|ref|deref|refset|new|set!|memfn|to-array|into-array|aset|gen-class|reduce|map|filter|find|nil?|empty?|hash-map|hash-set|vec|vector|seq|flatten|reverse|assoc|dissoc|list|list?|disj|get|union|difference|intersection|extend|extend-type|extend-protocol|prn)\\b/, null],\n         [PR['PR_TYPE'], /^:[0-9a-zA-Z\\-]+/]\n        ]),\n    ['clj']);\n","source":"plugins/prettify/lang-clj.js","raw":"/**\n * @license Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Clojure.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lisp\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-clj - Clojure\n *\n *\n * I used lang-lisp.js as the basis for this adding the clojure specific\n * keywords and syntax.\n *\n * \"Name\"    = 'Clojure'\n * \"Author\"  = 'Rich Hickey'\n * \"Version\" = '1.2'\n * \"About\"   = 'Clojure is a lisp for the jvm with concurrency primitives and a richer set of types.'\n *\n *\n * I used <a href=\"http://clojure.org/Reference\">Clojure.org Reference</a> as\n * the basis for the reserved word list.\n *\n *\n * @author jwall@google.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // clojure has more paren types than minimal lisp.\n         ['opn',             /^[\\(\\{\\[]+/, null, '([{'],\n         ['clo',             /^[\\)\\}\\]]+/, null, ')]}'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         // clojure has a much larger set of keywords\n         [PR['PR_KEYWORD'],     /^(?:def|if|do|let|quote|var|fn|loop|recur|throw|try|monitor-enter|monitor-exit|defmacro|defn|defn-|macroexpand|macroexpand-1|for|doseq|dosync|dotimes|and|or|when|not|assert|doto|proxy|defstruct|first|rest|cons|defprotocol|deftype|defrecord|reify|defmulti|defmethod|meta|with-meta|ns|in-ns|create-ns|import|intern|refer|alias|namespace|resolve|ref|deref|refset|new|set!|memfn|to-array|into-array|aset|gen-class|reduce|map|filter|find|nil?|empty?|hash-map|hash-set|vec|vector|seq|flatten|reverse|assoc|dissoc|list|list?|disj|get|union|difference|intersection|extend|extend-type|extend-protocol|prn)\\b/, null],\n         [PR['PR_TYPE'], /^:[0-9a-zA-Z\\-]+/]\n        ]),\n    ['clj']);\n","date":"2019-04-30T08:09:45.664Z","updated":"2019-04-30T08:09:45.664Z","path":"plugins/prettify/lang-clj.js","layout":"false","title":"","comments":1,"_id":"cjxh80elr00146c9v7n3zinjo","content":"/**\n * @license Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Clojure.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lisp\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-clj - Clojure\n *\n *\n * I used lang-lisp.js as the basis for this adding the clojure specific\n * keywords and syntax.\n *\n * \"Name\"    = 'Clojure'\n * \"Author\"  = 'Rich Hickey'\n * \"Version\" = '1.2'\n * \"About\"   = 'Clojure is a lisp for the jvm with concurrency primitives and a richer set of types.'\n *\n *\n * I used <a href=\"http://clojure.org/Reference\" target=\"_blank\" rel=\"noopener\">Clojure.org Reference</a> as\n * the basis for the reserved word list.\n *\n *\n * @author jwall@google.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // clojure has more paren types than minimal lisp.\n         ['opn',             /^[\\(\\{\\[]+/, null, '([{'],\n         ['clo',             /^[\\)\\}\\]]+/, null, ')]}'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         // clojure has a much larger set of keywords\n         [PR['PR_KEYWORD'],     /^(?:def|if|do|let|quote|var|fn|loop|recur|throw|try|monitor-enter|monitor-exit|defmacro|defn|defn-|macroexpand|macroexpand-1|for|doseq|dosync|dotimes|and|or|when|not|assert|doto|proxy|defstruct|first|rest|cons|defprotocol|deftype|defrecord|reify|defmulti|defmethod|meta|with-meta|ns|in-ns|create-ns|import|intern|refer|alias|namespace|resolve|ref|deref|refset|new|set!|memfn|to-array|into-array|aset|gen-class|reduce|map|filter|find|nil?|empty?|hash-map|hash-set|vec|vector|seq|flatten|reverse|assoc|dissoc|list|list?|disj|get|union|difference|intersection|extend|extend-type|extend-protocol|prn)\\b/, null],\n         [PR['PR_TYPE'], /^:[0-9a-zA-Z\\-]+/]\n        ]),\n    ['clj']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Clojure.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lisp\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-clj - Clojure\n *\n *\n * I used lang-lisp.js as the basis for this adding the clojure specific\n * keywords and syntax.\n *\n * \"Name\"    = 'Clojure'\n * \"Author\"  = 'Rich Hickey'\n * \"Version\" = '1.2'\n * \"About\"   = 'Clojure is a lisp for the jvm with concurrency primitives and a richer set of types.'\n *\n *\n * I used <a href=\"http://clojure.org/Reference\" target=\"_blank\" rel=\"noopener\">Clojure.org Reference</a> as\n * the basis for the reserved word list.\n *\n *\n * @author jwall@google.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // clojure has more paren types than minimal lisp.\n         ['opn',             /^[\\(\\{\\[]+/, null, '([{'],\n         ['clo',             /^[\\)\\}\\]]+/, null, ')]}'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         // clojure has a much larger set of keywords\n         [PR['PR_KEYWORD'],     /^(?:def|if|do|let|quote|var|fn|loop|recur|throw|try|monitor-enter|monitor-exit|defmacro|defn|defn-|macroexpand|macroexpand-1|for|doseq|dosync|dotimes|and|or|when|not|assert|doto|proxy|defstruct|first|rest|cons|defprotocol|deftype|defrecord|reify|defmulti|defmethod|meta|with-meta|ns|in-ns|create-ns|import|intern|refer|alias|namespace|resolve|ref|deref|refset|new|set!|memfn|to-array|into-array|aset|gen-class|reduce|map|filter|find|nil?|empty?|hash-map|hash-set|vec|vector|seq|flatten|reverse|assoc|dissoc|list|list?|disj|get|union|difference|intersection|extend|extend-type|extend-protocol|prn)\\b/, null],\n         [PR['PR_TYPE'], /^:[0-9a-zA-Z\\-]+/]\n        ]),\n    ['clj']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2013 Andrew Allen\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Erlang.\n *\n * Derived from https://raw.github.com/erlang/otp/dev/lib/compiler/src/core_parse.yrl\n * Modified from Mike Samuel's Haskell plugin for google-code-prettify\n *\n * @author achew22@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         // whitechar    ->    newline | vertab | space | tab | uniWhite\n         // newline      ->    return linefeed | return | linefeed | formfeed\n         [PR['PR_PLAIN'],       /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '],\n         // Single line double-quoted strings.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/,\n          null, '\"'],\n         \n         // Handle atoms\n         [PR['PR_LITERAL'],      /^[a-z][a-zA-Z0-9_]*/],\n         // Handle single quoted atoms\n         [PR['PR_LITERAL'],      /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/,\n          null, \"'\"],\n         \n         // Handle macros. Just to be extra clear on this one, it detects the ?\n         // then uses the regexp to end it so be very careful about matching\n         // all the terminal elements\n         [PR['PR_LITERAL'],      /^\\?[^ \\t\\n({]+/, null, \"?\"],\n\n          \n         \n         // decimal      ->    digit{digit}\n         // octal        ->    octit{octit}\n         // hexadecimal  ->    hexit{hexit}\n         // integer      ->    decimal\n         //               |    0o octal | 0O octal\n         //               |    0x hexadecimal | 0X hexadecimal\n         // float        ->    decimal . decimal [exponent]\n         //               |    decimal exponent\n         // exponent     ->    (e | E) [+ | -] decimal\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i,\n          null, '0123456789']\n        ],\n        [\n         // TODO: catch @declarations inside comments\n\n         // Comments in erlang are started with % and go till a newline\n         [PR['PR_COMMENT'], /^%[^\\n]*/],\n\n         // Catch macros\n         //[PR['PR_TAG'], /?[^( \\n)]+/],\n\n         /**\n          * %% Keywords (atoms are assumed to always be single-quoted).\n          * 'module' 'attributes' 'do' 'let' 'in' 'letrec'\n          * 'apply' 'call' 'primop'\n          * 'case' 'of' 'end' 'when' 'fun' 'try' 'catch' 'receive' 'after'\n          */\n         [PR['PR_KEYWORD'], /^(?:module|attributes|do|let|in|letrec|apply|call|primop|case|of|end|when|fun|try|catch|receive|after|char|integer|float,atom,string,var)\\b/],\n         \n         /**\n          * Catch definitions (usually defined at the top of the file)\n          * Anything that starts -something\n          */\n         [PR['PR_KEYWORD'], /^-[a-z_]+/],\n\n         // Catch variables\n         [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/],\n\n         // matches the symbol production\n         [PR['PR_PUNCTUATION'], /^[.,;]/]\n        ]),\n    ['erlang', 'erl']);\n","source":"plugins/prettify/lang-erlang.js","raw":"/**\n * @license\n * Copyright (C) 2013 Andrew Allen\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Erlang.\n *\n * Derived from https://raw.github.com/erlang/otp/dev/lib/compiler/src/core_parse.yrl\n * Modified from Mike Samuel's Haskell plugin for google-code-prettify\n *\n * @author achew22@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         // whitechar    ->    newline | vertab | space | tab | uniWhite\n         // newline      ->    return linefeed | return | linefeed | formfeed\n         [PR['PR_PLAIN'],       /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '],\n         // Single line double-quoted strings.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/,\n          null, '\"'],\n         \n         // Handle atoms\n         [PR['PR_LITERAL'],      /^[a-z][a-zA-Z0-9_]*/],\n         // Handle single quoted atoms\n         [PR['PR_LITERAL'],      /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/,\n          null, \"'\"],\n         \n         // Handle macros. Just to be extra clear on this one, it detects the ?\n         // then uses the regexp to end it so be very careful about matching\n         // all the terminal elements\n         [PR['PR_LITERAL'],      /^\\?[^ \\t\\n({]+/, null, \"?\"],\n\n          \n         \n         // decimal      ->    digit{digit}\n         // octal        ->    octit{octit}\n         // hexadecimal  ->    hexit{hexit}\n         // integer      ->    decimal\n         //               |    0o octal | 0O octal\n         //               |    0x hexadecimal | 0X hexadecimal\n         // float        ->    decimal . decimal [exponent]\n         //               |    decimal exponent\n         // exponent     ->    (e | E) [+ | -] decimal\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i,\n          null, '0123456789']\n        ],\n        [\n         // TODO: catch @declarations inside comments\n\n         // Comments in erlang are started with % and go till a newline\n         [PR['PR_COMMENT'], /^%[^\\n]*/],\n\n         // Catch macros\n         //[PR['PR_TAG'], /?[^( \\n)]+/],\n\n         /**\n          * %% Keywords (atoms are assumed to always be single-quoted).\n          * 'module' 'attributes' 'do' 'let' 'in' 'letrec'\n          * 'apply' 'call' 'primop'\n          * 'case' 'of' 'end' 'when' 'fun' 'try' 'catch' 'receive' 'after'\n          */\n         [PR['PR_KEYWORD'], /^(?:module|attributes|do|let|in|letrec|apply|call|primop|case|of|end|when|fun|try|catch|receive|after|char|integer|float,atom,string,var)\\b/],\n         \n         /**\n          * Catch definitions (usually defined at the top of the file)\n          * Anything that starts -something\n          */\n         [PR['PR_KEYWORD'], /^-[a-z_]+/],\n\n         // Catch variables\n         [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/],\n\n         // matches the symbol production\n         [PR['PR_PUNCTUATION'], /^[.,;]/]\n        ]),\n    ['erlang', 'erl']);\n","date":"2019-04-30T08:09:45.658Z","updated":"2019-04-30T08:09:45.658Z","path":"plugins/prettify/lang-erlang.js","layout":"false","title":"","comments":1,"_id":"cjxh80els00156c9vimj7g28m","content":"/**\n * @license\n * Copyright (C) 2013 Andrew Allen\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Erlang.\n *\n * Derived from https://raw.github.com/erlang/otp/dev/lib/compiler/src/core_parse.yrl\n * Modified from Mike Samuel's Haskell plugin for google-code-prettify\n *\n * @author achew22@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         // whitechar    ->    newline | vertab | space | tab | uniWhite\n         // newline      ->    return linefeed | return | linefeed | formfeed\n         [PR['PR_PLAIN'],       /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '],\n         // Single line double-quoted strings.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/,\n          null, '\"'],\n         \n         // Handle atoms\n         [PR['PR_LITERAL'],      /^[a-z][a-zA-Z0-9_]*/],\n         // Handle single quoted atoms\n         [PR['PR_LITERAL'],      /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/,\n          null, \"'\"],\n         \n         // Handle macros. Just to be extra clear on this one, it detects the ?\n         // then uses the regexp to end it so be very careful about matching\n         // all the terminal elements\n         [PR['PR_LITERAL'],      /^\\?[^ \\t\\n({]+/, null, \"?\"],\n\n          \n         \n         // decimal      ->    digit{digit}\n         // octal        ->    octit{octit}\n         // hexadecimal  ->    hexit{hexit}\n         // integer      ->    decimal\n         //               |    0o octal | 0O octal\n         //               |    0x hexadecimal | 0X hexadecimal\n         // float        ->    decimal . decimal [exponent]\n         //               |    decimal exponent\n         // exponent     ->    (e | E) [+ | -] decimal\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i,\n          null, '0123456789']\n        ],\n        [\n         // TODO: catch @declarations inside comments\n\n         // Comments in erlang are started with % and go till a newline\n         [PR['PR_COMMENT'], /^%[^\\n]*/],\n\n         // Catch macros\n         //[PR['PR_TAG'], /?[^( \\n)]+/],\n\n         /**\n          * %% Keywords (atoms are assumed to always be single-quoted).\n          * 'module' 'attributes' 'do' 'let' 'in' 'letrec'\n          * 'apply' 'call' 'primop'\n          * 'case' 'of' 'end' 'when' 'fun' 'try' 'catch' 'receive' 'after'\n          */\n         [PR['PR_KEYWORD'], /^(?:module|attributes|do|let|in|letrec|apply|call|primop|case|of|end|when|fun|try|catch|receive|after|char|integer|float,atom,string,var)\\b/],\n         \n         /**\n          * Catch definitions (usually defined at the top of the file)\n          * Anything that starts -something\n          */\n         [PR['PR_KEYWORD'], /^-[a-z_]+/],\n\n         // Catch variables\n         [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/],\n\n         // matches the symbol production\n         [PR['PR_PUNCTUATION'], /^[.,;]/]\n        ]),\n    ['erlang', 'erl']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2013 Andrew Allen\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Erlang.\n *\n * Derived from https://raw.github.com/erlang/otp/dev/lib/compiler/src/core_parse.yrl\n * Modified from Mike Samuel's Haskell plugin for google-code-prettify\n *\n * @author achew22@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         // whitechar    ->    newline | vertab | space | tab | uniWhite\n         // newline      ->    return linefeed | return | linefeed | formfeed\n         [PR['PR_PLAIN'],       /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '],\n         // Single line double-quoted strings.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/,\n          null, '\"'],\n         \n         // Handle atoms\n         [PR['PR_LITERAL'],      /^[a-z][a-zA-Z0-9_]*/],\n         // Handle single quoted atoms\n         [PR['PR_LITERAL'],      /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/,\n          null, \"'\"],\n         \n         // Handle macros. Just to be extra clear on this one, it detects the ?\n         // then uses the regexp to end it so be very careful about matching\n         // all the terminal elements\n         [PR['PR_LITERAL'],      /^\\?[^ \\t\\n({]+/, null, \"?\"],\n\n          \n         \n         // decimal      ->    digit{digit}\n         // octal        ->    octit{octit}\n         // hexadecimal  ->    hexit{hexit}\n         // integer      ->    decimal\n         //               |    0o octal | 0O octal\n         //               |    0x hexadecimal | 0X hexadecimal\n         // float        ->    decimal . decimal [exponent]\n         //               |    decimal exponent\n         // exponent     ->    (e | E) [+ | -] decimal\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i,\n          null, '0123456789']\n        ],\n        [\n         // TODO: catch @declarations inside comments\n\n         // Comments in erlang are started with % and go till a newline\n         [PR['PR_COMMENT'], /^%[^\\n]*/],\n\n         // Catch macros\n         //[PR['PR_TAG'], /?[^( \\n)]+/],\n\n         /**\n          * %% Keywords (atoms are assumed to always be single-quoted).\n          * 'module' 'attributes' 'do' 'let' 'in' 'letrec'\n          * 'apply' 'call' 'primop'\n          * 'case' 'of' 'end' 'when' 'fun' 'try' 'catch' 'receive' 'after'\n          */\n         [PR['PR_KEYWORD'], /^(?:module|attributes|do|let|in|letrec|apply|call|primop|case|of|end|when|fun|try|catch|receive|after|char|integer|float,atom,string,var)\\b/],\n         \n         /**\n          * Catch definitions (usually defined at the top of the file)\n          * Anything that starts -something\n          */\n         [PR['PR_KEYWORD'], /^-[a-z_]+/],\n\n         // Catch variables\n         [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/],\n\n         // matches the symbol production\n         [PR['PR_PUNCTUATION'], /^[.,;]/]\n        ]),\n    ['erlang', 'erl']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler Dart.\n * Loosely structured based on the DartLexer in Pygments: http://pygments.org/.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-dart\">(Dart code)</pre>\n *\n * @author armstrong.timothy@gmail.com\n */\n\nPR['registerLangHandler'](\n  PR['createSimpleLexer'](\n    [\n      // Whitespace.\n      [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0']\n    ],\n    [\n      // Script tag.\n      [PR['PR_COMMENT'], /^#!(?:.*)/],\n\n      // `import`, `library`, `part of`, `part`, `as`, `show`, and `hide`\n      // keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:import|library|part of|part|as|show|hide)\\b/i],\n\n      // Single-line comments.\n      [PR['PR_COMMENT'], /^\\/\\/(?:.*)/],\n\n      // Multiline comments.\n      [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//], // */\n\n      // `class` and `interface` keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:class|interface)\\b/i],\n\n      // General keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:assert|async|await|break|case|catch|continue|default|do|else|finally|for|if|in|is|new|return|super|switch|sync|this|throw|try|while)\\b/i],\n\n      // Declaration keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:abstract|const|extends|factory|final|get|implements|native|operator|set|static|typedef|var)\\b/i],\n\n      // Keywords for types.\n      [PR['PR_TYPE'], /^\\b(?:bool|double|Dynamic|int|num|Object|String|void)\\b/i],\n\n      // Keywords for constants.\n      [PR['PR_KEYWORD'], /^\\b(?:false|null|true)\\b/i],\n\n      // Multiline strings, single- and double-quoted.\n      [PR['PR_STRING'], /^r?[\\']{3}[\\s|\\S]*?[^\\\\][\\']{3}/],\n      [PR['PR_STRING'], /^r?[\\\"]{3}[\\s|\\S]*?[^\\\\][\\\"]{3}/],\n\n      // Normal and raw strings, single- and double-quoted.\n      [PR['PR_STRING'], /^r?\\'(\\'|(?:[^\\n\\r\\f])*?[^\\\\]\\')/],\n      [PR['PR_STRING'], /^r?\\\"(\\\"|(?:[^\\n\\r\\f])*?[^\\\\]\\\")/],\n\n      // Types are capitalized by convention.\n      [PR['PR_TYPE'], /^[A-Z]\\w*/],\n\n      // Identifiers.\n      [PR['PR_PLAIN'], /^[a-z_$][a-z0-9_]*/i],\n\n      // Operators.\n      [PR['PR_PUNCTUATION'], /^[~!%^&*+=|?:<>/-]/],\n\n      // Hex numbers.\n      [PR['PR_LITERAL'], /^\\b0x[0-9a-f]+/i],\n\n      // Decimal numbers.\n      [PR['PR_LITERAL'], /^\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i],\n      [PR['PR_LITERAL'], /^\\b\\.\\d+(?:e[+-]?\\d+)?/i],\n\n      // Punctuation.\n      [PR['PR_PUNCTUATION'], /^[(){}\\[\\],.;]/]\n    ]),\n  ['dart']);\n","source":"plugins/prettify/lang-dart.js","raw":"/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler Dart.\n * Loosely structured based on the DartLexer in Pygments: http://pygments.org/.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-dart\">(Dart code)</pre>\n *\n * @author armstrong.timothy@gmail.com\n */\n\nPR['registerLangHandler'](\n  PR['createSimpleLexer'](\n    [\n      // Whitespace.\n      [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0']\n    ],\n    [\n      // Script tag.\n      [PR['PR_COMMENT'], /^#!(?:.*)/],\n\n      // `import`, `library`, `part of`, `part`, `as`, `show`, and `hide`\n      // keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:import|library|part of|part|as|show|hide)\\b/i],\n\n      // Single-line comments.\n      [PR['PR_COMMENT'], /^\\/\\/(?:.*)/],\n\n      // Multiline comments.\n      [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//], // */\n\n      // `class` and `interface` keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:class|interface)\\b/i],\n\n      // General keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:assert|async|await|break|case|catch|continue|default|do|else|finally|for|if|in|is|new|return|super|switch|sync|this|throw|try|while)\\b/i],\n\n      // Declaration keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:abstract|const|extends|factory|final|get|implements|native|operator|set|static|typedef|var)\\b/i],\n\n      // Keywords for types.\n      [PR['PR_TYPE'], /^\\b(?:bool|double|Dynamic|int|num|Object|String|void)\\b/i],\n\n      // Keywords for constants.\n      [PR['PR_KEYWORD'], /^\\b(?:false|null|true)\\b/i],\n\n      // Multiline strings, single- and double-quoted.\n      [PR['PR_STRING'], /^r?[\\']{3}[\\s|\\S]*?[^\\\\][\\']{3}/],\n      [PR['PR_STRING'], /^r?[\\\"]{3}[\\s|\\S]*?[^\\\\][\\\"]{3}/],\n\n      // Normal and raw strings, single- and double-quoted.\n      [PR['PR_STRING'], /^r?\\'(\\'|(?:[^\\n\\r\\f])*?[^\\\\]\\')/],\n      [PR['PR_STRING'], /^r?\\\"(\\\"|(?:[^\\n\\r\\f])*?[^\\\\]\\\")/],\n\n      // Types are capitalized by convention.\n      [PR['PR_TYPE'], /^[A-Z]\\w*/],\n\n      // Identifiers.\n      [PR['PR_PLAIN'], /^[a-z_$][a-z0-9_]*/i],\n\n      // Operators.\n      [PR['PR_PUNCTUATION'], /^[~!%^&*+=|?:<>/-]/],\n\n      // Hex numbers.\n      [PR['PR_LITERAL'], /^\\b0x[0-9a-f]+/i],\n\n      // Decimal numbers.\n      [PR['PR_LITERAL'], /^\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i],\n      [PR['PR_LITERAL'], /^\\b\\.\\d+(?:e[+-]?\\d+)?/i],\n\n      // Punctuation.\n      [PR['PR_PUNCTUATION'], /^[(){}\\[\\],.;]/]\n    ]),\n  ['dart']);\n","date":"2019-04-30T08:09:45.645Z","updated":"2019-04-30T08:09:45.645Z","path":"plugins/prettify/lang-dart.js","layout":"false","title":"","comments":1,"_id":"cjxh80els00166c9vg3k2rqzr","content":"/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler Dart.\n * Loosely structured based on the DartLexer in Pygments: http://pygments.org/.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-dart\">(Dart code)</pre>\n *\n * @author armstrong.timothy@gmail.com\n */\n\nPR['registerLangHandler'](\n  PR['createSimpleLexer'](\n    [\n      // Whitespace.\n      [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0']\n    ],\n    [\n      // Script tag.\n      [PR['PR_COMMENT'], /^#!(?:.*)/],\n\n      // `import`, `library`, `part of`, `part`, `as`, `show`, and `hide`\n      // keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:import|library|part of|part|as|show|hide)\\b/i],\n\n      // Single-line comments.\n      [PR['PR_COMMENT'], /^\\/\\/(?:.*)/],\n\n      // Multiline comments.\n      [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//], // */\n\n      // `class` and `interface` keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:class|interface)\\b/i],\n\n      // General keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:assert|async|await|break|case|catch|continue|default|do|else|finally|for|if|in|is|new|return|super|switch|sync|this|throw|try|while)\\b/i],\n\n      // Declaration keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:abstract|const|extends|factory|final|get|implements|native|operator|set|static|typedef|var)\\b/i],\n\n      // Keywords for types.\n      [PR['PR_TYPE'], /^\\b(?:bool|double|Dynamic|int|num|Object|String|void)\\b/i],\n\n      // Keywords for constants.\n      [PR['PR_KEYWORD'], /^\\b(?:false|null|true)\\b/i],\n\n      // Multiline strings, single- and double-quoted.\n      [PR['PR_STRING'], /^r?[\\']{3}[\\s|\\S]*?[^\\\\][\\']{3}/],\n      [PR['PR_STRING'], /^r?[\\\"]{3}[\\s|\\S]*?[^\\\\][\\\"]{3}/],\n\n      // Normal and raw strings, single- and double-quoted.\n      [PR['PR_STRING'], /^r?\\'(\\'|(?:[^\\n\\r\\f])*?[^\\\\]\\')/],\n      [PR['PR_STRING'], /^r?\\\"(\\\"|(?:[^\\n\\r\\f])*?[^\\\\]\\\")/],\n\n      // Types are capitalized by convention.\n      [PR['PR_TYPE'], /^[A-Z]\\w*/],\n\n      // Identifiers.\n      [PR['PR_PLAIN'], /^[a-z_$][a-z0-9_]*/i],\n\n      // Operators.\n      [PR['PR_PUNCTUATION'], /^[~!%^&*+=|?:<>/-]/],\n\n      // Hex numbers.\n      [PR['PR_LITERAL'], /^\\b0x[0-9a-f]+/i],\n\n      // Decimal numbers.\n      [PR['PR_LITERAL'], /^\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i],\n      [PR['PR_LITERAL'], /^\\b\\.\\d+(?:e[+-]?\\d+)?/i],\n\n      // Punctuation.\n      [PR['PR_PUNCTUATION'], /^[(){}\\[\\],.;]/]\n    ]),\n  ['dart']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler Dart.\n * Loosely structured based on the DartLexer in Pygments: http://pygments.org/.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-dart\">(Dart code)</pre>\n *\n * @author armstrong.timothy@gmail.com\n */\n\nPR['registerLangHandler'](\n  PR['createSimpleLexer'](\n    [\n      // Whitespace.\n      [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0']\n    ],\n    [\n      // Script tag.\n      [PR['PR_COMMENT'], /^#!(?:.*)/],\n\n      // `import`, `library`, `part of`, `part`, `as`, `show`, and `hide`\n      // keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:import|library|part of|part|as|show|hide)\\b/i],\n\n      // Single-line comments.\n      [PR['PR_COMMENT'], /^\\/\\/(?:.*)/],\n\n      // Multiline comments.\n      [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//], // */\n\n      // `class` and `interface` keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:class|interface)\\b/i],\n\n      // General keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:assert|async|await|break|case|catch|continue|default|do|else|finally|for|if|in|is|new|return|super|switch|sync|this|throw|try|while)\\b/i],\n\n      // Declaration keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:abstract|const|extends|factory|final|get|implements|native|operator|set|static|typedef|var)\\b/i],\n\n      // Keywords for types.\n      [PR['PR_TYPE'], /^\\b(?:bool|double|Dynamic|int|num|Object|String|void)\\b/i],\n\n      // Keywords for constants.\n      [PR['PR_KEYWORD'], /^\\b(?:false|null|true)\\b/i],\n\n      // Multiline strings, single- and double-quoted.\n      [PR['PR_STRING'], /^r?[\\']{3}[\\s|\\S]*?[^\\\\][\\']{3}/],\n      [PR['PR_STRING'], /^r?[\\\"]{3}[\\s|\\S]*?[^\\\\][\\\"]{3}/],\n\n      // Normal and raw strings, single- and double-quoted.\n      [PR['PR_STRING'], /^r?\\'(\\'|(?:[^\\n\\r\\f])*?[^\\\\]\\')/],\n      [PR['PR_STRING'], /^r?\\\"(\\\"|(?:[^\\n\\r\\f])*?[^\\\\]\\\")/],\n\n      // Types are capitalized by convention.\n      [PR['PR_TYPE'], /^[A-Z]\\w*/],\n\n      // Identifiers.\n      [PR['PR_PLAIN'], /^[a-z_$][a-z0-9_]*/i],\n\n      // Operators.\n      [PR['PR_PUNCTUATION'], /^[~!%^&*+=|?:<>/-]/],\n\n      // Hex numbers.\n      [PR['PR_LITERAL'], /^\\b0x[0-9a-f]+/i],\n\n      // Decimal numbers.\n      [PR['PR_LITERAL'], /^\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i],\n      [PR['PR_LITERAL'], /^\\b\\.\\d+(?:e[+-]?\\d+)?/i],\n\n      // Punctuation.\n      [PR['PR_PUNCTUATION'], /^[(){}\\[\\],.;]/]\n    ]),\n  ['dart']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2017 Jacek Królikowski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Elixir.\n *\n * @author nietaki@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // # comments\n         [PR['PR_COMMENT'], /^#.*/, null, '#'],\n         // a (possibly multiline) charlist\n         [PR['PR_LITERAL'], /^'(?:[^'\\\\]|\\\\(?:.|\\n|\\r))*'?/, null, '\\''],\n         // @attributes\n         [PR['PR_ATTRIB_NAME'], /^@\\w+/, null, '@'],\n         [PR['PR_PUNCTUATION'], /^[!%&()*+,\\-;<=>?\\[\\\\\\]^{|}]+/, null,\n          '!%&()*+,-;<=>?[\\\\]^{|}'],\n         // Borrowed from lang-erlang.js:\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7](?:[0-7]|_[0-7])*|0x[\\da-fA-F](?:[\\da-fA-F]|_[\\da-fA-F])*|\\d(?:\\d|_\\d)*(?:\\.\\d(?:\\d|_\\d)*)?(?:[eE][+\\-]?\\d(?:\\d|_\\d)*)?)/,\n          null, '0123456789']\n        ],\n        [\n         // the iex> prompt for interactive examples\n         [PR['PR_ATTRIB_NAME'], /^iex(?:\\(\\d+\\))?> /],\n         // special case for binaries, so that they don't get presented like atoms\n         [PR['PR_PUNCTUATION'], /^::/],\n         // atoms - :__a_word or :\"colon followed by a string\"\n         [PR['PR_LITERAL'], /^:(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"?)/],\n         // compile-time information\n         [PR['PR_ATTRIB_NAME'], /^(?:__(?:CALLER|ENV|MODULE|DIR)__)/],\n         // keywords\n         [PR['PR_KEYWORD'],\n          /^(?:alias|case|catch|def(?:delegate|exception|impl|macrop?|module|overridable|p?|protocol|struct)|do|else|end|fn|for|if|in|import|quote|raise|require|rescue|super|throw|try|unless|unquote(?:_splicing)?|use|when|with|yield)\\b/],\n         [PR['PR_LITERAL'], /^(?:true|false|nil)\\b/],\n         // atoms as keyword list keys\n         // NOTE: this does also handle the %{\"I'm an atom\": :foo} case\n         //\n         // Contains negative lookahead to handle <<foo::binary>>\n         [PR['PR_LITERAL'], /^(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"):(?!:)/],\n         // heredoc: triple double-quoted multi-line string.\n         //\n         // NOTE: the opening \"\"\" needs to be followed by a newline\n         [PR['PR_STRING'],\n          /^\"\"\"\\s*(\\r|\\n)+(?:\"\"?(?!\")|[^\\\\\"]|\\\\(?:.|\\n|\\r))*\"{0,3}/],\n         // A double-quoted multi-line string\n         [PR['PR_STRING'],\n          /^\"(?:[^\"\\\\]|\\\\(?:.|\\n|\\r))*\"?(?!\")/],\n         // types\n         [PR['PR_TYPE'], /^[A-Z]\\w*/],\n         // variables not meant to be used or private functions\n         [PR['PR_COMMENT'], /^_\\w*/],\n         // plain: variables, functions, ...\n         [PR['PR_PLAIN'], /^[$a-z]\\w*[\\!\\?]?/],\n         // sigils with the same starting and ending character.\n         // Key part: X(?:[^X\\r\\n\\\\]|\\\\.)+X where X is the sigil character\n         [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\/(?:[^\\/\\r\\n\\\\]|\\\\.)+\\/|\\|(?:[^\\|\\r\\n\\\\]|\\\\.)+\\||\"(?:[^\"\\r\\n\\\\]|\\\\.)+\"|'(?:[^'\\r\\n\\\\]|\\\\.)+')[A-Z]*/i],\n         // sigils with a different starting and ending character.\n         // Key part: X(?:[^Y\\r\\n\\\\]|\\\\.)+Y where X and Y are the starting and ending characters\n         [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\((?:[^\\)\\r\\n\\\\]|\\\\.)+\\)|\\[(?:[^\\]\\r\\n\\\\]|\\\\.)+\\]|\\{(?:[^\\}\\r\\n\\\\]|\\\\.)+\\}|\\<(?:[^\\>\\r\\n\\\\]|\\\\.)+\\>)[A-Z]*/i],\n         [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/|[:~])/]\n        ]),\n    ['ex','exs']);\n","source":"plugins/prettify/lang-ex.js","raw":"/**\n * @license\n * Copyright (C) 2017 Jacek Królikowski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Elixir.\n *\n * @author nietaki@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // # comments\n         [PR['PR_COMMENT'], /^#.*/, null, '#'],\n         // a (possibly multiline) charlist\n         [PR['PR_LITERAL'], /^'(?:[^'\\\\]|\\\\(?:.|\\n|\\r))*'?/, null, '\\''],\n         // @attributes\n         [PR['PR_ATTRIB_NAME'], /^@\\w+/, null, '@'],\n         [PR['PR_PUNCTUATION'], /^[!%&()*+,\\-;<=>?\\[\\\\\\]^{|}]+/, null,\n          '!%&()*+,-;<=>?[\\\\]^{|}'],\n         // Borrowed from lang-erlang.js:\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7](?:[0-7]|_[0-7])*|0x[\\da-fA-F](?:[\\da-fA-F]|_[\\da-fA-F])*|\\d(?:\\d|_\\d)*(?:\\.\\d(?:\\d|_\\d)*)?(?:[eE][+\\-]?\\d(?:\\d|_\\d)*)?)/,\n          null, '0123456789']\n        ],\n        [\n         // the iex> prompt for interactive examples\n         [PR['PR_ATTRIB_NAME'], /^iex(?:\\(\\d+\\))?> /],\n         // special case for binaries, so that they don't get presented like atoms\n         [PR['PR_PUNCTUATION'], /^::/],\n         // atoms - :__a_word or :\"colon followed by a string\"\n         [PR['PR_LITERAL'], /^:(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"?)/],\n         // compile-time information\n         [PR['PR_ATTRIB_NAME'], /^(?:__(?:CALLER|ENV|MODULE|DIR)__)/],\n         // keywords\n         [PR['PR_KEYWORD'],\n          /^(?:alias|case|catch|def(?:delegate|exception|impl|macrop?|module|overridable|p?|protocol|struct)|do|else|end|fn|for|if|in|import|quote|raise|require|rescue|super|throw|try|unless|unquote(?:_splicing)?|use|when|with|yield)\\b/],\n         [PR['PR_LITERAL'], /^(?:true|false|nil)\\b/],\n         // atoms as keyword list keys\n         // NOTE: this does also handle the %{\"I'm an atom\": :foo} case\n         //\n         // Contains negative lookahead to handle <<foo::binary>>\n         [PR['PR_LITERAL'], /^(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"):(?!:)/],\n         // heredoc: triple double-quoted multi-line string.\n         //\n         // NOTE: the opening \"\"\" needs to be followed by a newline\n         [PR['PR_STRING'],\n          /^\"\"\"\\s*(\\r|\\n)+(?:\"\"?(?!\")|[^\\\\\"]|\\\\(?:.|\\n|\\r))*\"{0,3}/],\n         // A double-quoted multi-line string\n         [PR['PR_STRING'],\n          /^\"(?:[^\"\\\\]|\\\\(?:.|\\n|\\r))*\"?(?!\")/],\n         // types\n         [PR['PR_TYPE'], /^[A-Z]\\w*/],\n         // variables not meant to be used or private functions\n         [PR['PR_COMMENT'], /^_\\w*/],\n         // plain: variables, functions, ...\n         [PR['PR_PLAIN'], /^[$a-z]\\w*[\\!\\?]?/],\n         // sigils with the same starting and ending character.\n         // Key part: X(?:[^X\\r\\n\\\\]|\\\\.)+X where X is the sigil character\n         [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\/(?:[^\\/\\r\\n\\\\]|\\\\.)+\\/|\\|(?:[^\\|\\r\\n\\\\]|\\\\.)+\\||\"(?:[^\"\\r\\n\\\\]|\\\\.)+\"|'(?:[^'\\r\\n\\\\]|\\\\.)+')[A-Z]*/i],\n         // sigils with a different starting and ending character.\n         // Key part: X(?:[^Y\\r\\n\\\\]|\\\\.)+Y where X and Y are the starting and ending characters\n         [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\((?:[^\\)\\r\\n\\\\]|\\\\.)+\\)|\\[(?:[^\\]\\r\\n\\\\]|\\\\.)+\\]|\\{(?:[^\\}\\r\\n\\\\]|\\\\.)+\\}|\\<(?:[^\\>\\r\\n\\\\]|\\\\.)+\\>)[A-Z]*/i],\n         [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/|[:~])/]\n        ]),\n    ['ex','exs']);\n","date":"2019-04-30T08:09:45.645Z","updated":"2019-04-30T08:09:45.645Z","path":"plugins/prettify/lang-ex.js","layout":"false","title":"","comments":1,"_id":"cjxh80elt00176c9v5zrnx1yp","content":"/**\n * @license\n * Copyright (C) 2017 Jacek Królikowski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Elixir.\n *\n * @author nietaki@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // # comments\n         [PR['PR_COMMENT'], /^#.*/, null, '#'],\n         // a (possibly multiline) charlist\n         [PR['PR_LITERAL'], /^'(?:[^'\\\\]|\\\\(?:.|\\n|\\r))*'?/, null, '\\''],\n         // @attributes\n         [PR['PR_ATTRIB_NAME'], /^@\\w+/, null, '@'],\n         [PR['PR_PUNCTUATION'], /^[!%&()*+,\\-;<=>?\\[\\\\\\]^{|}]+/, null,\n          '!%&()*+,-;<=>?[\\\\]^{|}'],\n         // Borrowed from lang-erlang.js:\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7](?:[0-7]|_[0-7])*|0x[\\da-fA-F](?:[\\da-fA-F]|_[\\da-fA-F])*|\\d(?:\\d|_\\d)*(?:\\.\\d(?:\\d|_\\d)*)?(?:[eE][+\\-]?\\d(?:\\d|_\\d)*)?)/,\n          null, '0123456789']\n        ],\n        [\n         // the iex> prompt for interactive examples\n         [PR['PR_ATTRIB_NAME'], /^iex(?:\\(\\d+\\))?> /],\n         // special case for binaries, so that they don't get presented like atoms\n         [PR['PR_PUNCTUATION'], /^::/],\n         // atoms - :__a_word or :\"colon followed by a string\"\n         [PR['PR_LITERAL'], /^:(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"?)/],\n         // compile-time information\n         [PR['PR_ATTRIB_NAME'], /^(?:__(?:CALLER|ENV|MODULE|DIR)__)/],\n         // keywords\n         [PR['PR_KEYWORD'],\n          /^(?:alias|case|catch|def(?:delegate|exception|impl|macrop?|module|overridable|p?|protocol|struct)|do|else|end|fn|for|if|in|import|quote|raise|require|rescue|super|throw|try|unless|unquote(?:_splicing)?|use|when|with|yield)\\b/],\n         [PR['PR_LITERAL'], /^(?:true|false|nil)\\b/],\n         // atoms as keyword list keys\n         // NOTE: this does also handle the %{\"I'm an atom\": :foo} case\n         //\n         // Contains negative lookahead to handle <<foo::binary>>\n         [PR['PR_LITERAL'], /^(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"):(?!:)/],\n         // heredoc: triple double-quoted multi-line string.\n         //\n         // NOTE: the opening \"\"\" needs to be followed by a newline\n         [PR['PR_STRING'],\n          /^\"\"\"\\s*(\\r|\\n)+(?:\"\"?(?!\")|[^\\\\\"]|\\\\(?:.|\\n|\\r))*\"{0,3}/],\n         // A double-quoted multi-line string\n         [PR['PR_STRING'],\n          /^\"(?:[^\"\\\\]|\\\\(?:.|\\n|\\r))*\"?(?!\")/],\n         // types\n         [PR['PR_TYPE'], /^[A-Z]\\w*/],\n         // variables not meant to be used or private functions\n         [PR['PR_COMMENT'], /^_\\w*/],\n         // plain: variables, functions, ...\n         [PR['PR_PLAIN'], /^[$a-z]\\w*[\\!\\?]?/],\n         // sigils with the same starting and ending character.\n         // Key part: X(?:[^X\\r\\n\\\\]|\\\\.)+X where X is the sigil character\n         [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\/(?:[^\\/\\r\\n\\\\]|\\\\.)+\\/|\\|(?:[^\\|\\r\\n\\\\]|\\\\.)+\\||\"(?:[^\"\\r\\n\\\\]|\\\\.)+\"|'(?:[^'\\r\\n\\\\]|\\\\.)+')[A-Z]*/i],\n         // sigils with a different starting and ending character.\n         // Key part: X(?:[^Y\\r\\n\\\\]|\\\\.)+Y where X and Y are the starting and ending characters\n         [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\((?:[^\\)\\r\\n\\\\]|\\\\.)+\\)|\\[(?:[^\\]\\r\\n\\\\]|\\\\.)+\\]|\\{(?:[^\\}\\r\\n\\\\]|\\\\.)+\\}|\\<(?:[^\\>\\r\\n\\\\]|\\\\.)+\\>)[A-Z]*/i],\n         [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/|[:~])/]\n        ]),\n    ['ex','exs']);\n</(?:[^\\></foo::binary></=></=>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2017 Jacek Królikowski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Elixir.\n *\n * @author nietaki@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // # comments\n         [PR['PR_COMMENT'], /^#.*/, null, '#'],\n         // a (possibly multiline) charlist\n         [PR['PR_LITERAL'], /^'(?:[^'\\\\]|\\\\(?:.|\\n|\\r))*'?/, null, '\\''],\n         // @attributes\n         [PR['PR_ATTRIB_NAME'], /^@\\w+/, null, '@'],\n         [PR['PR_PUNCTUATION'], /^[!%&()*+,\\-;<=>?\\[\\\\\\]^{|}]+/, null,\n          '!%&()*+,-;<=>?[\\\\]^{|}'],\n         // Borrowed from lang-erlang.js:\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7](?:[0-7]|_[0-7])*|0x[\\da-fA-F](?:[\\da-fA-F]|_[\\da-fA-F])*|\\d(?:\\d|_\\d)*(?:\\.\\d(?:\\d|_\\d)*)?(?:[eE][+\\-]?\\d(?:\\d|_\\d)*)?)/,\n          null, '0123456789']\n        ],\n        [\n         // the iex> prompt for interactive examples\n         [PR['PR_ATTRIB_NAME'], /^iex(?:\\(\\d+\\))?> /],\n         // special case for binaries, so that they don't get presented like atoms\n         [PR['PR_PUNCTUATION'], /^::/],\n         // atoms - :__a_word or :\"colon followed by a string\"\n         [PR['PR_LITERAL'], /^:(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"?)/],\n         // compile-time information\n         [PR['PR_ATTRIB_NAME'], /^(?:__(?:CALLER|ENV|MODULE|DIR)__)/],\n         // keywords\n         [PR['PR_KEYWORD'],\n          /^(?:alias|case|catch|def(?:delegate|exception|impl|macrop?|module|overridable|p?|protocol|struct)|do|else|end|fn|for|if|in|import|quote|raise|require|rescue|super|throw|try|unless|unquote(?:_splicing)?|use|when|with|yield)\\b/],\n         [PR['PR_LITERAL'], /^(?:true|false|nil)\\b/],\n         // atoms as keyword list keys\n         // NOTE: this does also handle the %{\"I'm an atom\": :foo} case\n         //\n         // Contains negative lookahead to handle <<foo::binary>>\n         [PR['PR_LITERAL'], /^(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"):(?!:)/],\n         // heredoc: triple double-quoted multi-line string.\n         //\n         // NOTE: the opening \"\"\" needs to be followed by a newline\n         [PR['PR_STRING'],\n          /^\"\"\"\\s*(\\r|\\n)+(?:\"\"?(?!\")|[^\\\\\"]|\\\\(?:.|\\n|\\r))*\"{0,3}/],\n         // A double-quoted multi-line string\n         [PR['PR_STRING'],\n          /^\"(?:[^\"\\\\]|\\\\(?:.|\\n|\\r))*\"?(?!\")/],\n         // types\n         [PR['PR_TYPE'], /^[A-Z]\\w*/],\n         // variables not meant to be used or private functions\n         [PR['PR_COMMENT'], /^_\\w*/],\n         // plain: variables, functions, ...\n         [PR['PR_PLAIN'], /^[$a-z]\\w*[\\!\\?]?/],\n         // sigils with the same starting and ending character.\n         // Key part: X(?:[^X\\r\\n\\\\]|\\\\.)+X where X is the sigil character\n         [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\/(?:[^\\/\\r\\n\\\\]|\\\\.)+\\/|\\|(?:[^\\|\\r\\n\\\\]|\\\\.)+\\||\"(?:[^\"\\r\\n\\\\]|\\\\.)+\"|'(?:[^'\\r\\n\\\\]|\\\\.)+')[A-Z]*/i],\n         // sigils with a different starting and ending character.\n         // Key part: X(?:[^Y\\r\\n\\\\]|\\\\.)+Y where X and Y are the starting and ending characters\n         [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\((?:[^\\)\\r\\n\\\\]|\\\\.)+\\)|\\[(?:[^\\]\\r\\n\\\\]|\\\\.)+\\]|\\{(?:[^\\}\\r\\n\\\\]|\\\\.)+\\}|\\<(?:[^\\>\\r\\n\\\\]|\\\\.)+\\>)[A-Z]*/i],\n         [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/|[:~])/]\n        ]),\n    ['ex','exs']);\n</(?:[^\\></foo::binary></=></=>"},{"_content":"/**\n * @license\n * Copyright (C) 2010 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the Go language..\n * <p>\n * Based on the lexical grammar at \n * http://golang.org/doc/go_spec.html#Lexical_elements\n * <p>\n * Go uses a minimal style for highlighting so the below does not distinguish\n * strings, keywords, literals, etc. by design.\n * From a discussion with the Go designers:\n * <pre>\n * On Thursday, July 22, 2010, Mike Samuel <...> wrote:\n * > On Thu, Jul 22, 2010, Rob 'Commander' Pike <...> wrote:\n * >> Personally, I would vote for the subdued style godoc presents at http://golang.org\n * >>\n * >> Not as fancy as some like, but a case can be made it's the official style.\n * >> If people want more colors, I wouldn't fight too hard, in the interest of\n * >> encouragement through familiarity, but even then I would ask to shy away\n * >> from technicolor starbursts.\n * >\n * > Like http://golang.org/pkg/go/scanner/ where comments are blue and all\n * > other content is black?  I can do that.\n * </pre>\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace is made up of spaces, tabs and newline characters.\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // Not escaped as a string.  See note on minimalism above.\n         [PR['PR_PLAIN'],       /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])+(?:\\'|$)|`[^`]*(?:`|$))/, null, '\"\\'']\n        ],\n        [\n         // Block comments are delimited by /* and */.\n         // Single-line comments begin with // and extend to the end of a line.\n         [PR['PR_COMMENT'],     /^(?:\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\/)/],\n         [PR['PR_PLAIN'],       /^(?:[^\\/\\\"\\'`]|\\/(?![\\/\\*]))+/i]\n        ]),\n    ['go']);\n","source":"plugins/prettify/lang-go.js","raw":"/**\n * @license\n * Copyright (C) 2010 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the Go language..\n * <p>\n * Based on the lexical grammar at \n * http://golang.org/doc/go_spec.html#Lexical_elements\n * <p>\n * Go uses a minimal style for highlighting so the below does not distinguish\n * strings, keywords, literals, etc. by design.\n * From a discussion with the Go designers:\n * <pre>\n * On Thursday, July 22, 2010, Mike Samuel <...> wrote:\n * > On Thu, Jul 22, 2010, Rob 'Commander' Pike <...> wrote:\n * >> Personally, I would vote for the subdued style godoc presents at http://golang.org\n * >>\n * >> Not as fancy as some like, but a case can be made it's the official style.\n * >> If people want more colors, I wouldn't fight too hard, in the interest of\n * >> encouragement through familiarity, but even then I would ask to shy away\n * >> from technicolor starbursts.\n * >\n * > Like http://golang.org/pkg/go/scanner/ where comments are blue and all\n * > other content is black?  I can do that.\n * </pre>\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace is made up of spaces, tabs and newline characters.\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // Not escaped as a string.  See note on minimalism above.\n         [PR['PR_PLAIN'],       /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])+(?:\\'|$)|`[^`]*(?:`|$))/, null, '\"\\'']\n        ],\n        [\n         // Block comments are delimited by /* and */.\n         // Single-line comments begin with // and extend to the end of a line.\n         [PR['PR_COMMENT'],     /^(?:\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\/)/],\n         [PR['PR_PLAIN'],       /^(?:[^\\/\\\"\\'`]|\\/(?![\\/\\*]))+/i]\n        ]),\n    ['go']);\n","date":"2019-04-30T08:09:45.638Z","updated":"2019-04-30T08:09:45.638Z","path":"plugins/prettify/lang-go.js","layout":"false","title":"","comments":1,"_id":"cjxh80elt00186c9vjab374c7","content":"/**\n * @license\n * Copyright (C) 2010 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the Go language..\n * <p>\n * Based on the lexical grammar at \n * http://golang.org/doc/go_spec.html#Lexical_elements\n * </p><p>\n * Go uses a minimal style for highlighting so the below does not distinguish\n * strings, keywords, literals, etc. by design.\n * From a discussion with the Go designers:\n * <pre>\n * On Thursday, July 22, 2010, Mike Samuel <...> wrote:\n * > On Thu, Jul 22, 2010, Rob 'Commander' Pike <...> wrote:\n * >> Personally, I would vote for the subdued style godoc presents at http://golang.org\n * >>\n * >> Not as fancy as some like, but a case can be made it's the official style.\n * >> If people want more colors, I wouldn't fight too hard, in the interest of\n * >> encouragement through familiarity, but even then I would ask to shy away\n * >> from technicolor starbursts.\n * >\n * > Like http://golang.org/pkg/go/scanner/ where comments are blue and all\n * > other content is black?  I can do that.\n * </...></...></pre>\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace is made up of spaces, tabs and newline characters.\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // Not escaped as a string.  See note on minimalism above.\n         [PR['PR_PLAIN'],       /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])+(?:\\'|$)|`[^`]*(?:`|$))/, null, '\"\\'']\n        ],\n        [\n         // Block comments are delimited by /* and */.\n         // Single-line comments begin with // and extend to the end of a line.\n         [PR['PR_COMMENT'],     /^(?:\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\/)/],\n         [PR['PR_PLAIN'],       /^(?:[^\\/\\\"\\'`]|\\/(?![\\/\\*]))+/i]\n        ]),\n    ['go']);\n</p>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2010 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the Go language..\n * <p>\n * Based on the lexical grammar at \n * http://golang.org/doc/go_spec.html#Lexical_elements\n * </p><p>\n * Go uses a minimal style for highlighting so the below does not distinguish\n * strings, keywords, literals, etc. by design.\n * From a discussion with the Go designers:\n * <pre>\n * On Thursday, July 22, 2010, Mike Samuel <...> wrote:\n * > On Thu, Jul 22, 2010, Rob 'Commander' Pike <...> wrote:\n * >> Personally, I would vote for the subdued style godoc presents at http://golang.org\n * >>\n * >> Not as fancy as some like, but a case can be made it's the official style.\n * >> If people want more colors, I wouldn't fight too hard, in the interest of\n * >> encouragement through familiarity, but even then I would ask to shy away\n * >> from technicolor starbursts.\n * >\n * > Like http://golang.org/pkg/go/scanner/ where comments are blue and all\n * > other content is black?  I can do that.\n * </...></...></pre>\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace is made up of spaces, tabs and newline characters.\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // Not escaped as a string.  See note on minimalism above.\n         [PR['PR_PLAIN'],       /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])+(?:\\'|$)|`[^`]*(?:`|$))/, null, '\"\\'']\n        ],\n        [\n         // Block comments are delimited by /* and */.\n         // Single-line comments begin with // and extend to the end of a line.\n         [PR['PR_COMMENT'],     /^(?:\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\/)/],\n         [PR['PR_PLAIN'],       /^(?:[^\\/\\\"\\'`]|\\/(?![\\/\\*]))+/i]\n        ]),\n    ['go']);\n</p>"},{"_content":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Haskell.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-hs\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-cl - Common Lisp\n *     lang-el - Emacs Lisp\n *     lang-lisp - Lisp\n *     lang-scm - Scheme\n *\n *\n * I used http://www.informatik.uni-freiburg.de/~thiemann/haskell/haskell98-report-html/syntax-iso.html\n * as the basis, but ignore the way the ncomment production nests since this\n * makes the lexical grammar irregular.  It might be possible to support\n * ncomments using the lookbehind filter.\n *\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         // whitechar    ->    newline | vertab | space | tab | uniWhite\n         // newline      ->    return linefeed | return | linefeed | formfeed\n         [PR['PR_PLAIN'],       /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '],\n         // Single line double and single-quoted strings.\n         // char         ->    ' (graphic<' | \\> | space | escape<\\&>) '\n         // string       ->    \" {graphic<\" | \\> | space | escape | gap}\"\n         // escape       ->    \\ ( charesc | ascii | decimal | o octal\n         //                        | x hexadecimal )\n         // charesc      ->    a | b | f | n | r | t | v | \\ | \" | ' | &\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/,\n          null, '\"'],\n         [PR['PR_STRING'],      /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])\\'?/,\n          null, \"'\"],\n         // decimal      ->    digit{digit}\n         // octal        ->    octit{octit}\n         // hexadecimal  ->    hexit{hexit}\n         // integer      ->    decimal\n         //               |    0o octal | 0O octal\n         //               |    0x hexadecimal | 0X hexadecimal\n         // float        ->    decimal . decimal [exponent]\n         //               |    decimal exponent\n         // exponent     ->    (e | E) [+ | -] decimal\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i,\n          null, '0123456789']\n        ],\n        [\n         // Haskell does not have a regular lexical grammar due to the nested\n         // ncomment.\n         // comment      ->    dashes [ any<symbol> {any}] newline\n         // ncomment     ->    opencom ANYseq {ncomment ANYseq}closecom\n         // dashes       ->    '--' {'-'}\n         // opencom      ->    '{-'\n         // closecom     ->    '-}'\n         [PR['PR_COMMENT'],     /^(?:(?:--+(?:[^\\r\\n\\x0C]*)?)|(?:\\{-(?:[^-]|-+[^-\\}])*-\\}))/],\n         // reservedid   ->    case | class | data | default | deriving | do\n         //               |    else | if | import | in | infix | infixl | infixr\n         //               |    instance | let | module | newtype | of | then\n         //               |    type | where | _\n         [PR['PR_KEYWORD'],     /^(?:case|class|data|default|deriving|do|else|if|import|in|infix|infixl|infixr|instance|let|module|newtype|of|then|type|where|_)(?=[^a-zA-Z0-9\\']|$)/, null],\n         // qvarid       ->    [ modid . ] varid\n         // qconid       ->    [ modid . ] conid\n         // varid        ->    (small {small | large | digit | ' })<reservedid>\n         // conid        ->    large {small | large | digit | ' }\n         // modid        ->    conid\n         // small        ->    ascSmall | uniSmall | _\n         // ascSmall     ->    a | b | ... | z\n         // uniSmall     ->    any Unicode lowercase letter\n         // large        ->    ascLarge | uniLarge\n         // ascLarge     ->    A | B | ... | Z\n         // uniLarge     ->    any uppercase or titlecase Unicode letter\n         [PR['PR_PLAIN'],  /^(?:[A-Z][\\w\\']*\\.)*[a-zA-Z][\\w\\']*/],\n         // matches the symbol production\n         [PR['PR_PUNCTUATION'], /^[^\\t\\n\\x0B\\x0C\\r a-zA-Z0-9\\'\\\"]+/]\n        ]),\n    ['hs']);\n","source":"plugins/prettify/lang-hs.js","raw":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Haskell.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-hs\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-cl - Common Lisp\n *     lang-el - Emacs Lisp\n *     lang-lisp - Lisp\n *     lang-scm - Scheme\n *\n *\n * I used http://www.informatik.uni-freiburg.de/~thiemann/haskell/haskell98-report-html/syntax-iso.html\n * as the basis, but ignore the way the ncomment production nests since this\n * makes the lexical grammar irregular.  It might be possible to support\n * ncomments using the lookbehind filter.\n *\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         // whitechar    ->    newline | vertab | space | tab | uniWhite\n         // newline      ->    return linefeed | return | linefeed | formfeed\n         [PR['PR_PLAIN'],       /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '],\n         // Single line double and single-quoted strings.\n         // char         ->    ' (graphic<' | \\> | space | escape<\\&>) '\n         // string       ->    \" {graphic<\" | \\> | space | escape | gap}\"\n         // escape       ->    \\ ( charesc | ascii | decimal | o octal\n         //                        | x hexadecimal )\n         // charesc      ->    a | b | f | n | r | t | v | \\ | \" | ' | &\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/,\n          null, '\"'],\n         [PR['PR_STRING'],      /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])\\'?/,\n          null, \"'\"],\n         // decimal      ->    digit{digit}\n         // octal        ->    octit{octit}\n         // hexadecimal  ->    hexit{hexit}\n         // integer      ->    decimal\n         //               |    0o octal | 0O octal\n         //               |    0x hexadecimal | 0X hexadecimal\n         // float        ->    decimal . decimal [exponent]\n         //               |    decimal exponent\n         // exponent     ->    (e | E) [+ | -] decimal\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i,\n          null, '0123456789']\n        ],\n        [\n         // Haskell does not have a regular lexical grammar due to the nested\n         // ncomment.\n         // comment      ->    dashes [ any<symbol> {any}] newline\n         // ncomment     ->    opencom ANYseq {ncomment ANYseq}closecom\n         // dashes       ->    '--' {'-'}\n         // opencom      ->    '{-'\n         // closecom     ->    '-}'\n         [PR['PR_COMMENT'],     /^(?:(?:--+(?:[^\\r\\n\\x0C]*)?)|(?:\\{-(?:[^-]|-+[^-\\}])*-\\}))/],\n         // reservedid   ->    case | class | data | default | deriving | do\n         //               |    else | if | import | in | infix | infixl | infixr\n         //               |    instance | let | module | newtype | of | then\n         //               |    type | where | _\n         [PR['PR_KEYWORD'],     /^(?:case|class|data|default|deriving|do|else|if|import|in|infix|infixl|infixr|instance|let|module|newtype|of|then|type|where|_)(?=[^a-zA-Z0-9\\']|$)/, null],\n         // qvarid       ->    [ modid . ] varid\n         // qconid       ->    [ modid . ] conid\n         // varid        ->    (small {small | large | digit | ' })<reservedid>\n         // conid        ->    large {small | large | digit | ' }\n         // modid        ->    conid\n         // small        ->    ascSmall | uniSmall | _\n         // ascSmall     ->    a | b | ... | z\n         // uniSmall     ->    any Unicode lowercase letter\n         // large        ->    ascLarge | uniLarge\n         // ascLarge     ->    A | B | ... | Z\n         // uniLarge     ->    any uppercase or titlecase Unicode letter\n         [PR['PR_PLAIN'],  /^(?:[A-Z][\\w\\']*\\.)*[a-zA-Z][\\w\\']*/],\n         // matches the symbol production\n         [PR['PR_PUNCTUATION'], /^[^\\t\\n\\x0B\\x0C\\r a-zA-Z0-9\\'\\\"]+/]\n        ]),\n    ['hs']);\n","date":"2019-04-30T08:09:45.661Z","updated":"2019-04-30T08:09:45.661Z","path":"plugins/prettify/lang-hs.js","layout":"false","title":"","comments":1,"_id":"cjxh80elu00196c9vswb71dfy","content":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Haskell.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-hs\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-cl - Common Lisp\n *     lang-el - Emacs Lisp\n *     lang-lisp - Lisp\n *     lang-scm - Scheme\n *\n *\n * I used http://www.informatik.uni-freiburg.de/~thiemann/haskell/haskell98-report-html/syntax-iso.html\n * as the basis, but ignore the way the ncomment production nests since this\n * makes the lexical grammar irregular.  It might be possible to support\n * ncomments using the lookbehind filter.\n *\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         // whitechar    ->    newline | vertab | space | tab | uniWhite\n         // newline      ->    return linefeed | return | linefeed | formfeed\n         [PR['PR_PLAIN'],       /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '],\n         // Single line double and single-quoted strings.\n         // char         ->    ' (graphic<' | \\> | space | escape<\\&>) '\n         // string       ->    \" {graphic<\" | \\> | space | escape | gap}\"\n         // escape       ->    \\ ( charesc | ascii | decimal | o octal\n         //                        | x hexadecimal )\n         // charesc      ->    a | b | f | n | r | t | v | \\ | \" | ' | &\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/,\n          null, '\"'],\n         [PR['PR_STRING'],      /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])\\'?/,\n          null, \"'\"],\n         // decimal      ->    digit{digit}\n         // octal        ->    octit{octit}\n         // hexadecimal  ->    hexit{hexit}\n         // integer      ->    decimal\n         //               |    0o octal | 0O octal\n         //               |    0x hexadecimal | 0X hexadecimal\n         // float        ->    decimal . decimal [exponent]\n         //               |    decimal exponent\n         // exponent     ->    (e | E) [+ | -] decimal\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i,\n          null, '0123456789']\n        ],\n        [\n         // Haskell does not have a regular lexical grammar due to the nested\n         // ncomment.\n         // comment      ->    dashes [ any<symbol> {any}] newline\n         // ncomment     ->    opencom ANYseq {ncomment ANYseq}closecom\n         // dashes       ->    '--' {'-'}\n         // opencom      ->    '{-'\n         // closecom     ->    '-}'\n         [PR['PR_COMMENT'],     /^(?:(?:--+(?:[^\\r\\n\\x0C]*)?)|(?:\\{-(?:[^-]|-+[^-\\}])*-\\}))/],\n         // reservedid   ->    case | class | data | default | deriving | do\n         //               |    else | if | import | in | infix | infixl | infixr\n         //               |    instance | let | module | newtype | of | then\n         //               |    type | where | _\n         [PR['PR_KEYWORD'],     /^(?:case|class|data|default|deriving|do|else|if|import|in|infix|infixl|infixr|instance|let|module|newtype|of|then|type|where|_)(?=[^a-zA-Z0-9\\']|$)/, null],\n         // qvarid       ->    [ modid . ] varid\n         // qconid       ->    [ modid . ] conid\n         // varid        ->    (small {small | large | digit | ' })<reservedid>\n         // conid        ->    large {small | large | digit | ' }\n         // modid        ->    conid\n         // small        ->    ascSmall | uniSmall | _\n         // ascSmall     ->    a | b | ... | z\n         // uniSmall     ->    any Unicode lowercase letter\n         // large        ->    ascLarge | uniLarge\n         // ascLarge     ->    A | B | ... | Z\n         // uniLarge     ->    any uppercase or titlecase Unicode letter\n         [PR['PR_PLAIN'],  /^(?:[A-Z][\\w\\']*\\.)*[a-zA-Z][\\w\\']*/],\n         // matches the symbol production\n         [PR['PR_PUNCTUATION'], /^[^\\t\\n\\x0B\\x0C\\r a-zA-Z0-9\\'\\\"]+/]\n        ]),\n    ['hs']);\n</reservedid></symbol></\"></\\&></'>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Haskell.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-hs\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-cl - Common Lisp\n *     lang-el - Emacs Lisp\n *     lang-lisp - Lisp\n *     lang-scm - Scheme\n *\n *\n * I used http://www.informatik.uni-freiburg.de/~thiemann/haskell/haskell98-report-html/syntax-iso.html\n * as the basis, but ignore the way the ncomment production nests since this\n * makes the lexical grammar irregular.  It might be possible to support\n * ncomments using the lookbehind filter.\n *\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         // whitechar    ->    newline | vertab | space | tab | uniWhite\n         // newline      ->    return linefeed | return | linefeed | formfeed\n         [PR['PR_PLAIN'],       /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '],\n         // Single line double and single-quoted strings.\n         // char         ->    ' (graphic<' | \\> | space | escape<\\&>) '\n         // string       ->    \" {graphic<\" | \\> | space | escape | gap}\"\n         // escape       ->    \\ ( charesc | ascii | decimal | o octal\n         //                        | x hexadecimal )\n         // charesc      ->    a | b | f | n | r | t | v | \\ | \" | ' | &\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/,\n          null, '\"'],\n         [PR['PR_STRING'],      /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])\\'?/,\n          null, \"'\"],\n         // decimal      ->    digit{digit}\n         // octal        ->    octit{octit}\n         // hexadecimal  ->    hexit{hexit}\n         // integer      ->    decimal\n         //               |    0o octal | 0O octal\n         //               |    0x hexadecimal | 0X hexadecimal\n         // float        ->    decimal . decimal [exponent]\n         //               |    decimal exponent\n         // exponent     ->    (e | E) [+ | -] decimal\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i,\n          null, '0123456789']\n        ],\n        [\n         // Haskell does not have a regular lexical grammar due to the nested\n         // ncomment.\n         // comment      ->    dashes [ any<symbol> {any}] newline\n         // ncomment     ->    opencom ANYseq {ncomment ANYseq}closecom\n         // dashes       ->    '--' {'-'}\n         // opencom      ->    '{-'\n         // closecom     ->    '-}'\n         [PR['PR_COMMENT'],     /^(?:(?:--+(?:[^\\r\\n\\x0C]*)?)|(?:\\{-(?:[^-]|-+[^-\\}])*-\\}))/],\n         // reservedid   ->    case | class | data | default | deriving | do\n         //               |    else | if | import | in | infix | infixl | infixr\n         //               |    instance | let | module | newtype | of | then\n         //               |    type | where | _\n         [PR['PR_KEYWORD'],     /^(?:case|class|data|default|deriving|do|else|if|import|in|infix|infixl|infixr|instance|let|module|newtype|of|then|type|where|_)(?=[^a-zA-Z0-9\\']|$)/, null],\n         // qvarid       ->    [ modid . ] varid\n         // qconid       ->    [ modid . ] conid\n         // varid        ->    (small {small | large | digit | ' })<reservedid>\n         // conid        ->    large {small | large | digit | ' }\n         // modid        ->    conid\n         // small        ->    ascSmall | uniSmall | _\n         // ascSmall     ->    a | b | ... | z\n         // uniSmall     ->    any Unicode lowercase letter\n         // large        ->    ascLarge | uniLarge\n         // ascLarge     ->    A | B | ... | Z\n         // uniLarge     ->    any uppercase or titlecase Unicode letter\n         [PR['PR_PLAIN'],  /^(?:[A-Z][\\w\\']*\\.)*[a-zA-Z][\\w\\']*/],\n         // matches the symbol production\n         [PR['PR_PUNCTUATION'], /^[^\\t\\n\\x0B\\x0C\\r a-zA-Z0-9\\'\\\"]+/]\n        ]),\n    ['hs']);\n</reservedid></symbol></\"></\\&></'>"},{"_content":"/**\n * @license\n * Copyright (C) 2017 Michał Bączkowski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Kotlin.\n *\n * Limitations:\n * - doesn't support string interpolation (\"$var\")\n * - doesn't support labels if there is no space between the keyword (break@loop, loop@for)\n *\n * @author mibac138@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n            [PR['PR_PUNCTUATION'], /^[.!%&()*+,\\-;<=>?\\[\\\\\\]^{|}:]+/, null, '.!%&()*+,-;<=>?[\\\\]^{|}:']\n        ],\n        [\n            // keywords\n            [PR['PR_KEYWORD'],\n                /^\\b(package|public|protected|private|open|abstract|constructor|final|override|import|for|while|as|typealias|get|set|((data|enum|annotation|sealed) )?class|this|super|val|var|fun|is|in|throw|return|break|continue|(companion )?object|if|try|else|do|when|init|interface|typeof)\\b/],\n            [PR['PR_LITERAL'], /^(?:true|false|null)\\b/],\n            // number literals\n            [PR['PR_LITERAL'], /^(0[xX][0-9a-fA-F_]+L?|0[bB][0-1]+L?|[0-9_.]+([eE]-?[0-9]+)?[fFL]?)/],\n            [PR['PR_TYPE'], /^(\\b[A-Z]+[a-z][a-zA-Z0-9_$@]*|`.*`)/, null],\n            //double slash comments\n            [PR['PR_COMMENT'], /^\\/\\/.*/],\n            //slash star comments and documentation\n            [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/],\n            // char\n            [PR['PR_STRING'], /'.'/],\n            // string\n            [PR['PR_STRING'], /^\"([^\"\\\\]|\\\\[\\s\\S])*\"/],\n            // multiline string\n            [PR['PR_STRING'], /^\"{3}[\\s\\S]*?[^\\\\]\"{3}/],\n            // annotation (and label)\n            [PR['PR_LITERAL'], /^@([a-zA-Z0-9_$@]*|`.*`)/],\n            // label definition\n            [PR['PR_LITERAL'], /^[a-zA-Z0-9_]+@/]\n        ]),\n    ['kotlin']);\n","source":"plugins/prettify/lang-kotlin.js","raw":"/**\n * @license\n * Copyright (C) 2017 Michał Bączkowski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Kotlin.\n *\n * Limitations:\n * - doesn't support string interpolation (\"$var\")\n * - doesn't support labels if there is no space between the keyword (break@loop, loop@for)\n *\n * @author mibac138@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n            [PR['PR_PUNCTUATION'], /^[.!%&()*+,\\-;<=>?\\[\\\\\\]^{|}:]+/, null, '.!%&()*+,-;<=>?[\\\\]^{|}:']\n        ],\n        [\n            // keywords\n            [PR['PR_KEYWORD'],\n                /^\\b(package|public|protected|private|open|abstract|constructor|final|override|import|for|while|as|typealias|get|set|((data|enum|annotation|sealed) )?class|this|super|val|var|fun|is|in|throw|return|break|continue|(companion )?object|if|try|else|do|when|init|interface|typeof)\\b/],\n            [PR['PR_LITERAL'], /^(?:true|false|null)\\b/],\n            // number literals\n            [PR['PR_LITERAL'], /^(0[xX][0-9a-fA-F_]+L?|0[bB][0-1]+L?|[0-9_.]+([eE]-?[0-9]+)?[fFL]?)/],\n            [PR['PR_TYPE'], /^(\\b[A-Z]+[a-z][a-zA-Z0-9_$@]*|`.*`)/, null],\n            //double slash comments\n            [PR['PR_COMMENT'], /^\\/\\/.*/],\n            //slash star comments and documentation\n            [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/],\n            // char\n            [PR['PR_STRING'], /'.'/],\n            // string\n            [PR['PR_STRING'], /^\"([^\"\\\\]|\\\\[\\s\\S])*\"/],\n            // multiline string\n            [PR['PR_STRING'], /^\"{3}[\\s\\S]*?[^\\\\]\"{3}/],\n            // annotation (and label)\n            [PR['PR_LITERAL'], /^@([a-zA-Z0-9_$@]*|`.*`)/],\n            // label definition\n            [PR['PR_LITERAL'], /^[a-zA-Z0-9_]+@/]\n        ]),\n    ['kotlin']);\n","date":"2019-04-30T08:09:45.634Z","updated":"2019-04-30T08:09:45.634Z","path":"plugins/prettify/lang-kotlin.js","layout":"false","title":"","comments":1,"_id":"cjxh80elu001a6c9vyqymfbd1","content":"/**\n * @license\n * Copyright (C) 2017 Michał Bączkowski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Kotlin.\n *\n * Limitations:\n * - doesn't support string interpolation (\"$var\")\n * - doesn't support labels if there is no space between the keyword (break@loop, loop@for)\n *\n * @author mibac138@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n            [PR['PR_PUNCTUATION'], /^[.!%&()*+,\\-;<=>?\\[\\\\\\]^{|}:]+/, null, '.!%&()*+,-;<=>?[\\\\]^{|}:']\n        ],\n        [\n            // keywords\n            [PR['PR_KEYWORD'],\n                /^\\b(package|public|protected|private|open|abstract|constructor|final|override|import|for|while|as|typealias|get|set|((data|enum|annotation|sealed) )?class|this|super|val|var|fun|is|in|throw|return|break|continue|(companion )?object|if|try|else|do|when|init|interface|typeof)\\b/],\n            [PR['PR_LITERAL'], /^(?:true|false|null)\\b/],\n            // number literals\n            [PR['PR_LITERAL'], /^(0[xX][0-9a-fA-F_]+L?|0[bB][0-1]+L?|[0-9_.]+([eE]-?[0-9]+)?[fFL]?)/],\n            [PR['PR_TYPE'], /^(\\b[A-Z]+[a-z][a-zA-Z0-9_$@]*|`.*`)/, null],\n            //double slash comments\n            [PR['PR_COMMENT'], /^\\/\\/.*/],\n            //slash star comments and documentation\n            [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/],\n            // char\n            [PR['PR_STRING'], /'.'/],\n            // string\n            [PR['PR_STRING'], /^\"([^\"\\\\]|\\\\[\\s\\S])*\"/],\n            // multiline string\n            [PR['PR_STRING'], /^\"{3}[\\s\\S]*?[^\\\\]\"{3}/],\n            // annotation (and label)\n            [PR['PR_LITERAL'], /^@([a-zA-Z0-9_$@]*|`.*`)/],\n            // label definition\n            [PR['PR_LITERAL'], /^[a-zA-Z0-9_]+@/]\n        ]),\n    ['kotlin']);\n</=></=>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2017 Michał Bączkowski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Kotlin.\n *\n * Limitations:\n * - doesn't support string interpolation (\"$var\")\n * - doesn't support labels if there is no space between the keyword (break@loop, loop@for)\n *\n * @author mibac138@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n            [PR['PR_PUNCTUATION'], /^[.!%&()*+,\\-;<=>?\\[\\\\\\]^{|}:]+/, null, '.!%&()*+,-;<=>?[\\\\]^{|}:']\n        ],\n        [\n            // keywords\n            [PR['PR_KEYWORD'],\n                /^\\b(package|public|protected|private|open|abstract|constructor|final|override|import|for|while|as|typealias|get|set|((data|enum|annotation|sealed) )?class|this|super|val|var|fun|is|in|throw|return|break|continue|(companion )?object|if|try|else|do|when|init|interface|typeof)\\b/],\n            [PR['PR_LITERAL'], /^(?:true|false|null)\\b/],\n            // number literals\n            [PR['PR_LITERAL'], /^(0[xX][0-9a-fA-F_]+L?|0[bB][0-1]+L?|[0-9_.]+([eE]-?[0-9]+)?[fFL]?)/],\n            [PR['PR_TYPE'], /^(\\b[A-Z]+[a-z][a-zA-Z0-9_$@]*|`.*`)/, null],\n            //double slash comments\n            [PR['PR_COMMENT'], /^\\/\\/.*/],\n            //slash star comments and documentation\n            [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/],\n            // char\n            [PR['PR_STRING'], /'.'/],\n            // string\n            [PR['PR_STRING'], /^\"([^\"\\\\]|\\\\[\\s\\S])*\"/],\n            // multiline string\n            [PR['PR_STRING'], /^\"{3}[\\s\\S]*?[^\\\\]\"{3}/],\n            // annotation (and label)\n            [PR['PR_LITERAL'], /^@([a-zA-Z0-9_$@]*|`.*`)/],\n            // label definition\n            [PR['PR_LITERAL'], /^[a-zA-Z0-9_]+@/]\n        ]),\n    ['kotlin']);\n</=></=>"},{"_content":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Common Lisp and related languages.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lisp\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-cl - Common Lisp\n *     lang-el - Emacs Lisp\n *     lang-lisp - Lisp\n *     lang-scm - Scheme\n *     lang-lsp - FAT 8.3 filename version of lang-lisp.\n *\n *\n * I used http://www.devincook.com/goldparser/doc/meta-language/grammar-LISP.htm\n * as the basis, but added line comments that start with ; and changed the atom\n * production to disallow unquoted semicolons.\n *\n * \"Name\"    = 'LISP'\n * \"Author\"  = 'John McCarthy'\n * \"Version\" = 'Minimal'\n * \"About\"   = 'LISP is an abstract language that organizes ALL'\n *           | 'data around \"lists\".'\n *\n * \"Start Symbol\" = [s-Expression]\n *\n * {Atom Char}   = {Printable} - {Whitespace} - [()\"\\'']\n *\n * Atom = ( {Atom Char} | '\\'{Printable} )+\n *\n * [s-Expression] ::= [Quote] Atom\n *                  | [Quote] '(' [Series] ')'\n *                  | [Quote] '(' [s-Expression] '.' [s-Expression] ')'\n *\n * [Series] ::= [s-Expression] [Series]\n *            |\n *\n * [Quote]  ::= ''      !Quote = do not evaluate\n *            |\n *\n *\n * I used <a href=\"http://gigamonkeys.com/book/\">Practical Common Lisp</a> as\n * the basis for the reserved word list.\n *\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         ['opn',             /^\\(+/, null, '('],\n         ['clo',             /^\\)+/, null, ')'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'],     /^(?:block|c[ad]+r|catch|con[ds]|def(?:ine|un)|do|eq|eql|equal|equalp|eval-when|flet|format|go|if|labels|lambda|let|load-time-value|locally|macrolet|multiple-value-call|nil|progn|progv|quote|require|return-from|setq|symbol-macrolet|t|tagbody|the|throw|unwind)\\b/, null],\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // A word that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['cl', 'el', 'lisp', 'lsp', 'scm', 'ss', 'rkt']);\n","source":"plugins/prettify/lang-lisp.js","raw":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Common Lisp and related languages.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lisp\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-cl - Common Lisp\n *     lang-el - Emacs Lisp\n *     lang-lisp - Lisp\n *     lang-scm - Scheme\n *     lang-lsp - FAT 8.3 filename version of lang-lisp.\n *\n *\n * I used http://www.devincook.com/goldparser/doc/meta-language/grammar-LISP.htm\n * as the basis, but added line comments that start with ; and changed the atom\n * production to disallow unquoted semicolons.\n *\n * \"Name\"    = 'LISP'\n * \"Author\"  = 'John McCarthy'\n * \"Version\" = 'Minimal'\n * \"About\"   = 'LISP is an abstract language that organizes ALL'\n *           | 'data around \"lists\".'\n *\n * \"Start Symbol\" = [s-Expression]\n *\n * {Atom Char}   = {Printable} - {Whitespace} - [()\"\\'']\n *\n * Atom = ( {Atom Char} | '\\'{Printable} )+\n *\n * [s-Expression] ::= [Quote] Atom\n *                  | [Quote] '(' [Series] ')'\n *                  | [Quote] '(' [s-Expression] '.' [s-Expression] ')'\n *\n * [Series] ::= [s-Expression] [Series]\n *            |\n *\n * [Quote]  ::= ''      !Quote = do not evaluate\n *            |\n *\n *\n * I used <a href=\"http://gigamonkeys.com/book/\">Practical Common Lisp</a> as\n * the basis for the reserved word list.\n *\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         ['opn',             /^\\(+/, null, '('],\n         ['clo',             /^\\)+/, null, ')'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'],     /^(?:block|c[ad]+r|catch|con[ds]|def(?:ine|un)|do|eq|eql|equal|equalp|eval-when|flet|format|go|if|labels|lambda|let|load-time-value|locally|macrolet|multiple-value-call|nil|progn|progv|quote|require|return-from|setq|symbol-macrolet|t|tagbody|the|throw|unwind)\\b/, null],\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // A word that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['cl', 'el', 'lisp', 'lsp', 'scm', 'ss', 'rkt']);\n","date":"2019-04-30T08:09:45.656Z","updated":"2019-04-30T08:09:45.656Z","path":"plugins/prettify/lang-lisp.js","layout":"false","title":"","comments":1,"_id":"cjxh80elu001b6c9veg2mwkdp","content":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Common Lisp and related languages.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lisp\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-cl - Common Lisp\n *     lang-el - Emacs Lisp\n *     lang-lisp - Lisp\n *     lang-scm - Scheme\n *     lang-lsp - FAT 8.3 filename version of lang-lisp.\n *\n *\n * I used http://www.devincook.com/goldparser/doc/meta-language/grammar-LISP.htm\n * as the basis, but added line comments that start with ; and changed the atom\n * production to disallow unquoted semicolons.\n *\n * \"Name\"    = 'LISP'\n * \"Author\"  = 'John McCarthy'\n * \"Version\" = 'Minimal'\n * \"About\"   = 'LISP is an abstract language that organizes ALL'\n *           | 'data around \"lists\".'\n *\n * \"Start Symbol\" = [s-Expression]\n *\n * {Atom Char}   = {Printable} - {Whitespace} - [()\"\\'']\n *\n * Atom = ( {Atom Char} | '\\'{Printable} )+\n *\n * [s-Expression] ::= [Quote] Atom\n *                  | [Quote] '(' [Series] ')'\n *                  | [Quote] '(' [s-Expression] '.' [s-Expression] ')'\n *\n * [Series] ::= [s-Expression] [Series]\n *            |\n *\n * [Quote]  ::= ''      !Quote = do not evaluate\n *            |\n *\n *\n * I used <a href=\"http://gigamonkeys.com/book/\" target=\"_blank\" rel=\"noopener\">Practical Common Lisp</a> as\n * the basis for the reserved word list.\n *\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         ['opn',             /^\\(+/, null, '('],\n         ['clo',             /^\\)+/, null, ')'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'],     /^(?:block|c[ad]+r|catch|con[ds]|def(?:ine|un)|do|eq|eql|equal|equalp|eval-when|flet|format|go|if|labels|lambda|let|load-time-value|locally|macrolet|multiple-value-call|nil|progn|progv|quote|require|return-from|setq|symbol-macrolet|t|tagbody|the|throw|unwind)\\b/, null],\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // A word that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['cl', 'el', 'lisp', 'lsp', 'scm', 'ss', 'rkt']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Common Lisp and related languages.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lisp\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-cl - Common Lisp\n *     lang-el - Emacs Lisp\n *     lang-lisp - Lisp\n *     lang-scm - Scheme\n *     lang-lsp - FAT 8.3 filename version of lang-lisp.\n *\n *\n * I used http://www.devincook.com/goldparser/doc/meta-language/grammar-LISP.htm\n * as the basis, but added line comments that start with ; and changed the atom\n * production to disallow unquoted semicolons.\n *\n * \"Name\"    = 'LISP'\n * \"Author\"  = 'John McCarthy'\n * \"Version\" = 'Minimal'\n * \"About\"   = 'LISP is an abstract language that organizes ALL'\n *           | 'data around \"lists\".'\n *\n * \"Start Symbol\" = [s-Expression]\n *\n * {Atom Char}   = {Printable} - {Whitespace} - [()\"\\'']\n *\n * Atom = ( {Atom Char} | '\\'{Printable} )+\n *\n * [s-Expression] ::= [Quote] Atom\n *                  | [Quote] '(' [Series] ')'\n *                  | [Quote] '(' [s-Expression] '.' [s-Expression] ')'\n *\n * [Series] ::= [s-Expression] [Series]\n *            |\n *\n * [Quote]  ::= ''      !Quote = do not evaluate\n *            |\n *\n *\n * I used <a href=\"http://gigamonkeys.com/book/\" target=\"_blank\" rel=\"noopener\">Practical Common Lisp</a> as\n * the basis for the reserved word list.\n *\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         ['opn',             /^\\(+/, null, '('],\n         ['clo',             /^\\)+/, null, ')'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'],     /^(?:block|c[ad]+r|catch|con[ds]|def(?:ine|un)|do|eq|eql|equal|equalp|eval-when|flet|format|go|if|labels|lambda|let|load-time-value|locally|macrolet|multiple-value-call|nil|progn|progv|quote|require|return-from|setq|symbol-macrolet|t|tagbody|the|throw|unwind)\\b/, null],\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // A word that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['cl', 'el', 'lisp', 'lsp', 'scm', 'ss', 'rkt']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2013 Eric Knibbe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Lasso. <http://www.lassosoft.com>\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then enclose your code in an HTML tag like so:\n *      <pre class=\"prettyprint lang-lasso\">[your Lasso code]</pre>\n *\n * @author Eric Knibbe\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          // whitespace\n          [PR['PR_PLAIN'],        /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n          // single quote strings\n          [PR['PR_STRING'],       /^\\'[^\\'\\\\]*(?:\\\\[\\s\\S][^\\'\\\\]*)*(?:\\'|$)/, null, \"'\"],\n          // double quote strings\n          [PR['PR_STRING'],       /^\\\"[^\\\"\\\\]*(?:\\\\[\\s\\S][^\\\"\\\\]*)*(?:\\\"|$)/, null, '\"'],\n          // ticked strings\n          [PR['PR_STRING'],       /^\\`[^\\`]*(?:\\`|$)/, null, '`'],\n          // numeral as integer or hexidecimal\n          [PR['PR_LITERAL'],      /^0x[\\da-f]+|\\d+/i, null, '0123456789'],\n          // local or thread variables, or hashbang\n          [PR['PR_ATTRIB_NAME'],  /^[#$][a-z_][\\w.]*|#\\d+\\b|#![ \\S]+lasso9\\b/i, null, '#$']\n        ],\n        [\n          // square or angle bracket delimiters\n          [PR['PR_TAG'],          /^[[\\]]|<\\?(?:lasso(?:script)?|=)|\\?>|(no_square_brackets|noprocess)\\b/i],\n          // single-line or block comments\n          [PR['PR_COMMENT'],      /^\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\//],\n          // member variables or keyword parameters\n          [PR['PR_ATTRIB_NAME'],  /^-(?!infinity)[a-z_][\\w.]*|\\.\\s*'[a-z_][\\w.]*'|\\.{3}/i],\n          // numeral as decimal or scientific notation\n          [PR['PR_LITERAL'],      /^\\d*\\.\\d+(?:e[-+]?\\d+)?|(infinity|NaN)\\b/i],\n          // tag literals\n          [PR['PR_ATTRIB_VALUE'], /^::\\s*[a-z_][\\w.]*/i],\n          // constants\n          [PR['PR_LITERAL'],      /^(?:true|false|none|minimal|full|all|void|and|or|not|bw|nbw|ew|new|cn|ncn|lt|lte|gt|gte|eq|neq|rx|nrx|ft)\\b/i],\n          // standard type or variable declarations\n          [PR['PR_TYPE'],         /^(?:array|date|decimal|duration|integer|map|pair|string|tag|xml|null|boolean|bytes|keyword|list|locale|queue|set|stack|staticarray|local|var|variable|global|data|self|inherited|currentcapture|givenblock)\\b|^\\.\\.?/i],\n          // container or control keywords\n          [PR['PR_KEYWORD'],      /^(?:cache|database_names|database_schemanames|database_tablenames|define_tag|define_type|email_batch|encode_set|html_comment|handle|handle_error|header|if|inline|iterate|ljax_target|link|link_currentaction|link_currentgroup|link_currentrecord|link_detail|link_firstgroup|link_firstrecord|link_lastgroup|link_lastrecord|link_nextgroup|link_nextrecord|link_prevgroup|link_prevrecord|log|loop|namespace_using|output_none|portal|private|protect|records|referer|referrer|repeating|resultset|rows|search_args|search_arguments|select|sort_args|sort_arguments|thread_atomic|value_list|while|abort|case|else|fail_if|fail_ifnot|fail|if_empty|if_false|if_null|if_true|loop_abort|loop_continue|loop_count|params|params_up|return|return_value|run_children|soap_definetag|soap_lastrequest|soap_lastresponse|tag_name|ascending|average|by|define|descending|do|equals|frozen|group|handle_failure|import|in|into|join|let|match|max|min|on|order|parent|protected|provide|public|require|returnhome|skip|split_thread|sum|take|thread|to|trait|type|where|with|yield|yieldhome)\\b/i],\n          // type, method, or parameter names\n          [PR['PR_PLAIN'],        /^[a-z_][\\w.]*(?:=\\s*(?=\\())?/i],\n          // operators\n          [PR['PR_PUNCTUATION'],  /^:=|[-+*\\/%=<>&|!?\\\\]+/]\n        ]),\n    ['lasso', 'ls', 'lassoscript']);\n","source":"plugins/prettify/lang-lasso.js","raw":"/**\n * @license\n * Copyright (C) 2013 Eric Knibbe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Lasso. <http://www.lassosoft.com>\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then enclose your code in an HTML tag like so:\n *      <pre class=\"prettyprint lang-lasso\">[your Lasso code]</pre>\n *\n * @author Eric Knibbe\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          // whitespace\n          [PR['PR_PLAIN'],        /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n          // single quote strings\n          [PR['PR_STRING'],       /^\\'[^\\'\\\\]*(?:\\\\[\\s\\S][^\\'\\\\]*)*(?:\\'|$)/, null, \"'\"],\n          // double quote strings\n          [PR['PR_STRING'],       /^\\\"[^\\\"\\\\]*(?:\\\\[\\s\\S][^\\\"\\\\]*)*(?:\\\"|$)/, null, '\"'],\n          // ticked strings\n          [PR['PR_STRING'],       /^\\`[^\\`]*(?:\\`|$)/, null, '`'],\n          // numeral as integer or hexidecimal\n          [PR['PR_LITERAL'],      /^0x[\\da-f]+|\\d+/i, null, '0123456789'],\n          // local or thread variables, or hashbang\n          [PR['PR_ATTRIB_NAME'],  /^[#$][a-z_][\\w.]*|#\\d+\\b|#![ \\S]+lasso9\\b/i, null, '#$']\n        ],\n        [\n          // square or angle bracket delimiters\n          [PR['PR_TAG'],          /^[[\\]]|<\\?(?:lasso(?:script)?|=)|\\?>|(no_square_brackets|noprocess)\\b/i],\n          // single-line or block comments\n          [PR['PR_COMMENT'],      /^\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\//],\n          // member variables or keyword parameters\n          [PR['PR_ATTRIB_NAME'],  /^-(?!infinity)[a-z_][\\w.]*|\\.\\s*'[a-z_][\\w.]*'|\\.{3}/i],\n          // numeral as decimal or scientific notation\n          [PR['PR_LITERAL'],      /^\\d*\\.\\d+(?:e[-+]?\\d+)?|(infinity|NaN)\\b/i],\n          // tag literals\n          [PR['PR_ATTRIB_VALUE'], /^::\\s*[a-z_][\\w.]*/i],\n          // constants\n          [PR['PR_LITERAL'],      /^(?:true|false|none|minimal|full|all|void|and|or|not|bw|nbw|ew|new|cn|ncn|lt|lte|gt|gte|eq|neq|rx|nrx|ft)\\b/i],\n          // standard type or variable declarations\n          [PR['PR_TYPE'],         /^(?:array|date|decimal|duration|integer|map|pair|string|tag|xml|null|boolean|bytes|keyword|list|locale|queue|set|stack|staticarray|local|var|variable|global|data|self|inherited|currentcapture|givenblock)\\b|^\\.\\.?/i],\n          // container or control keywords\n          [PR['PR_KEYWORD'],      /^(?:cache|database_names|database_schemanames|database_tablenames|define_tag|define_type|email_batch|encode_set|html_comment|handle|handle_error|header|if|inline|iterate|ljax_target|link|link_currentaction|link_currentgroup|link_currentrecord|link_detail|link_firstgroup|link_firstrecord|link_lastgroup|link_lastrecord|link_nextgroup|link_nextrecord|link_prevgroup|link_prevrecord|log|loop|namespace_using|output_none|portal|private|protect|records|referer|referrer|repeating|resultset|rows|search_args|search_arguments|select|sort_args|sort_arguments|thread_atomic|value_list|while|abort|case|else|fail_if|fail_ifnot|fail|if_empty|if_false|if_null|if_true|loop_abort|loop_continue|loop_count|params|params_up|return|return_value|run_children|soap_definetag|soap_lastrequest|soap_lastresponse|tag_name|ascending|average|by|define|descending|do|equals|frozen|group|handle_failure|import|in|into|join|let|match|max|min|on|order|parent|protected|provide|public|require|returnhome|skip|split_thread|sum|take|thread|to|trait|type|where|with|yield|yieldhome)\\b/i],\n          // type, method, or parameter names\n          [PR['PR_PLAIN'],        /^[a-z_][\\w.]*(?:=\\s*(?=\\())?/i],\n          // operators\n          [PR['PR_PUNCTUATION'],  /^:=|[-+*\\/%=<>&|!?\\\\]+/]\n        ]),\n    ['lasso', 'ls', 'lassoscript']);\n","date":"2019-04-30T08:09:45.649Z","updated":"2019-04-30T08:09:45.649Z","path":"plugins/prettify/lang-lasso.js","layout":"false","title":"","comments":1,"_id":"cjxh80elv001c6c9vpkm4pc79","content":"/**\n * @license\n * Copyright (C) 2013 Eric Knibbe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Lasso. <http: www.lassosoft.com>\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then enclose your code in an HTML tag like so:\n *      <pre class=\"prettyprint lang-lasso\">[your Lasso code]</pre>\n *\n * @author Eric Knibbe\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          // whitespace\n          [PR['PR_PLAIN'],        /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n          // single quote strings\n          [PR['PR_STRING'],       /^\\'[^\\'\\\\]*(?:\\\\[\\s\\S][^\\'\\\\]*)*(?:\\'|$)/, null, \"'\"],\n          // double quote strings\n          [PR['PR_STRING'],       /^\\\"[^\\\"\\\\]*(?:\\\\[\\s\\S][^\\\"\\\\]*)*(?:\\\"|$)/, null, '\"'],\n          // ticked strings\n          [PR['PR_STRING'],       /^\\`[^\\`]*(?:\\`|$)/, null, '`'],\n          // numeral as integer or hexidecimal\n          [PR['PR_LITERAL'],      /^0x[\\da-f]+|\\d+/i, null, '0123456789'],\n          // local or thread variables, or hashbang\n          [PR['PR_ATTRIB_NAME'],  /^[#$][a-z_][\\w.]*|#\\d+\\b|#![ \\S]+lasso9\\b/i, null, '#$']\n        ],\n        [\n          // square or angle bracket delimiters\n          [PR['PR_TAG'],          /^[[\\]]|<\\?(?:lasso(?:script)?|=)|\\?>|(no_square_brackets|noprocess)\\b/i],\n          // single-line or block comments\n          [PR['PR_COMMENT'],      /^\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\//],\n          // member variables or keyword parameters\n          [PR['PR_ATTRIB_NAME'],  /^-(?!infinity)[a-z_][\\w.]*|\\.\\s*'[a-z_][\\w.]*'|\\.{3}/i],\n          // numeral as decimal or scientific notation\n          [PR['PR_LITERAL'],      /^\\d*\\.\\d+(?:e[-+]?\\d+)?|(infinity|NaN)\\b/i],\n          // tag literals\n          [PR['PR_ATTRIB_VALUE'], /^::\\s*[a-z_][\\w.]*/i],\n          // constants\n          [PR['PR_LITERAL'],      /^(?:true|false|none|minimal|full|all|void|and|or|not|bw|nbw|ew|new|cn|ncn|lt|lte|gt|gte|eq|neq|rx|nrx|ft)\\b/i],\n          // standard type or variable declarations\n          [PR['PR_TYPE'],         /^(?:array|date|decimal|duration|integer|map|pair|string|tag|xml|null|boolean|bytes|keyword|list|locale|queue|set|stack|staticarray|local|var|variable|global|data|self|inherited|currentcapture|givenblock)\\b|^\\.\\.?/i],\n          // container or control keywords\n          [PR['PR_KEYWORD'],      /^(?:cache|database_names|database_schemanames|database_tablenames|define_tag|define_type|email_batch|encode_set|html_comment|handle|handle_error|header|if|inline|iterate|ljax_target|link|link_currentaction|link_currentgroup|link_currentrecord|link_detail|link_firstgroup|link_firstrecord|link_lastgroup|link_lastrecord|link_nextgroup|link_nextrecord|link_prevgroup|link_prevrecord|log|loop|namespace_using|output_none|portal|private|protect|records|referer|referrer|repeating|resultset|rows|search_args|search_arguments|select|sort_args|sort_arguments|thread_atomic|value_list|while|abort|case|else|fail_if|fail_ifnot|fail|if_empty|if_false|if_null|if_true|loop_abort|loop_continue|loop_count|params|params_up|return|return_value|run_children|soap_definetag|soap_lastrequest|soap_lastresponse|tag_name|ascending|average|by|define|descending|do|equals|frozen|group|handle_failure|import|in|into|join|let|match|max|min|on|order|parent|protected|provide|public|require|returnhome|skip|split_thread|sum|take|thread|to|trait|type|where|with|yield|yieldhome)\\b/i],\n          // type, method, or parameter names\n          [PR['PR_PLAIN'],        /^[a-z_][\\w.]*(?:=\\s*(?=\\())?/i],\n          // operators\n          [PR['PR_PUNCTUATION'],  /^:=|[-+*\\/%=<>&|!?\\\\]+/]\n        ]),\n    ['lasso', 'ls', 'lassoscript']);\n</\\?(?:lasso(?:script)?|=)|\\?></http:>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2013 Eric Knibbe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Lasso. <http: www.lassosoft.com>\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then enclose your code in an HTML tag like so:\n *      <pre class=\"prettyprint lang-lasso\">[your Lasso code]</pre>\n *\n * @author Eric Knibbe\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          // whitespace\n          [PR['PR_PLAIN'],        /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n          // single quote strings\n          [PR['PR_STRING'],       /^\\'[^\\'\\\\]*(?:\\\\[\\s\\S][^\\'\\\\]*)*(?:\\'|$)/, null, \"'\"],\n          // double quote strings\n          [PR['PR_STRING'],       /^\\\"[^\\\"\\\\]*(?:\\\\[\\s\\S][^\\\"\\\\]*)*(?:\\\"|$)/, null, '\"'],\n          // ticked strings\n          [PR['PR_STRING'],       /^\\`[^\\`]*(?:\\`|$)/, null, '`'],\n          // numeral as integer or hexidecimal\n          [PR['PR_LITERAL'],      /^0x[\\da-f]+|\\d+/i, null, '0123456789'],\n          // local or thread variables, or hashbang\n          [PR['PR_ATTRIB_NAME'],  /^[#$][a-z_][\\w.]*|#\\d+\\b|#![ \\S]+lasso9\\b/i, null, '#$']\n        ],\n        [\n          // square or angle bracket delimiters\n          [PR['PR_TAG'],          /^[[\\]]|<\\?(?:lasso(?:script)?|=)|\\?>|(no_square_brackets|noprocess)\\b/i],\n          // single-line or block comments\n          [PR['PR_COMMENT'],      /^\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\//],\n          // member variables or keyword parameters\n          [PR['PR_ATTRIB_NAME'],  /^-(?!infinity)[a-z_][\\w.]*|\\.\\s*'[a-z_][\\w.]*'|\\.{3}/i],\n          // numeral as decimal or scientific notation\n          [PR['PR_LITERAL'],      /^\\d*\\.\\d+(?:e[-+]?\\d+)?|(infinity|NaN)\\b/i],\n          // tag literals\n          [PR['PR_ATTRIB_VALUE'], /^::\\s*[a-z_][\\w.]*/i],\n          // constants\n          [PR['PR_LITERAL'],      /^(?:true|false|none|minimal|full|all|void|and|or|not|bw|nbw|ew|new|cn|ncn|lt|lte|gt|gte|eq|neq|rx|nrx|ft)\\b/i],\n          // standard type or variable declarations\n          [PR['PR_TYPE'],         /^(?:array|date|decimal|duration|integer|map|pair|string|tag|xml|null|boolean|bytes|keyword|list|locale|queue|set|stack|staticarray|local|var|variable|global|data|self|inherited|currentcapture|givenblock)\\b|^\\.\\.?/i],\n          // container or control keywords\n          [PR['PR_KEYWORD'],      /^(?:cache|database_names|database_schemanames|database_tablenames|define_tag|define_type|email_batch|encode_set|html_comment|handle|handle_error|header|if|inline|iterate|ljax_target|link|link_currentaction|link_currentgroup|link_currentrecord|link_detail|link_firstgroup|link_firstrecord|link_lastgroup|link_lastrecord|link_nextgroup|link_nextrecord|link_prevgroup|link_prevrecord|log|loop|namespace_using|output_none|portal|private|protect|records|referer|referrer|repeating|resultset|rows|search_args|search_arguments|select|sort_args|sort_arguments|thread_atomic|value_list|while|abort|case|else|fail_if|fail_ifnot|fail|if_empty|if_false|if_null|if_true|loop_abort|loop_continue|loop_count|params|params_up|return|return_value|run_children|soap_definetag|soap_lastrequest|soap_lastresponse|tag_name|ascending|average|by|define|descending|do|equals|frozen|group|handle_failure|import|in|into|join|let|match|max|min|on|order|parent|protected|provide|public|require|returnhome|skip|split_thread|sum|take|thread|to|trait|type|where|with|yield|yieldhome)\\b/i],\n          // type, method, or parameter names\n          [PR['PR_PLAIN'],        /^[a-z_][\\w.]*(?:=\\s*(?=\\())?/i],\n          // operators\n          [PR['PR_PUNCTUATION'],  /^:=|[-+*\\/%=<>&|!?\\\\]+/]\n        ]),\n    ['lasso', 'ls', 'lassoscript']);\n</\\?(?:lasso(?:script)?|=)|\\?></http:>"},{"_content":"/**\n * @license\n * Copyright (C) 2013 Nikhil Dabas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for LLVM.\n * From https://gist.github.com/ndabas/2850418\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-llvm\">(my LLVM code)</pre>\n *\n *\n * The regular expressions were adapted from:\n * https://github.com/hansstimer/llvm.tmbundle/blob/76fedd8f50fd6108b1780c51d79fbe3223de5f34/Syntaxes/LLVM.tmLanguage\n * \n * http://llvm.org/docs/LangRef.html#constants describes the language grammar.\n * \n * @author Nikhil Dabas\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^!?\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n         // comment.llvm\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';']\n        ],\n        [\n         // variable.llvm\n         [PR['PR_PLAIN'],       /^[%@!](?:[-a-zA-Z$._][-a-zA-Z$._0-9]*|\\d+)/],\n\n         // According to http://llvm.org/docs/LangRef.html#well-formedness\n         // These reserved words cannot conflict with variable names, because none of them start with a prefix character ('%' or '@').\n         [PR['PR_KEYWORD'],     /^[A-Za-z_][0-9A-Za-z_]*/, null],\n\n         // constant.numeric.float.llvm\n         [PR['PR_LITERAL'],     /^\\d+\\.\\d+/],\n         \n         // constant.numeric.integer.llvm\n         [PR['PR_LITERAL'],     /^(?:\\d+|0[xX][a-fA-F0-9]+)/],\n\n         // punctuation\n         [PR['PR_PUNCTUATION'], /^[()\\[\\]{},=*<>:]|\\.\\.\\.$/]\n        ]),\n    ['llvm', 'll']);\n","source":"plugins/prettify/lang-llvm.js","raw":"/**\n * @license\n * Copyright (C) 2013 Nikhil Dabas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for LLVM.\n * From https://gist.github.com/ndabas/2850418\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-llvm\">(my LLVM code)</pre>\n *\n *\n * The regular expressions were adapted from:\n * https://github.com/hansstimer/llvm.tmbundle/blob/76fedd8f50fd6108b1780c51d79fbe3223de5f34/Syntaxes/LLVM.tmLanguage\n * \n * http://llvm.org/docs/LangRef.html#constants describes the language grammar.\n * \n * @author Nikhil Dabas\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^!?\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n         // comment.llvm\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';']\n        ],\n        [\n         // variable.llvm\n         [PR['PR_PLAIN'],       /^[%@!](?:[-a-zA-Z$._][-a-zA-Z$._0-9]*|\\d+)/],\n\n         // According to http://llvm.org/docs/LangRef.html#well-formedness\n         // These reserved words cannot conflict with variable names, because none of them start with a prefix character ('%' or '@').\n         [PR['PR_KEYWORD'],     /^[A-Za-z_][0-9A-Za-z_]*/, null],\n\n         // constant.numeric.float.llvm\n         [PR['PR_LITERAL'],     /^\\d+\\.\\d+/],\n         \n         // constant.numeric.integer.llvm\n         [PR['PR_LITERAL'],     /^(?:\\d+|0[xX][a-fA-F0-9]+)/],\n\n         // punctuation\n         [PR['PR_PUNCTUATION'], /^[()\\[\\]{},=*<>:]|\\.\\.\\.$/]\n        ]),\n    ['llvm', 'll']);\n","date":"2019-04-30T08:09:45.663Z","updated":"2019-04-30T08:09:45.663Z","path":"plugins/prettify/lang-llvm.js","layout":"false","title":"","comments":1,"_id":"cjxh80elv001d6c9v2csv1cub","content":"/**\n * @license\n * Copyright (C) 2013 Nikhil Dabas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for LLVM.\n * From https://gist.github.com/ndabas/2850418\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-llvm\">(my LLVM code)</pre>\n *\n *\n * The regular expressions were adapted from:\n * https://github.com/hansstimer/llvm.tmbundle/blob/76fedd8f50fd6108b1780c51d79fbe3223de5f34/Syntaxes/LLVM.tmLanguage\n * \n * http://llvm.org/docs/LangRef.html#constants describes the language grammar.\n * \n * @author Nikhil Dabas\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^!?\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n         // comment.llvm\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';']\n        ],\n        [\n         // variable.llvm\n         [PR['PR_PLAIN'],       /^[%@!](?:[-a-zA-Z$._][-a-zA-Z$._0-9]*|\\d+)/],\n\n         // According to http://llvm.org/docs/LangRef.html#well-formedness\n         // These reserved words cannot conflict with variable names, because none of them start with a prefix character ('%' or '@').\n         [PR['PR_KEYWORD'],     /^[A-Za-z_][0-9A-Za-z_]*/, null],\n\n         // constant.numeric.float.llvm\n         [PR['PR_LITERAL'],     /^\\d+\\.\\d+/],\n         \n         // constant.numeric.integer.llvm\n         [PR['PR_LITERAL'],     /^(?:\\d+|0[xX][a-fA-F0-9]+)/],\n\n         // punctuation\n         [PR['PR_PUNCTUATION'], /^[()\\[\\]{},=*<>:]|\\.\\.\\.$/]\n        ]),\n    ['llvm', 'll']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2013 Nikhil Dabas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for LLVM.\n * From https://gist.github.com/ndabas/2850418\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-llvm\">(my LLVM code)</pre>\n *\n *\n * The regular expressions were adapted from:\n * https://github.com/hansstimer/llvm.tmbundle/blob/76fedd8f50fd6108b1780c51d79fbe3223de5f34/Syntaxes/LLVM.tmLanguage\n * \n * http://llvm.org/docs/LangRef.html#constants describes the language grammar.\n * \n * @author Nikhil Dabas\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^!?\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n         // comment.llvm\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';']\n        ],\n        [\n         // variable.llvm\n         [PR['PR_PLAIN'],       /^[%@!](?:[-a-zA-Z$._][-a-zA-Z$._0-9]*|\\d+)/],\n\n         // According to http://llvm.org/docs/LangRef.html#well-formedness\n         // These reserved words cannot conflict with variable names, because none of them start with a prefix character ('%' or '@').\n         [PR['PR_KEYWORD'],     /^[A-Za-z_][0-9A-Za-z_]*/, null],\n\n         // constant.numeric.float.llvm\n         [PR['PR_LITERAL'],     /^\\d+\\.\\d+/],\n         \n         // constant.numeric.integer.llvm\n         [PR['PR_LITERAL'],     /^(?:\\d+|0[xX][a-fA-F0-9]+)/],\n\n         // punctuation\n         [PR['PR_PUNCTUATION'], /^[()\\[\\]{},=*<>:]|\\.\\.\\.$/]\n        ]),\n    ['llvm', 'll']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2014 Paulo Moura\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Logtalk.\n * http://logtalk.org/\n * @author Paulo Moura\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          // double-quoted strings.\n          [PR['PR_STRING'], /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n          // atoms (don't break on underscores!)\n          [PR['PR_LITERAL'], /^[a-z][a-zA-Z0-9_]*/],\n          // quoted atoms\n          [PR['PR_LITERAL'], /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/, null, \"'\"],\n          // numbers\n          [PR['PR_LITERAL'], /^(?:0'.|0b[0-1]+|0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i, null, '0123456789']\n        ],\n        [\n          // single-line comments begin with %\n          [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%'],\n          // block comments are delimited by /* and */\n          [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?\\*\\//],\n          // directives\n          [PR['PR_KEYWORD'], /^\\s*:-\\s(c(a(lls|tegory)|oinductive)|p(ublic|r(ot(ocol|ected)|ivate))|e(l(if|se)|n(coding|sure_loaded)|xport)|i(f|n(clude|itialization|fo))|alias|d(ynamic|iscontiguous)|m(eta_(non_terminal|predicate)|od(e|ule)|ultifile)|reexport|s(et_(logtalk|prolog)_flag|ynchronized)|o(bject|p)|use(s|_module))/],\n          [PR['PR_KEYWORD'], /^\\s*:-\\s(e(lse|nd(if|_(category|object|protocol)))|built_in|dynamic|synchronized|threaded)/],\n          // variables\n          [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/],\n          // operators\n          [PR['PR_PUNCTUATION'], /^[.,;{}:^<>=\\\\/+*?#!-]/]\n        ]),\n    ['logtalk', 'lgt']);\n","source":"plugins/prettify/lang-logtalk.js","raw":"/**\n * @license\n * Copyright (C) 2014 Paulo Moura\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Logtalk.\n * http://logtalk.org/\n * @author Paulo Moura\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          // double-quoted strings.\n          [PR['PR_STRING'], /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n          // atoms (don't break on underscores!)\n          [PR['PR_LITERAL'], /^[a-z][a-zA-Z0-9_]*/],\n          // quoted atoms\n          [PR['PR_LITERAL'], /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/, null, \"'\"],\n          // numbers\n          [PR['PR_LITERAL'], /^(?:0'.|0b[0-1]+|0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i, null, '0123456789']\n        ],\n        [\n          // single-line comments begin with %\n          [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%'],\n          // block comments are delimited by /* and */\n          [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?\\*\\//],\n          // directives\n          [PR['PR_KEYWORD'], /^\\s*:-\\s(c(a(lls|tegory)|oinductive)|p(ublic|r(ot(ocol|ected)|ivate))|e(l(if|se)|n(coding|sure_loaded)|xport)|i(f|n(clude|itialization|fo))|alias|d(ynamic|iscontiguous)|m(eta_(non_terminal|predicate)|od(e|ule)|ultifile)|reexport|s(et_(logtalk|prolog)_flag|ynchronized)|o(bject|p)|use(s|_module))/],\n          [PR['PR_KEYWORD'], /^\\s*:-\\s(e(lse|nd(if|_(category|object|protocol)))|built_in|dynamic|synchronized|threaded)/],\n          // variables\n          [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/],\n          // operators\n          [PR['PR_PUNCTUATION'], /^[.,;{}:^<>=\\\\/+*?#!-]/]\n        ]),\n    ['logtalk', 'lgt']);\n","date":"2019-04-30T08:09:45.663Z","updated":"2019-04-30T08:09:45.663Z","path":"plugins/prettify/lang-logtalk.js","layout":"false","title":"","comments":1,"_id":"cjxh80elw001e6c9vj8ieudtd","content":"/**\n * @license\n * Copyright (C) 2014 Paulo Moura\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Logtalk.\n * http://logtalk.org/\n * @author Paulo Moura\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          // double-quoted strings.\n          [PR['PR_STRING'], /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n          // atoms (don't break on underscores!)\n          [PR['PR_LITERAL'], /^[a-z][a-zA-Z0-9_]*/],\n          // quoted atoms\n          [PR['PR_LITERAL'], /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/, null, \"'\"],\n          // numbers\n          [PR['PR_LITERAL'], /^(?:0'.|0b[0-1]+|0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i, null, '0123456789']\n        ],\n        [\n          // single-line comments begin with %\n          [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%'],\n          // block comments are delimited by /* and */\n          [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?\\*\\//],\n          // directives\n          [PR['PR_KEYWORD'], /^\\s*:-\\s(c(a(lls|tegory)|oinductive)|p(ublic|r(ot(ocol|ected)|ivate))|e(l(if|se)|n(coding|sure_loaded)|xport)|i(f|n(clude|itialization|fo))|alias|d(ynamic|iscontiguous)|m(eta_(non_terminal|predicate)|od(e|ule)|ultifile)|reexport|s(et_(logtalk|prolog)_flag|ynchronized)|o(bject|p)|use(s|_module))/],\n          [PR['PR_KEYWORD'], /^\\s*:-\\s(e(lse|nd(if|_(category|object|protocol)))|built_in|dynamic|synchronized|threaded)/],\n          // variables\n          [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/],\n          // operators\n          [PR['PR_PUNCTUATION'], /^[.,;{}:^<>=\\\\/+*?#!-]/]\n        ]),\n    ['logtalk', 'lgt']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2014 Paulo Moura\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Logtalk.\n * http://logtalk.org/\n * @author Paulo Moura\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          // double-quoted strings.\n          [PR['PR_STRING'], /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n          // atoms (don't break on underscores!)\n          [PR['PR_LITERAL'], /^[a-z][a-zA-Z0-9_]*/],\n          // quoted atoms\n          [PR['PR_LITERAL'], /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/, null, \"'\"],\n          // numbers\n          [PR['PR_LITERAL'], /^(?:0'.|0b[0-1]+|0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i, null, '0123456789']\n        ],\n        [\n          // single-line comments begin with %\n          [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%'],\n          // block comments are delimited by /* and */\n          [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?\\*\\//],\n          // directives\n          [PR['PR_KEYWORD'], /^\\s*:-\\s(c(a(lls|tegory)|oinductive)|p(ublic|r(ot(ocol|ected)|ivate))|e(l(if|se)|n(coding|sure_loaded)|xport)|i(f|n(clude|itialization|fo))|alias|d(ynamic|iscontiguous)|m(eta_(non_terminal|predicate)|od(e|ule)|ultifile)|reexport|s(et_(logtalk|prolog)_flag|ynchronized)|o(bject|p)|use(s|_module))/],\n          [PR['PR_KEYWORD'], /^\\s*:-\\s(e(lse|nd(if|_(category|object|protocol)))|built_in|dynamic|synchronized|threaded)/],\n          // variables\n          [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/],\n          // operators\n          [PR['PR_PUNCTUATION'], /^[.,;{}:^<>=\\\\/+*?#!-]/]\n        ]),\n    ['logtalk', 'lgt']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Lua.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lua\">(my Lua code)</pre>\n *\n *\n * I used http://www.lua.org/manual/5.1/manual.html#2.1\n * Because of the long-bracket concept used in strings and comments, Lua does\n * not have a regular lexical grammar, but luckily it fits within the space\n * of irregular grammars supported by javascript regular expressions.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\'']\n        ],\n        [\n         // A comment is either a line comment that starts with two dashes, or\n         // two dashes preceding a long bracketed block.\n         [PR['PR_COMMENT'], /^--(?:\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)|[^\\r\\n]*)/],\n         // A long bracketed block not preceded by -- is a string.\n         [PR['PR_STRING'],  /^\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)/],\n         [PR['PR_KEYWORD'], /^(?:and|break|do|else|elseif|end|false|for|function|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/, null],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z_]\\w*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0][^\\w\\t\\n\\r \\xA0\\\"\\'\\-\\+=]*/]\n        ]),\n    ['lua']);\n","source":"plugins/prettify/lang-lua.js","raw":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Lua.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lua\">(my Lua code)</pre>\n *\n *\n * I used http://www.lua.org/manual/5.1/manual.html#2.1\n * Because of the long-bracket concept used in strings and comments, Lua does\n * not have a regular lexical grammar, but luckily it fits within the space\n * of irregular grammars supported by javascript regular expressions.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\'']\n        ],\n        [\n         // A comment is either a line comment that starts with two dashes, or\n         // two dashes preceding a long bracketed block.\n         [PR['PR_COMMENT'], /^--(?:\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)|[^\\r\\n]*)/],\n         // A long bracketed block not preceded by -- is a string.\n         [PR['PR_STRING'],  /^\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)/],\n         [PR['PR_KEYWORD'], /^(?:and|break|do|else|elseif|end|false|for|function|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/, null],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z_]\\w*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0][^\\w\\t\\n\\r \\xA0\\\"\\'\\-\\+=]*/]\n        ]),\n    ['lua']);\n","date":"2019-04-30T08:09:45.659Z","updated":"2019-04-30T08:09:45.659Z","path":"plugins/prettify/lang-lua.js","layout":"false","title":"","comments":1,"_id":"cjxh80elw001f6c9vvld6peda","content":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Lua.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lua\">(my Lua code)</pre>\n *\n *\n * I used http://www.lua.org/manual/5.1/manual.html#2.1\n * Because of the long-bracket concept used in strings and comments, Lua does\n * not have a regular lexical grammar, but luckily it fits within the space\n * of irregular grammars supported by javascript regular expressions.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\'']\n        ],\n        [\n         // A comment is either a line comment that starts with two dashes, or\n         // two dashes preceding a long bracketed block.\n         [PR['PR_COMMENT'], /^--(?:\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)|[^\\r\\n]*)/],\n         // A long bracketed block not preceded by -- is a string.\n         [PR['PR_STRING'],  /^\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)/],\n         [PR['PR_KEYWORD'], /^(?:and|break|do|else|elseif|end|false|for|function|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/, null],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z_]\\w*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0][^\\w\\t\\n\\r \\xA0\\\"\\'\\-\\+=]*/]\n        ]),\n    ['lua']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Lua.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lua\">(my Lua code)</pre>\n *\n *\n * I used http://www.lua.org/manual/5.1/manual.html#2.1\n * Because of the long-bracket concept used in strings and comments, Lua does\n * not have a regular lexical grammar, but luckily it fits within the space\n * of irregular grammars supported by javascript regular expressions.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\'']\n        ],\n        [\n         // A comment is either a line comment that starts with two dashes, or\n         // two dashes preceding a long bracketed block.\n         [PR['PR_COMMENT'], /^--(?:\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)|[^\\r\\n]*)/],\n         // A long bracketed block not preceded by -- is a string.\n         [PR['PR_STRING'],  /^\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)/],\n         [PR['PR_KEYWORD'], /^(?:and|break|do|else|elseif|end|false|for|function|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/, null],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z_]\\w*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0][^\\w\\t\\n\\r \\xA0\\\"\\'\\-\\+=]*/]\n        ]),\n    ['lua']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for OCaml, SML, F# and similar languages.\n *\n * Based on the lexical grammar at\n * http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/spec.html#_Toc270597388\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace is made up of spaces, tabs and newline characters.\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // #if ident/#else/#endif directives delimit conditional compilation\n         // sections\n         [PR['PR_COMMENT'],\n          /^#(?:if[\\t\\n\\r \\xA0]+(?:[a-z_$][\\w\\']*|``[^\\r\\n\\t`]*(?:``|$))|else|endif|light)/i,\n          null, '#'],\n         // A double or single quoted, possibly multi-line, string.\n         // F# allows escaped newlines in strings.\n         [PR['PR_STRING'],      /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])(?:\\'|$))/, null, '\"\\'']\n        ],\n        [\n         // Block comments are delimited by (* and *) and may be\n         // nested. Single-line comments begin with // and extend to\n         // the end of a line.\n         // TODO: (*...*) comments can be nested.  This does not handle that.\n         [PR['PR_COMMENT'],     /^(?:\\/\\/[^\\r\\n]*|\\(\\*[\\s\\S]*?\\*\\))/],\n         [PR['PR_KEYWORD'],     /^(?:abstract|and|as|assert|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|if|in|inherit|inline|interface|internal|lazy|let|match|member|module|mutable|namespace|new|null|of|open|or|override|private|public|rec|return|static|struct|then|to|true|try|type|upcast|use|val|void|when|while|with|yield|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|global|include|method|mixin|object|parallel|process|protected|pure|sealed|trait|virtual|volatile)\\b/],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         [PR['PR_PLAIN'],       /^(?:[a-z_][\\w']*[!?#]?|``[^\\r\\n\\t`]*(?:``|$))/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\t\\n\\r \\xA0\\\"\\'\\w]+/]\n        ]),\n    ['fs', 'ml']);\n","source":"plugins/prettify/lang-ml.js","raw":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for OCaml, SML, F# and similar languages.\n *\n * Based on the lexical grammar at\n * http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/spec.html#_Toc270597388\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace is made up of spaces, tabs and newline characters.\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // #if ident/#else/#endif directives delimit conditional compilation\n         // sections\n         [PR['PR_COMMENT'],\n          /^#(?:if[\\t\\n\\r \\xA0]+(?:[a-z_$][\\w\\']*|``[^\\r\\n\\t`]*(?:``|$))|else|endif|light)/i,\n          null, '#'],\n         // A double or single quoted, possibly multi-line, string.\n         // F# allows escaped newlines in strings.\n         [PR['PR_STRING'],      /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])(?:\\'|$))/, null, '\"\\'']\n        ],\n        [\n         // Block comments are delimited by (* and *) and may be\n         // nested. Single-line comments begin with // and extend to\n         // the end of a line.\n         // TODO: (*...*) comments can be nested.  This does not handle that.\n         [PR['PR_COMMENT'],     /^(?:\\/\\/[^\\r\\n]*|\\(\\*[\\s\\S]*?\\*\\))/],\n         [PR['PR_KEYWORD'],     /^(?:abstract|and|as|assert|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|if|in|inherit|inline|interface|internal|lazy|let|match|member|module|mutable|namespace|new|null|of|open|or|override|private|public|rec|return|static|struct|then|to|true|try|type|upcast|use|val|void|when|while|with|yield|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|global|include|method|mixin|object|parallel|process|protected|pure|sealed|trait|virtual|volatile)\\b/],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         [PR['PR_PLAIN'],       /^(?:[a-z_][\\w']*[!?#]?|``[^\\r\\n\\t`]*(?:``|$))/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\t\\n\\r \\xA0\\\"\\'\\w]+/]\n        ]),\n    ['fs', 'ml']);\n","date":"2019-04-30T08:09:45.624Z","updated":"2019-04-30T08:09:45.624Z","path":"plugins/prettify/lang-ml.js","layout":"false","title":"","comments":1,"_id":"cjxh80elx001g6c9vf3cswn5z","content":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for OCaml, SML, F# and similar languages.\n *\n * Based on the lexical grammar at\n * http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/spec.html#_Toc270597388\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace is made up of spaces, tabs and newline characters.\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // #if ident/#else/#endif directives delimit conditional compilation\n         // sections\n         [PR['PR_COMMENT'],\n          /^#(?:if[\\t\\n\\r \\xA0]+(?:[a-z_$][\\w\\']*|``[^\\r\\n\\t`]*(?:``|$))|else|endif|light)/i,\n          null, '#'],\n         // A double or single quoted, possibly multi-line, string.\n         // F# allows escaped newlines in strings.\n         [PR['PR_STRING'],      /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])(?:\\'|$))/, null, '\"\\'']\n        ],\n        [\n         // Block comments are delimited by (* and *) and may be\n         // nested. Single-line comments begin with // and extend to\n         // the end of a line.\n         // TODO: (*...*) comments can be nested.  This does not handle that.\n         [PR['PR_COMMENT'],     /^(?:\\/\\/[^\\r\\n]*|\\(\\*[\\s\\S]*?\\*\\))/],\n         [PR['PR_KEYWORD'],     /^(?:abstract|and|as|assert|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|if|in|inherit|inline|interface|internal|lazy|let|match|member|module|mutable|namespace|new|null|of|open|or|override|private|public|rec|return|static|struct|then|to|true|try|type|upcast|use|val|void|when|while|with|yield|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|global|include|method|mixin|object|parallel|process|protected|pure|sealed|trait|virtual|volatile)\\b/],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         [PR['PR_PLAIN'],       /^(?:[a-z_][\\w']*[!?#]?|``[^\\r\\n\\t`]*(?:``|$))/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\t\\n\\r \\xA0\\\"\\'\\w]+/]\n        ]),\n    ['fs', 'ml']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for OCaml, SML, F# and similar languages.\n *\n * Based on the lexical grammar at\n * http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/spec.html#_Toc270597388\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace is made up of spaces, tabs and newline characters.\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // #if ident/#else/#endif directives delimit conditional compilation\n         // sections\n         [PR['PR_COMMENT'],\n          /^#(?:if[\\t\\n\\r \\xA0]+(?:[a-z_$][\\w\\']*|``[^\\r\\n\\t`]*(?:``|$))|else|endif|light)/i,\n          null, '#'],\n         // A double or single quoted, possibly multi-line, string.\n         // F# allows escaped newlines in strings.\n         [PR['PR_STRING'],      /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])(?:\\'|$))/, null, '\"\\'']\n        ],\n        [\n         // Block comments are delimited by (* and *) and may be\n         // nested. Single-line comments begin with // and extend to\n         // the end of a line.\n         // TODO: (*...*) comments can be nested.  This does not handle that.\n         [PR['PR_COMMENT'],     /^(?:\\/\\/[^\\r\\n]*|\\(\\*[\\s\\S]*?\\*\\))/],\n         [PR['PR_KEYWORD'],     /^(?:abstract|and|as|assert|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|if|in|inherit|inline|interface|internal|lazy|let|match|member|module|mutable|namespace|new|null|of|open|or|override|private|public|rec|return|static|struct|then|to|true|try|type|upcast|use|val|void|when|while|with|yield|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|global|include|method|mixin|object|parallel|process|protected|pure|sealed|trait|virtual|volatile)\\b/],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         [PR['PR_PLAIN'],       /^(?:[a-z_][\\w']*[!?#]?|``[^\\r\\n\\t`]*(?:``|$))/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\t\\n\\r \\xA0\\\"\\'\\w]+/]\n        ]),\n    ['fs', 'ml']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2013 Peter Kofler\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Contributed by peter dot kofler at code minus cop dot org\n\n/**\n * @fileoverview\n * Registers a language handler for (Turbo) Pascal.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-pascal\">(my Pascal code)</pre>\n *\n * @author peter dot kofler at code minus cop dot org\n */\n\nPR.registerLangHandler(\n    PR.createSimpleLexer(\n        [ // shortcutStylePatterns\n          // 'single-line-string'\n          [PR.PR_STRING,        /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$))/, null, '\\''],\n          // Whitespace\n          [PR.PR_PLAIN,         /^\\s+/, null, ' \\r\\n\\t\\xA0']\n        ],\n        [ // fallthroughStylePatterns\n          // A cStyleComments comment (* *) or {}\n          [PR.PR_COMMENT,       /^\\(\\*[\\s\\S]*?(?:\\*\\)|$)|^\\{[\\s\\S]*?(?:\\}|$)/, null],\n          [PR.PR_KEYWORD,       /^(?:ABSOLUTE|AND|ARRAY|ASM|ASSEMBLER|BEGIN|CASE|CONST|CONSTRUCTOR|DESTRUCTOR|DIV|DO|DOWNTO|ELSE|END|EXTERNAL|FOR|FORWARD|FUNCTION|GOTO|IF|IMPLEMENTATION|IN|INLINE|INTERFACE|INTERRUPT|LABEL|MOD|NOT|OBJECT|OF|OR|PACKED|PROCEDURE|PROGRAM|RECORD|REPEAT|SET|SHL|SHR|THEN|TO|TYPE|UNIT|UNTIL|USES|VAR|VIRTUAL|WHILE|WITH|XOR)\\b/i, null],\n          [PR.PR_LITERAL,       /^(?:true|false|self|nil)/i, null],\n          [PR.PR_PLAIN,         /^[a-z][a-z0-9]*/i, null],\n          // Literals .0, 0, 0.0 0E13\n          [PR.PR_LITERAL,       /^(?:\\$[a-f0-9]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?)/i,  null, '0123456789'],\n          [PR.PR_PUNCTUATION,   /^.[^\\s\\w\\.$@\\'\\/]*/, null]\n        ]),\n    ['pascal']);\n","source":"plugins/prettify/lang-pascal.js","raw":"/**\n * @license\n * Copyright (C) 2013 Peter Kofler\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Contributed by peter dot kofler at code minus cop dot org\n\n/**\n * @fileoverview\n * Registers a language handler for (Turbo) Pascal.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-pascal\">(my Pascal code)</pre>\n *\n * @author peter dot kofler at code minus cop dot org\n */\n\nPR.registerLangHandler(\n    PR.createSimpleLexer(\n        [ // shortcutStylePatterns\n          // 'single-line-string'\n          [PR.PR_STRING,        /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$))/, null, '\\''],\n          // Whitespace\n          [PR.PR_PLAIN,         /^\\s+/, null, ' \\r\\n\\t\\xA0']\n        ],\n        [ // fallthroughStylePatterns\n          // A cStyleComments comment (* *) or {}\n          [PR.PR_COMMENT,       /^\\(\\*[\\s\\S]*?(?:\\*\\)|$)|^\\{[\\s\\S]*?(?:\\}|$)/, null],\n          [PR.PR_KEYWORD,       /^(?:ABSOLUTE|AND|ARRAY|ASM|ASSEMBLER|BEGIN|CASE|CONST|CONSTRUCTOR|DESTRUCTOR|DIV|DO|DOWNTO|ELSE|END|EXTERNAL|FOR|FORWARD|FUNCTION|GOTO|IF|IMPLEMENTATION|IN|INLINE|INTERFACE|INTERRUPT|LABEL|MOD|NOT|OBJECT|OF|OR|PACKED|PROCEDURE|PROGRAM|RECORD|REPEAT|SET|SHL|SHR|THEN|TO|TYPE|UNIT|UNTIL|USES|VAR|VIRTUAL|WHILE|WITH|XOR)\\b/i, null],\n          [PR.PR_LITERAL,       /^(?:true|false|self|nil)/i, null],\n          [PR.PR_PLAIN,         /^[a-z][a-z0-9]*/i, null],\n          // Literals .0, 0, 0.0 0E13\n          [PR.PR_LITERAL,       /^(?:\\$[a-f0-9]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?)/i,  null, '0123456789'],\n          [PR.PR_PUNCTUATION,   /^.[^\\s\\w\\.$@\\'\\/]*/, null]\n        ]),\n    ['pascal']);\n","date":"2019-04-30T08:09:45.635Z","updated":"2019-04-30T08:09:45.635Z","path":"plugins/prettify/lang-pascal.js","layout":"false","title":"","comments":1,"_id":"cjxh80elx001h6c9v7sx8h4od","content":"/**\n * @license\n * Copyright (C) 2013 Peter Kofler\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Contributed by peter dot kofler at code minus cop dot org\n\n/**\n * @fileoverview\n * Registers a language handler for (Turbo) Pascal.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-pascal\">(my Pascal code)</pre>\n *\n * @author peter dot kofler at code minus cop dot org\n */\n\nPR.registerLangHandler(\n    PR.createSimpleLexer(\n        [ // shortcutStylePatterns\n          // 'single-line-string'\n          [PR.PR_STRING,        /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$))/, null, '\\''],\n          // Whitespace\n          [PR.PR_PLAIN,         /^\\s+/, null, ' \\r\\n\\t\\xA0']\n        ],\n        [ // fallthroughStylePatterns\n          // A cStyleComments comment (* *) or {}\n          [PR.PR_COMMENT,       /^\\(\\*[\\s\\S]*?(?:\\*\\)|$)|^\\{[\\s\\S]*?(?:\\}|$)/, null],\n          [PR.PR_KEYWORD,       /^(?:ABSOLUTE|AND|ARRAY|ASM|ASSEMBLER|BEGIN|CASE|CONST|CONSTRUCTOR|DESTRUCTOR|DIV|DO|DOWNTO|ELSE|END|EXTERNAL|FOR|FORWARD|FUNCTION|GOTO|IF|IMPLEMENTATION|IN|INLINE|INTERFACE|INTERRUPT|LABEL|MOD|NOT|OBJECT|OF|OR|PACKED|PROCEDURE|PROGRAM|RECORD|REPEAT|SET|SHL|SHR|THEN|TO|TYPE|UNIT|UNTIL|USES|VAR|VIRTUAL|WHILE|WITH|XOR)\\b/i, null],\n          [PR.PR_LITERAL,       /^(?:true|false|self|nil)/i, null],\n          [PR.PR_PLAIN,         /^[a-z][a-z0-9]*/i, null],\n          // Literals .0, 0, 0.0 0E13\n          [PR.PR_LITERAL,       /^(?:\\$[a-f0-9]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?)/i,  null, '0123456789'],\n          [PR.PR_PUNCTUATION,   /^.[^\\s\\w\\.$@\\'\\/]*/, null]\n        ]),\n    ['pascal']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2013 Peter Kofler\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Contributed by peter dot kofler at code minus cop dot org\n\n/**\n * @fileoverview\n * Registers a language handler for (Turbo) Pascal.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-pascal\">(my Pascal code)</pre>\n *\n * @author peter dot kofler at code minus cop dot org\n */\n\nPR.registerLangHandler(\n    PR.createSimpleLexer(\n        [ // shortcutStylePatterns\n          // 'single-line-string'\n          [PR.PR_STRING,        /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$))/, null, '\\''],\n          // Whitespace\n          [PR.PR_PLAIN,         /^\\s+/, null, ' \\r\\n\\t\\xA0']\n        ],\n        [ // fallthroughStylePatterns\n          // A cStyleComments comment (* *) or {}\n          [PR.PR_COMMENT,       /^\\(\\*[\\s\\S]*?(?:\\*\\)|$)|^\\{[\\s\\S]*?(?:\\}|$)/, null],\n          [PR.PR_KEYWORD,       /^(?:ABSOLUTE|AND|ARRAY|ASM|ASSEMBLER|BEGIN|CASE|CONST|CONSTRUCTOR|DESTRUCTOR|DIV|DO|DOWNTO|ELSE|END|EXTERNAL|FOR|FORWARD|FUNCTION|GOTO|IF|IMPLEMENTATION|IN|INLINE|INTERFACE|INTERRUPT|LABEL|MOD|NOT|OBJECT|OF|OR|PACKED|PROCEDURE|PROGRAM|RECORD|REPEAT|SET|SHL|SHR|THEN|TO|TYPE|UNIT|UNTIL|USES|VAR|VIRTUAL|WHILE|WITH|XOR)\\b/i, null],\n          [PR.PR_LITERAL,       /^(?:true|false|self|nil)/i, null],\n          [PR.PR_PLAIN,         /^[a-z][a-z0-9]*/i, null],\n          // Literals .0, 0, 0.0 0E13\n          [PR.PR_LITERAL,       /^(?:\\$[a-f0-9]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?)/i,  null, '0123456789'],\n          [PR.PR_PUNCTUATION,   /^.[^\\s\\w\\.$@\\'\\/]*/, null]\n        ]),\n    ['pascal']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2011 Zimin A.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the Nemerle language.\n * http://nemerle.org\n * @author Zimin A.V.\n */\n(function () {\n  // http://nemerle.org/wiki/index.php?title=Base_keywords\n  var keywords = 'abstract|and|as|base|catch|class|def|delegate|enum|event|extern|false|finally|'\n         + 'fun|implements|interface|internal|is|macro|match|matches|module|mutable|namespace|new|'\n         + 'null|out|override|params|partial|private|protected|public|ref|sealed|static|struct|'\n         + 'syntax|this|throw|true|try|type|typeof|using|variant|virtual|volatile|when|where|with|'\n         + 'assert|assert2|async|break|checked|continue|do|else|ensures|for|foreach|if|late|lock|new|nolate|'\n         + 'otherwise|regexp|repeat|requires|return|surroundwith|unchecked|unless|using|while|yield';\n\n  PR['registerLangHandler'](PR['createSimpleLexer'](\n      // shortcutStylePatterns\n      [\n        [PR['PR_STRING'], /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*\\'|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/, null, '\"'],\n        [PR['PR_COMMENT'], /^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\r\\n]*)/, null, '#'],\n        [PR['PR_PLAIN'], /^\\s+/, null, ' \\r\\n\\t\\xA0']\n      ],\n      // fallthroughStylePatterns\n      [\n        [PR['PR_STRING'], /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null],\n        [PR['PR_STRING'], /^<#(?:[^#>])*(?:#>|$)/, null],\n        [PR['PR_STRING'], /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h|[a-z]\\w*)>/, null],\n        [PR['PR_COMMENT'], /^\\/\\/[^\\r\\n]*/, null],\n        [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null],\n        [PR['PR_KEYWORD'], new RegExp('^(?:' + keywords + ')\\\\b'), null],\n        [PR['PR_TYPE'], /^(?:array|bool|byte|char|decimal|double|float|int|list|long|object|sbyte|short|string|ulong|uint|ufloat|ulong|ushort|void)\\b/, null],\n        [PR['PR_LITERAL'], /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR['PR_TYPE'], /^@[A-Z]+[a-z][A-Za-z_$@0-9]*/, null],\n        [PR['PR_PLAIN'], /^'?[A-Za-z_$][a-z_$@0-9]*/i, null],\n        [PR['PR_LITERAL'], new RegExp(\n             '^(?:'\n  // A hex number\n             + '0x[a-f0-9]+'\n  // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n  // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n  // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'), null, '0123456789'],\n\n        [PR['PR_PUNCTUATION'], /^.[^\\s\\w\\.$@\\'\\\"\\`\\/\\#]*/, null]\n      ]),\n      ['n', 'nemerle']);\n})();\n","source":"plugins/prettify/lang-n.js","raw":"/**\n * @license\n * Copyright (C) 2011 Zimin A.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the Nemerle language.\n * http://nemerle.org\n * @author Zimin A.V.\n */\n(function () {\n  // http://nemerle.org/wiki/index.php?title=Base_keywords\n  var keywords = 'abstract|and|as|base|catch|class|def|delegate|enum|event|extern|false|finally|'\n         + 'fun|implements|interface|internal|is|macro|match|matches|module|mutable|namespace|new|'\n         + 'null|out|override|params|partial|private|protected|public|ref|sealed|static|struct|'\n         + 'syntax|this|throw|true|try|type|typeof|using|variant|virtual|volatile|when|where|with|'\n         + 'assert|assert2|async|break|checked|continue|do|else|ensures|for|foreach|if|late|lock|new|nolate|'\n         + 'otherwise|regexp|repeat|requires|return|surroundwith|unchecked|unless|using|while|yield';\n\n  PR['registerLangHandler'](PR['createSimpleLexer'](\n      // shortcutStylePatterns\n      [\n        [PR['PR_STRING'], /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*\\'|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/, null, '\"'],\n        [PR['PR_COMMENT'], /^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\r\\n]*)/, null, '#'],\n        [PR['PR_PLAIN'], /^\\s+/, null, ' \\r\\n\\t\\xA0']\n      ],\n      // fallthroughStylePatterns\n      [\n        [PR['PR_STRING'], /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null],\n        [PR['PR_STRING'], /^<#(?:[^#>])*(?:#>|$)/, null],\n        [PR['PR_STRING'], /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h|[a-z]\\w*)>/, null],\n        [PR['PR_COMMENT'], /^\\/\\/[^\\r\\n]*/, null],\n        [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null],\n        [PR['PR_KEYWORD'], new RegExp('^(?:' + keywords + ')\\\\b'), null],\n        [PR['PR_TYPE'], /^(?:array|bool|byte|char|decimal|double|float|int|list|long|object|sbyte|short|string|ulong|uint|ufloat|ulong|ushort|void)\\b/, null],\n        [PR['PR_LITERAL'], /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR['PR_TYPE'], /^@[A-Z]+[a-z][A-Za-z_$@0-9]*/, null],\n        [PR['PR_PLAIN'], /^'?[A-Za-z_$][a-z_$@0-9]*/i, null],\n        [PR['PR_LITERAL'], new RegExp(\n             '^(?:'\n  // A hex number\n             + '0x[a-f0-9]+'\n  // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n  // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n  // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'), null, '0123456789'],\n\n        [PR['PR_PUNCTUATION'], /^.[^\\s\\w\\.$@\\'\\\"\\`\\/\\#]*/, null]\n      ]),\n      ['n', 'nemerle']);\n})();\n","date":"2019-04-30T08:09:45.654Z","updated":"2019-04-30T08:09:45.654Z","path":"plugins/prettify/lang-n.js","layout":"false","title":"","comments":1,"_id":"cjxh80elx001i6c9vy73dxuye","content":"/**\n * @license\n * Copyright (C) 2011 Zimin A.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the Nemerle language.\n * http://nemerle.org\n * @author Zimin A.V.\n */\n(function () {\n  // http://nemerle.org/wiki/index.php?title=Base_keywords\n  var keywords = 'abstract|and|as|base|catch|class|def|delegate|enum|event|extern|false|finally|'\n         + 'fun|implements|interface|internal|is|macro|match|matches|module|mutable|namespace|new|'\n         + 'null|out|override|params|partial|private|protected|public|ref|sealed|static|struct|'\n         + 'syntax|this|throw|true|try|type|typeof|using|variant|virtual|volatile|when|where|with|'\n         + 'assert|assert2|async|break|checked|continue|do|else|ensures|for|foreach|if|late|lock|new|nolate|'\n         + 'otherwise|regexp|repeat|requires|return|surroundwith|unchecked|unless|using|while|yield';\n\n  PR['registerLangHandler'](PR['createSimpleLexer'](\n      // shortcutStylePatterns\n      [\n        [PR['PR_STRING'], /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*\\'|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/, null, '\"'],\n        [PR['PR_COMMENT'], /^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\r\\n]*)/, null, '#'],\n        [PR['PR_PLAIN'], /^\\s+/, null, ' \\r\\n\\t\\xA0']\n      ],\n      // fallthroughStylePatterns\n      [\n        [PR['PR_STRING'], /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null],\n        [PR['PR_STRING'], /^<#(?:[^#>])*(?:#>|$)/, null],\n        [PR['PR_STRING'], /^<(?:(?:(?:\\.\\.\\ )*|\\ ?)(?:[\\w-]+(?:\\ [\\w-]+)+)?[\\w-]+\\.h|[a-z]\\w*)>/, null],\n        [PR['PR_COMMENT'], /^\\/\\/[^\\r\\n]*/, null],\n        [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null],\n        [PR['PR_KEYWORD'], new RegExp('^(?:' + keywords + ')\\\\b'), null],\n        [PR['PR_TYPE'], /^(?:array|bool|byte|char|decimal|double|float|int|list|long|object|sbyte|short|string|ulong|uint|ufloat|ulong|ushort|void)\\b/, null],\n        [PR['PR_LITERAL'], /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR['PR_TYPE'], /^@[A-Z]+[a-z][A-Za-z_$@0-9]*/, null],\n        [PR['PR_PLAIN'], /^'?[A-Za-z_$][a-z_$@0-9]*/i, null],\n        [PR['PR_LITERAL'], new RegExp(\n             '^(?:'\n  // A hex number\n             + '0x[a-f0-9]+'\n  // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n  // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n  // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'), null, '0123456789'],\n\n        [PR['PR_PUNCTUATION'], /^.[^\\s\\w\\.$@\\'\\\"\\`\\/\\#]*/, null]\n      ]),\n      ['n', 'nemerle']);\n})();\n</(?:(?:(?:\\.\\.\\></#(?:[^#>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2011 Zimin A.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the Nemerle language.\n * http://nemerle.org\n * @author Zimin A.V.\n */\n(function () {\n  // http://nemerle.org/wiki/index.php?title=Base_keywords\n  var keywords = 'abstract|and|as|base|catch|class|def|delegate|enum|event|extern|false|finally|'\n         + 'fun|implements|interface|internal|is|macro|match|matches|module|mutable|namespace|new|'\n         + 'null|out|override|params|partial|private|protected|public|ref|sealed|static|struct|'\n         + 'syntax|this|throw|true|try|type|typeof|using|variant|virtual|volatile|when|where|with|'\n         + 'assert|assert2|async|break|checked|continue|do|else|ensures|for|foreach|if|late|lock|new|nolate|'\n         + 'otherwise|regexp|repeat|requires|return|surroundwith|unchecked|unless|using|while|yield';\n\n  PR['registerLangHandler'](PR['createSimpleLexer'](\n      // shortcutStylePatterns\n      [\n        [PR['PR_STRING'], /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*\\'|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/, null, '\"'],\n        [PR['PR_COMMENT'], /^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\r\\n]*)/, null, '#'],\n        [PR['PR_PLAIN'], /^\\s+/, null, ' \\r\\n\\t\\xA0']\n      ],\n      // fallthroughStylePatterns\n      [\n        [PR['PR_STRING'], /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null],\n        [PR['PR_STRING'], /^<#(?:[^#>])*(?:#>|$)/, null],\n        [PR['PR_STRING'], /^<(?:(?:(?:\\.\\.\\ )*|\\ ?)(?:[\\w-]+(?:\\ [\\w-]+)+)?[\\w-]+\\.h|[a-z]\\w*)>/, null],\n        [PR['PR_COMMENT'], /^\\/\\/[^\\r\\n]*/, null],\n        [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null],\n        [PR['PR_KEYWORD'], new RegExp('^(?:' + keywords + ')\\\\b'), null],\n        [PR['PR_TYPE'], /^(?:array|bool|byte|char|decimal|double|float|int|list|long|object|sbyte|short|string|ulong|uint|ufloat|ulong|ushort|void)\\b/, null],\n        [PR['PR_LITERAL'], /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR['PR_TYPE'], /^@[A-Z]+[a-z][A-Za-z_$@0-9]*/, null],\n        [PR['PR_PLAIN'], /^'?[A-Za-z_$][a-z_$@0-9]*/i, null],\n        [PR['PR_LITERAL'], new RegExp(\n             '^(?:'\n  // A hex number\n             + '0x[a-f0-9]+'\n  // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n  // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n  // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'), null, '0123456789'],\n\n        [PR['PR_PUNCTUATION'], /^.[^\\s\\w\\.$@\\'\\\"\\`\\/\\#]*/, null]\n      ]),\n      ['n', 'nemerle']);\n})();\n</(?:(?:(?:\\.\\.\\></#(?:[^#>"},{"_content":"/**\n * @license\n * Copyright (C) 2011 Kitware Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for MUMPS.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-mumps\">(my SQL code)</pre>\n * \n * Commands, intrinsic functions and variables taken from ISO/IEC 11756:1999(E)\n *\n * @author chris.harris@kitware.com\n *\n * Known issues:\n * \n * - Currently can't distinguish between keywords and local or global variables having the same name\n *   for exampe SET IF=\"IF?\"\n * - m file are already used for MatLab hence using mumps.\n */\n\n(function () {\n\n\nvar commands = 'B|BREAK|'       + \n               'C|CLOSE|'       +\n               'D|DO|'          +\n               'E|ELSE|'        +\n               'F|FOR|'         +\n               'G|GOTO|'        +\n               'H|HALT|'        +\n               'H|HANG|'        +\n               'I|IF|'          +\n               'J|JOB|'         +\n               'K|KILL|'        +\n               'L|LOCK|'        +\n               'M|MERGE|'       +\n               'N|NEW|'         +\n               'O|OPEN|'        +     \n               'Q|QUIT|'        +\n               'R|READ|'        +\n               'S|SET|'         +\n               'TC|TCOMMIT|'    +\n               'TRE|TRESTART|'  +\n               'TRO|TROLLBACK|' +\n               'TS|TSTART|'     +\n               'U|USE|'         +\n               'V|VIEW|'        +  \n               'W|WRITE|'       +\n               'X|XECUTE';\n\nvar intrinsicVariables = 'D|DEVICE|'       +\n                         'EC|ECODE|'       +  \n                         'ES|ESTACK|'      +\n                         'ET|ETRAP|'       +\n                         'H|HOROLOG|'      +\n                         'I|IO|'           +\n                         'J|JOB|'          +\n                         'K|KEY|'          +\n                         'P|PRINCIPAL|'    +\n                         'Q|QUIT|'         +\n                         'ST|STACK|'       +\n                         'S|STORAGE|'      +\n                         'SY|SYSTEM|'      +\n                         'T|TEST|'         +\n                         'TL|TLEVEL|'      +\n                         'TR|TRESTART|'    +\n                         'X|'              +\n                         'Y|'              +\n                         'Z[A-Z]*|';    \n\nvar intrinsicFunctions = 'A|ASCII|'        +\n                         'C|CHAR|'         +\n                         'D|DATA|'         +\n                         'E|EXTRACT|'      +\n                         'F|FIND|'         +\n                         'FN|FNUMBER|'     +\n                         'G|GET|'          +\n                         'J|JUSTIFY|'      +\n                         'L|LENGTH|'       +\n                         'NA|NAME|'        +\n                         'O|ORDER|'        +\n                         'P|PIECE|'        +\n                         'QL|QLENGTH|'     +\n                         'QS|QSUBSCRIPT|'  +\n                         'Q|QUERY|'        +\n                         'R|RANDOM|'       +\n                         'RE|REVERSE|'     +\n                         'S|SELECT|'       +\n                         'ST|STACK|'       +\n                         'T|TEXT|'         +\n                         'TR|TRANSLATE|'   +\n                         'V|VIEW|'         * \n                         'Z[A-Z]*|';   \n\nvar intrinsic = intrinsicVariables + intrinsicFunctions;                  \n\n\nvar shortcutStylePatterns = [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\"(?:[^\"]|\\\\.)*\")/, null, '\"']\n  ];\n\nvar fallthroughStylePatterns = [\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Add intrinsic variables and functions as declarations, there not really but it mean\n         // they will hilighted differently from commands.\n         [PR['PR_DECLARATION'], new RegExp('^(?:\\\\$(?:' + intrinsic + '))\\\\b', 'i'), null],\n         // Add commands as keywords\n         [PR['PR_KEYWORD'], new RegExp('^(?:[^\\\\$]' + commands + ')\\\\b', 'i'), null],\n         // A number is a decimal real literal or in scientific notation. \n         [PR['PR_LITERAL'],\n          /^[+-]?(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:E[+\\-]?\\d+)?)/i], \n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z][a-zA-Z0-9]*/i],\n         // Exclude $ % and ^\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r\\xA0\\\"\\$;%\\^]|_/]\n  ];\n// Can't use m as its already used for MatLab\nPR.registerLangHandler(PR.createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns), ['mumps']);\n})();\n","source":"plugins/prettify/lang-mumps.js","raw":"/**\n * @license\n * Copyright (C) 2011 Kitware Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for MUMPS.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-mumps\">(my SQL code)</pre>\n * \n * Commands, intrinsic functions and variables taken from ISO/IEC 11756:1999(E)\n *\n * @author chris.harris@kitware.com\n *\n * Known issues:\n * \n * - Currently can't distinguish between keywords and local or global variables having the same name\n *   for exampe SET IF=\"IF?\"\n * - m file are already used for MatLab hence using mumps.\n */\n\n(function () {\n\n\nvar commands = 'B|BREAK|'       + \n               'C|CLOSE|'       +\n               'D|DO|'          +\n               'E|ELSE|'        +\n               'F|FOR|'         +\n               'G|GOTO|'        +\n               'H|HALT|'        +\n               'H|HANG|'        +\n               'I|IF|'          +\n               'J|JOB|'         +\n               'K|KILL|'        +\n               'L|LOCK|'        +\n               'M|MERGE|'       +\n               'N|NEW|'         +\n               'O|OPEN|'        +     \n               'Q|QUIT|'        +\n               'R|READ|'        +\n               'S|SET|'         +\n               'TC|TCOMMIT|'    +\n               'TRE|TRESTART|'  +\n               'TRO|TROLLBACK|' +\n               'TS|TSTART|'     +\n               'U|USE|'         +\n               'V|VIEW|'        +  \n               'W|WRITE|'       +\n               'X|XECUTE';\n\nvar intrinsicVariables = 'D|DEVICE|'       +\n                         'EC|ECODE|'       +  \n                         'ES|ESTACK|'      +\n                         'ET|ETRAP|'       +\n                         'H|HOROLOG|'      +\n                         'I|IO|'           +\n                         'J|JOB|'          +\n                         'K|KEY|'          +\n                         'P|PRINCIPAL|'    +\n                         'Q|QUIT|'         +\n                         'ST|STACK|'       +\n                         'S|STORAGE|'      +\n                         'SY|SYSTEM|'      +\n                         'T|TEST|'         +\n                         'TL|TLEVEL|'      +\n                         'TR|TRESTART|'    +\n                         'X|'              +\n                         'Y|'              +\n                         'Z[A-Z]*|';    \n\nvar intrinsicFunctions = 'A|ASCII|'        +\n                         'C|CHAR|'         +\n                         'D|DATA|'         +\n                         'E|EXTRACT|'      +\n                         'F|FIND|'         +\n                         'FN|FNUMBER|'     +\n                         'G|GET|'          +\n                         'J|JUSTIFY|'      +\n                         'L|LENGTH|'       +\n                         'NA|NAME|'        +\n                         'O|ORDER|'        +\n                         'P|PIECE|'        +\n                         'QL|QLENGTH|'     +\n                         'QS|QSUBSCRIPT|'  +\n                         'Q|QUERY|'        +\n                         'R|RANDOM|'       +\n                         'RE|REVERSE|'     +\n                         'S|SELECT|'       +\n                         'ST|STACK|'       +\n                         'T|TEXT|'         +\n                         'TR|TRANSLATE|'   +\n                         'V|VIEW|'         * \n                         'Z[A-Z]*|';   \n\nvar intrinsic = intrinsicVariables + intrinsicFunctions;                  \n\n\nvar shortcutStylePatterns = [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\"(?:[^\"]|\\\\.)*\")/, null, '\"']\n  ];\n\nvar fallthroughStylePatterns = [\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Add intrinsic variables and functions as declarations, there not really but it mean\n         // they will hilighted differently from commands.\n         [PR['PR_DECLARATION'], new RegExp('^(?:\\\\$(?:' + intrinsic + '))\\\\b', 'i'), null],\n         // Add commands as keywords\n         [PR['PR_KEYWORD'], new RegExp('^(?:[^\\\\$]' + commands + ')\\\\b', 'i'), null],\n         // A number is a decimal real literal or in scientific notation. \n         [PR['PR_LITERAL'],\n          /^[+-]?(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:E[+\\-]?\\d+)?)/i], \n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z][a-zA-Z0-9]*/i],\n         // Exclude $ % and ^\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r\\xA0\\\"\\$;%\\^]|_/]\n  ];\n// Can't use m as its already used for MatLab\nPR.registerLangHandler(PR.createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns), ['mumps']);\n})();\n","date":"2019-04-30T08:09:45.634Z","updated":"2019-04-30T08:09:45.634Z","path":"plugins/prettify/lang-mumps.js","layout":"false","title":"","comments":1,"_id":"cjxh80ely001j6c9vm0bvk8hk","content":"/**\n * @license\n * Copyright (C) 2011 Kitware Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for MUMPS.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-mumps\">(my SQL code)</pre>\n * \n * Commands, intrinsic functions and variables taken from ISO/IEC 11756:1999(E)\n *\n * @author chris.harris@kitware.com\n *\n * Known issues:\n * \n * - Currently can't distinguish between keywords and local or global variables having the same name\n *   for exampe SET IF=\"IF?\"\n * - m file are already used for MatLab hence using mumps.\n */\n\n(function () {\n\n\nvar commands = 'B|BREAK|'       + \n               'C|CLOSE|'       +\n               'D|DO|'          +\n               'E|ELSE|'        +\n               'F|FOR|'         +\n               'G|GOTO|'        +\n               'H|HALT|'        +\n               'H|HANG|'        +\n               'I|IF|'          +\n               'J|JOB|'         +\n               'K|KILL|'        +\n               'L|LOCK|'        +\n               'M|MERGE|'       +\n               'N|NEW|'         +\n               'O|OPEN|'        +     \n               'Q|QUIT|'        +\n               'R|READ|'        +\n               'S|SET|'         +\n               'TC|TCOMMIT|'    +\n               'TRE|TRESTART|'  +\n               'TRO|TROLLBACK|' +\n               'TS|TSTART|'     +\n               'U|USE|'         +\n               'V|VIEW|'        +  \n               'W|WRITE|'       +\n               'X|XECUTE';\n\nvar intrinsicVariables = 'D|DEVICE|'       +\n                         'EC|ECODE|'       +  \n                         'ES|ESTACK|'      +\n                         'ET|ETRAP|'       +\n                         'H|HOROLOG|'      +\n                         'I|IO|'           +\n                         'J|JOB|'          +\n                         'K|KEY|'          +\n                         'P|PRINCIPAL|'    +\n                         'Q|QUIT|'         +\n                         'ST|STACK|'       +\n                         'S|STORAGE|'      +\n                         'SY|SYSTEM|'      +\n                         'T|TEST|'         +\n                         'TL|TLEVEL|'      +\n                         'TR|TRESTART|'    +\n                         'X|'              +\n                         'Y|'              +\n                         'Z[A-Z]*|';    \n\nvar intrinsicFunctions = 'A|ASCII|'        +\n                         'C|CHAR|'         +\n                         'D|DATA|'         +\n                         'E|EXTRACT|'      +\n                         'F|FIND|'         +\n                         'FN|FNUMBER|'     +\n                         'G|GET|'          +\n                         'J|JUSTIFY|'      +\n                         'L|LENGTH|'       +\n                         'NA|NAME|'        +\n                         'O|ORDER|'        +\n                         'P|PIECE|'        +\n                         'QL|QLENGTH|'     +\n                         'QS|QSUBSCRIPT|'  +\n                         'Q|QUERY|'        +\n                         'R|RANDOM|'       +\n                         'RE|REVERSE|'     +\n                         'S|SELECT|'       +\n                         'ST|STACK|'       +\n                         'T|TEXT|'         +\n                         'TR|TRANSLATE|'   +\n                         'V|VIEW|'         * \n                         'Z[A-Z]*|';   \n\nvar intrinsic = intrinsicVariables + intrinsicFunctions;                  \n\n\nvar shortcutStylePatterns = [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\"(?:[^\"]|\\\\.)*\")/, null, '\"']\n  ];\n\nvar fallthroughStylePatterns = [\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Add intrinsic variables and functions as declarations, there not really but it mean\n         // they will hilighted differently from commands.\n         [PR['PR_DECLARATION'], new RegExp('^(?:\\\\$(?:' + intrinsic + '))\\\\b', 'i'), null],\n         // Add commands as keywords\n         [PR['PR_KEYWORD'], new RegExp('^(?:[^\\\\$]' + commands + ')\\\\b', 'i'), null],\n         // A number is a decimal real literal or in scientific notation. \n         [PR['PR_LITERAL'],\n          /^[+-]?(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:E[+\\-]?\\d+)?)/i], \n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z][a-zA-Z0-9]*/i],\n         // Exclude $ % and ^\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r\\xA0\\\"\\$;%\\^]|_/]\n  ];\n// Can't use m as its already used for MatLab\nPR.registerLangHandler(PR.createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns), ['mumps']);\n})();\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2011 Kitware Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for MUMPS.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-mumps\">(my SQL code)</pre>\n * \n * Commands, intrinsic functions and variables taken from ISO/IEC 11756:1999(E)\n *\n * @author chris.harris@kitware.com\n *\n * Known issues:\n * \n * - Currently can't distinguish between keywords and local or global variables having the same name\n *   for exampe SET IF=\"IF?\"\n * - m file are already used for MatLab hence using mumps.\n */\n\n(function () {\n\n\nvar commands = 'B|BREAK|'       + \n               'C|CLOSE|'       +\n               'D|DO|'          +\n               'E|ELSE|'        +\n               'F|FOR|'         +\n               'G|GOTO|'        +\n               'H|HALT|'        +\n               'H|HANG|'        +\n               'I|IF|'          +\n               'J|JOB|'         +\n               'K|KILL|'        +\n               'L|LOCK|'        +\n               'M|MERGE|'       +\n               'N|NEW|'         +\n               'O|OPEN|'        +     \n               'Q|QUIT|'        +\n               'R|READ|'        +\n               'S|SET|'         +\n               'TC|TCOMMIT|'    +\n               'TRE|TRESTART|'  +\n               'TRO|TROLLBACK|' +\n               'TS|TSTART|'     +\n               'U|USE|'         +\n               'V|VIEW|'        +  \n               'W|WRITE|'       +\n               'X|XECUTE';\n\nvar intrinsicVariables = 'D|DEVICE|'       +\n                         'EC|ECODE|'       +  \n                         'ES|ESTACK|'      +\n                         'ET|ETRAP|'       +\n                         'H|HOROLOG|'      +\n                         'I|IO|'           +\n                         'J|JOB|'          +\n                         'K|KEY|'          +\n                         'P|PRINCIPAL|'    +\n                         'Q|QUIT|'         +\n                         'ST|STACK|'       +\n                         'S|STORAGE|'      +\n                         'SY|SYSTEM|'      +\n                         'T|TEST|'         +\n                         'TL|TLEVEL|'      +\n                         'TR|TRESTART|'    +\n                         'X|'              +\n                         'Y|'              +\n                         'Z[A-Z]*|';    \n\nvar intrinsicFunctions = 'A|ASCII|'        +\n                         'C|CHAR|'         +\n                         'D|DATA|'         +\n                         'E|EXTRACT|'      +\n                         'F|FIND|'         +\n                         'FN|FNUMBER|'     +\n                         'G|GET|'          +\n                         'J|JUSTIFY|'      +\n                         'L|LENGTH|'       +\n                         'NA|NAME|'        +\n                         'O|ORDER|'        +\n                         'P|PIECE|'        +\n                         'QL|QLENGTH|'     +\n                         'QS|QSUBSCRIPT|'  +\n                         'Q|QUERY|'        +\n                         'R|RANDOM|'       +\n                         'RE|REVERSE|'     +\n                         'S|SELECT|'       +\n                         'ST|STACK|'       +\n                         'T|TEXT|'         +\n                         'TR|TRANSLATE|'   +\n                         'V|VIEW|'         * \n                         'Z[A-Z]*|';   \n\nvar intrinsic = intrinsicVariables + intrinsicFunctions;                  \n\n\nvar shortcutStylePatterns = [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\"(?:[^\"]|\\\\.)*\")/, null, '\"']\n  ];\n\nvar fallthroughStylePatterns = [\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Add intrinsic variables and functions as declarations, there not really but it mean\n         // they will hilighted differently from commands.\n         [PR['PR_DECLARATION'], new RegExp('^(?:\\\\$(?:' + intrinsic + '))\\\\b', 'i'), null],\n         // Add commands as keywords\n         [PR['PR_KEYWORD'], new RegExp('^(?:[^\\\\$]' + commands + ')\\\\b', 'i'), null],\n         // A number is a decimal real literal or in scientific notation. \n         [PR['PR_LITERAL'],\n          /^[+-]?(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:E[+\\-]?\\d+)?)/i], \n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z][a-zA-Z0-9]*/i],\n         // Exclude $ % and ^\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r\\xA0\\\"\\$;%\\^]|_/]\n  ];\n// Can't use m as its already used for MatLab\nPR.registerLangHandler(PR.createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns), ['mumps']);\n})();\n"},{"_content":"/**\n * @license\n * Copyright (c) 2013 by Amro <amroamroamro@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for MATLAB.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code inside an HTML tag like\n *     <pre class=\"prettyprint lang-matlab\">\n *     </pre>\n *\n * @see https://github.com/amroamroamro/prettify-matlab\n */\n(function (PR) {\n  /*\n    PR_PLAIN: plain text\n    PR_STRING: string literals\n    PR_KEYWORD: keywords\n    PR_COMMENT: comments\n    PR_TYPE: types\n    PR_LITERAL: literal values (1, null, true, ..)\n    PR_PUNCTUATION: punctuation string\n    PR_SOURCE: embedded source\n    PR_DECLARATION: markup declaration such as a DOCTYPE\n    PR_TAG: sgml tag\n    PR_ATTRIB_NAME: sgml attribute name\n    PR_ATTRIB_VALUE: sgml attribute value\n  */\n  var PR_IDENTIFIER = \"ident\",\n    PR_CONSTANT = \"const\",\n    PR_FUNCTION = \"fun\",\n    PR_FUNCTION_TOOLBOX = \"fun_tbx\",\n    PR_SYSCMD = \"syscmd\",\n    PR_CODE_OUTPUT = \"codeoutput\",\n    PR_ERROR = \"err\",\n    PR_WARNING = \"wrn\",\n    PR_TRANSPOSE = \"transpose\",\n    PR_LINE_CONTINUATION = \"linecont\";\n\n  // Refer to: http://www.mathworks.com/help/matlab/functionlist-alpha.html\n  var coreFunctions = [\n    'abs|accumarray|acos(?:d|h)?|acot(?:d|h)?|acsc(?:d|h)?|actxcontrol(?:list|select)?|actxGetRunningServer|actxserver|addlistener|addpath|addpref|addtodate|airy|align|alim|all|allchild|alpha|alphamap|amd|ancestor|and|angle|annotation|any|area|arrayfun|asec(?:d|h)?|asin(?:d|h)?|assert|assignin|atan(?:2|d|h)?|audiodevinfo|audioplayer|audiorecorder|aufinfo|auread|autumn|auwrite|avifile|aviinfo|aviread|axes|axis|balance|bar(?:3|3h|h)?|base2dec|beep|BeginInvoke|bench|bessel(?:h|i|j|k|y)|beta|betainc|betaincinv|betaln|bicg|bicgstab|bicgstabl|bin2dec|bitand|bitcmp|bitget|bitmax|bitnot|bitor|bitset|bitshift|bitxor|blanks|blkdiag|bone|box|brighten|brush|bsxfun|builddocsearchdb|builtin|bvp4c|bvp5c|bvpget|bvpinit|bvpset|bvpxtend|calendar|calllib|callSoapService|camdolly|cameratoolbar|camlight|camlookat|camorbit|campan|campos|camproj|camroll|camtarget|camup|camva|camzoom|cart2pol|cart2sph|cast|cat|caxis|cd|cdf2rdf|cdfepoch|cdfinfo|cdflib(?:\\.(?:close|closeVar|computeEpoch|computeEpoch16|create|createAttr|createVar|delete|deleteAttr|deleteAttrEntry|deleteAttrgEntry|deleteVar|deleteVarRecords|epoch16Breakdown|epochBreakdown|getAttrEntry|getAttrgEntry|getAttrMaxEntry|getAttrMaxgEntry|getAttrName|getAttrNum|getAttrScope|getCacheSize|getChecksum|getCompression|getCompressionCacheSize|getConstantNames|getConstantValue|getCopyright|getFileBackward|getFormat|getLibraryCopyright|getLibraryVersion|getMajority|getName|getNumAttrEntries|getNumAttrgEntries|getNumAttributes|getNumgAttributes|getReadOnlyMode|getStageCacheSize|getValidate|getVarAllocRecords|getVarBlockingFactor|getVarCacheSize|getVarCompression|getVarData|getVarMaxAllocRecNum|getVarMaxWrittenRecNum|getVarName|getVarNum|getVarNumRecsWritten|getVarPadValue|getVarRecordData|getVarReservePercent|getVarsMaxWrittenRecNum|getVarSparseRecords|getVersion|hyperGetVarData|hyperPutVarData|inquire|inquireAttr|inquireAttrEntry|inquireAttrgEntry|inquireVar|open|putAttrEntry|putAttrgEntry|putVarData|putVarRecordData|renameAttr|renameVar|setCacheSize|setChecksum|setCompression|setCompressionCacheSize|setFileBackward|setFormat|setMajority|setReadOnlyMode|setStageCacheSize|setValidate|setVarAllocBlockRecords|setVarBlockingFactor|setVarCacheSize|setVarCompression|setVarInitialRecs|setVarPadValue|SetVarReservePercent|setVarsCacheSize|setVarSparseRecords))?|cdfread|cdfwrite|ceil|cell2mat|cell2struct|celldisp|cellfun|cellplot|cellstr|cgs|checkcode|checkin|checkout|chol|cholinc|cholupdate|circshift|cla|clabel|class|clc|clear|clearvars|clf|clipboard|clock|close|closereq|cmopts|cmpermute|cmunique|colamd|colon|colorbar|colordef|colormap|colormapeditor|colperm|Combine|comet|comet3|commandhistory|commandwindow|compan|compass|complex|computer|cond|condeig|condest|coneplot|conj|containers\\.Map|contour(?:3|c|f|slice)?|contrast|conv|conv2|convhull|convhulln|convn|cool|copper|copyfile|copyobj|corrcoef|cos(?:d|h)?|cot(?:d|h)?|cov|cplxpair|cputime|createClassFromWsdl|createSoapMessage|cross|csc(?:d|h)?|csvread|csvwrite|ctranspose|cumprod|cumsum|cumtrapz|curl|customverctrl|cylinder|daqread|daspect|datacursormode|datatipinfo|date|datenum|datestr|datetick|datevec|dbclear|dbcont|dbdown|dblquad|dbmex|dbquit|dbstack|dbstatus|dbstep|dbstop|dbtype|dbup|dde23|ddeget|ddesd|ddeset|deal|deblank|dec2base|dec2bin|dec2hex|decic|deconv|del2|delaunay|delaunay3|delaunayn|DelaunayTri|delete|demo|depdir|depfun|det|detrend|deval|diag|dialog|diary|diff|diffuse|dir|disp|display|dither|divergence|dlmread|dlmwrite|dmperm|doc|docsearch|dos|dot|dragrect|drawnow|dsearch|dsearchn|dynamicprops|echo|echodemo|edit|eig|eigs|ellipj|ellipke|ellipsoid|empty|enableNETfromNetworkDrive|enableservice|EndInvoke|enumeration|eomday|eq|erf|erfc|erfcinv|erfcx|erfinv|error|errorbar|errordlg|etime|etree|etreeplot|eval|evalc|evalin|event\\.(?:EventData|listener|PropertyEvent|proplistener)|exifread|exist|exit|exp|expint|expm|expm1|export2wsdlg|eye|ezcontour|ezcontourf|ezmesh|ezmeshc|ezplot|ezplot3|ezpolar|ezsurf|ezsurfc|factor|factorial|fclose|feather|feature|feof|ferror|feval|fft|fft2|fftn|fftshift|fftw|fgetl|fgets|fieldnames|figure|figurepalette|fileattrib|filebrowser|filemarker|fileparts|fileread|filesep|fill|fill3|filter|filter2|find|findall|findfigs|findobj|findstr|finish|fitsdisp|fitsinfo|fitsread|fitswrite|fix|flag|flipdim|fliplr|flipud|floor|flow|fminbnd|fminsearch|fopen|format|fplot|fprintf|frame2im|fread|freqspace|frewind|fscanf|fseek|ftell|FTP|full|fullfile|func2str|functions|funm|fwrite|fzero|gallery|gamma|gammainc|gammaincinv|gammaln|gca|gcbf|gcbo|gcd|gcf|gco|ge|genpath|genvarname|get|getappdata|getenv|getfield|getframe|getpixelposition|getpref|ginput|gmres|gplot|grabcode|gradient|gray|graymon|grid|griddata(?:3|n)?|griddedInterpolant|gsvd|gt|gtext|guidata|guide|guihandles|gunzip|gzip|h5create|h5disp|h5info|h5read|h5readatt|h5write|h5writeatt|hadamard|handle|hankel|hdf|hdf5|hdf5info|hdf5read|hdf5write|hdfinfo|hdfread|hdftool|help|helpbrowser|helpdesk|helpdlg|helpwin|hess|hex2dec|hex2num|hgexport|hggroup|hgload|hgsave|hgsetget|hgtransform|hidden|hilb|hist|histc|hold|home|horzcat|hostid|hot|hsv|hsv2rgb|hypot|ichol|idivide|ifft|ifft2|ifftn|ifftshift|ilu|im2frame|im2java|imag|image|imagesc|imapprox|imfinfo|imformats|import|importdata|imread|imwrite|ind2rgb|ind2sub|inferiorto|info|inline|inmem|inpolygon|input|inputdlg|inputname|inputParser|inspect|instrcallback|instrfind|instrfindall|int2str|integral(?:2|3)?|interp(?:1|1q|2|3|ft|n)|interpstreamspeed|intersect|intmax|intmin|inv|invhilb|ipermute|isa|isappdata|iscell|iscellstr|ischar|iscolumn|isdir|isempty|isequal|isequaln|isequalwithequalnans|isfield|isfinite|isfloat|isglobal|ishandle|ishghandle|ishold|isinf|isinteger|isjava|iskeyword|isletter|islogical|ismac|ismatrix|ismember|ismethod|isnan|isnumeric|isobject|isocaps|isocolors|isonormals|isosurface|ispc|ispref|isprime|isprop|isreal|isrow|isscalar|issorted|isspace|issparse|isstr|isstrprop|isstruct|isstudent|isunix|isvarname|isvector|javaaddpath|javaArray|javachk|javaclasspath|javacomponent|javaMethod|javaMethodEDT|javaObject|javaObjectEDT|javarmpath|jet|keyboard|kron|lasterr|lasterror|lastwarn|lcm|ldivide|ldl|le|legend|legendre|length|libfunctions|libfunctionsview|libisloaded|libpointer|libstruct|license|light|lightangle|lighting|lin2mu|line|lines|linkaxes|linkdata|linkprop|linsolve|linspace|listdlg|listfonts|load|loadlibrary|loadobj|log|log10|log1p|log2|loglog|logm|logspace|lookfor|lower|ls|lscov|lsqnonneg|lsqr|lt|lu|luinc|magic|makehgtform|mat2cell|mat2str|material|matfile|matlab\\.io\\.MatFile|matlab\\.mixin\\.(?:Copyable|Heterogeneous(?:\\.getDefaultScalarElement)?)|matlabrc|matlabroot|max|maxNumCompThreads|mean|median|membrane|memmapfile|memory|menu|mesh|meshc|meshgrid|meshz|meta\\.(?:class(?:\\.fromName)?|DynamicProperty|EnumeratedValue|event|MetaData|method|package(?:\\.(?:fromName|getAllPackages))?|property)|metaclass|methods|methodsview|mex(?:\\.getCompilerConfigurations)?|MException|mexext|mfilename|min|minres|minus|mislocked|mkdir|mkpp|mldivide|mlint|mlintrpt|mlock|mmfileinfo|mmreader|mod|mode|more|move|movefile|movegui|movie|movie2avi|mpower|mrdivide|msgbox|mtimes|mu2lin|multibandread|multibandwrite|munlock|namelengthmax|nargchk|narginchk|nargoutchk|native2unicode|nccreate|ncdisp|nchoosek|ncinfo|ncread|ncreadatt|ncwrite|ncwriteatt|ncwriteschema|ndgrid|ndims|ne|NET(?:\\.(?:addAssembly|Assembly|convertArray|createArray|createGeneric|disableAutoRelease|enableAutoRelease|GenericClass|invokeGenericMethod|NetException|setStaticProperty))?|netcdf\\.(?:abort|close|copyAtt|create|defDim|defGrp|defVar|defVarChunking|defVarDeflate|defVarFill|defVarFletcher32|delAtt|endDef|getAtt|getChunkCache|getConstant|getConstantNames|getVar|inq|inqAtt|inqAttID|inqAttName|inqDim|inqDimID|inqDimIDs|inqFormat|inqGrpName|inqGrpNameFull|inqGrpParent|inqGrps|inqLibVers|inqNcid|inqUnlimDims|inqVar|inqVarChunking|inqVarDeflate|inqVarFill|inqVarFletcher32|inqVarID|inqVarIDs|open|putAtt|putVar|reDef|renameAtt|renameDim|renameVar|setChunkCache|setDefaultFormat|setFill|sync)|newplot|nextpow2|nnz|noanimate|nonzeros|norm|normest|not|notebook|now|nthroot|null|num2cell|num2hex|num2str|numel|nzmax|ode(?:113|15i|15s|23|23s|23t|23tb|45)|odeget|odeset|odextend|onCleanup|ones|open|openfig|opengl|openvar|optimget|optimset|or|ordeig|orderfields|ordqz|ordschur|orient|orth|pack|padecoef|pagesetupdlg|pan|pareto|parseSoapResponse|pascal|patch|path|path2rc|pathsep|pathtool|pause|pbaspect|pcg|pchip|pcode|pcolor|pdepe|pdeval|peaks|perl|perms|permute|pie|pink|pinv|planerot|playshow|plot|plot3|plotbrowser|plotedit|plotmatrix|plottools|plotyy|plus|pol2cart|polar|poly|polyarea|polyder|polyeig|polyfit|polyint|polyval|polyvalm|pow2|power|ppval|prefdir|preferences|primes|print|printdlg|printopt|printpreview|prod|profile|profsave|propedit|propertyeditor|psi|publish|PutCharArray|PutFullMatrix|PutWorkspaceData|pwd|qhull|qmr|qr|qrdelete|qrinsert|qrupdate|quad|quad2d|quadgk|quadl|quadv|questdlg|quit|quiver|quiver3|qz|rand|randi|randn|randperm|RandStream(?:\\.(?:create|getDefaultStream|getGlobalStream|list|setDefaultStream|setGlobalStream))?|rank|rat|rats|rbbox|rcond|rdivide|readasync|real|reallog|realmax|realmin|realpow|realsqrt|record|rectangle|rectint|recycle|reducepatch|reducevolume|refresh|refreshdata|regexp|regexpi|regexprep|regexptranslate|rehash|rem|Remove|RemoveAll|repmat|reset|reshape|residue|restoredefaultpath|rethrow|rgb2hsv|rgb2ind|rgbplot|ribbon|rmappdata|rmdir|rmfield|rmpath|rmpref|rng|roots|rose|rosser|rot90|rotate|rotate3d|round|rref|rsf2csf|run|save|saveas|saveobj|savepath|scatter|scatter3|schur|sec|secd|sech|selectmoveresize|semilogx|semilogy|sendmail|serial|set|setappdata|setdiff|setenv|setfield|setpixelposition|setpref|setstr|setxor|shading|shg|shiftdim|showplottool|shrinkfaces|sign|sin(?:d|h)?|size|slice|smooth3|snapnow|sort|sortrows|sound|soundsc|spalloc|spaugment|spconvert|spdiags|specular|speye|spfun|sph2cart|sphere|spinmap|spline|spones|spparms|sprand|sprandn|sprandsym|sprank|spring|sprintf|spy|sqrt|sqrtm|squeeze|ss2tf|sscanf|stairs|startup|std|stem|stem3|stopasync|str2double|str2func|str2mat|str2num|strcat|strcmp|strcmpi|stream2|stream3|streamline|streamparticles|streamribbon|streamslice|streamtube|strfind|strjust|strmatch|strncmp|strncmpi|strread|strrep|strtok|strtrim|struct2cell|structfun|strvcat|sub2ind|subplot|subsasgn|subsindex|subspace|subsref|substruct|subvolume|sum|summer|superclasses|superiorto|support|surf|surf2patch|surface|surfc|surfl|surfnorm|svd|svds|swapbytes|symamd|symbfact|symmlq|symrcm|symvar|system|tan(?:d|h)?|tar|tempdir|tempname|tetramesh|texlabel|text|textread|textscan|textwrap|tfqmr|throw|tic|Tiff(?:\\.(?:getTagNames|getVersion))?|timer|timerfind|timerfindall|times|timeseries|title|toc|todatenum|toeplitz|toolboxdir|trace|transpose|trapz|treelayout|treeplot|tril|trimesh|triplequad|triplot|TriRep|TriScatteredInterp|trisurf|triu|tscollection|tsearch|tsearchn|tstool|type|typecast|uibuttongroup|uicontextmenu|uicontrol|uigetdir|uigetfile|uigetpref|uiimport|uimenu|uiopen|uipanel|uipushtool|uiputfile|uiresume|uisave|uisetcolor|uisetfont|uisetpref|uistack|uitable|uitoggletool|uitoolbar|uiwait|uminus|undocheckout|unicode2native|union|unique|unix|unloadlibrary|unmesh|unmkpp|untar|unwrap|unzip|uplus|upper|urlread|urlwrite|usejava|userpath|validateattributes|validatestring|vander|var|vectorize|ver|verctrl|verLessThan|version|vertcat|VideoReader(?:\\.isPlatformSupported)?|VideoWriter(?:\\.getProfiles)?|view|viewmtx|visdiff|volumebounds|voronoi|voronoin|wait|waitbar|waitfor|waitforbuttonpress|warndlg|warning|waterfall|wavfinfo|wavplay|wavread|wavrecord|wavwrite|web|weekday|what|whatsnew|which|whitebg|who|whos|wilkinson|winopen|winqueryreg|winter|wk1finfo|wk1read|wk1write|workspace|xlabel|xlim|xlsfinfo|xlsread|xlswrite|xmlread|xmlwrite|xor|xslt|ylabel|ylim|zeros|zip|zlabel|zlim|zoom'\n  ].join(\"|\");\n  var statsFunctions = [\n    'addedvarplot|andrewsplot|anova(?:1|2|n)|ansaribradley|aoctool|barttest|bbdesign|beta(?:cdf|fit|inv|like|pdf|rnd|stat)|bino(?:cdf|fit|inv|pdf|rnd|stat)|biplot|bootci|bootstrp|boxplot|candexch|candgen|canoncorr|capability|capaplot|caseread|casewrite|categorical|ccdesign|cdfplot|chi2(?:cdf|gof|inv|pdf|rnd|stat)|cholcov|Classification(?:BaggedEnsemble|Discriminant(?:\\.(?:fit|make|template))?|Ensemble|KNN(?:\\.(?:fit|template))?|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|classify|classregtree|cluster|clusterdata|cmdscale|combnk|Compact(?:Classification(?:Discriminant|Ensemble|Tree)|Regression(?:Ensemble|Tree)|TreeBagger)|confusionmat|controlchart|controlrules|cophenet|copula(?:cdf|fit|param|pdf|rnd|stat)|cordexch|corr|corrcov|coxphfit|createns|crosstab|crossval|cvpartition|datasample|dataset|daugment|dcovary|dendrogram|dfittool|disttool|dummyvar|dwtest|ecdf|ecdfhist|ev(?:cdf|fit|inv|like|pdf|rnd|stat)|ExhaustiveSearcher|exp(?:cdf|fit|inv|like|pdf|rnd|stat)|factoran|fcdf|ff2n|finv|fitdist|fitensemble|fpdf|fracfact|fracfactgen|friedman|frnd|fstat|fsurfht|fullfact|gagerr|gam(?:cdf|fit|inv|like|pdf|rnd|stat)|GeneralizedLinearModel(?:\\.fit)?|geo(?:cdf|inv|mean|pdf|rnd|stat)|gev(?:cdf|fit|inv|like|pdf|rnd|stat)|gline|glmfit|glmval|glyphplot|gmdistribution(?:\\.fit)?|gname|gp(?:cdf|fit|inv|like|pdf|rnd|stat)|gplotmatrix|grp2idx|grpstats|gscatter|haltonset|harmmean|hist3|histfit|hmm(?:decode|estimate|generate|train|viterbi)|hougen|hyge(?:cdf|inv|pdf|rnd|stat)|icdf|inconsistent|interactionplot|invpred|iqr|iwishrnd|jackknife|jbtest|johnsrnd|KDTreeSearcher|kmeans|knnsearch|kruskalwallis|ksdensity|kstest|kstest2|kurtosis|lasso|lassoglm|lassoPlot|leverage|lhsdesign|lhsnorm|lillietest|LinearModel(?:\\.fit)?|linhyptest|linkage|logn(?:cdf|fit|inv|like|pdf|rnd|stat)|lsline|mad|mahal|maineffectsplot|manova1|manovacluster|mdscale|mhsample|mle|mlecov|mnpdf|mnrfit|mnrnd|mnrval|moment|multcompare|multivarichart|mvn(?:cdf|pdf|rnd)|mvregress|mvregresslike|mvt(?:cdf|pdf|rnd)|NaiveBayes(?:\\.fit)?|nan(?:cov|max|mean|median|min|std|sum|var)|nbin(?:cdf|fit|inv|pdf|rnd|stat)|ncf(?:cdf|inv|pdf|rnd|stat)|nct(?:cdf|inv|pdf|rnd|stat)|ncx2(?:cdf|inv|pdf|rnd|stat)|NeighborSearcher|nlinfit|nlintool|nlmefit|nlmefitsa|nlparci|nlpredci|nnmf|nominal|NonLinearModel(?:\\.fit)?|norm(?:cdf|fit|inv|like|pdf|rnd|stat)|normplot|normspec|ordinal|outlierMeasure|parallelcoords|paretotails|partialcorr|pcacov|pcares|pdf|pdist|pdist2|pearsrnd|perfcurve|perms|piecewisedistribution|plsregress|poiss(?:cdf|fit|inv|pdf|rnd|tat)|polyconf|polytool|prctile|princomp|ProbDist(?:Kernel|Parametric|UnivKernel|UnivParam)?|probplot|procrustes|qqplot|qrandset|qrandstream|quantile|randg|random|randsample|randtool|range|rangesearch|ranksum|rayl(?:cdf|fit|inv|pdf|rnd|stat)|rcoplot|refcurve|refline|regress|Regression(?:BaggedEnsemble|Ensemble|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|regstats|relieff|ridge|robustdemo|robustfit|rotatefactors|rowexch|rsmdemo|rstool|runstest|sampsizepwr|scatterhist|sequentialfs|signrank|signtest|silhouette|skewness|slicesample|sobolset|squareform|statget|statset|stepwise|stepwisefit|surfht|tabulate|tblread|tblwrite|tcdf|tdfread|tiedrank|tinv|tpdf|TreeBagger|treedisp|treefit|treeprune|treetest|treeval|trimmean|trnd|tstat|ttest|ttest2|unid(?:cdf|inv|pdf|rnd|stat)|unif(?:cdf|inv|it|pdf|rnd|stat)|vartest(?:2|n)?|wbl(?:cdf|fit|inv|like|pdf|rnd|stat)|wblplot|wishrnd|x2fx|xptread|zscore|ztest'\n  ].join(\"|\");\n  var imageFunctions = [\n    'adapthisteq|analyze75info|analyze75read|applycform|applylut|axes2pix|bestblk|blockproc|bwarea|bwareaopen|bwboundaries|bwconncomp|bwconvhull|bwdist|bwdistgeodesic|bweuler|bwhitmiss|bwlabel|bwlabeln|bwmorph|bwpack|bwperim|bwselect|bwtraceboundary|bwulterode|bwunpack|checkerboard|col2im|colfilt|conndef|convmtx2|corner|cornermetric|corr2|cp2tform|cpcorr|cpselect|cpstruct2pairs|dct2|dctmtx|deconvblind|deconvlucy|deconvreg|deconvwnr|decorrstretch|demosaic|dicom(?:anon|dict|info|lookup|read|uid|write)|edge|edgetaper|entropy|entropyfilt|fan2para|fanbeam|findbounds|fliptform|freqz2|fsamp2|fspecial|ftrans2|fwind1|fwind2|getheight|getimage|getimagemodel|getline|getneighbors|getnhood|getpts|getrangefromclass|getrect|getsequence|gray2ind|graycomatrix|graycoprops|graydist|grayslice|graythresh|hdrread|hdrwrite|histeq|hough|houghlines|houghpeaks|iccfind|iccread|iccroot|iccwrite|idct2|ifanbeam|im2bw|im2col|im2double|im2int16|im2java2d|im2single|im2uint16|im2uint8|imabsdiff|imadd|imadjust|ImageAdapter|imageinfo|imagemodel|imapplymatrix|imattributes|imbothat|imclearborder|imclose|imcolormaptool|imcomplement|imcontour|imcontrast|imcrop|imdilate|imdisplayrange|imdistline|imdivide|imellipse|imerode|imextendedmax|imextendedmin|imfill|imfilter|imfindcircles|imfreehand|imfuse|imgca|imgcf|imgetfile|imhandles|imhist|imhmax|imhmin|imimposemin|imlincomb|imline|immagbox|immovie|immultiply|imnoise|imopen|imoverview|imoverviewpanel|impixel|impixelinfo|impixelinfoval|impixelregion|impixelregionpanel|implay|impoint|impoly|impositionrect|improfile|imputfile|impyramid|imreconstruct|imrect|imregconfig|imregionalmax|imregionalmin|imregister|imresize|imroi|imrotate|imsave|imscrollpanel|imshow|imshowpair|imsubtract|imtool|imtophat|imtransform|imview|ind2gray|ind2rgb|interfileinfo|interfileread|intlut|ippl|iptaddcallback|iptcheckconn|iptcheckhandle|iptcheckinput|iptcheckmap|iptchecknargin|iptcheckstrs|iptdemos|iptgetapi|iptGetPointerBehavior|iptgetpref|ipticondir|iptnum2ordinal|iptPointerManager|iptprefs|iptremovecallback|iptSetPointerBehavior|iptsetpref|iptwindowalign|iradon|isbw|isflat|isgray|isicc|isind|isnitf|isrgb|isrset|lab2double|lab2uint16|lab2uint8|label2rgb|labelmatrix|makecform|makeConstrainToRectFcn|makehdr|makelut|makeresampler|maketform|mat2gray|mean2|medfilt2|montage|nitfinfo|nitfread|nlfilter|normxcorr2|ntsc2rgb|openrset|ordfilt2|otf2psf|padarray|para2fan|phantom|poly2mask|psf2otf|qtdecomp|qtgetblk|qtsetblk|radon|rangefilt|reflect|regionprops|registration\\.metric\\.(?:MattesMutualInformation|MeanSquares)|registration\\.optimizer\\.(?:OnePlusOneEvolutionary|RegularStepGradientDescent)|rgb2gray|rgb2ntsc|rgb2ycbcr|roicolor|roifill|roifilt2|roipoly|rsetwrite|std2|stdfilt|strel|stretchlim|subimage|tformarray|tformfwd|tforminv|tonemap|translate|truesize|uintlut|viscircles|warp|watershed|whitepoint|wiener2|xyz2double|xyz2uint16|ycbcr2rgb'\n  ].join(\"|\");\n  var optimFunctions = [\n    'bintprog|color|fgoalattain|fminbnd|fmincon|fminimax|fminsearch|fminunc|fseminf|fsolve|fzero|fzmult|gangstr|ktrlink|linprog|lsqcurvefit|lsqlin|lsqnonlin|lsqnonneg|optimget|optimset|optimtool|quadprog'\n  ].join(\"|\");\n\n  // identifiers: variable/function name, or a chain of variable names joined by dots (obj.method, struct.field1.field2, etc..)\n  // valid variable names (start with letter, and contains letters, digits, and underscores).\n  // we match \"xx.yy\" as a whole so that if \"xx\" is plain and \"yy\" is not, we dont get a false positive for \"yy\"\n  //var reIdent = '(?:[a-zA-Z][a-zA-Z0-9_]*)';\n  //var reIdentChain = '(?:' + reIdent + '(?:\\.' + reIdent + ')*' + ')';\n\n  // patterns that always start with a known character. Must have a shortcut string.\n  var shortcutStylePatterns = [\n    // whitespaces: space, tab, carriage return, line feed, line tab, form-feed, non-break space\n    [PR.PR_PLAIN, /^[ \\t\\r\\n\\v\\f\\xA0]+/, null, \" \\t\\r\\n\\u000b\\u000c\\u00a0\"],\n\n    // block comments\n    //TODO: chokes on nested block comments\n    //TODO: false positives when the lines with %{ and %} contain non-spaces\n    //[PR.PR_COMMENT, /^%(?:[^\\{].*|\\{(?:%|%*[^\\}%])*(?:\\}+%?)?)/, null],\n    [PR.PR_COMMENT, /^%\\{[^%]*%+(?:[^\\}%][^%]*%+)*\\}/, null],\n\n    // single-line comments\n    [PR.PR_COMMENT, /^%[^\\r\\n]*/, null, \"%\"],\n\n    // system commands\n    [PR_SYSCMD, /^![^\\r\\n]*/, null, \"!\"]\n  ];\n\n  // patterns that will be tried in order if the shortcut ones fail. May have shortcuts.\n  var fallthroughStylePatterns = [\n    // line continuation\n    [PR_LINE_CONTINUATION, /^\\.\\.\\.\\s*[\\r\\n]/, null],\n\n    // error message\n    [PR_ERROR, /^\\?\\?\\? [^\\r\\n]*/, null],\n\n    // warning message\n    [PR_WARNING, /^Warning: [^\\r\\n]*/, null],\n\n    // command prompt/output\n    //[PR_CODE_OUTPUT, /^>>\\s+[^\\r\\n]*[\\r\\n]{1,2}[^=]*=[^\\r\\n]*[\\r\\n]{1,2}[^\\r\\n]*/, null],    // full command output (both loose/compact format): `>> EXP\\nVAR =\\n VAL`\n    [PR_CODE_OUTPUT, /^>>\\s+/, null],      // only the command prompt `>> `\n    [PR_CODE_OUTPUT, /^octave:\\d+>\\s+/, null],  // Octave command prompt `octave:1> `\n\n    // identifier (chain) or closing-parenthesis/brace/bracket, and IS followed by transpose operator\n    // this way we dont misdetect the transpose operator ' as the start of a string\n    [\"lang-matlab-operators\", /^((?:[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*|\\)|\\]|\\}|\\.)')/, null],\n\n    // identifier (chain), and NOT followed by transpose operator\n    // this must come AFTER the \"is followed by transpose\" step (otherwise it chops the last char of identifier)\n    [\"lang-matlab-identifiers\", /^([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)(?!')/, null],\n\n    // single-quoted strings: allow for escaping with '', no multilines\n    //[PR.PR_STRING, /(?:(?<=(?:\\(|\\[|\\{|\\s|=|;|,|:))|^)'(?:[^']|'')*'(?=(?:\\)|\\]|\\}|\\s|=|;|,|:|~|<|>|&|-|\\+|\\*|\\.|\\^|\\|))/, null],  // string vs. transpose (check before/after context using negative/positive lookbehind/lookahead)\n    [PR.PR_STRING, /^'(?:[^']|'')*'/, null],  // \"'\"\n\n    // floating point numbers: 1, 1.0, 1i, -1.1E-1\n    [PR.PR_LITERAL, /^[+\\-]?\\.?\\d+(?:\\.\\d*)?(?:[Ee][+\\-]?\\d+)?[ij]?/, null],\n\n    // parentheses, braces, brackets\n    [PR.PR_TAG, /^(?:\\{|\\}|\\(|\\)|\\[|\\])/, null],  // \"{}()[]\"\n\n    // other operators\n    [PR.PR_PUNCTUATION, /^(?:<|>|=|~|@|&|;|,|:|!|\\-|\\+|\\*|\\^|\\.|\\||\\\\|\\/)/, null]\n  ];\n\n  var identifiersPatterns = [\n    // list of keywords (`iskeyword`)\n    [PR.PR_KEYWORD, /^\\b(?:break|case|catch|classdef|continue|else|elseif|end|for|function|global|if|otherwise|parfor|persistent|return|spmd|switch|try|while)\\b/, null],\n\n    // some specials variables/constants\n    [PR_CONSTANT, /^\\b(?:true|false|inf|Inf|nan|NaN|eps|pi|ans|nargin|nargout|varargin|varargout)\\b/, null],\n\n    // some data types\n    [PR.PR_TYPE, /^\\b(?:cell|struct|char|double|single|logical|u?int(?:8|16|32|64)|sparse)\\b/, null],\n\n    // commonly used builtin functions from core MATLAB and a few popular toolboxes\n    [PR_FUNCTION, new RegExp('^\\\\b(?:' + coreFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + statsFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + imageFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + optimFunctions + ')\\\\b'), null],\n\n    // plain identifier (user-defined variable/function name)\n    [PR_IDENTIFIER, /^[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*/, null]\n  ];\n\n  var operatorsPatterns = [\n    // forward to identifiers to match\n    [\"lang-matlab-identifiers\", /^([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)/, null],\n\n    // parentheses, braces, brackets\n    [PR.PR_TAG, /^(?:\\{|\\}|\\(|\\)|\\[|\\])/, null],  // \"{}()[]\"\n\n    // other operators\n    [PR.PR_PUNCTUATION, /^(?:<|>|=|~|@|&|;|,|:|!|\\-|\\+|\\*|\\^|\\.|\\||\\\\|\\/)/, null],\n\n    // transpose operators\n    [PR_TRANSPOSE, /^'/, null]\n  ];\n\n  PR.registerLangHandler(\n    PR.createSimpleLexer([], identifiersPatterns),\n    [\"matlab-identifiers\"]\n  );\n  PR.registerLangHandler(\n    PR.createSimpleLexer([], operatorsPatterns),\n    [\"matlab-operators\"]\n  );\n  PR.registerLangHandler(\n    PR.createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns),\n    [\"matlab\"]\n  );\n})(window['PR']);\n","source":"plugins/prettify/lang-matlab.js","raw":"/**\n * @license\n * Copyright (c) 2013 by Amro <amroamroamro@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for MATLAB.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code inside an HTML tag like\n *     <pre class=\"prettyprint lang-matlab\">\n *     </pre>\n *\n * @see https://github.com/amroamroamro/prettify-matlab\n */\n(function (PR) {\n  /*\n    PR_PLAIN: plain text\n    PR_STRING: string literals\n    PR_KEYWORD: keywords\n    PR_COMMENT: comments\n    PR_TYPE: types\n    PR_LITERAL: literal values (1, null, true, ..)\n    PR_PUNCTUATION: punctuation string\n    PR_SOURCE: embedded source\n    PR_DECLARATION: markup declaration such as a DOCTYPE\n    PR_TAG: sgml tag\n    PR_ATTRIB_NAME: sgml attribute name\n    PR_ATTRIB_VALUE: sgml attribute value\n  */\n  var PR_IDENTIFIER = \"ident\",\n    PR_CONSTANT = \"const\",\n    PR_FUNCTION = \"fun\",\n    PR_FUNCTION_TOOLBOX = \"fun_tbx\",\n    PR_SYSCMD = \"syscmd\",\n    PR_CODE_OUTPUT = \"codeoutput\",\n    PR_ERROR = \"err\",\n    PR_WARNING = \"wrn\",\n    PR_TRANSPOSE = \"transpose\",\n    PR_LINE_CONTINUATION = \"linecont\";\n\n  // Refer to: http://www.mathworks.com/help/matlab/functionlist-alpha.html\n  var coreFunctions = [\n    'abs|accumarray|acos(?:d|h)?|acot(?:d|h)?|acsc(?:d|h)?|actxcontrol(?:list|select)?|actxGetRunningServer|actxserver|addlistener|addpath|addpref|addtodate|airy|align|alim|all|allchild|alpha|alphamap|amd|ancestor|and|angle|annotation|any|area|arrayfun|asec(?:d|h)?|asin(?:d|h)?|assert|assignin|atan(?:2|d|h)?|audiodevinfo|audioplayer|audiorecorder|aufinfo|auread|autumn|auwrite|avifile|aviinfo|aviread|axes|axis|balance|bar(?:3|3h|h)?|base2dec|beep|BeginInvoke|bench|bessel(?:h|i|j|k|y)|beta|betainc|betaincinv|betaln|bicg|bicgstab|bicgstabl|bin2dec|bitand|bitcmp|bitget|bitmax|bitnot|bitor|bitset|bitshift|bitxor|blanks|blkdiag|bone|box|brighten|brush|bsxfun|builddocsearchdb|builtin|bvp4c|bvp5c|bvpget|bvpinit|bvpset|bvpxtend|calendar|calllib|callSoapService|camdolly|cameratoolbar|camlight|camlookat|camorbit|campan|campos|camproj|camroll|camtarget|camup|camva|camzoom|cart2pol|cart2sph|cast|cat|caxis|cd|cdf2rdf|cdfepoch|cdfinfo|cdflib(?:\\.(?:close|closeVar|computeEpoch|computeEpoch16|create|createAttr|createVar|delete|deleteAttr|deleteAttrEntry|deleteAttrgEntry|deleteVar|deleteVarRecords|epoch16Breakdown|epochBreakdown|getAttrEntry|getAttrgEntry|getAttrMaxEntry|getAttrMaxgEntry|getAttrName|getAttrNum|getAttrScope|getCacheSize|getChecksum|getCompression|getCompressionCacheSize|getConstantNames|getConstantValue|getCopyright|getFileBackward|getFormat|getLibraryCopyright|getLibraryVersion|getMajority|getName|getNumAttrEntries|getNumAttrgEntries|getNumAttributes|getNumgAttributes|getReadOnlyMode|getStageCacheSize|getValidate|getVarAllocRecords|getVarBlockingFactor|getVarCacheSize|getVarCompression|getVarData|getVarMaxAllocRecNum|getVarMaxWrittenRecNum|getVarName|getVarNum|getVarNumRecsWritten|getVarPadValue|getVarRecordData|getVarReservePercent|getVarsMaxWrittenRecNum|getVarSparseRecords|getVersion|hyperGetVarData|hyperPutVarData|inquire|inquireAttr|inquireAttrEntry|inquireAttrgEntry|inquireVar|open|putAttrEntry|putAttrgEntry|putVarData|putVarRecordData|renameAttr|renameVar|setCacheSize|setChecksum|setCompression|setCompressionCacheSize|setFileBackward|setFormat|setMajority|setReadOnlyMode|setStageCacheSize|setValidate|setVarAllocBlockRecords|setVarBlockingFactor|setVarCacheSize|setVarCompression|setVarInitialRecs|setVarPadValue|SetVarReservePercent|setVarsCacheSize|setVarSparseRecords))?|cdfread|cdfwrite|ceil|cell2mat|cell2struct|celldisp|cellfun|cellplot|cellstr|cgs|checkcode|checkin|checkout|chol|cholinc|cholupdate|circshift|cla|clabel|class|clc|clear|clearvars|clf|clipboard|clock|close|closereq|cmopts|cmpermute|cmunique|colamd|colon|colorbar|colordef|colormap|colormapeditor|colperm|Combine|comet|comet3|commandhistory|commandwindow|compan|compass|complex|computer|cond|condeig|condest|coneplot|conj|containers\\.Map|contour(?:3|c|f|slice)?|contrast|conv|conv2|convhull|convhulln|convn|cool|copper|copyfile|copyobj|corrcoef|cos(?:d|h)?|cot(?:d|h)?|cov|cplxpair|cputime|createClassFromWsdl|createSoapMessage|cross|csc(?:d|h)?|csvread|csvwrite|ctranspose|cumprod|cumsum|cumtrapz|curl|customverctrl|cylinder|daqread|daspect|datacursormode|datatipinfo|date|datenum|datestr|datetick|datevec|dbclear|dbcont|dbdown|dblquad|dbmex|dbquit|dbstack|dbstatus|dbstep|dbstop|dbtype|dbup|dde23|ddeget|ddesd|ddeset|deal|deblank|dec2base|dec2bin|dec2hex|decic|deconv|del2|delaunay|delaunay3|delaunayn|DelaunayTri|delete|demo|depdir|depfun|det|detrend|deval|diag|dialog|diary|diff|diffuse|dir|disp|display|dither|divergence|dlmread|dlmwrite|dmperm|doc|docsearch|dos|dot|dragrect|drawnow|dsearch|dsearchn|dynamicprops|echo|echodemo|edit|eig|eigs|ellipj|ellipke|ellipsoid|empty|enableNETfromNetworkDrive|enableservice|EndInvoke|enumeration|eomday|eq|erf|erfc|erfcinv|erfcx|erfinv|error|errorbar|errordlg|etime|etree|etreeplot|eval|evalc|evalin|event\\.(?:EventData|listener|PropertyEvent|proplistener)|exifread|exist|exit|exp|expint|expm|expm1|export2wsdlg|eye|ezcontour|ezcontourf|ezmesh|ezmeshc|ezplot|ezplot3|ezpolar|ezsurf|ezsurfc|factor|factorial|fclose|feather|feature|feof|ferror|feval|fft|fft2|fftn|fftshift|fftw|fgetl|fgets|fieldnames|figure|figurepalette|fileattrib|filebrowser|filemarker|fileparts|fileread|filesep|fill|fill3|filter|filter2|find|findall|findfigs|findobj|findstr|finish|fitsdisp|fitsinfo|fitsread|fitswrite|fix|flag|flipdim|fliplr|flipud|floor|flow|fminbnd|fminsearch|fopen|format|fplot|fprintf|frame2im|fread|freqspace|frewind|fscanf|fseek|ftell|FTP|full|fullfile|func2str|functions|funm|fwrite|fzero|gallery|gamma|gammainc|gammaincinv|gammaln|gca|gcbf|gcbo|gcd|gcf|gco|ge|genpath|genvarname|get|getappdata|getenv|getfield|getframe|getpixelposition|getpref|ginput|gmres|gplot|grabcode|gradient|gray|graymon|grid|griddata(?:3|n)?|griddedInterpolant|gsvd|gt|gtext|guidata|guide|guihandles|gunzip|gzip|h5create|h5disp|h5info|h5read|h5readatt|h5write|h5writeatt|hadamard|handle|hankel|hdf|hdf5|hdf5info|hdf5read|hdf5write|hdfinfo|hdfread|hdftool|help|helpbrowser|helpdesk|helpdlg|helpwin|hess|hex2dec|hex2num|hgexport|hggroup|hgload|hgsave|hgsetget|hgtransform|hidden|hilb|hist|histc|hold|home|horzcat|hostid|hot|hsv|hsv2rgb|hypot|ichol|idivide|ifft|ifft2|ifftn|ifftshift|ilu|im2frame|im2java|imag|image|imagesc|imapprox|imfinfo|imformats|import|importdata|imread|imwrite|ind2rgb|ind2sub|inferiorto|info|inline|inmem|inpolygon|input|inputdlg|inputname|inputParser|inspect|instrcallback|instrfind|instrfindall|int2str|integral(?:2|3)?|interp(?:1|1q|2|3|ft|n)|interpstreamspeed|intersect|intmax|intmin|inv|invhilb|ipermute|isa|isappdata|iscell|iscellstr|ischar|iscolumn|isdir|isempty|isequal|isequaln|isequalwithequalnans|isfield|isfinite|isfloat|isglobal|ishandle|ishghandle|ishold|isinf|isinteger|isjava|iskeyword|isletter|islogical|ismac|ismatrix|ismember|ismethod|isnan|isnumeric|isobject|isocaps|isocolors|isonormals|isosurface|ispc|ispref|isprime|isprop|isreal|isrow|isscalar|issorted|isspace|issparse|isstr|isstrprop|isstruct|isstudent|isunix|isvarname|isvector|javaaddpath|javaArray|javachk|javaclasspath|javacomponent|javaMethod|javaMethodEDT|javaObject|javaObjectEDT|javarmpath|jet|keyboard|kron|lasterr|lasterror|lastwarn|lcm|ldivide|ldl|le|legend|legendre|length|libfunctions|libfunctionsview|libisloaded|libpointer|libstruct|license|light|lightangle|lighting|lin2mu|line|lines|linkaxes|linkdata|linkprop|linsolve|linspace|listdlg|listfonts|load|loadlibrary|loadobj|log|log10|log1p|log2|loglog|logm|logspace|lookfor|lower|ls|lscov|lsqnonneg|lsqr|lt|lu|luinc|magic|makehgtform|mat2cell|mat2str|material|matfile|matlab\\.io\\.MatFile|matlab\\.mixin\\.(?:Copyable|Heterogeneous(?:\\.getDefaultScalarElement)?)|matlabrc|matlabroot|max|maxNumCompThreads|mean|median|membrane|memmapfile|memory|menu|mesh|meshc|meshgrid|meshz|meta\\.(?:class(?:\\.fromName)?|DynamicProperty|EnumeratedValue|event|MetaData|method|package(?:\\.(?:fromName|getAllPackages))?|property)|metaclass|methods|methodsview|mex(?:\\.getCompilerConfigurations)?|MException|mexext|mfilename|min|minres|minus|mislocked|mkdir|mkpp|mldivide|mlint|mlintrpt|mlock|mmfileinfo|mmreader|mod|mode|more|move|movefile|movegui|movie|movie2avi|mpower|mrdivide|msgbox|mtimes|mu2lin|multibandread|multibandwrite|munlock|namelengthmax|nargchk|narginchk|nargoutchk|native2unicode|nccreate|ncdisp|nchoosek|ncinfo|ncread|ncreadatt|ncwrite|ncwriteatt|ncwriteschema|ndgrid|ndims|ne|NET(?:\\.(?:addAssembly|Assembly|convertArray|createArray|createGeneric|disableAutoRelease|enableAutoRelease|GenericClass|invokeGenericMethod|NetException|setStaticProperty))?|netcdf\\.(?:abort|close|copyAtt|create|defDim|defGrp|defVar|defVarChunking|defVarDeflate|defVarFill|defVarFletcher32|delAtt|endDef|getAtt|getChunkCache|getConstant|getConstantNames|getVar|inq|inqAtt|inqAttID|inqAttName|inqDim|inqDimID|inqDimIDs|inqFormat|inqGrpName|inqGrpNameFull|inqGrpParent|inqGrps|inqLibVers|inqNcid|inqUnlimDims|inqVar|inqVarChunking|inqVarDeflate|inqVarFill|inqVarFletcher32|inqVarID|inqVarIDs|open|putAtt|putVar|reDef|renameAtt|renameDim|renameVar|setChunkCache|setDefaultFormat|setFill|sync)|newplot|nextpow2|nnz|noanimate|nonzeros|norm|normest|not|notebook|now|nthroot|null|num2cell|num2hex|num2str|numel|nzmax|ode(?:113|15i|15s|23|23s|23t|23tb|45)|odeget|odeset|odextend|onCleanup|ones|open|openfig|opengl|openvar|optimget|optimset|or|ordeig|orderfields|ordqz|ordschur|orient|orth|pack|padecoef|pagesetupdlg|pan|pareto|parseSoapResponse|pascal|patch|path|path2rc|pathsep|pathtool|pause|pbaspect|pcg|pchip|pcode|pcolor|pdepe|pdeval|peaks|perl|perms|permute|pie|pink|pinv|planerot|playshow|plot|plot3|plotbrowser|plotedit|plotmatrix|plottools|plotyy|plus|pol2cart|polar|poly|polyarea|polyder|polyeig|polyfit|polyint|polyval|polyvalm|pow2|power|ppval|prefdir|preferences|primes|print|printdlg|printopt|printpreview|prod|profile|profsave|propedit|propertyeditor|psi|publish|PutCharArray|PutFullMatrix|PutWorkspaceData|pwd|qhull|qmr|qr|qrdelete|qrinsert|qrupdate|quad|quad2d|quadgk|quadl|quadv|questdlg|quit|quiver|quiver3|qz|rand|randi|randn|randperm|RandStream(?:\\.(?:create|getDefaultStream|getGlobalStream|list|setDefaultStream|setGlobalStream))?|rank|rat|rats|rbbox|rcond|rdivide|readasync|real|reallog|realmax|realmin|realpow|realsqrt|record|rectangle|rectint|recycle|reducepatch|reducevolume|refresh|refreshdata|regexp|regexpi|regexprep|regexptranslate|rehash|rem|Remove|RemoveAll|repmat|reset|reshape|residue|restoredefaultpath|rethrow|rgb2hsv|rgb2ind|rgbplot|ribbon|rmappdata|rmdir|rmfield|rmpath|rmpref|rng|roots|rose|rosser|rot90|rotate|rotate3d|round|rref|rsf2csf|run|save|saveas|saveobj|savepath|scatter|scatter3|schur|sec|secd|sech|selectmoveresize|semilogx|semilogy|sendmail|serial|set|setappdata|setdiff|setenv|setfield|setpixelposition|setpref|setstr|setxor|shading|shg|shiftdim|showplottool|shrinkfaces|sign|sin(?:d|h)?|size|slice|smooth3|snapnow|sort|sortrows|sound|soundsc|spalloc|spaugment|spconvert|spdiags|specular|speye|spfun|sph2cart|sphere|spinmap|spline|spones|spparms|sprand|sprandn|sprandsym|sprank|spring|sprintf|spy|sqrt|sqrtm|squeeze|ss2tf|sscanf|stairs|startup|std|stem|stem3|stopasync|str2double|str2func|str2mat|str2num|strcat|strcmp|strcmpi|stream2|stream3|streamline|streamparticles|streamribbon|streamslice|streamtube|strfind|strjust|strmatch|strncmp|strncmpi|strread|strrep|strtok|strtrim|struct2cell|structfun|strvcat|sub2ind|subplot|subsasgn|subsindex|subspace|subsref|substruct|subvolume|sum|summer|superclasses|superiorto|support|surf|surf2patch|surface|surfc|surfl|surfnorm|svd|svds|swapbytes|symamd|symbfact|symmlq|symrcm|symvar|system|tan(?:d|h)?|tar|tempdir|tempname|tetramesh|texlabel|text|textread|textscan|textwrap|tfqmr|throw|tic|Tiff(?:\\.(?:getTagNames|getVersion))?|timer|timerfind|timerfindall|times|timeseries|title|toc|todatenum|toeplitz|toolboxdir|trace|transpose|trapz|treelayout|treeplot|tril|trimesh|triplequad|triplot|TriRep|TriScatteredInterp|trisurf|triu|tscollection|tsearch|tsearchn|tstool|type|typecast|uibuttongroup|uicontextmenu|uicontrol|uigetdir|uigetfile|uigetpref|uiimport|uimenu|uiopen|uipanel|uipushtool|uiputfile|uiresume|uisave|uisetcolor|uisetfont|uisetpref|uistack|uitable|uitoggletool|uitoolbar|uiwait|uminus|undocheckout|unicode2native|union|unique|unix|unloadlibrary|unmesh|unmkpp|untar|unwrap|unzip|uplus|upper|urlread|urlwrite|usejava|userpath|validateattributes|validatestring|vander|var|vectorize|ver|verctrl|verLessThan|version|vertcat|VideoReader(?:\\.isPlatformSupported)?|VideoWriter(?:\\.getProfiles)?|view|viewmtx|visdiff|volumebounds|voronoi|voronoin|wait|waitbar|waitfor|waitforbuttonpress|warndlg|warning|waterfall|wavfinfo|wavplay|wavread|wavrecord|wavwrite|web|weekday|what|whatsnew|which|whitebg|who|whos|wilkinson|winopen|winqueryreg|winter|wk1finfo|wk1read|wk1write|workspace|xlabel|xlim|xlsfinfo|xlsread|xlswrite|xmlread|xmlwrite|xor|xslt|ylabel|ylim|zeros|zip|zlabel|zlim|zoom'\n  ].join(\"|\");\n  var statsFunctions = [\n    'addedvarplot|andrewsplot|anova(?:1|2|n)|ansaribradley|aoctool|barttest|bbdesign|beta(?:cdf|fit|inv|like|pdf|rnd|stat)|bino(?:cdf|fit|inv|pdf|rnd|stat)|biplot|bootci|bootstrp|boxplot|candexch|candgen|canoncorr|capability|capaplot|caseread|casewrite|categorical|ccdesign|cdfplot|chi2(?:cdf|gof|inv|pdf|rnd|stat)|cholcov|Classification(?:BaggedEnsemble|Discriminant(?:\\.(?:fit|make|template))?|Ensemble|KNN(?:\\.(?:fit|template))?|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|classify|classregtree|cluster|clusterdata|cmdscale|combnk|Compact(?:Classification(?:Discriminant|Ensemble|Tree)|Regression(?:Ensemble|Tree)|TreeBagger)|confusionmat|controlchart|controlrules|cophenet|copula(?:cdf|fit|param|pdf|rnd|stat)|cordexch|corr|corrcov|coxphfit|createns|crosstab|crossval|cvpartition|datasample|dataset|daugment|dcovary|dendrogram|dfittool|disttool|dummyvar|dwtest|ecdf|ecdfhist|ev(?:cdf|fit|inv|like|pdf|rnd|stat)|ExhaustiveSearcher|exp(?:cdf|fit|inv|like|pdf|rnd|stat)|factoran|fcdf|ff2n|finv|fitdist|fitensemble|fpdf|fracfact|fracfactgen|friedman|frnd|fstat|fsurfht|fullfact|gagerr|gam(?:cdf|fit|inv|like|pdf|rnd|stat)|GeneralizedLinearModel(?:\\.fit)?|geo(?:cdf|inv|mean|pdf|rnd|stat)|gev(?:cdf|fit|inv|like|pdf|rnd|stat)|gline|glmfit|glmval|glyphplot|gmdistribution(?:\\.fit)?|gname|gp(?:cdf|fit|inv|like|pdf|rnd|stat)|gplotmatrix|grp2idx|grpstats|gscatter|haltonset|harmmean|hist3|histfit|hmm(?:decode|estimate|generate|train|viterbi)|hougen|hyge(?:cdf|inv|pdf|rnd|stat)|icdf|inconsistent|interactionplot|invpred|iqr|iwishrnd|jackknife|jbtest|johnsrnd|KDTreeSearcher|kmeans|knnsearch|kruskalwallis|ksdensity|kstest|kstest2|kurtosis|lasso|lassoglm|lassoPlot|leverage|lhsdesign|lhsnorm|lillietest|LinearModel(?:\\.fit)?|linhyptest|linkage|logn(?:cdf|fit|inv|like|pdf|rnd|stat)|lsline|mad|mahal|maineffectsplot|manova1|manovacluster|mdscale|mhsample|mle|mlecov|mnpdf|mnrfit|mnrnd|mnrval|moment|multcompare|multivarichart|mvn(?:cdf|pdf|rnd)|mvregress|mvregresslike|mvt(?:cdf|pdf|rnd)|NaiveBayes(?:\\.fit)?|nan(?:cov|max|mean|median|min|std|sum|var)|nbin(?:cdf|fit|inv|pdf|rnd|stat)|ncf(?:cdf|inv|pdf|rnd|stat)|nct(?:cdf|inv|pdf|rnd|stat)|ncx2(?:cdf|inv|pdf|rnd|stat)|NeighborSearcher|nlinfit|nlintool|nlmefit|nlmefitsa|nlparci|nlpredci|nnmf|nominal|NonLinearModel(?:\\.fit)?|norm(?:cdf|fit|inv|like|pdf|rnd|stat)|normplot|normspec|ordinal|outlierMeasure|parallelcoords|paretotails|partialcorr|pcacov|pcares|pdf|pdist|pdist2|pearsrnd|perfcurve|perms|piecewisedistribution|plsregress|poiss(?:cdf|fit|inv|pdf|rnd|tat)|polyconf|polytool|prctile|princomp|ProbDist(?:Kernel|Parametric|UnivKernel|UnivParam)?|probplot|procrustes|qqplot|qrandset|qrandstream|quantile|randg|random|randsample|randtool|range|rangesearch|ranksum|rayl(?:cdf|fit|inv|pdf|rnd|stat)|rcoplot|refcurve|refline|regress|Regression(?:BaggedEnsemble|Ensemble|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|regstats|relieff|ridge|robustdemo|robustfit|rotatefactors|rowexch|rsmdemo|rstool|runstest|sampsizepwr|scatterhist|sequentialfs|signrank|signtest|silhouette|skewness|slicesample|sobolset|squareform|statget|statset|stepwise|stepwisefit|surfht|tabulate|tblread|tblwrite|tcdf|tdfread|tiedrank|tinv|tpdf|TreeBagger|treedisp|treefit|treeprune|treetest|treeval|trimmean|trnd|tstat|ttest|ttest2|unid(?:cdf|inv|pdf|rnd|stat)|unif(?:cdf|inv|it|pdf|rnd|stat)|vartest(?:2|n)?|wbl(?:cdf|fit|inv|like|pdf|rnd|stat)|wblplot|wishrnd|x2fx|xptread|zscore|ztest'\n  ].join(\"|\");\n  var imageFunctions = [\n    'adapthisteq|analyze75info|analyze75read|applycform|applylut|axes2pix|bestblk|blockproc|bwarea|bwareaopen|bwboundaries|bwconncomp|bwconvhull|bwdist|bwdistgeodesic|bweuler|bwhitmiss|bwlabel|bwlabeln|bwmorph|bwpack|bwperim|bwselect|bwtraceboundary|bwulterode|bwunpack|checkerboard|col2im|colfilt|conndef|convmtx2|corner|cornermetric|corr2|cp2tform|cpcorr|cpselect|cpstruct2pairs|dct2|dctmtx|deconvblind|deconvlucy|deconvreg|deconvwnr|decorrstretch|demosaic|dicom(?:anon|dict|info|lookup|read|uid|write)|edge|edgetaper|entropy|entropyfilt|fan2para|fanbeam|findbounds|fliptform|freqz2|fsamp2|fspecial|ftrans2|fwind1|fwind2|getheight|getimage|getimagemodel|getline|getneighbors|getnhood|getpts|getrangefromclass|getrect|getsequence|gray2ind|graycomatrix|graycoprops|graydist|grayslice|graythresh|hdrread|hdrwrite|histeq|hough|houghlines|houghpeaks|iccfind|iccread|iccroot|iccwrite|idct2|ifanbeam|im2bw|im2col|im2double|im2int16|im2java2d|im2single|im2uint16|im2uint8|imabsdiff|imadd|imadjust|ImageAdapter|imageinfo|imagemodel|imapplymatrix|imattributes|imbothat|imclearborder|imclose|imcolormaptool|imcomplement|imcontour|imcontrast|imcrop|imdilate|imdisplayrange|imdistline|imdivide|imellipse|imerode|imextendedmax|imextendedmin|imfill|imfilter|imfindcircles|imfreehand|imfuse|imgca|imgcf|imgetfile|imhandles|imhist|imhmax|imhmin|imimposemin|imlincomb|imline|immagbox|immovie|immultiply|imnoise|imopen|imoverview|imoverviewpanel|impixel|impixelinfo|impixelinfoval|impixelregion|impixelregionpanel|implay|impoint|impoly|impositionrect|improfile|imputfile|impyramid|imreconstruct|imrect|imregconfig|imregionalmax|imregionalmin|imregister|imresize|imroi|imrotate|imsave|imscrollpanel|imshow|imshowpair|imsubtract|imtool|imtophat|imtransform|imview|ind2gray|ind2rgb|interfileinfo|interfileread|intlut|ippl|iptaddcallback|iptcheckconn|iptcheckhandle|iptcheckinput|iptcheckmap|iptchecknargin|iptcheckstrs|iptdemos|iptgetapi|iptGetPointerBehavior|iptgetpref|ipticondir|iptnum2ordinal|iptPointerManager|iptprefs|iptremovecallback|iptSetPointerBehavior|iptsetpref|iptwindowalign|iradon|isbw|isflat|isgray|isicc|isind|isnitf|isrgb|isrset|lab2double|lab2uint16|lab2uint8|label2rgb|labelmatrix|makecform|makeConstrainToRectFcn|makehdr|makelut|makeresampler|maketform|mat2gray|mean2|medfilt2|montage|nitfinfo|nitfread|nlfilter|normxcorr2|ntsc2rgb|openrset|ordfilt2|otf2psf|padarray|para2fan|phantom|poly2mask|psf2otf|qtdecomp|qtgetblk|qtsetblk|radon|rangefilt|reflect|regionprops|registration\\.metric\\.(?:MattesMutualInformation|MeanSquares)|registration\\.optimizer\\.(?:OnePlusOneEvolutionary|RegularStepGradientDescent)|rgb2gray|rgb2ntsc|rgb2ycbcr|roicolor|roifill|roifilt2|roipoly|rsetwrite|std2|stdfilt|strel|stretchlim|subimage|tformarray|tformfwd|tforminv|tonemap|translate|truesize|uintlut|viscircles|warp|watershed|whitepoint|wiener2|xyz2double|xyz2uint16|ycbcr2rgb'\n  ].join(\"|\");\n  var optimFunctions = [\n    'bintprog|color|fgoalattain|fminbnd|fmincon|fminimax|fminsearch|fminunc|fseminf|fsolve|fzero|fzmult|gangstr|ktrlink|linprog|lsqcurvefit|lsqlin|lsqnonlin|lsqnonneg|optimget|optimset|optimtool|quadprog'\n  ].join(\"|\");\n\n  // identifiers: variable/function name, or a chain of variable names joined by dots (obj.method, struct.field1.field2, etc..)\n  // valid variable names (start with letter, and contains letters, digits, and underscores).\n  // we match \"xx.yy\" as a whole so that if \"xx\" is plain and \"yy\" is not, we dont get a false positive for \"yy\"\n  //var reIdent = '(?:[a-zA-Z][a-zA-Z0-9_]*)';\n  //var reIdentChain = '(?:' + reIdent + '(?:\\.' + reIdent + ')*' + ')';\n\n  // patterns that always start with a known character. Must have a shortcut string.\n  var shortcutStylePatterns = [\n    // whitespaces: space, tab, carriage return, line feed, line tab, form-feed, non-break space\n    [PR.PR_PLAIN, /^[ \\t\\r\\n\\v\\f\\xA0]+/, null, \" \\t\\r\\n\\u000b\\u000c\\u00a0\"],\n\n    // block comments\n    //TODO: chokes on nested block comments\n    //TODO: false positives when the lines with %{ and %} contain non-spaces\n    //[PR.PR_COMMENT, /^%(?:[^\\{].*|\\{(?:%|%*[^\\}%])*(?:\\}+%?)?)/, null],\n    [PR.PR_COMMENT, /^%\\{[^%]*%+(?:[^\\}%][^%]*%+)*\\}/, null],\n\n    // single-line comments\n    [PR.PR_COMMENT, /^%[^\\r\\n]*/, null, \"%\"],\n\n    // system commands\n    [PR_SYSCMD, /^![^\\r\\n]*/, null, \"!\"]\n  ];\n\n  // patterns that will be tried in order if the shortcut ones fail. May have shortcuts.\n  var fallthroughStylePatterns = [\n    // line continuation\n    [PR_LINE_CONTINUATION, /^\\.\\.\\.\\s*[\\r\\n]/, null],\n\n    // error message\n    [PR_ERROR, /^\\?\\?\\? [^\\r\\n]*/, null],\n\n    // warning message\n    [PR_WARNING, /^Warning: [^\\r\\n]*/, null],\n\n    // command prompt/output\n    //[PR_CODE_OUTPUT, /^>>\\s+[^\\r\\n]*[\\r\\n]{1,2}[^=]*=[^\\r\\n]*[\\r\\n]{1,2}[^\\r\\n]*/, null],    // full command output (both loose/compact format): `>> EXP\\nVAR =\\n VAL`\n    [PR_CODE_OUTPUT, /^>>\\s+/, null],      // only the command prompt `>> `\n    [PR_CODE_OUTPUT, /^octave:\\d+>\\s+/, null],  // Octave command prompt `octave:1> `\n\n    // identifier (chain) or closing-parenthesis/brace/bracket, and IS followed by transpose operator\n    // this way we dont misdetect the transpose operator ' as the start of a string\n    [\"lang-matlab-operators\", /^((?:[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*|\\)|\\]|\\}|\\.)')/, null],\n\n    // identifier (chain), and NOT followed by transpose operator\n    // this must come AFTER the \"is followed by transpose\" step (otherwise it chops the last char of identifier)\n    [\"lang-matlab-identifiers\", /^([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)(?!')/, null],\n\n    // single-quoted strings: allow for escaping with '', no multilines\n    //[PR.PR_STRING, /(?:(?<=(?:\\(|\\[|\\{|\\s|=|;|,|:))|^)'(?:[^']|'')*'(?=(?:\\)|\\]|\\}|\\s|=|;|,|:|~|<|>|&|-|\\+|\\*|\\.|\\^|\\|))/, null],  // string vs. transpose (check before/after context using negative/positive lookbehind/lookahead)\n    [PR.PR_STRING, /^'(?:[^']|'')*'/, null],  // \"'\"\n\n    // floating point numbers: 1, 1.0, 1i, -1.1E-1\n    [PR.PR_LITERAL, /^[+\\-]?\\.?\\d+(?:\\.\\d*)?(?:[Ee][+\\-]?\\d+)?[ij]?/, null],\n\n    // parentheses, braces, brackets\n    [PR.PR_TAG, /^(?:\\{|\\}|\\(|\\)|\\[|\\])/, null],  // \"{}()[]\"\n\n    // other operators\n    [PR.PR_PUNCTUATION, /^(?:<|>|=|~|@|&|;|,|:|!|\\-|\\+|\\*|\\^|\\.|\\||\\\\|\\/)/, null]\n  ];\n\n  var identifiersPatterns = [\n    // list of keywords (`iskeyword`)\n    [PR.PR_KEYWORD, /^\\b(?:break|case|catch|classdef|continue|else|elseif|end|for|function|global|if|otherwise|parfor|persistent|return|spmd|switch|try|while)\\b/, null],\n\n    // some specials variables/constants\n    [PR_CONSTANT, /^\\b(?:true|false|inf|Inf|nan|NaN|eps|pi|ans|nargin|nargout|varargin|varargout)\\b/, null],\n\n    // some data types\n    [PR.PR_TYPE, /^\\b(?:cell|struct|char|double|single|logical|u?int(?:8|16|32|64)|sparse)\\b/, null],\n\n    // commonly used builtin functions from core MATLAB and a few popular toolboxes\n    [PR_FUNCTION, new RegExp('^\\\\b(?:' + coreFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + statsFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + imageFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + optimFunctions + ')\\\\b'), null],\n\n    // plain identifier (user-defined variable/function name)\n    [PR_IDENTIFIER, /^[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*/, null]\n  ];\n\n  var operatorsPatterns = [\n    // forward to identifiers to match\n    [\"lang-matlab-identifiers\", /^([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)/, null],\n\n    // parentheses, braces, brackets\n    [PR.PR_TAG, /^(?:\\{|\\}|\\(|\\)|\\[|\\])/, null],  // \"{}()[]\"\n\n    // other operators\n    [PR.PR_PUNCTUATION, /^(?:<|>|=|~|@|&|;|,|:|!|\\-|\\+|\\*|\\^|\\.|\\||\\\\|\\/)/, null],\n\n    // transpose operators\n    [PR_TRANSPOSE, /^'/, null]\n  ];\n\n  PR.registerLangHandler(\n    PR.createSimpleLexer([], identifiersPatterns),\n    [\"matlab-identifiers\"]\n  );\n  PR.registerLangHandler(\n    PR.createSimpleLexer([], operatorsPatterns),\n    [\"matlab-operators\"]\n  );\n  PR.registerLangHandler(\n    PR.createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns),\n    [\"matlab\"]\n  );\n})(window['PR']);\n","date":"2019-04-30T08:09:45.662Z","updated":"2019-04-30T08:09:45.662Z","path":"plugins/prettify/lang-matlab.js","layout":"false","title":"","comments":1,"_id":"cjxh80ely001k6c9v2pcm5uqe","content":"/**\n * @license\n * Copyright (c) 2013 by Amro <amroamroamro@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for MATLAB.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code inside an HTML tag like\n *     <pre class=\"prettyprint lang-matlab\">\n *     </pre>\n *\n * @see https://github.com/amroamroamro/prettify-matlab\n */\n(function (PR) {\n  /*\n    PR_PLAIN: plain text\n    PR_STRING: string literals\n    PR_KEYWORD: keywords\n    PR_COMMENT: comments\n    PR_TYPE: types\n    PR_LITERAL: literal values (1, null, true, ..)\n    PR_PUNCTUATION: punctuation string\n    PR_SOURCE: embedded source\n    PR_DECLARATION: markup declaration such as a DOCTYPE\n    PR_TAG: sgml tag\n    PR_ATTRIB_NAME: sgml attribute name\n    PR_ATTRIB_VALUE: sgml attribute value\n  */\n  var PR_IDENTIFIER = \"ident\",\n    PR_CONSTANT = \"const\",\n    PR_FUNCTION = \"fun\",\n    PR_FUNCTION_TOOLBOX = \"fun_tbx\",\n    PR_SYSCMD = \"syscmd\",\n    PR_CODE_OUTPUT = \"codeoutput\",\n    PR_ERROR = \"err\",\n    PR_WARNING = \"wrn\",\n    PR_TRANSPOSE = \"transpose\",\n    PR_LINE_CONTINUATION = \"linecont\";\n\n  // Refer to: http://www.mathworks.com/help/matlab/functionlist-alpha.html\n  var coreFunctions = [\n    'abs|accumarray|acos(?:d|h)?|acot(?:d|h)?|acsc(?:d|h)?|actxcontrol(?:list|select)?|actxGetRunningServer|actxserver|addlistener|addpath|addpref|addtodate|airy|align|alim|all|allchild|alpha|alphamap|amd|ancestor|and|angle|annotation|any|area|arrayfun|asec(?:d|h)?|asin(?:d|h)?|assert|assignin|atan(?:2|d|h)?|audiodevinfo|audioplayer|audiorecorder|aufinfo|auread|autumn|auwrite|avifile|aviinfo|aviread|axes|axis|balance|bar(?:3|3h|h)?|base2dec|beep|BeginInvoke|bench|bessel(?:h|i|j|k|y)|beta|betainc|betaincinv|betaln|bicg|bicgstab|bicgstabl|bin2dec|bitand|bitcmp|bitget|bitmax|bitnot|bitor|bitset|bitshift|bitxor|blanks|blkdiag|bone|box|brighten|brush|bsxfun|builddocsearchdb|builtin|bvp4c|bvp5c|bvpget|bvpinit|bvpset|bvpxtend|calendar|calllib|callSoapService|camdolly|cameratoolbar|camlight|camlookat|camorbit|campan|campos|camproj|camroll|camtarget|camup|camva|camzoom|cart2pol|cart2sph|cast|cat|caxis|cd|cdf2rdf|cdfepoch|cdfinfo|cdflib(?:\\.(?:close|closeVar|computeEpoch|computeEpoch16|create|createAttr|createVar|delete|deleteAttr|deleteAttrEntry|deleteAttrgEntry|deleteVar|deleteVarRecords|epoch16Breakdown|epochBreakdown|getAttrEntry|getAttrgEntry|getAttrMaxEntry|getAttrMaxgEntry|getAttrName|getAttrNum|getAttrScope|getCacheSize|getChecksum|getCompression|getCompressionCacheSize|getConstantNames|getConstantValue|getCopyright|getFileBackward|getFormat|getLibraryCopyright|getLibraryVersion|getMajority|getName|getNumAttrEntries|getNumAttrgEntries|getNumAttributes|getNumgAttributes|getReadOnlyMode|getStageCacheSize|getValidate|getVarAllocRecords|getVarBlockingFactor|getVarCacheSize|getVarCompression|getVarData|getVarMaxAllocRecNum|getVarMaxWrittenRecNum|getVarName|getVarNum|getVarNumRecsWritten|getVarPadValue|getVarRecordData|getVarReservePercent|getVarsMaxWrittenRecNum|getVarSparseRecords|getVersion|hyperGetVarData|hyperPutVarData|inquire|inquireAttr|inquireAttrEntry|inquireAttrgEntry|inquireVar|open|putAttrEntry|putAttrgEntry|putVarData|putVarRecordData|renameAttr|renameVar|setCacheSize|setChecksum|setCompression|setCompressionCacheSize|setFileBackward|setFormat|setMajority|setReadOnlyMode|setStageCacheSize|setValidate|setVarAllocBlockRecords|setVarBlockingFactor|setVarCacheSize|setVarCompression|setVarInitialRecs|setVarPadValue|SetVarReservePercent|setVarsCacheSize|setVarSparseRecords))?|cdfread|cdfwrite|ceil|cell2mat|cell2struct|celldisp|cellfun|cellplot|cellstr|cgs|checkcode|checkin|checkout|chol|cholinc|cholupdate|circshift|cla|clabel|class|clc|clear|clearvars|clf|clipboard|clock|close|closereq|cmopts|cmpermute|cmunique|colamd|colon|colorbar|colordef|colormap|colormapeditor|colperm|Combine|comet|comet3|commandhistory|commandwindow|compan|compass|complex|computer|cond|condeig|condest|coneplot|conj|containers\\.Map|contour(?:3|c|f|slice)?|contrast|conv|conv2|convhull|convhulln|convn|cool|copper|copyfile|copyobj|corrcoef|cos(?:d|h)?|cot(?:d|h)?|cov|cplxpair|cputime|createClassFromWsdl|createSoapMessage|cross|csc(?:d|h)?|csvread|csvwrite|ctranspose|cumprod|cumsum|cumtrapz|curl|customverctrl|cylinder|daqread|daspect|datacursormode|datatipinfo|date|datenum|datestr|datetick|datevec|dbclear|dbcont|dbdown|dblquad|dbmex|dbquit|dbstack|dbstatus|dbstep|dbstop|dbtype|dbup|dde23|ddeget|ddesd|ddeset|deal|deblank|dec2base|dec2bin|dec2hex|decic|deconv|del2|delaunay|delaunay3|delaunayn|DelaunayTri|delete|demo|depdir|depfun|det|detrend|deval|diag|dialog|diary|diff|diffuse|dir|disp|display|dither|divergence|dlmread|dlmwrite|dmperm|doc|docsearch|dos|dot|dragrect|drawnow|dsearch|dsearchn|dynamicprops|echo|echodemo|edit|eig|eigs|ellipj|ellipke|ellipsoid|empty|enableNETfromNetworkDrive|enableservice|EndInvoke|enumeration|eomday|eq|erf|erfc|erfcinv|erfcx|erfinv|error|errorbar|errordlg|etime|etree|etreeplot|eval|evalc|evalin|event\\.(?:EventData|listener|PropertyEvent|proplistener)|exifread|exist|exit|exp|expint|expm|expm1|export2wsdlg|eye|ezcontour|ezcontourf|ezmesh|ezmeshc|ezplot|ezplot3|ezpolar|ezsurf|ezsurfc|factor|factorial|fclose|feather|feature|feof|ferror|feval|fft|fft2|fftn|fftshift|fftw|fgetl|fgets|fieldnames|figure|figurepalette|fileattrib|filebrowser|filemarker|fileparts|fileread|filesep|fill|fill3|filter|filter2|find|findall|findfigs|findobj|findstr|finish|fitsdisp|fitsinfo|fitsread|fitswrite|fix|flag|flipdim|fliplr|flipud|floor|flow|fminbnd|fminsearch|fopen|format|fplot|fprintf|frame2im|fread|freqspace|frewind|fscanf|fseek|ftell|FTP|full|fullfile|func2str|functions|funm|fwrite|fzero|gallery|gamma|gammainc|gammaincinv|gammaln|gca|gcbf|gcbo|gcd|gcf|gco|ge|genpath|genvarname|get|getappdata|getenv|getfield|getframe|getpixelposition|getpref|ginput|gmres|gplot|grabcode|gradient|gray|graymon|grid|griddata(?:3|n)?|griddedInterpolant|gsvd|gt|gtext|guidata|guide|guihandles|gunzip|gzip|h5create|h5disp|h5info|h5read|h5readatt|h5write|h5writeatt|hadamard|handle|hankel|hdf|hdf5|hdf5info|hdf5read|hdf5write|hdfinfo|hdfread|hdftool|help|helpbrowser|helpdesk|helpdlg|helpwin|hess|hex2dec|hex2num|hgexport|hggroup|hgload|hgsave|hgsetget|hgtransform|hidden|hilb|hist|histc|hold|home|horzcat|hostid|hot|hsv|hsv2rgb|hypot|ichol|idivide|ifft|ifft2|ifftn|ifftshift|ilu|im2frame|im2java|imag|image|imagesc|imapprox|imfinfo|imformats|import|importdata|imread|imwrite|ind2rgb|ind2sub|inferiorto|info|inline|inmem|inpolygon|input|inputdlg|inputname|inputParser|inspect|instrcallback|instrfind|instrfindall|int2str|integral(?:2|3)?|interp(?:1|1q|2|3|ft|n)|interpstreamspeed|intersect|intmax|intmin|inv|invhilb|ipermute|isa|isappdata|iscell|iscellstr|ischar|iscolumn|isdir|isempty|isequal|isequaln|isequalwithequalnans|isfield|isfinite|isfloat|isglobal|ishandle|ishghandle|ishold|isinf|isinteger|isjava|iskeyword|isletter|islogical|ismac|ismatrix|ismember|ismethod|isnan|isnumeric|isobject|isocaps|isocolors|isonormals|isosurface|ispc|ispref|isprime|isprop|isreal|isrow|isscalar|issorted|isspace|issparse|isstr|isstrprop|isstruct|isstudent|isunix|isvarname|isvector|javaaddpath|javaArray|javachk|javaclasspath|javacomponent|javaMethod|javaMethodEDT|javaObject|javaObjectEDT|javarmpath|jet|keyboard|kron|lasterr|lasterror|lastwarn|lcm|ldivide|ldl|le|legend|legendre|length|libfunctions|libfunctionsview|libisloaded|libpointer|libstruct|license|light|lightangle|lighting|lin2mu|line|lines|linkaxes|linkdata|linkprop|linsolve|linspace|listdlg|listfonts|load|loadlibrary|loadobj|log|log10|log1p|log2|loglog|logm|logspace|lookfor|lower|ls|lscov|lsqnonneg|lsqr|lt|lu|luinc|magic|makehgtform|mat2cell|mat2str|material|matfile|matlab\\.io\\.MatFile|matlab\\.mixin\\.(?:Copyable|Heterogeneous(?:\\.getDefaultScalarElement)?)|matlabrc|matlabroot|max|maxNumCompThreads|mean|median|membrane|memmapfile|memory|menu|mesh|meshc|meshgrid|meshz|meta\\.(?:class(?:\\.fromName)?|DynamicProperty|EnumeratedValue|event|MetaData|method|package(?:\\.(?:fromName|getAllPackages))?|property)|metaclass|methods|methodsview|mex(?:\\.getCompilerConfigurations)?|MException|mexext|mfilename|min|minres|minus|mislocked|mkdir|mkpp|mldivide|mlint|mlintrpt|mlock|mmfileinfo|mmreader|mod|mode|more|move|movefile|movegui|movie|movie2avi|mpower|mrdivide|msgbox|mtimes|mu2lin|multibandread|multibandwrite|munlock|namelengthmax|nargchk|narginchk|nargoutchk|native2unicode|nccreate|ncdisp|nchoosek|ncinfo|ncread|ncreadatt|ncwrite|ncwriteatt|ncwriteschema|ndgrid|ndims|ne|NET(?:\\.(?:addAssembly|Assembly|convertArray|createArray|createGeneric|disableAutoRelease|enableAutoRelease|GenericClass|invokeGenericMethod|NetException|setStaticProperty))?|netcdf\\.(?:abort|close|copyAtt|create|defDim|defGrp|defVar|defVarChunking|defVarDeflate|defVarFill|defVarFletcher32|delAtt|endDef|getAtt|getChunkCache|getConstant|getConstantNames|getVar|inq|inqAtt|inqAttID|inqAttName|inqDim|inqDimID|inqDimIDs|inqFormat|inqGrpName|inqGrpNameFull|inqGrpParent|inqGrps|inqLibVers|inqNcid|inqUnlimDims|inqVar|inqVarChunking|inqVarDeflate|inqVarFill|inqVarFletcher32|inqVarID|inqVarIDs|open|putAtt|putVar|reDef|renameAtt|renameDim|renameVar|setChunkCache|setDefaultFormat|setFill|sync)|newplot|nextpow2|nnz|noanimate|nonzeros|norm|normest|not|notebook|now|nthroot|null|num2cell|num2hex|num2str|numel|nzmax|ode(?:113|15i|15s|23|23s|23t|23tb|45)|odeget|odeset|odextend|onCleanup|ones|open|openfig|opengl|openvar|optimget|optimset|or|ordeig|orderfields|ordqz|ordschur|orient|orth|pack|padecoef|pagesetupdlg|pan|pareto|parseSoapResponse|pascal|patch|path|path2rc|pathsep|pathtool|pause|pbaspect|pcg|pchip|pcode|pcolor|pdepe|pdeval|peaks|perl|perms|permute|pie|pink|pinv|planerot|playshow|plot|plot3|plotbrowser|plotedit|plotmatrix|plottools|plotyy|plus|pol2cart|polar|poly|polyarea|polyder|polyeig|polyfit|polyint|polyval|polyvalm|pow2|power|ppval|prefdir|preferences|primes|print|printdlg|printopt|printpreview|prod|profile|profsave|propedit|propertyeditor|psi|publish|PutCharArray|PutFullMatrix|PutWorkspaceData|pwd|qhull|qmr|qr|qrdelete|qrinsert|qrupdate|quad|quad2d|quadgk|quadl|quadv|questdlg|quit|quiver|quiver3|qz|rand|randi|randn|randperm|RandStream(?:\\.(?:create|getDefaultStream|getGlobalStream|list|setDefaultStream|setGlobalStream))?|rank|rat|rats|rbbox|rcond|rdivide|readasync|real|reallog|realmax|realmin|realpow|realsqrt|record|rectangle|rectint|recycle|reducepatch|reducevolume|refresh|refreshdata|regexp|regexpi|regexprep|regexptranslate|rehash|rem|Remove|RemoveAll|repmat|reset|reshape|residue|restoredefaultpath|rethrow|rgb2hsv|rgb2ind|rgbplot|ribbon|rmappdata|rmdir|rmfield|rmpath|rmpref|rng|roots|rose|rosser|rot90|rotate|rotate3d|round|rref|rsf2csf|run|save|saveas|saveobj|savepath|scatter|scatter3|schur|sec|secd|sech|selectmoveresize|semilogx|semilogy|sendmail|serial|set|setappdata|setdiff|setenv|setfield|setpixelposition|setpref|setstr|setxor|shading|shg|shiftdim|showplottool|shrinkfaces|sign|sin(?:d|h)?|size|slice|smooth3|snapnow|sort|sortrows|sound|soundsc|spalloc|spaugment|spconvert|spdiags|specular|speye|spfun|sph2cart|sphere|spinmap|spline|spones|spparms|sprand|sprandn|sprandsym|sprank|spring|sprintf|spy|sqrt|sqrtm|squeeze|ss2tf|sscanf|stairs|startup|std|stem|stem3|stopasync|str2double|str2func|str2mat|str2num|strcat|strcmp|strcmpi|stream2|stream3|streamline|streamparticles|streamribbon|streamslice|streamtube|strfind|strjust|strmatch|strncmp|strncmpi|strread|strrep|strtok|strtrim|struct2cell|structfun|strvcat|sub2ind|subplot|subsasgn|subsindex|subspace|subsref|substruct|subvolume|sum|summer|superclasses|superiorto|support|surf|surf2patch|surface|surfc|surfl|surfnorm|svd|svds|swapbytes|symamd|symbfact|symmlq|symrcm|symvar|system|tan(?:d|h)?|tar|tempdir|tempname|tetramesh|texlabel|text|textread|textscan|textwrap|tfqmr|throw|tic|Tiff(?:\\.(?:getTagNames|getVersion))?|timer|timerfind|timerfindall|times|timeseries|title|toc|todatenum|toeplitz|toolboxdir|trace|transpose|trapz|treelayout|treeplot|tril|trimesh|triplequad|triplot|TriRep|TriScatteredInterp|trisurf|triu|tscollection|tsearch|tsearchn|tstool|type|typecast|uibuttongroup|uicontextmenu|uicontrol|uigetdir|uigetfile|uigetpref|uiimport|uimenu|uiopen|uipanel|uipushtool|uiputfile|uiresume|uisave|uisetcolor|uisetfont|uisetpref|uistack|uitable|uitoggletool|uitoolbar|uiwait|uminus|undocheckout|unicode2native|union|unique|unix|unloadlibrary|unmesh|unmkpp|untar|unwrap|unzip|uplus|upper|urlread|urlwrite|usejava|userpath|validateattributes|validatestring|vander|var|vectorize|ver|verctrl|verLessThan|version|vertcat|VideoReader(?:\\.isPlatformSupported)?|VideoWriter(?:\\.getProfiles)?|view|viewmtx|visdiff|volumebounds|voronoi|voronoin|wait|waitbar|waitfor|waitforbuttonpress|warndlg|warning|waterfall|wavfinfo|wavplay|wavread|wavrecord|wavwrite|web|weekday|what|whatsnew|which|whitebg|who|whos|wilkinson|winopen|winqueryreg|winter|wk1finfo|wk1read|wk1write|workspace|xlabel|xlim|xlsfinfo|xlsread|xlswrite|xmlread|xmlwrite|xor|xslt|ylabel|ylim|zeros|zip|zlabel|zlim|zoom'\n  ].join(\"|\");\n  var statsFunctions = [\n    'addedvarplot|andrewsplot|anova(?:1|2|n)|ansaribradley|aoctool|barttest|bbdesign|beta(?:cdf|fit|inv|like|pdf|rnd|stat)|bino(?:cdf|fit|inv|pdf|rnd|stat)|biplot|bootci|bootstrp|boxplot|candexch|candgen|canoncorr|capability|capaplot|caseread|casewrite|categorical|ccdesign|cdfplot|chi2(?:cdf|gof|inv|pdf|rnd|stat)|cholcov|Classification(?:BaggedEnsemble|Discriminant(?:\\.(?:fit|make|template))?|Ensemble|KNN(?:\\.(?:fit|template))?|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|classify|classregtree|cluster|clusterdata|cmdscale|combnk|Compact(?:Classification(?:Discriminant|Ensemble|Tree)|Regression(?:Ensemble|Tree)|TreeBagger)|confusionmat|controlchart|controlrules|cophenet|copula(?:cdf|fit|param|pdf|rnd|stat)|cordexch|corr|corrcov|coxphfit|createns|crosstab|crossval|cvpartition|datasample|dataset|daugment|dcovary|dendrogram|dfittool|disttool|dummyvar|dwtest|ecdf|ecdfhist|ev(?:cdf|fit|inv|like|pdf|rnd|stat)|ExhaustiveSearcher|exp(?:cdf|fit|inv|like|pdf|rnd|stat)|factoran|fcdf|ff2n|finv|fitdist|fitensemble|fpdf|fracfact|fracfactgen|friedman|frnd|fstat|fsurfht|fullfact|gagerr|gam(?:cdf|fit|inv|like|pdf|rnd|stat)|GeneralizedLinearModel(?:\\.fit)?|geo(?:cdf|inv|mean|pdf|rnd|stat)|gev(?:cdf|fit|inv|like|pdf|rnd|stat)|gline|glmfit|glmval|glyphplot|gmdistribution(?:\\.fit)?|gname|gp(?:cdf|fit|inv|like|pdf|rnd|stat)|gplotmatrix|grp2idx|grpstats|gscatter|haltonset|harmmean|hist3|histfit|hmm(?:decode|estimate|generate|train|viterbi)|hougen|hyge(?:cdf|inv|pdf|rnd|stat)|icdf|inconsistent|interactionplot|invpred|iqr|iwishrnd|jackknife|jbtest|johnsrnd|KDTreeSearcher|kmeans|knnsearch|kruskalwallis|ksdensity|kstest|kstest2|kurtosis|lasso|lassoglm|lassoPlot|leverage|lhsdesign|lhsnorm|lillietest|LinearModel(?:\\.fit)?|linhyptest|linkage|logn(?:cdf|fit|inv|like|pdf|rnd|stat)|lsline|mad|mahal|maineffectsplot|manova1|manovacluster|mdscale|mhsample|mle|mlecov|mnpdf|mnrfit|mnrnd|mnrval|moment|multcompare|multivarichart|mvn(?:cdf|pdf|rnd)|mvregress|mvregresslike|mvt(?:cdf|pdf|rnd)|NaiveBayes(?:\\.fit)?|nan(?:cov|max|mean|median|min|std|sum|var)|nbin(?:cdf|fit|inv|pdf|rnd|stat)|ncf(?:cdf|inv|pdf|rnd|stat)|nct(?:cdf|inv|pdf|rnd|stat)|ncx2(?:cdf|inv|pdf|rnd|stat)|NeighborSearcher|nlinfit|nlintool|nlmefit|nlmefitsa|nlparci|nlpredci|nnmf|nominal|NonLinearModel(?:\\.fit)?|norm(?:cdf|fit|inv|like|pdf|rnd|stat)|normplot|normspec|ordinal|outlierMeasure|parallelcoords|paretotails|partialcorr|pcacov|pcares|pdf|pdist|pdist2|pearsrnd|perfcurve|perms|piecewisedistribution|plsregress|poiss(?:cdf|fit|inv|pdf|rnd|tat)|polyconf|polytool|prctile|princomp|ProbDist(?:Kernel|Parametric|UnivKernel|UnivParam)?|probplot|procrustes|qqplot|qrandset|qrandstream|quantile|randg|random|randsample|randtool|range|rangesearch|ranksum|rayl(?:cdf|fit|inv|pdf|rnd|stat)|rcoplot|refcurve|refline|regress|Regression(?:BaggedEnsemble|Ensemble|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|regstats|relieff|ridge|robustdemo|robustfit|rotatefactors|rowexch|rsmdemo|rstool|runstest|sampsizepwr|scatterhist|sequentialfs|signrank|signtest|silhouette|skewness|slicesample|sobolset|squareform|statget|statset|stepwise|stepwisefit|surfht|tabulate|tblread|tblwrite|tcdf|tdfread|tiedrank|tinv|tpdf|TreeBagger|treedisp|treefit|treeprune|treetest|treeval|trimmean|trnd|tstat|ttest|ttest2|unid(?:cdf|inv|pdf|rnd|stat)|unif(?:cdf|inv|it|pdf|rnd|stat)|vartest(?:2|n)?|wbl(?:cdf|fit|inv|like|pdf|rnd|stat)|wblplot|wishrnd|x2fx|xptread|zscore|ztest'\n  ].join(\"|\");\n  var imageFunctions = [\n    'adapthisteq|analyze75info|analyze75read|applycform|applylut|axes2pix|bestblk|blockproc|bwarea|bwareaopen|bwboundaries|bwconncomp|bwconvhull|bwdist|bwdistgeodesic|bweuler|bwhitmiss|bwlabel|bwlabeln|bwmorph|bwpack|bwperim|bwselect|bwtraceboundary|bwulterode|bwunpack|checkerboard|col2im|colfilt|conndef|convmtx2|corner|cornermetric|corr2|cp2tform|cpcorr|cpselect|cpstruct2pairs|dct2|dctmtx|deconvblind|deconvlucy|deconvreg|deconvwnr|decorrstretch|demosaic|dicom(?:anon|dict|info|lookup|read|uid|write)|edge|edgetaper|entropy|entropyfilt|fan2para|fanbeam|findbounds|fliptform|freqz2|fsamp2|fspecial|ftrans2|fwind1|fwind2|getheight|getimage|getimagemodel|getline|getneighbors|getnhood|getpts|getrangefromclass|getrect|getsequence|gray2ind|graycomatrix|graycoprops|graydist|grayslice|graythresh|hdrread|hdrwrite|histeq|hough|houghlines|houghpeaks|iccfind|iccread|iccroot|iccwrite|idct2|ifanbeam|im2bw|im2col|im2double|im2int16|im2java2d|im2single|im2uint16|im2uint8|imabsdiff|imadd|imadjust|ImageAdapter|imageinfo|imagemodel|imapplymatrix|imattributes|imbothat|imclearborder|imclose|imcolormaptool|imcomplement|imcontour|imcontrast|imcrop|imdilate|imdisplayrange|imdistline|imdivide|imellipse|imerode|imextendedmax|imextendedmin|imfill|imfilter|imfindcircles|imfreehand|imfuse|imgca|imgcf|imgetfile|imhandles|imhist|imhmax|imhmin|imimposemin|imlincomb|imline|immagbox|immovie|immultiply|imnoise|imopen|imoverview|imoverviewpanel|impixel|impixelinfo|impixelinfoval|impixelregion|impixelregionpanel|implay|impoint|impoly|impositionrect|improfile|imputfile|impyramid|imreconstruct|imrect|imregconfig|imregionalmax|imregionalmin|imregister|imresize|imroi|imrotate|imsave|imscrollpanel|imshow|imshowpair|imsubtract|imtool|imtophat|imtransform|imview|ind2gray|ind2rgb|interfileinfo|interfileread|intlut|ippl|iptaddcallback|iptcheckconn|iptcheckhandle|iptcheckinput|iptcheckmap|iptchecknargin|iptcheckstrs|iptdemos|iptgetapi|iptGetPointerBehavior|iptgetpref|ipticondir|iptnum2ordinal|iptPointerManager|iptprefs|iptremovecallback|iptSetPointerBehavior|iptsetpref|iptwindowalign|iradon|isbw|isflat|isgray|isicc|isind|isnitf|isrgb|isrset|lab2double|lab2uint16|lab2uint8|label2rgb|labelmatrix|makecform|makeConstrainToRectFcn|makehdr|makelut|makeresampler|maketform|mat2gray|mean2|medfilt2|montage|nitfinfo|nitfread|nlfilter|normxcorr2|ntsc2rgb|openrset|ordfilt2|otf2psf|padarray|para2fan|phantom|poly2mask|psf2otf|qtdecomp|qtgetblk|qtsetblk|radon|rangefilt|reflect|regionprops|registration\\.metric\\.(?:MattesMutualInformation|MeanSquares)|registration\\.optimizer\\.(?:OnePlusOneEvolutionary|RegularStepGradientDescent)|rgb2gray|rgb2ntsc|rgb2ycbcr|roicolor|roifill|roifilt2|roipoly|rsetwrite|std2|stdfilt|strel|stretchlim|subimage|tformarray|tformfwd|tforminv|tonemap|translate|truesize|uintlut|viscircles|warp|watershed|whitepoint|wiener2|xyz2double|xyz2uint16|ycbcr2rgb'\n  ].join(\"|\");\n  var optimFunctions = [\n    'bintprog|color|fgoalattain|fminbnd|fmincon|fminimax|fminsearch|fminunc|fseminf|fsolve|fzero|fzmult|gangstr|ktrlink|linprog|lsqcurvefit|lsqlin|lsqnonlin|lsqnonneg|optimget|optimset|optimtool|quadprog'\n  ].join(\"|\");\n\n  // identifiers: variable/function name, or a chain of variable names joined by dots (obj.method, struct.field1.field2, etc..)\n  // valid variable names (start with letter, and contains letters, digits, and underscores).\n  // we match \"xx.yy\" as a whole so that if \"xx\" is plain and \"yy\" is not, we dont get a false positive for \"yy\"\n  //var reIdent = '(?:[a-zA-Z][a-zA-Z0-9_]*)';\n  //var reIdentChain = '(?:' + reIdent + '(?:\\.' + reIdent + ')*' + ')';\n\n  // patterns that always start with a known character. Must have a shortcut string.\n  var shortcutStylePatterns = [\n    // whitespaces: space, tab, carriage return, line feed, line tab, form-feed, non-break space\n    [PR.PR_PLAIN, /^[ \\t\\r\\n\\v\\f\\xA0]+/, null, \" \\t\\r\\n\\u000b\\u000c\\u00a0\"],\n\n    // block comments\n    //TODO: chokes on nested block comments\n    //TODO: false positives when the lines with %{ and %} contain non-spaces\n    //[PR.PR_COMMENT, /^%(?:[^\\{].*|\\{(?:%|%*[^\\}%])*(?:\\}+%?)?)/, null],\n    [PR.PR_COMMENT, /^%\\{[^%]*%+(?:[^\\}%][^%]*%+)*\\}/, null],\n\n    // single-line comments\n    [PR.PR_COMMENT, /^%[^\\r\\n]*/, null, \"%\"],\n\n    // system commands\n    [PR_SYSCMD, /^![^\\r\\n]*/, null, \"!\"]\n  ];\n\n  // patterns that will be tried in order if the shortcut ones fail. May have shortcuts.\n  var fallthroughStylePatterns = [\n    // line continuation\n    [PR_LINE_CONTINUATION, /^\\.\\.\\.\\s*[\\r\\n]/, null],\n\n    // error message\n    [PR_ERROR, /^\\?\\?\\? [^\\r\\n]*/, null],\n\n    // warning message\n    [PR_WARNING, /^Warning: [^\\r\\n]*/, null],\n\n    // command prompt/output\n    //[PR_CODE_OUTPUT, /^>>\\s+[^\\r\\n]*[\\r\\n]{1,2}[^=]*=[^\\r\\n]*[\\r\\n]{1,2}[^\\r\\n]*/, null],    // full command output (both loose/compact format): `>> EXP\\nVAR =\\n VAL`\n    [PR_CODE_OUTPUT, /^>>\\s+/, null],      // only the command prompt `>> `\n    [PR_CODE_OUTPUT, /^octave:\\d+>\\s+/, null],  // Octave command prompt `octave:1> `\n\n    // identifier (chain) or closing-parenthesis/brace/bracket, and IS followed by transpose operator\n    // this way we dont misdetect the transpose operator ' as the start of a string\n    [\"lang-matlab-operators\", /^((?:[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*|\\)|\\]|\\}|\\.)')/, null],\n\n    // identifier (chain), and NOT followed by transpose operator\n    // this must come AFTER the \"is followed by transpose\" step (otherwise it chops the last char of identifier)\n    [\"lang-matlab-identifiers\", /^([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)(?!')/, null],\n\n    // single-quoted strings: allow for escaping with '', no multilines\n    //[PR.PR_STRING, /(?:(?<=(?:\\(|\\[|\\{|\\s|=|;|,|:))|^)'(?:[^']|'')*'(?=(?:\\)|\\]|\\}|\\s|=|;|,|:|~|<|>|&|-|\\+|\\*|\\.|\\^|\\|))/, null],  // string vs. transpose (check before/after context using negative/positive lookbehind/lookahead)\n    [PR.PR_STRING, /^'(?:[^']|'')*'/, null],  // \"'\"\n\n    // floating point numbers: 1, 1.0, 1i, -1.1E-1\n    [PR.PR_LITERAL, /^[+\\-]?\\.?\\d+(?:\\.\\d*)?(?:[Ee][+\\-]?\\d+)?[ij]?/, null],\n\n    // parentheses, braces, brackets\n    [PR.PR_TAG, /^(?:\\{|\\}|\\(|\\)|\\[|\\])/, null],  // \"{}()[]\"\n\n    // other operators\n    [PR.PR_PUNCTUATION, /^(?:<|>|=|~|@|&|;|,|:|!|\\-|\\+|\\*|\\^|\\.|\\||\\\\|\\/)/, null]\n  ];\n\n  var identifiersPatterns = [\n    // list of keywords (`iskeyword`)\n    [PR.PR_KEYWORD, /^\\b(?:break|case|catch|classdef|continue|else|elseif|end|for|function|global|if|otherwise|parfor|persistent|return|spmd|switch|try|while)\\b/, null],\n\n    // some specials variables/constants\n    [PR_CONSTANT, /^\\b(?:true|false|inf|Inf|nan|NaN|eps|pi|ans|nargin|nargout|varargin|varargout)\\b/, null],\n\n    // some data types\n    [PR.PR_TYPE, /^\\b(?:cell|struct|char|double|single|logical|u?int(?:8|16|32|64)|sparse)\\b/, null],\n\n    // commonly used builtin functions from core MATLAB and a few popular toolboxes\n    [PR_FUNCTION, new RegExp('^\\\\b(?:' + coreFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + statsFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + imageFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + optimFunctions + ')\\\\b'), null],\n\n    // plain identifier (user-defined variable/function name)\n    [PR_IDENTIFIER, /^[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*/, null]\n  ];\n\n  var operatorsPatterns = [\n    // forward to identifiers to match\n    [\"lang-matlab-identifiers\", /^([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)/, null],\n\n    // parentheses, braces, brackets\n    [PR.PR_TAG, /^(?:\\{|\\}|\\(|\\)|\\[|\\])/, null],  // \"{}()[]\"\n\n    // other operators\n    [PR.PR_PUNCTUATION, /^(?:<|>|=|~|@|&|;|,|:|!|\\-|\\+|\\*|\\^|\\.|\\||\\\\|\\/)/, null],\n\n    // transpose operators\n    [PR_TRANSPOSE, /^'/, null]\n  ];\n\n  PR.registerLangHandler(\n    PR.createSimpleLexer([], identifiersPatterns),\n    [\"matlab-identifiers\"]\n  );\n  PR.registerLangHandler(\n    PR.createSimpleLexer([], operatorsPatterns),\n    [\"matlab-operators\"]\n  );\n  PR.registerLangHandler(\n    PR.createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns),\n    [\"matlab\"]\n  );\n})(window['PR']);\n</|></|></=(?:\\(|\\[|\\{|\\s|=|;|,|:))|^)'(?:[^']|'')*'(?=(?:\\)|\\]|\\}|\\s|=|;|,|:|~|<|></amroamroamro@gmail.com>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (c) 2013 by Amro <amroamroamro@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for MATLAB.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code inside an HTML tag like\n *     <pre class=\"prettyprint lang-matlab\">\n *     </pre>\n *\n * @see https://github.com/amroamroamro/prettify-matlab\n */\n(function (PR) {\n  /*\n    PR_PLAIN: plain text\n    PR_STRING: string literals\n    PR_KEYWORD: keywords\n    PR_COMMENT: comments\n    PR_TYPE: types\n    PR_LITERAL: literal values (1, null, true, ..)\n    PR_PUNCTUATION: punctuation string\n    PR_SOURCE: embedded source\n    PR_DECLARATION: markup declaration such as a DOCTYPE\n    PR_TAG: sgml tag\n    PR_ATTRIB_NAME: sgml attribute name\n    PR_ATTRIB_VALUE: sgml attribute value\n  */\n  var PR_IDENTIFIER = \"ident\",\n    PR_CONSTANT = \"const\",\n    PR_FUNCTION = \"fun\",\n    PR_FUNCTION_TOOLBOX = \"fun_tbx\",\n    PR_SYSCMD = \"syscmd\",\n    PR_CODE_OUTPUT = \"codeoutput\",\n    PR_ERROR = \"err\",\n    PR_WARNING = \"wrn\",\n    PR_TRANSPOSE = \"transpose\",\n    PR_LINE_CONTINUATION = \"linecont\";\n\n  // Refer to: http://www.mathworks.com/help/matlab/functionlist-alpha.html\n  var coreFunctions = [\n    'abs|accumarray|acos(?:d|h)?|acot(?:d|h)?|acsc(?:d|h)?|actxcontrol(?:list|select)?|actxGetRunningServer|actxserver|addlistener|addpath|addpref|addtodate|airy|align|alim|all|allchild|alpha|alphamap|amd|ancestor|and|angle|annotation|any|area|arrayfun|asec(?:d|h)?|asin(?:d|h)?|assert|assignin|atan(?:2|d|h)?|audiodevinfo|audioplayer|audiorecorder|aufinfo|auread|autumn|auwrite|avifile|aviinfo|aviread|axes|axis|balance|bar(?:3|3h|h)?|base2dec|beep|BeginInvoke|bench|bessel(?:h|i|j|k|y)|beta|betainc|betaincinv|betaln|bicg|bicgstab|bicgstabl|bin2dec|bitand|bitcmp|bitget|bitmax|bitnot|bitor|bitset|bitshift|bitxor|blanks|blkdiag|bone|box|brighten|brush|bsxfun|builddocsearchdb|builtin|bvp4c|bvp5c|bvpget|bvpinit|bvpset|bvpxtend|calendar|calllib|callSoapService|camdolly|cameratoolbar|camlight|camlookat|camorbit|campan|campos|camproj|camroll|camtarget|camup|camva|camzoom|cart2pol|cart2sph|cast|cat|caxis|cd|cdf2rdf|cdfepoch|cdfinfo|cdflib(?:\\.(?:close|closeVar|computeEpoch|computeEpoch16|create|createAttr|createVar|delete|deleteAttr|deleteAttrEntry|deleteAttrgEntry|deleteVar|deleteVarRecords|epoch16Breakdown|epochBreakdown|getAttrEntry|getAttrgEntry|getAttrMaxEntry|getAttrMaxgEntry|getAttrName|getAttrNum|getAttrScope|getCacheSize|getChecksum|getCompression|getCompressionCacheSize|getConstantNames|getConstantValue|getCopyright|getFileBackward|getFormat|getLibraryCopyright|getLibraryVersion|getMajority|getName|getNumAttrEntries|getNumAttrgEntries|getNumAttributes|getNumgAttributes|getReadOnlyMode|getStageCacheSize|getValidate|getVarAllocRecords|getVarBlockingFactor|getVarCacheSize|getVarCompression|getVarData|getVarMaxAllocRecNum|getVarMaxWrittenRecNum|getVarName|getVarNum|getVarNumRecsWritten|getVarPadValue|getVarRecordData|getVarReservePercent|getVarsMaxWrittenRecNum|getVarSparseRecords|getVersion|hyperGetVarData|hyperPutVarData|inquire|inquireAttr|inquireAttrEntry|inquireAttrgEntry|inquireVar|open|putAttrEntry|putAttrgEntry|putVarData|putVarRecordData|renameAttr|renameVar|setCacheSize|setChecksum|setCompression|setCompressionCacheSize|setFileBackward|setFormat|setMajority|setReadOnlyMode|setStageCacheSize|setValidate|setVarAllocBlockRecords|setVarBlockingFactor|setVarCacheSize|setVarCompression|setVarInitialRecs|setVarPadValue|SetVarReservePercent|setVarsCacheSize|setVarSparseRecords))?|cdfread|cdfwrite|ceil|cell2mat|cell2struct|celldisp|cellfun|cellplot|cellstr|cgs|checkcode|checkin|checkout|chol|cholinc|cholupdate|circshift|cla|clabel|class|clc|clear|clearvars|clf|clipboard|clock|close|closereq|cmopts|cmpermute|cmunique|colamd|colon|colorbar|colordef|colormap|colormapeditor|colperm|Combine|comet|comet3|commandhistory|commandwindow|compan|compass|complex|computer|cond|condeig|condest|coneplot|conj|containers\\.Map|contour(?:3|c|f|slice)?|contrast|conv|conv2|convhull|convhulln|convn|cool|copper|copyfile|copyobj|corrcoef|cos(?:d|h)?|cot(?:d|h)?|cov|cplxpair|cputime|createClassFromWsdl|createSoapMessage|cross|csc(?:d|h)?|csvread|csvwrite|ctranspose|cumprod|cumsum|cumtrapz|curl|customverctrl|cylinder|daqread|daspect|datacursormode|datatipinfo|date|datenum|datestr|datetick|datevec|dbclear|dbcont|dbdown|dblquad|dbmex|dbquit|dbstack|dbstatus|dbstep|dbstop|dbtype|dbup|dde23|ddeget|ddesd|ddeset|deal|deblank|dec2base|dec2bin|dec2hex|decic|deconv|del2|delaunay|delaunay3|delaunayn|DelaunayTri|delete|demo|depdir|depfun|det|detrend|deval|diag|dialog|diary|diff|diffuse|dir|disp|display|dither|divergence|dlmread|dlmwrite|dmperm|doc|docsearch|dos|dot|dragrect|drawnow|dsearch|dsearchn|dynamicprops|echo|echodemo|edit|eig|eigs|ellipj|ellipke|ellipsoid|empty|enableNETfromNetworkDrive|enableservice|EndInvoke|enumeration|eomday|eq|erf|erfc|erfcinv|erfcx|erfinv|error|errorbar|errordlg|etime|etree|etreeplot|eval|evalc|evalin|event\\.(?:EventData|listener|PropertyEvent|proplistener)|exifread|exist|exit|exp|expint|expm|expm1|export2wsdlg|eye|ezcontour|ezcontourf|ezmesh|ezmeshc|ezplot|ezplot3|ezpolar|ezsurf|ezsurfc|factor|factorial|fclose|feather|feature|feof|ferror|feval|fft|fft2|fftn|fftshift|fftw|fgetl|fgets|fieldnames|figure|figurepalette|fileattrib|filebrowser|filemarker|fileparts|fileread|filesep|fill|fill3|filter|filter2|find|findall|findfigs|findobj|findstr|finish|fitsdisp|fitsinfo|fitsread|fitswrite|fix|flag|flipdim|fliplr|flipud|floor|flow|fminbnd|fminsearch|fopen|format|fplot|fprintf|frame2im|fread|freqspace|frewind|fscanf|fseek|ftell|FTP|full|fullfile|func2str|functions|funm|fwrite|fzero|gallery|gamma|gammainc|gammaincinv|gammaln|gca|gcbf|gcbo|gcd|gcf|gco|ge|genpath|genvarname|get|getappdata|getenv|getfield|getframe|getpixelposition|getpref|ginput|gmres|gplot|grabcode|gradient|gray|graymon|grid|griddata(?:3|n)?|griddedInterpolant|gsvd|gt|gtext|guidata|guide|guihandles|gunzip|gzip|h5create|h5disp|h5info|h5read|h5readatt|h5write|h5writeatt|hadamard|handle|hankel|hdf|hdf5|hdf5info|hdf5read|hdf5write|hdfinfo|hdfread|hdftool|help|helpbrowser|helpdesk|helpdlg|helpwin|hess|hex2dec|hex2num|hgexport|hggroup|hgload|hgsave|hgsetget|hgtransform|hidden|hilb|hist|histc|hold|home|horzcat|hostid|hot|hsv|hsv2rgb|hypot|ichol|idivide|ifft|ifft2|ifftn|ifftshift|ilu|im2frame|im2java|imag|image|imagesc|imapprox|imfinfo|imformats|import|importdata|imread|imwrite|ind2rgb|ind2sub|inferiorto|info|inline|inmem|inpolygon|input|inputdlg|inputname|inputParser|inspect|instrcallback|instrfind|instrfindall|int2str|integral(?:2|3)?|interp(?:1|1q|2|3|ft|n)|interpstreamspeed|intersect|intmax|intmin|inv|invhilb|ipermute|isa|isappdata|iscell|iscellstr|ischar|iscolumn|isdir|isempty|isequal|isequaln|isequalwithequalnans|isfield|isfinite|isfloat|isglobal|ishandle|ishghandle|ishold|isinf|isinteger|isjava|iskeyword|isletter|islogical|ismac|ismatrix|ismember|ismethod|isnan|isnumeric|isobject|isocaps|isocolors|isonormals|isosurface|ispc|ispref|isprime|isprop|isreal|isrow|isscalar|issorted|isspace|issparse|isstr|isstrprop|isstruct|isstudent|isunix|isvarname|isvector|javaaddpath|javaArray|javachk|javaclasspath|javacomponent|javaMethod|javaMethodEDT|javaObject|javaObjectEDT|javarmpath|jet|keyboard|kron|lasterr|lasterror|lastwarn|lcm|ldivide|ldl|le|legend|legendre|length|libfunctions|libfunctionsview|libisloaded|libpointer|libstruct|license|light|lightangle|lighting|lin2mu|line|lines|linkaxes|linkdata|linkprop|linsolve|linspace|listdlg|listfonts|load|loadlibrary|loadobj|log|log10|log1p|log2|loglog|logm|logspace|lookfor|lower|ls|lscov|lsqnonneg|lsqr|lt|lu|luinc|magic|makehgtform|mat2cell|mat2str|material|matfile|matlab\\.io\\.MatFile|matlab\\.mixin\\.(?:Copyable|Heterogeneous(?:\\.getDefaultScalarElement)?)|matlabrc|matlabroot|max|maxNumCompThreads|mean|median|membrane|memmapfile|memory|menu|mesh|meshc|meshgrid|meshz|meta\\.(?:class(?:\\.fromName)?|DynamicProperty|EnumeratedValue|event|MetaData|method|package(?:\\.(?:fromName|getAllPackages))?|property)|metaclass|methods|methodsview|mex(?:\\.getCompilerConfigurations)?|MException|mexext|mfilename|min|minres|minus|mislocked|mkdir|mkpp|mldivide|mlint|mlintrpt|mlock|mmfileinfo|mmreader|mod|mode|more|move|movefile|movegui|movie|movie2avi|mpower|mrdivide|msgbox|mtimes|mu2lin|multibandread|multibandwrite|munlock|namelengthmax|nargchk|narginchk|nargoutchk|native2unicode|nccreate|ncdisp|nchoosek|ncinfo|ncread|ncreadatt|ncwrite|ncwriteatt|ncwriteschema|ndgrid|ndims|ne|NET(?:\\.(?:addAssembly|Assembly|convertArray|createArray|createGeneric|disableAutoRelease|enableAutoRelease|GenericClass|invokeGenericMethod|NetException|setStaticProperty))?|netcdf\\.(?:abort|close|copyAtt|create|defDim|defGrp|defVar|defVarChunking|defVarDeflate|defVarFill|defVarFletcher32|delAtt|endDef|getAtt|getChunkCache|getConstant|getConstantNames|getVar|inq|inqAtt|inqAttID|inqAttName|inqDim|inqDimID|inqDimIDs|inqFormat|inqGrpName|inqGrpNameFull|inqGrpParent|inqGrps|inqLibVers|inqNcid|inqUnlimDims|inqVar|inqVarChunking|inqVarDeflate|inqVarFill|inqVarFletcher32|inqVarID|inqVarIDs|open|putAtt|putVar|reDef|renameAtt|renameDim|renameVar|setChunkCache|setDefaultFormat|setFill|sync)|newplot|nextpow2|nnz|noanimate|nonzeros|norm|normest|not|notebook|now|nthroot|null|num2cell|num2hex|num2str|numel|nzmax|ode(?:113|15i|15s|23|23s|23t|23tb|45)|odeget|odeset|odextend|onCleanup|ones|open|openfig|opengl|openvar|optimget|optimset|or|ordeig|orderfields|ordqz|ordschur|orient|orth|pack|padecoef|pagesetupdlg|pan|pareto|parseSoapResponse|pascal|patch|path|path2rc|pathsep|pathtool|pause|pbaspect|pcg|pchip|pcode|pcolor|pdepe|pdeval|peaks|perl|perms|permute|pie|pink|pinv|planerot|playshow|plot|plot3|plotbrowser|plotedit|plotmatrix|plottools|plotyy|plus|pol2cart|polar|poly|polyarea|polyder|polyeig|polyfit|polyint|polyval|polyvalm|pow2|power|ppval|prefdir|preferences|primes|print|printdlg|printopt|printpreview|prod|profile|profsave|propedit|propertyeditor|psi|publish|PutCharArray|PutFullMatrix|PutWorkspaceData|pwd|qhull|qmr|qr|qrdelete|qrinsert|qrupdate|quad|quad2d|quadgk|quadl|quadv|questdlg|quit|quiver|quiver3|qz|rand|randi|randn|randperm|RandStream(?:\\.(?:create|getDefaultStream|getGlobalStream|list|setDefaultStream|setGlobalStream))?|rank|rat|rats|rbbox|rcond|rdivide|readasync|real|reallog|realmax|realmin|realpow|realsqrt|record|rectangle|rectint|recycle|reducepatch|reducevolume|refresh|refreshdata|regexp|regexpi|regexprep|regexptranslate|rehash|rem|Remove|RemoveAll|repmat|reset|reshape|residue|restoredefaultpath|rethrow|rgb2hsv|rgb2ind|rgbplot|ribbon|rmappdata|rmdir|rmfield|rmpath|rmpref|rng|roots|rose|rosser|rot90|rotate|rotate3d|round|rref|rsf2csf|run|save|saveas|saveobj|savepath|scatter|scatter3|schur|sec|secd|sech|selectmoveresize|semilogx|semilogy|sendmail|serial|set|setappdata|setdiff|setenv|setfield|setpixelposition|setpref|setstr|setxor|shading|shg|shiftdim|showplottool|shrinkfaces|sign|sin(?:d|h)?|size|slice|smooth3|snapnow|sort|sortrows|sound|soundsc|spalloc|spaugment|spconvert|spdiags|specular|speye|spfun|sph2cart|sphere|spinmap|spline|spones|spparms|sprand|sprandn|sprandsym|sprank|spring|sprintf|spy|sqrt|sqrtm|squeeze|ss2tf|sscanf|stairs|startup|std|stem|stem3|stopasync|str2double|str2func|str2mat|str2num|strcat|strcmp|strcmpi|stream2|stream3|streamline|streamparticles|streamribbon|streamslice|streamtube|strfind|strjust|strmatch|strncmp|strncmpi|strread|strrep|strtok|strtrim|struct2cell|structfun|strvcat|sub2ind|subplot|subsasgn|subsindex|subspace|subsref|substruct|subvolume|sum|summer|superclasses|superiorto|support|surf|surf2patch|surface|surfc|surfl|surfnorm|svd|svds|swapbytes|symamd|symbfact|symmlq|symrcm|symvar|system|tan(?:d|h)?|tar|tempdir|tempname|tetramesh|texlabel|text|textread|textscan|textwrap|tfqmr|throw|tic|Tiff(?:\\.(?:getTagNames|getVersion))?|timer|timerfind|timerfindall|times|timeseries|title|toc|todatenum|toeplitz|toolboxdir|trace|transpose|trapz|treelayout|treeplot|tril|trimesh|triplequad|triplot|TriRep|TriScatteredInterp|trisurf|triu|tscollection|tsearch|tsearchn|tstool|type|typecast|uibuttongroup|uicontextmenu|uicontrol|uigetdir|uigetfile|uigetpref|uiimport|uimenu|uiopen|uipanel|uipushtool|uiputfile|uiresume|uisave|uisetcolor|uisetfont|uisetpref|uistack|uitable|uitoggletool|uitoolbar|uiwait|uminus|undocheckout|unicode2native|union|unique|unix|unloadlibrary|unmesh|unmkpp|untar|unwrap|unzip|uplus|upper|urlread|urlwrite|usejava|userpath|validateattributes|validatestring|vander|var|vectorize|ver|verctrl|verLessThan|version|vertcat|VideoReader(?:\\.isPlatformSupported)?|VideoWriter(?:\\.getProfiles)?|view|viewmtx|visdiff|volumebounds|voronoi|voronoin|wait|waitbar|waitfor|waitforbuttonpress|warndlg|warning|waterfall|wavfinfo|wavplay|wavread|wavrecord|wavwrite|web|weekday|what|whatsnew|which|whitebg|who|whos|wilkinson|winopen|winqueryreg|winter|wk1finfo|wk1read|wk1write|workspace|xlabel|xlim|xlsfinfo|xlsread|xlswrite|xmlread|xmlwrite|xor|xslt|ylabel|ylim|zeros|zip|zlabel|zlim|zoom'\n  ].join(\"|\");\n  var statsFunctions = [\n    'addedvarplot|andrewsplot|anova(?:1|2|n)|ansaribradley|aoctool|barttest|bbdesign|beta(?:cdf|fit|inv|like|pdf|rnd|stat)|bino(?:cdf|fit|inv|pdf|rnd|stat)|biplot|bootci|bootstrp|boxplot|candexch|candgen|canoncorr|capability|capaplot|caseread|casewrite|categorical|ccdesign|cdfplot|chi2(?:cdf|gof|inv|pdf|rnd|stat)|cholcov|Classification(?:BaggedEnsemble|Discriminant(?:\\.(?:fit|make|template))?|Ensemble|KNN(?:\\.(?:fit|template))?|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|classify|classregtree|cluster|clusterdata|cmdscale|combnk|Compact(?:Classification(?:Discriminant|Ensemble|Tree)|Regression(?:Ensemble|Tree)|TreeBagger)|confusionmat|controlchart|controlrules|cophenet|copula(?:cdf|fit|param|pdf|rnd|stat)|cordexch|corr|corrcov|coxphfit|createns|crosstab|crossval|cvpartition|datasample|dataset|daugment|dcovary|dendrogram|dfittool|disttool|dummyvar|dwtest|ecdf|ecdfhist|ev(?:cdf|fit|inv|like|pdf|rnd|stat)|ExhaustiveSearcher|exp(?:cdf|fit|inv|like|pdf|rnd|stat)|factoran|fcdf|ff2n|finv|fitdist|fitensemble|fpdf|fracfact|fracfactgen|friedman|frnd|fstat|fsurfht|fullfact|gagerr|gam(?:cdf|fit|inv|like|pdf|rnd|stat)|GeneralizedLinearModel(?:\\.fit)?|geo(?:cdf|inv|mean|pdf|rnd|stat)|gev(?:cdf|fit|inv|like|pdf|rnd|stat)|gline|glmfit|glmval|glyphplot|gmdistribution(?:\\.fit)?|gname|gp(?:cdf|fit|inv|like|pdf|rnd|stat)|gplotmatrix|grp2idx|grpstats|gscatter|haltonset|harmmean|hist3|histfit|hmm(?:decode|estimate|generate|train|viterbi)|hougen|hyge(?:cdf|inv|pdf|rnd|stat)|icdf|inconsistent|interactionplot|invpred|iqr|iwishrnd|jackknife|jbtest|johnsrnd|KDTreeSearcher|kmeans|knnsearch|kruskalwallis|ksdensity|kstest|kstest2|kurtosis|lasso|lassoglm|lassoPlot|leverage|lhsdesign|lhsnorm|lillietest|LinearModel(?:\\.fit)?|linhyptest|linkage|logn(?:cdf|fit|inv|like|pdf|rnd|stat)|lsline|mad|mahal|maineffectsplot|manova1|manovacluster|mdscale|mhsample|mle|mlecov|mnpdf|mnrfit|mnrnd|mnrval|moment|multcompare|multivarichart|mvn(?:cdf|pdf|rnd)|mvregress|mvregresslike|mvt(?:cdf|pdf|rnd)|NaiveBayes(?:\\.fit)?|nan(?:cov|max|mean|median|min|std|sum|var)|nbin(?:cdf|fit|inv|pdf|rnd|stat)|ncf(?:cdf|inv|pdf|rnd|stat)|nct(?:cdf|inv|pdf|rnd|stat)|ncx2(?:cdf|inv|pdf|rnd|stat)|NeighborSearcher|nlinfit|nlintool|nlmefit|nlmefitsa|nlparci|nlpredci|nnmf|nominal|NonLinearModel(?:\\.fit)?|norm(?:cdf|fit|inv|like|pdf|rnd|stat)|normplot|normspec|ordinal|outlierMeasure|parallelcoords|paretotails|partialcorr|pcacov|pcares|pdf|pdist|pdist2|pearsrnd|perfcurve|perms|piecewisedistribution|plsregress|poiss(?:cdf|fit|inv|pdf|rnd|tat)|polyconf|polytool|prctile|princomp|ProbDist(?:Kernel|Parametric|UnivKernel|UnivParam)?|probplot|procrustes|qqplot|qrandset|qrandstream|quantile|randg|random|randsample|randtool|range|rangesearch|ranksum|rayl(?:cdf|fit|inv|pdf|rnd|stat)|rcoplot|refcurve|refline|regress|Regression(?:BaggedEnsemble|Ensemble|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|regstats|relieff|ridge|robustdemo|robustfit|rotatefactors|rowexch|rsmdemo|rstool|runstest|sampsizepwr|scatterhist|sequentialfs|signrank|signtest|silhouette|skewness|slicesample|sobolset|squareform|statget|statset|stepwise|stepwisefit|surfht|tabulate|tblread|tblwrite|tcdf|tdfread|tiedrank|tinv|tpdf|TreeBagger|treedisp|treefit|treeprune|treetest|treeval|trimmean|trnd|tstat|ttest|ttest2|unid(?:cdf|inv|pdf|rnd|stat)|unif(?:cdf|inv|it|pdf|rnd|stat)|vartest(?:2|n)?|wbl(?:cdf|fit|inv|like|pdf|rnd|stat)|wblplot|wishrnd|x2fx|xptread|zscore|ztest'\n  ].join(\"|\");\n  var imageFunctions = [\n    'adapthisteq|analyze75info|analyze75read|applycform|applylut|axes2pix|bestblk|blockproc|bwarea|bwareaopen|bwboundaries|bwconncomp|bwconvhull|bwdist|bwdistgeodesic|bweuler|bwhitmiss|bwlabel|bwlabeln|bwmorph|bwpack|bwperim|bwselect|bwtraceboundary|bwulterode|bwunpack|checkerboard|col2im|colfilt|conndef|convmtx2|corner|cornermetric|corr2|cp2tform|cpcorr|cpselect|cpstruct2pairs|dct2|dctmtx|deconvblind|deconvlucy|deconvreg|deconvwnr|decorrstretch|demosaic|dicom(?:anon|dict|info|lookup|read|uid|write)|edge|edgetaper|entropy|entropyfilt|fan2para|fanbeam|findbounds|fliptform|freqz2|fsamp2|fspecial|ftrans2|fwind1|fwind2|getheight|getimage|getimagemodel|getline|getneighbors|getnhood|getpts|getrangefromclass|getrect|getsequence|gray2ind|graycomatrix|graycoprops|graydist|grayslice|graythresh|hdrread|hdrwrite|histeq|hough|houghlines|houghpeaks|iccfind|iccread|iccroot|iccwrite|idct2|ifanbeam|im2bw|im2col|im2double|im2int16|im2java2d|im2single|im2uint16|im2uint8|imabsdiff|imadd|imadjust|ImageAdapter|imageinfo|imagemodel|imapplymatrix|imattributes|imbothat|imclearborder|imclose|imcolormaptool|imcomplement|imcontour|imcontrast|imcrop|imdilate|imdisplayrange|imdistline|imdivide|imellipse|imerode|imextendedmax|imextendedmin|imfill|imfilter|imfindcircles|imfreehand|imfuse|imgca|imgcf|imgetfile|imhandles|imhist|imhmax|imhmin|imimposemin|imlincomb|imline|immagbox|immovie|immultiply|imnoise|imopen|imoverview|imoverviewpanel|impixel|impixelinfo|impixelinfoval|impixelregion|impixelregionpanel|implay|impoint|impoly|impositionrect|improfile|imputfile|impyramid|imreconstruct|imrect|imregconfig|imregionalmax|imregionalmin|imregister|imresize|imroi|imrotate|imsave|imscrollpanel|imshow|imshowpair|imsubtract|imtool|imtophat|imtransform|imview|ind2gray|ind2rgb|interfileinfo|interfileread|intlut|ippl|iptaddcallback|iptcheckconn|iptcheckhandle|iptcheckinput|iptcheckmap|iptchecknargin|iptcheckstrs|iptdemos|iptgetapi|iptGetPointerBehavior|iptgetpref|ipticondir|iptnum2ordinal|iptPointerManager|iptprefs|iptremovecallback|iptSetPointerBehavior|iptsetpref|iptwindowalign|iradon|isbw|isflat|isgray|isicc|isind|isnitf|isrgb|isrset|lab2double|lab2uint16|lab2uint8|label2rgb|labelmatrix|makecform|makeConstrainToRectFcn|makehdr|makelut|makeresampler|maketform|mat2gray|mean2|medfilt2|montage|nitfinfo|nitfread|nlfilter|normxcorr2|ntsc2rgb|openrset|ordfilt2|otf2psf|padarray|para2fan|phantom|poly2mask|psf2otf|qtdecomp|qtgetblk|qtsetblk|radon|rangefilt|reflect|regionprops|registration\\.metric\\.(?:MattesMutualInformation|MeanSquares)|registration\\.optimizer\\.(?:OnePlusOneEvolutionary|RegularStepGradientDescent)|rgb2gray|rgb2ntsc|rgb2ycbcr|roicolor|roifill|roifilt2|roipoly|rsetwrite|std2|stdfilt|strel|stretchlim|subimage|tformarray|tformfwd|tforminv|tonemap|translate|truesize|uintlut|viscircles|warp|watershed|whitepoint|wiener2|xyz2double|xyz2uint16|ycbcr2rgb'\n  ].join(\"|\");\n  var optimFunctions = [\n    'bintprog|color|fgoalattain|fminbnd|fmincon|fminimax|fminsearch|fminunc|fseminf|fsolve|fzero|fzmult|gangstr|ktrlink|linprog|lsqcurvefit|lsqlin|lsqnonlin|lsqnonneg|optimget|optimset|optimtool|quadprog'\n  ].join(\"|\");\n\n  // identifiers: variable/function name, or a chain of variable names joined by dots (obj.method, struct.field1.field2, etc..)\n  // valid variable names (start with letter, and contains letters, digits, and underscores).\n  // we match \"xx.yy\" as a whole so that if \"xx\" is plain and \"yy\" is not, we dont get a false positive for \"yy\"\n  //var reIdent = '(?:[a-zA-Z][a-zA-Z0-9_]*)';\n  //var reIdentChain = '(?:' + reIdent + '(?:\\.' + reIdent + ')*' + ')';\n\n  // patterns that always start with a known character. Must have a shortcut string.\n  var shortcutStylePatterns = [\n    // whitespaces: space, tab, carriage return, line feed, line tab, form-feed, non-break space\n    [PR.PR_PLAIN, /^[ \\t\\r\\n\\v\\f\\xA0]+/, null, \" \\t\\r\\n\\u000b\\u000c\\u00a0\"],\n\n    // block comments\n    //TODO: chokes on nested block comments\n    //TODO: false positives when the lines with %{ and %} contain non-spaces\n    //[PR.PR_COMMENT, /^%(?:[^\\{].*|\\{(?:%|%*[^\\}%])*(?:\\}+%?)?)/, null],\n    [PR.PR_COMMENT, /^%\\{[^%]*%+(?:[^\\}%][^%]*%+)*\\}/, null],\n\n    // single-line comments\n    [PR.PR_COMMENT, /^%[^\\r\\n]*/, null, \"%\"],\n\n    // system commands\n    [PR_SYSCMD, /^![^\\r\\n]*/, null, \"!\"]\n  ];\n\n  // patterns that will be tried in order if the shortcut ones fail. May have shortcuts.\n  var fallthroughStylePatterns = [\n    // line continuation\n    [PR_LINE_CONTINUATION, /^\\.\\.\\.\\s*[\\r\\n]/, null],\n\n    // error message\n    [PR_ERROR, /^\\?\\?\\? [^\\r\\n]*/, null],\n\n    // warning message\n    [PR_WARNING, /^Warning: [^\\r\\n]*/, null],\n\n    // command prompt/output\n    //[PR_CODE_OUTPUT, /^>>\\s+[^\\r\\n]*[\\r\\n]{1,2}[^=]*=[^\\r\\n]*[\\r\\n]{1,2}[^\\r\\n]*/, null],    // full command output (both loose/compact format): `>> EXP\\nVAR =\\n VAL`\n    [PR_CODE_OUTPUT, /^>>\\s+/, null],      // only the command prompt `>> `\n    [PR_CODE_OUTPUT, /^octave:\\d+>\\s+/, null],  // Octave command prompt `octave:1> `\n\n    // identifier (chain) or closing-parenthesis/brace/bracket, and IS followed by transpose operator\n    // this way we dont misdetect the transpose operator ' as the start of a string\n    [\"lang-matlab-operators\", /^((?:[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*|\\)|\\]|\\}|\\.)')/, null],\n\n    // identifier (chain), and NOT followed by transpose operator\n    // this must come AFTER the \"is followed by transpose\" step (otherwise it chops the last char of identifier)\n    [\"lang-matlab-identifiers\", /^([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)(?!')/, null],\n\n    // single-quoted strings: allow for escaping with '', no multilines\n    //[PR.PR_STRING, /(?:(?<=(?:\\(|\\[|\\{|\\s|=|;|,|:))|^)'(?:[^']|'')*'(?=(?:\\)|\\]|\\}|\\s|=|;|,|:|~|<|>|&|-|\\+|\\*|\\.|\\^|\\|))/, null],  // string vs. transpose (check before/after context using negative/positive lookbehind/lookahead)\n    [PR.PR_STRING, /^'(?:[^']|'')*'/, null],  // \"'\"\n\n    // floating point numbers: 1, 1.0, 1i, -1.1E-1\n    [PR.PR_LITERAL, /^[+\\-]?\\.?\\d+(?:\\.\\d*)?(?:[Ee][+\\-]?\\d+)?[ij]?/, null],\n\n    // parentheses, braces, brackets\n    [PR.PR_TAG, /^(?:\\{|\\}|\\(|\\)|\\[|\\])/, null],  // \"{}()[]\"\n\n    // other operators\n    [PR.PR_PUNCTUATION, /^(?:<|>|=|~|@|&|;|,|:|!|\\-|\\+|\\*|\\^|\\.|\\||\\\\|\\/)/, null]\n  ];\n\n  var identifiersPatterns = [\n    // list of keywords (`iskeyword`)\n    [PR.PR_KEYWORD, /^\\b(?:break|case|catch|classdef|continue|else|elseif|end|for|function|global|if|otherwise|parfor|persistent|return|spmd|switch|try|while)\\b/, null],\n\n    // some specials variables/constants\n    [PR_CONSTANT, /^\\b(?:true|false|inf|Inf|nan|NaN|eps|pi|ans|nargin|nargout|varargin|varargout)\\b/, null],\n\n    // some data types\n    [PR.PR_TYPE, /^\\b(?:cell|struct|char|double|single|logical|u?int(?:8|16|32|64)|sparse)\\b/, null],\n\n    // commonly used builtin functions from core MATLAB and a few popular toolboxes\n    [PR_FUNCTION, new RegExp('^\\\\b(?:' + coreFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + statsFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + imageFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + optimFunctions + ')\\\\b'), null],\n\n    // plain identifier (user-defined variable/function name)\n    [PR_IDENTIFIER, /^[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*/, null]\n  ];\n\n  var operatorsPatterns = [\n    // forward to identifiers to match\n    [\"lang-matlab-identifiers\", /^([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)/, null],\n\n    // parentheses, braces, brackets\n    [PR.PR_TAG, /^(?:\\{|\\}|\\(|\\)|\\[|\\])/, null],  // \"{}()[]\"\n\n    // other operators\n    [PR.PR_PUNCTUATION, /^(?:<|>|=|~|@|&|;|,|:|!|\\-|\\+|\\*|\\^|\\.|\\||\\\\|\\/)/, null],\n\n    // transpose operators\n    [PR_TRANSPOSE, /^'/, null]\n  ];\n\n  PR.registerLangHandler(\n    PR.createSimpleLexer([], identifiersPatterns),\n    [\"matlab-identifiers\"]\n  );\n  PR.registerLangHandler(\n    PR.createSimpleLexer([], operatorsPatterns),\n    [\"matlab-operators\"]\n  );\n  PR.registerLangHandler(\n    PR.createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns),\n    [\"matlab\"]\n  );\n})(window['PR']);\n</|></|></=(?:\\(|\\[|\\{|\\s|=|;|,|:))|^)'(?:[^']|'')*'(?=(?:\\)|\\]|\\}|\\s|=|;|,|:|~|<|></amroamroamro@gmail.com>"},{"_content":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Protocol Buffers as described at\n * http://code.google.com/p/protobuf/.\n *\n * Based on the lexical grammar at\n * http://research.microsoft.com/fsharp/manual/spec2.aspx#_Toc202383715\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](PR['sourceDecorator']({\n        'keywords': (\n            'bytes,default,double,enum,extend,extensions,false,'\n            + 'group,import,max,message,option,'\n            + 'optional,package,repeated,required,returns,rpc,service,'\n            + 'syntax,to,true'),\n        'types': /^(bool|(double|s?fixed|[su]?int)(32|64)|float|string)\\b/,\n        'cStyleComments': true\n      }), ['proto']);\n","source":"plugins/prettify/lang-proto.js","raw":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Protocol Buffers as described at\n * http://code.google.com/p/protobuf/.\n *\n * Based on the lexical grammar at\n * http://research.microsoft.com/fsharp/manual/spec2.aspx#_Toc202383715\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](PR['sourceDecorator']({\n        'keywords': (\n            'bytes,default,double,enum,extend,extensions,false,'\n            + 'group,import,max,message,option,'\n            + 'optional,package,repeated,required,returns,rpc,service,'\n            + 'syntax,to,true'),\n        'types': /^(bool|(double|s?fixed|[su]?int)(32|64)|float|string)\\b/,\n        'cStyleComments': true\n      }), ['proto']);\n","date":"2019-04-30T08:09:45.658Z","updated":"2019-04-30T08:09:45.658Z","path":"plugins/prettify/lang-proto.js","layout":"false","title":"","comments":1,"_id":"cjxh80elz001l6c9vi1d1ya71","content":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Protocol Buffers as described at\n * http://code.google.com/p/protobuf/.\n *\n * Based on the lexical grammar at\n * http://research.microsoft.com/fsharp/manual/spec2.aspx#_Toc202383715\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](PR['sourceDecorator']({\n        'keywords': (\n            'bytes,default,double,enum,extend,extensions,false,'\n            + 'group,import,max,message,option,'\n            + 'optional,package,repeated,required,returns,rpc,service,'\n            + 'syntax,to,true'),\n        'types': /^(bool|(double|s?fixed|[su]?int)(32|64)|float|string)\\b/,\n        'cStyleComments': true\n      }), ['proto']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Protocol Buffers as described at\n * http://code.google.com/p/protobuf/.\n *\n * Based on the lexical grammar at\n * http://research.microsoft.com/fsharp/manual/spec2.aspx#_Toc202383715\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](PR['sourceDecorator']({\n        'keywords': (\n            'bytes,default,double,enum,extend,extensions,false,'\n            + 'group,import,max,message,option,'\n            + 'optional,package,repeated,required,returns,rpc,service,'\n            + 'syntax,to,true'),\n        'types': /^(bool|(double|s?fixed|[su]?int)(32|64)|float|string)\\b/,\n        'cStyleComments': true\n      }), ['proto']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2012 Jeffrey B. Arnold\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for S, S-plus, and R source code.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-r\"> code </pre>\n *\n * Language definition from\n * http://cran.r-project.org/doc/manuals/R-lang.html.\n * Many of the regexes are shared  with the pygments SLexer,\n * http://pygments.org/.\n *\n * Original: https://raw.github.com/jrnold/prettify-lang-r-bugs/master/lang-r.js\n *\n * @author jeffrey.arnold@gmail.com\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n\t    [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n\t    [PR['PR_STRING'],      /^\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$)/, null, \"'\"]\n        ],\n        [\n            [PR['PR_COMMENT'],     /^#.*/],\n\t    [PR['PR_KEYWORD'],     /^(?:if|else|for|while|repeat|in|next|break|return|switch|function)(?![A-Za-z0-9_.])/],\n\t    // hex numbes\n\t    [PR['PR_LITERAL'], /^0[xX][a-fA-F0-9]+([pP][0-9]+)?[Li]?/],\n\t    // Decimal numbers\n            [PR['PR_LITERAL'], /^[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+)([eE][+-]?[0-9]+)?[Li]?/],\n\t    // builtin symbols\n\t    [PR['PR_LITERAL'], /^(?:NULL|NA(?:_(?:integer|real|complex|character)_)?|Inf|TRUE|FALSE|NaN|\\.\\.(?:\\.|[0-9]+))(?![A-Za-z0-9_.])/],\n\t    // assignment, operators, and parens, etc.\n\t    [PR['PR_PUNCTUATION'], /^(?:<<?-|->>?|-|==|<=|>=|<|>|&&?|!=|\\|\\|?|\\*|\\+|\\^|\\/|!|%.*?%|=|~|\\$|@|:{1,3}|[\\[\\](){};,?])/],\n\t    // valid variable names\n\t    [PR['PR_PLAIN'], /^(?:[A-Za-z]+[A-Za-z0-9_.]*|\\.[a-zA-Z_][0-9a-zA-Z\\._]*)(?![A-Za-z0-9_.])/],\n\t    // string backtick\n\t    [PR['PR_STRING'], /^`.+`/]\n        ]),\n    ['r', 's', 'R', 'S', 'Splus']);\n","source":"plugins/prettify/lang-r.js","raw":"/**\n * @license\n * Copyright (C) 2012 Jeffrey B. Arnold\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for S, S-plus, and R source code.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-r\"> code </pre>\n *\n * Language definition from\n * http://cran.r-project.org/doc/manuals/R-lang.html.\n * Many of the regexes are shared  with the pygments SLexer,\n * http://pygments.org/.\n *\n * Original: https://raw.github.com/jrnold/prettify-lang-r-bugs/master/lang-r.js\n *\n * @author jeffrey.arnold@gmail.com\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n\t    [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n\t    [PR['PR_STRING'],      /^\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$)/, null, \"'\"]\n        ],\n        [\n            [PR['PR_COMMENT'],     /^#.*/],\n\t    [PR['PR_KEYWORD'],     /^(?:if|else|for|while|repeat|in|next|break|return|switch|function)(?![A-Za-z0-9_.])/],\n\t    // hex numbes\n\t    [PR['PR_LITERAL'], /^0[xX][a-fA-F0-9]+([pP][0-9]+)?[Li]?/],\n\t    // Decimal numbers\n            [PR['PR_LITERAL'], /^[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+)([eE][+-]?[0-9]+)?[Li]?/],\n\t    // builtin symbols\n\t    [PR['PR_LITERAL'], /^(?:NULL|NA(?:_(?:integer|real|complex|character)_)?|Inf|TRUE|FALSE|NaN|\\.\\.(?:\\.|[0-9]+))(?![A-Za-z0-9_.])/],\n\t    // assignment, operators, and parens, etc.\n\t    [PR['PR_PUNCTUATION'], /^(?:<<?-|->>?|-|==|<=|>=|<|>|&&?|!=|\\|\\|?|\\*|\\+|\\^|\\/|!|%.*?%|=|~|\\$|@|:{1,3}|[\\[\\](){};,?])/],\n\t    // valid variable names\n\t    [PR['PR_PLAIN'], /^(?:[A-Za-z]+[A-Za-z0-9_.]*|\\.[a-zA-Z_][0-9a-zA-Z\\._]*)(?![A-Za-z0-9_.])/],\n\t    // string backtick\n\t    [PR['PR_STRING'], /^`.+`/]\n        ]),\n    ['r', 's', 'R', 'S', 'Splus']);\n","date":"2019-04-30T08:09:45.650Z","updated":"2019-04-30T08:09:45.649Z","path":"plugins/prettify/lang-r.js","layout":"false","title":"","comments":1,"_id":"cjxh80elz001m6c9vfsp84ln0","content":"/**\n * @license\n * Copyright (C) 2012 Jeffrey B. Arnold\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for S, S-plus, and R source code.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-r\"> code </pre>\n *\n * Language definition from\n * http://cran.r-project.org/doc/manuals/R-lang.html.\n * Many of the regexes are shared  with the pygments SLexer,\n * http://pygments.org/.\n *\n * Original: https://raw.github.com/jrnold/prettify-lang-r-bugs/master/lang-r.js\n *\n * @author jeffrey.arnold@gmail.com\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n\t    [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n\t    [PR['PR_STRING'],      /^\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$)/, null, \"'\"]\n        ],\n        [\n            [PR['PR_COMMENT'],     /^#.*/],\n\t    [PR['PR_KEYWORD'],     /^(?:if|else|for|while|repeat|in|next|break|return|switch|function)(?![A-Za-z0-9_.])/],\n\t    // hex numbes\n\t    [PR['PR_LITERAL'], /^0[xX][a-fA-F0-9]+([pP][0-9]+)?[Li]?/],\n\t    // Decimal numbers\n            [PR['PR_LITERAL'], /^[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+)([eE][+-]?[0-9]+)?[Li]?/],\n\t    // builtin symbols\n\t    [PR['PR_LITERAL'], /^(?:NULL|NA(?:_(?:integer|real|complex|character)_)?|Inf|TRUE|FALSE|NaN|\\.\\.(?:\\.|[0-9]+))(?![A-Za-z0-9_.])/],\n\t    // assignment, operators, and parens, etc.\n\t    [PR['PR_PUNCTUATION'], /^(?:<<?-|->>?|-|==|<=|>=|<|>|&&?|!=|\\|\\|?|\\*|\\+|\\^|\\/|!|%.*?%|=|~|\\$|@|:{1,3}|[\\[\\](){};,?])/],\n\t    // valid variable names\n\t    [PR['PR_PLAIN'], /^(?:[A-Za-z]+[A-Za-z0-9_.]*|\\.[a-zA-Z_][0-9a-zA-Z\\._]*)(?![A-Za-z0-9_.])/],\n\t    // string backtick\n\t    [PR['PR_STRING'], /^`.+`/]\n        ]),\n    ['r', 's', 'R', 'S', 'Splus']);\n</|></=|>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2012 Jeffrey B. Arnold\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for S, S-plus, and R source code.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-r\"> code </pre>\n *\n * Language definition from\n * http://cran.r-project.org/doc/manuals/R-lang.html.\n * Many of the regexes are shared  with the pygments SLexer,\n * http://pygments.org/.\n *\n * Original: https://raw.github.com/jrnold/prettify-lang-r-bugs/master/lang-r.js\n *\n * @author jeffrey.arnold@gmail.com\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n\t    [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n\t    [PR['PR_STRING'],      /^\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$)/, null, \"'\"]\n        ],\n        [\n            [PR['PR_COMMENT'],     /^#.*/],\n\t    [PR['PR_KEYWORD'],     /^(?:if|else|for|while|repeat|in|next|break|return|switch|function)(?![A-Za-z0-9_.])/],\n\t    // hex numbes\n\t    [PR['PR_LITERAL'], /^0[xX][a-fA-F0-9]+([pP][0-9]+)?[Li]?/],\n\t    // Decimal numbers\n            [PR['PR_LITERAL'], /^[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+)([eE][+-]?[0-9]+)?[Li]?/],\n\t    // builtin symbols\n\t    [PR['PR_LITERAL'], /^(?:NULL|NA(?:_(?:integer|real|complex|character)_)?|Inf|TRUE|FALSE|NaN|\\.\\.(?:\\.|[0-9]+))(?![A-Za-z0-9_.])/],\n\t    // assignment, operators, and parens, etc.\n\t    [PR['PR_PUNCTUATION'], /^(?:<<?-|->>?|-|==|<=|>=|<|>|&&?|!=|\\|\\|?|\\*|\\+|\\^|\\/|!|%.*?%|=|~|\\$|@|:{1,3}|[\\[\\](){};,?])/],\n\t    // valid variable names\n\t    [PR['PR_PLAIN'], /^(?:[A-Za-z]+[A-Za-z0-9_.]*|\\.[a-zA-Z_][0-9a-zA-Z\\._]*)(?![A-Za-z0-9_.])/],\n\t    // string backtick\n\t    [PR['PR_STRING'], /^`.+`/]\n        ]),\n    ['r', 's', 'R', 'S', 'Splus']);\n</|></=|>"},{"_content":"/**\n * @license\n * Copyright (C) 2012 Jeffrey Arnold\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Support for R documentation (Rd) files\n *\n * Minimal highlighting or Rd files, basically just highlighting\n * macros. It does not try to identify verbatim or R-like regions of\n * macros as that is too complicated for a lexer.  Descriptions of the\n * Rd format can be found\n * http://cran.r-project.org/doc/manuals/R-exts.html and\n * http://developer.r-project.org/parseRd.pdf.\n *\n * @author Jeffrey Arnold\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            // whitespace\n            [PR['PR_PLAIN'],   /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n            // all comments begin with '%'\n            [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%']\n        ],\n        [// special macros with no args\n            [PR['PR_LITERAL'], /^\\\\(?:cr|l?dots|R|tab)\\b/],\n\t    // macros\n            [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/],\n\t    // highlighted as macros, since technically they are\n            [PR['PR_KEYWORD'],  /^#(?:ifn?def|endif)/ ],\n\t    // catch escaped brackets\n\t    [PR['PR_PLAIN'], /^\\\\[{}]/],\n            // punctuation\n            [PR['PR_PUNCTUATION'], /^[{}()\\[\\]]+/]\n        ]),\n    ['Rd', 'rd']);\n","source":"plugins/prettify/lang-rd.js","raw":"/**\n * @license\n * Copyright (C) 2012 Jeffrey Arnold\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Support for R documentation (Rd) files\n *\n * Minimal highlighting or Rd files, basically just highlighting\n * macros. It does not try to identify verbatim or R-like regions of\n * macros as that is too complicated for a lexer.  Descriptions of the\n * Rd format can be found\n * http://cran.r-project.org/doc/manuals/R-exts.html and\n * http://developer.r-project.org/parseRd.pdf.\n *\n * @author Jeffrey Arnold\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            // whitespace\n            [PR['PR_PLAIN'],   /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n            // all comments begin with '%'\n            [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%']\n        ],\n        [// special macros with no args\n            [PR['PR_LITERAL'], /^\\\\(?:cr|l?dots|R|tab)\\b/],\n\t    // macros\n            [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/],\n\t    // highlighted as macros, since technically they are\n            [PR['PR_KEYWORD'],  /^#(?:ifn?def|endif)/ ],\n\t    // catch escaped brackets\n\t    [PR['PR_PLAIN'], /^\\\\[{}]/],\n            // punctuation\n            [PR['PR_PUNCTUATION'], /^[{}()\\[\\]]+/]\n        ]),\n    ['Rd', 'rd']);\n","date":"2019-04-30T08:09:45.654Z","updated":"2019-04-30T08:09:45.654Z","path":"plugins/prettify/lang-rd.js","layout":"false","title":"","comments":1,"_id":"cjxh80em0001n6c9vb3nruz4j","content":"/**\n * @license\n * Copyright (C) 2012 Jeffrey Arnold\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Support for R documentation (Rd) files\n *\n * Minimal highlighting or Rd files, basically just highlighting\n * macros. It does not try to identify verbatim or R-like regions of\n * macros as that is too complicated for a lexer.  Descriptions of the\n * Rd format can be found\n * http://cran.r-project.org/doc/manuals/R-exts.html and\n * http://developer.r-project.org/parseRd.pdf.\n *\n * @author Jeffrey Arnold\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            // whitespace\n            [PR['PR_PLAIN'],   /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n            // all comments begin with '%'\n            [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%']\n        ],\n        [// special macros with no args\n            [PR['PR_LITERAL'], /^\\\\(?:cr|l?dots|R|tab)\\b/],\n\t    // macros\n            [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/],\n\t    // highlighted as macros, since technically they are\n            [PR['PR_KEYWORD'],  /^#(?:ifn?def|endif)/ ],\n\t    // catch escaped brackets\n\t    [PR['PR_PLAIN'], /^\\\\[{}]/],\n            // punctuation\n            [PR['PR_PUNCTUATION'], /^[{}()\\[\\]]+/]\n        ]),\n    ['Rd', 'rd']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2012 Jeffrey Arnold\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Support for R documentation (Rd) files\n *\n * Minimal highlighting or Rd files, basically just highlighting\n * macros. It does not try to identify verbatim or R-like regions of\n * macros as that is too complicated for a lexer.  Descriptions of the\n * Rd format can be found\n * http://cran.r-project.org/doc/manuals/R-exts.html and\n * http://developer.r-project.org/parseRd.pdf.\n *\n * @author Jeffrey Arnold\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            // whitespace\n            [PR['PR_PLAIN'],   /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n            // all comments begin with '%'\n            [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%']\n        ],\n        [// special macros with no args\n            [PR['PR_LITERAL'], /^\\\\(?:cr|l?dots|R|tab)\\b/],\n\t    // macros\n            [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/],\n\t    // highlighted as macros, since technically they are\n            [PR['PR_KEYWORD'],  /^#(?:ifn?def|endif)/ ],\n\t    // catch escaped brackets\n\t    [PR['PR_PLAIN'], /^\\\\[{}]/],\n            // punctuation\n            [PR['PR_PUNCTUATION'], /^[{}()\\[\\]]+/]\n        ]),\n    ['Rd', 'rd']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2010 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Scala.\n *\n * Derived from http://lampsvn.epfl.ch/svn-repos/scala/scala-documentation/trunk/src/reference/SyntaxSummary.tex\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted string \n          // or a triple double-quoted multi-line string.\n         [PR['PR_STRING'],\n          /^(?:\"(?:(?:\"\"(?:\"\"?(?!\")|[^\\\\\"]|\\\\.)*\"{0,3})|(?:[^\"\\r\\n\\\\]|\\\\.)*\"?))/,\n          null, '\"'],\n         [PR['PR_LITERAL'],     /^`(?:[^\\r\\n\\\\`]|\\\\.)*`?/, null, '`'],\n         [PR['PR_PUNCTUATION'], /^[!#%&()*+,\\-:;<=>?@\\[\\\\\\]^{|}~]+/, null,\n          '!#%&()*+,-:;<=>?@[\\\\]^{|}~']\n        ],\n        [\n         // A symbol literal is a single quote followed by an identifier with no\n         // single quote following\n         // A character literal has single quotes on either side\n         [PR['PR_STRING'],      /^'(?:[^\\r\\n\\\\']|\\\\(?:'|[^\\r\\n']+))'/],\n         [PR['PR_LITERAL'],     /^'[a-zA-Z_$][\\w$]*(?!['$\\w])/],\n         [PR['PR_KEYWORD'],     /^(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|object|override|package|private|protected|requires|return|sealed|super|throw|trait|try|type|val|var|while|with|yield)\\b/],\n         [PR['PR_LITERAL'],     /^(?:true|false|null|this)\\b/],\n         [PR['PR_LITERAL'],     /^(?:(?:0(?:[0-7]+|X[0-9A-F]+))L?|(?:(?:0|[1-9][0-9]*)(?:(?:\\.[0-9]+)?(?:E[+\\-]?[0-9]+)?F?|L?))|\\\\.[0-9]+(?:E[+\\-]?[0-9]+)?F?)/i],\n         // Treat upper camel case identifiers as types.\n         [PR['PR_TYPE'],        /^[$_]*[A-Z][_$A-Z0-9]*[a-z][\\w$]*/],\n         [PR['PR_PLAIN'],       /^[$a-zA-Z_][\\w$]*/],\n         [PR['PR_COMMENT'],     /^\\/(?:\\/.*|\\*(?:\\/|\\**[^*/])*(?:\\*+\\/?)?)/],\n         [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/)/]\n        ]),\n    ['scala']);\n","source":"plugins/prettify/lang-scala.js","raw":"/**\n * @license\n * Copyright (C) 2010 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Scala.\n *\n * Derived from http://lampsvn.epfl.ch/svn-repos/scala/scala-documentation/trunk/src/reference/SyntaxSummary.tex\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted string \n          // or a triple double-quoted multi-line string.\n         [PR['PR_STRING'],\n          /^(?:\"(?:(?:\"\"(?:\"\"?(?!\")|[^\\\\\"]|\\\\.)*\"{0,3})|(?:[^\"\\r\\n\\\\]|\\\\.)*\"?))/,\n          null, '\"'],\n         [PR['PR_LITERAL'],     /^`(?:[^\\r\\n\\\\`]|\\\\.)*`?/, null, '`'],\n         [PR['PR_PUNCTUATION'], /^[!#%&()*+,\\-:;<=>?@\\[\\\\\\]^{|}~]+/, null,\n          '!#%&()*+,-:;<=>?@[\\\\]^{|}~']\n        ],\n        [\n         // A symbol literal is a single quote followed by an identifier with no\n         // single quote following\n         // A character literal has single quotes on either side\n         [PR['PR_STRING'],      /^'(?:[^\\r\\n\\\\']|\\\\(?:'|[^\\r\\n']+))'/],\n         [PR['PR_LITERAL'],     /^'[a-zA-Z_$][\\w$]*(?!['$\\w])/],\n         [PR['PR_KEYWORD'],     /^(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|object|override|package|private|protected|requires|return|sealed|super|throw|trait|try|type|val|var|while|with|yield)\\b/],\n         [PR['PR_LITERAL'],     /^(?:true|false|null|this)\\b/],\n         [PR['PR_LITERAL'],     /^(?:(?:0(?:[0-7]+|X[0-9A-F]+))L?|(?:(?:0|[1-9][0-9]*)(?:(?:\\.[0-9]+)?(?:E[+\\-]?[0-9]+)?F?|L?))|\\\\.[0-9]+(?:E[+\\-]?[0-9]+)?F?)/i],\n         // Treat upper camel case identifiers as types.\n         [PR['PR_TYPE'],        /^[$_]*[A-Z][_$A-Z0-9]*[a-z][\\w$]*/],\n         [PR['PR_PLAIN'],       /^[$a-zA-Z_][\\w$]*/],\n         [PR['PR_COMMENT'],     /^\\/(?:\\/.*|\\*(?:\\/|\\**[^*/])*(?:\\*+\\/?)?)/],\n         [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/)/]\n        ]),\n    ['scala']);\n","date":"2019-04-30T08:09:45.656Z","updated":"2019-04-30T08:09:45.656Z","path":"plugins/prettify/lang-scala.js","layout":"false","title":"","comments":1,"_id":"cjxh80em0001o6c9vk80mmw8p","content":"/**\n * @license\n * Copyright (C) 2010 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Scala.\n *\n * Derived from http://lampsvn.epfl.ch/svn-repos/scala/scala-documentation/trunk/src/reference/SyntaxSummary.tex\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted string \n          // or a triple double-quoted multi-line string.\n         [PR['PR_STRING'],\n          /^(?:\"(?:(?:\"\"(?:\"\"?(?!\")|[^\\\\\"]|\\\\.)*\"{0,3})|(?:[^\"\\r\\n\\\\]|\\\\.)*\"?))/,\n          null, '\"'],\n         [PR['PR_LITERAL'],     /^`(?:[^\\r\\n\\\\`]|\\\\.)*`?/, null, '`'],\n         [PR['PR_PUNCTUATION'], /^[!#%&()*+,\\-:;<=>?@\\[\\\\\\]^{|}~]+/, null,\n          '!#%&()*+,-:;<=>?@[\\\\]^{|}~']\n        ],\n        [\n         // A symbol literal is a single quote followed by an identifier with no\n         // single quote following\n         // A character literal has single quotes on either side\n         [PR['PR_STRING'],      /^'(?:[^\\r\\n\\\\']|\\\\(?:'|[^\\r\\n']+))'/],\n         [PR['PR_LITERAL'],     /^'[a-zA-Z_$][\\w$]*(?!['$\\w])/],\n         [PR['PR_KEYWORD'],     /^(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|object|override|package|private|protected|requires|return|sealed|super|throw|trait|try|type|val|var|while|with|yield)\\b/],\n         [PR['PR_LITERAL'],     /^(?:true|false|null|this)\\b/],\n         [PR['PR_LITERAL'],     /^(?:(?:0(?:[0-7]+|X[0-9A-F]+))L?|(?:(?:0|[1-9][0-9]*)(?:(?:\\.[0-9]+)?(?:E[+\\-]?[0-9]+)?F?|L?))|\\\\.[0-9]+(?:E[+\\-]?[0-9]+)?F?)/i],\n         // Treat upper camel case identifiers as types.\n         [PR['PR_TYPE'],        /^[$_]*[A-Z][_$A-Z0-9]*[a-z][\\w$]*/],\n         [PR['PR_PLAIN'],       /^[$a-zA-Z_][\\w$]*/],\n         [PR['PR_COMMENT'],     /^\\/(?:\\/.*|\\*(?:\\/|\\**[^*/])*(?:\\*+\\/?)?)/],\n         [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/)/]\n        ]),\n    ['scala']);\n</=></=>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2010 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Scala.\n *\n * Derived from http://lampsvn.epfl.ch/svn-repos/scala/scala-documentation/trunk/src/reference/SyntaxSummary.tex\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted string \n          // or a triple double-quoted multi-line string.\n         [PR['PR_STRING'],\n          /^(?:\"(?:(?:\"\"(?:\"\"?(?!\")|[^\\\\\"]|\\\\.)*\"{0,3})|(?:[^\"\\r\\n\\\\]|\\\\.)*\"?))/,\n          null, '\"'],\n         [PR['PR_LITERAL'],     /^`(?:[^\\r\\n\\\\`]|\\\\.)*`?/, null, '`'],\n         [PR['PR_PUNCTUATION'], /^[!#%&()*+,\\-:;<=>?@\\[\\\\\\]^{|}~]+/, null,\n          '!#%&()*+,-:;<=>?@[\\\\]^{|}~']\n        ],\n        [\n         // A symbol literal is a single quote followed by an identifier with no\n         // single quote following\n         // A character literal has single quotes on either side\n         [PR['PR_STRING'],      /^'(?:[^\\r\\n\\\\']|\\\\(?:'|[^\\r\\n']+))'/],\n         [PR['PR_LITERAL'],     /^'[a-zA-Z_$][\\w$]*(?!['$\\w])/],\n         [PR['PR_KEYWORD'],     /^(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|object|override|package|private|protected|requires|return|sealed|super|throw|trait|try|type|val|var|while|with|yield)\\b/],\n         [PR['PR_LITERAL'],     /^(?:true|false|null|this)\\b/],\n         [PR['PR_LITERAL'],     /^(?:(?:0(?:[0-7]+|X[0-9A-F]+))L?|(?:(?:0|[1-9][0-9]*)(?:(?:\\.[0-9]+)?(?:E[+\\-]?[0-9]+)?F?|L?))|\\\\.[0-9]+(?:E[+\\-]?[0-9]+)?F?)/i],\n         // Treat upper camel case identifiers as types.\n         [PR['PR_TYPE'],        /^[$_]*[A-Z][_$A-Z0-9]*[a-z][\\w$]*/],\n         [PR['PR_PLAIN'],       /^[$a-zA-Z_][\\w$]*/],\n         [PR['PR_COMMENT'],     /^\\/(?:\\/.*|\\*(?:\\/|\\**[^*/])*(?:\\*+\\/?)?)/],\n         [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/)/]\n        ]),\n    ['scala']);\n</=></=>"},{"_content":"/**\n * @license\n * Copyright (C) 2015 Chris Morgan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Rust.\n *\n * Derived from prior experience implementing similar things in a few environments,\n * most especially rust.vim.\n *\n * @author me@chrismorgan.info\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([], [\n\t\t// Whitespace\n\t\t[PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/],\n\n\t\t// Single line comments\n\t\t[PR['PR_COMMENT'], /^\\/\\/.*/],\n\t\t// Block comments (sadly I do not see how to make this cope with comment nesting as it should)\n\t\t[PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/],//, null],\n\t\t// String and character literals\n\t\t[PR['PR_STRING'], /^b\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}))*?\"/],  // Bytes literal\n\t\t[PR['PR_STRING'], /^\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}|u\\{\\[\\da-fA-F]{1,6}\\}))*?\"/],  // String literal\n\t\t[PR['PR_STRING'], /^b?r(#*)\\\"[\\s\\S]*?\\\"\\1/],  // Raw string/bytes literal\n\t\t[PR['PR_STRING'], /^b'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}))'/],  // Byte literal\n\t\t[PR['PR_STRING'], /^'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{1,6}\\}))'/],  // Character literal\n\n\t\t// Lifetime\n\t\t[PR['PR_TAG'], /^'\\w+?\\b/],\n\n\t\t// Keywords, reserved keywords and primitive types\n\t\t[PR['PR_KEYWORD'], /^(?:match|if|else|as|break|box|continue|extern|fn|for|in|if|impl|dyn|let|loop|pub|return|super|unsafe|where|while|use|mod|trait|struct|enum|type|move|mut|ref|static|const|crate)\\b/],\n\t\t[PR['PR_KEYWORD'], /^(?:alignof|become|do|offsetof|priv|pure|sizeof|typeof|unsized|yield|async|await|try|abstract|virtual|final|override|macro)\\b/],\n\t\t[PR['PR_TYPE'], /^(?:[iu](8|16|32|64|128|size)|char|bool|f32|f64|str|Self)\\b/],\n\n\t\t// Rust 1.0 prelude items\n\t\t[PR['PR_TYPE'], /^(?:Copy|Send|Sized|Sync|Drop|Fn|FnMut|FnOnce|Box|ToOwned|Clone|PartialEq|PartialOrd|Eq|Ord|AsRef|AsMut|Into|From|Default|Iterator|Extend|IntoIterator|DoubleEndedIterator|ExactSizeIterator|Option|Some|None|Result|Ok|Err|SliceConcatExt|String|ToString|Vec)\\b/],\n\n\t\t// Literals:\n\t\t[PR['PR_LITERAL'], /^(self|true|false|null)\\b/],\n\t\t// A number is a hex integer literal, a decimal real literal, or in\n\t\t// scientific notation.\n\t\t// Integer literals: decimal, hexadecimal, octal, binary.\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0x[a-fA-F0-9_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0o[0-7_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0b[01_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t// Float literals\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*\\.(?![^\\s\\d.])/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)(?:[eE][+-]?[0-9_]+)?(?:f32|f64)?/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)(?:f32|f64)?/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)?(?:f32|f64)/],\n\n\t\t// Macro invocations (an identifier plus a !)\n\t\t[PR['PR_ATTRIB_NAME'], /^[a-z_]\\w*!/i],\n\t\t// An identifier (sorry, this should be unicode)\n\t\t[PR['PR_PLAIN'], /^[a-z_]\\w*/i],\n\t\t// Attributes\n\t\t[PR['PR_ATTRIB_VALUE'], /^#!?\\[[\\s\\S]*?\\]/],\n\t\t// All the punctuation\n\t\t[PR['PR_PUNCTUATION'], /^[+\\-/*=^&|!<>%[\\](){}?:.,;]/],\n\t\t// Anything else (which is probably illegal, as all the legal stuff should have been covered) can be plain\n\t\t[PR['PR_PLAIN'], /./]\n\t\t]),\n    ['rust']);\n","source":"plugins/prettify/lang-rust.js","raw":"/**\n * @license\n * Copyright (C) 2015 Chris Morgan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Rust.\n *\n * Derived from prior experience implementing similar things in a few environments,\n * most especially rust.vim.\n *\n * @author me@chrismorgan.info\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([], [\n\t\t// Whitespace\n\t\t[PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/],\n\n\t\t// Single line comments\n\t\t[PR['PR_COMMENT'], /^\\/\\/.*/],\n\t\t// Block comments (sadly I do not see how to make this cope with comment nesting as it should)\n\t\t[PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/],//, null],\n\t\t// String and character literals\n\t\t[PR['PR_STRING'], /^b\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}))*?\"/],  // Bytes literal\n\t\t[PR['PR_STRING'], /^\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}|u\\{\\[\\da-fA-F]{1,6}\\}))*?\"/],  // String literal\n\t\t[PR['PR_STRING'], /^b?r(#*)\\\"[\\s\\S]*?\\\"\\1/],  // Raw string/bytes literal\n\t\t[PR['PR_STRING'], /^b'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}))'/],  // Byte literal\n\t\t[PR['PR_STRING'], /^'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{1,6}\\}))'/],  // Character literal\n\n\t\t// Lifetime\n\t\t[PR['PR_TAG'], /^'\\w+?\\b/],\n\n\t\t// Keywords, reserved keywords and primitive types\n\t\t[PR['PR_KEYWORD'], /^(?:match|if|else|as|break|box|continue|extern|fn|for|in|if|impl|dyn|let|loop|pub|return|super|unsafe|where|while|use|mod|trait|struct|enum|type|move|mut|ref|static|const|crate)\\b/],\n\t\t[PR['PR_KEYWORD'], /^(?:alignof|become|do|offsetof|priv|pure|sizeof|typeof|unsized|yield|async|await|try|abstract|virtual|final|override|macro)\\b/],\n\t\t[PR['PR_TYPE'], /^(?:[iu](8|16|32|64|128|size)|char|bool|f32|f64|str|Self)\\b/],\n\n\t\t// Rust 1.0 prelude items\n\t\t[PR['PR_TYPE'], /^(?:Copy|Send|Sized|Sync|Drop|Fn|FnMut|FnOnce|Box|ToOwned|Clone|PartialEq|PartialOrd|Eq|Ord|AsRef|AsMut|Into|From|Default|Iterator|Extend|IntoIterator|DoubleEndedIterator|ExactSizeIterator|Option|Some|None|Result|Ok|Err|SliceConcatExt|String|ToString|Vec)\\b/],\n\n\t\t// Literals:\n\t\t[PR['PR_LITERAL'], /^(self|true|false|null)\\b/],\n\t\t// A number is a hex integer literal, a decimal real literal, or in\n\t\t// scientific notation.\n\t\t// Integer literals: decimal, hexadecimal, octal, binary.\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0x[a-fA-F0-9_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0o[0-7_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0b[01_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t// Float literals\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*\\.(?![^\\s\\d.])/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)(?:[eE][+-]?[0-9_]+)?(?:f32|f64)?/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)(?:f32|f64)?/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)?(?:f32|f64)/],\n\n\t\t// Macro invocations (an identifier plus a !)\n\t\t[PR['PR_ATTRIB_NAME'], /^[a-z_]\\w*!/i],\n\t\t// An identifier (sorry, this should be unicode)\n\t\t[PR['PR_PLAIN'], /^[a-z_]\\w*/i],\n\t\t// Attributes\n\t\t[PR['PR_ATTRIB_VALUE'], /^#!?\\[[\\s\\S]*?\\]/],\n\t\t// All the punctuation\n\t\t[PR['PR_PUNCTUATION'], /^[+\\-/*=^&|!<>%[\\](){}?:.,;]/],\n\t\t// Anything else (which is probably illegal, as all the legal stuff should have been covered) can be plain\n\t\t[PR['PR_PLAIN'], /./]\n\t\t]),\n    ['rust']);\n","date":"2019-04-30T08:09:45.660Z","updated":"2019-04-30T08:09:45.660Z","path":"plugins/prettify/lang-rust.js","layout":"false","title":"","comments":1,"_id":"cjxh80em0001p6c9v49y3s3aw","content":"/**\n * @license\n * Copyright (C) 2015 Chris Morgan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Rust.\n *\n * Derived from prior experience implementing similar things in a few environments,\n * most especially rust.vim.\n *\n * @author me@chrismorgan.info\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([], [\n\t\t// Whitespace\n\t\t[PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/],\n\n\t\t// Single line comments\n\t\t[PR['PR_COMMENT'], /^\\/\\/.*/],\n\t\t// Block comments (sadly I do not see how to make this cope with comment nesting as it should)\n\t\t[PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/],//, null],\n\t\t// String and character literals\n\t\t[PR['PR_STRING'], /^b\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}))*?\"/],  // Bytes literal\n\t\t[PR['PR_STRING'], /^\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}|u\\{\\[\\da-fA-F]{1,6}\\}))*?\"/],  // String literal\n\t\t[PR['PR_STRING'], /^b?r(#*)\\\"[\\s\\S]*?\\\"\\1/],  // Raw string/bytes literal\n\t\t[PR['PR_STRING'], /^b'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}))'/],  // Byte literal\n\t\t[PR['PR_STRING'], /^'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{1,6}\\}))'/],  // Character literal\n\n\t\t// Lifetime\n\t\t[PR['PR_TAG'], /^'\\w+?\\b/],\n\n\t\t// Keywords, reserved keywords and primitive types\n\t\t[PR['PR_KEYWORD'], /^(?:match|if|else|as|break|box|continue|extern|fn|for|in|if|impl|dyn|let|loop|pub|return|super|unsafe|where|while|use|mod|trait|struct|enum|type|move|mut|ref|static|const|crate)\\b/],\n\t\t[PR['PR_KEYWORD'], /^(?:alignof|become|do|offsetof|priv|pure|sizeof|typeof|unsized|yield|async|await|try|abstract|virtual|final|override|macro)\\b/],\n\t\t[PR['PR_TYPE'], /^(?:[iu](8|16|32|64|128|size)|char|bool|f32|f64|str|Self)\\b/],\n\n\t\t// Rust 1.0 prelude items\n\t\t[PR['PR_TYPE'], /^(?:Copy|Send|Sized|Sync|Drop|Fn|FnMut|FnOnce|Box|ToOwned|Clone|PartialEq|PartialOrd|Eq|Ord|AsRef|AsMut|Into|From|Default|Iterator|Extend|IntoIterator|DoubleEndedIterator|ExactSizeIterator|Option|Some|None|Result|Ok|Err|SliceConcatExt|String|ToString|Vec)\\b/],\n\n\t\t// Literals:\n\t\t[PR['PR_LITERAL'], /^(self|true|false|null)\\b/],\n\t\t// A number is a hex integer literal, a decimal real literal, or in\n\t\t// scientific notation.\n\t\t// Integer literals: decimal, hexadecimal, octal, binary.\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0x[a-fA-F0-9_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0o[0-7_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0b[01_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t// Float literals\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*\\.(?![^\\s\\d.])/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)(?:[eE][+-]?[0-9_]+)?(?:f32|f64)?/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)(?:f32|f64)?/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)?(?:f32|f64)/],\n\n\t\t// Macro invocations (an identifier plus a !)\n\t\t[PR['PR_ATTRIB_NAME'], /^[a-z_]\\w*!/i],\n\t\t// An identifier (sorry, this should be unicode)\n\t\t[PR['PR_PLAIN'], /^[a-z_]\\w*/i],\n\t\t// Attributes\n\t\t[PR['PR_ATTRIB_VALUE'], /^#!?\\[[\\s\\S]*?\\]/],\n\t\t// All the punctuation\n\t\t[PR['PR_PUNCTUATION'], /^[+\\-/*=^&|!<>%[\\](){}?:.,;]/],\n\t\t// Anything else (which is probably illegal, as all the legal stuff should have been covered) can be plain\n\t\t[PR['PR_PLAIN'], /./]\n\t\t]),\n    ['rust']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2015 Chris Morgan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Rust.\n *\n * Derived from prior experience implementing similar things in a few environments,\n * most especially rust.vim.\n *\n * @author me@chrismorgan.info\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([], [\n\t\t// Whitespace\n\t\t[PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/],\n\n\t\t// Single line comments\n\t\t[PR['PR_COMMENT'], /^\\/\\/.*/],\n\t\t// Block comments (sadly I do not see how to make this cope with comment nesting as it should)\n\t\t[PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/],//, null],\n\t\t// String and character literals\n\t\t[PR['PR_STRING'], /^b\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}))*?\"/],  // Bytes literal\n\t\t[PR['PR_STRING'], /^\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}|u\\{\\[\\da-fA-F]{1,6}\\}))*?\"/],  // String literal\n\t\t[PR['PR_STRING'], /^b?r(#*)\\\"[\\s\\S]*?\\\"\\1/],  // Raw string/bytes literal\n\t\t[PR['PR_STRING'], /^b'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}))'/],  // Byte literal\n\t\t[PR['PR_STRING'], /^'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{1,6}\\}))'/],  // Character literal\n\n\t\t// Lifetime\n\t\t[PR['PR_TAG'], /^'\\w+?\\b/],\n\n\t\t// Keywords, reserved keywords and primitive types\n\t\t[PR['PR_KEYWORD'], /^(?:match|if|else|as|break|box|continue|extern|fn|for|in|if|impl|dyn|let|loop|pub|return|super|unsafe|where|while|use|mod|trait|struct|enum|type|move|mut|ref|static|const|crate)\\b/],\n\t\t[PR['PR_KEYWORD'], /^(?:alignof|become|do|offsetof|priv|pure|sizeof|typeof|unsized|yield|async|await|try|abstract|virtual|final|override|macro)\\b/],\n\t\t[PR['PR_TYPE'], /^(?:[iu](8|16|32|64|128|size)|char|bool|f32|f64|str|Self)\\b/],\n\n\t\t// Rust 1.0 prelude items\n\t\t[PR['PR_TYPE'], /^(?:Copy|Send|Sized|Sync|Drop|Fn|FnMut|FnOnce|Box|ToOwned|Clone|PartialEq|PartialOrd|Eq|Ord|AsRef|AsMut|Into|From|Default|Iterator|Extend|IntoIterator|DoubleEndedIterator|ExactSizeIterator|Option|Some|None|Result|Ok|Err|SliceConcatExt|String|ToString|Vec)\\b/],\n\n\t\t// Literals:\n\t\t[PR['PR_LITERAL'], /^(self|true|false|null)\\b/],\n\t\t// A number is a hex integer literal, a decimal real literal, or in\n\t\t// scientific notation.\n\t\t// Integer literals: decimal, hexadecimal, octal, binary.\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0x[a-fA-F0-9_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0o[0-7_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0b[01_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t// Float literals\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*\\.(?![^\\s\\d.])/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)(?:[eE][+-]?[0-9_]+)?(?:f32|f64)?/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)(?:f32|f64)?/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)?(?:f32|f64)/],\n\n\t\t// Macro invocations (an identifier plus a !)\n\t\t[PR['PR_ATTRIB_NAME'], /^[a-z_]\\w*!/i],\n\t\t// An identifier (sorry, this should be unicode)\n\t\t[PR['PR_PLAIN'], /^[a-z_]\\w*/i],\n\t\t// Attributes\n\t\t[PR['PR_ATTRIB_VALUE'], /^#!?\\[[\\s\\S]*?\\]/],\n\t\t// All the punctuation\n\t\t[PR['PR_PUNCTUATION'], /^[+\\-/*=^&|!<>%[\\](){}?:.,;]/],\n\t\t// Anything else (which is probably illegal, as all the legal stuff should have been covered) can be plain\n\t\t[PR['PR_PLAIN'], /./]\n\t\t]),\n    ['rust']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for SQL.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-sql\">(my SQL code)</pre>\n *\n *\n * http://savage.net.au/SQL/sql-99.bnf.html is the basis for the grammar, and\n * http://msdn.microsoft.com/en-us/library/aa238507(SQL.80).aspx and\n * http://meta.stackoverflow.com/q/92352/137403 as the bases for the keyword\n * list.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\"(?:[^\\\"\\\\]|\\\\.)*\"|'(?:[^\\'\\\\]|\\\\.)*')/, null,\n          '\"\\'']\n        ],\n        [\n         // A comment is either a line comment that starts with two dashes, or\n         // two dashes preceding a long bracketed block.\n         [PR['PR_COMMENT'], /^(?:--[^\\r\\n]*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))/],\n         [PR['PR_KEYWORD'], /^(?:ADD|ALL|ALTER|AND|ANY|APPLY|AS|ASC|AUTHORIZATION|BACKUP|BEGIN|BETWEEN|BREAK|BROWSE|BULK|BY|CASCADE|CASE|CHECK|CHECKPOINT|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMN|COMMIT|COMPUTE|CONNECT|CONSTRAINT|CONTAINS|CONTAINSTABLE|CONTINUE|CONVERT|CREATE|CROSS|CURRENT|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|DATABASE|DBCC|DEALLOCATE|DECLARE|DEFAULT|DELETE|DENY|DESC|DISK|DISTINCT|DISTRIBUTED|DOUBLE|DROP|DUMMY|DUMP|ELSE|END|ERRLVL|ESCAPE|EXCEPT|EXEC|EXECUTE|EXISTS|EXIT|FETCH|FILE|FILLFACTOR|FOLLOWING|FOR|FOREIGN|FREETEXT|FREETEXTTABLE|FROM|FULL|FUNCTION|GOTO|GRANT|GROUP|HAVING|HOLDLOCK|IDENTITY|IDENTITYCOL|IDENTITY_INSERT|IF|IN|INDEX|INNER|INSERT|INTERSECT|INTO|IS|JOIN|KEY|KILL|LEFT|LIKE|LINENO|LOAD|MATCH|MATCHED|MERGE|NATURAL|NATIONAL|NOCHECK|NONCLUSTERED|NOCYCLE|NOT|NULL|NULLIF|OF|OFF|OFFSETS|ON|OPEN|OPENDATASOURCE|OPENQUERY|OPENROWSET|OPENXML|OPTION|OR|ORDER|OUTER|OVER|PARTITION|PERCENT|PIVOT|PLAN|PRECEDING|PRECISION|PRIMARY|PRINT|PROC|PROCEDURE|PUBLIC|RAISERROR|READ|READTEXT|RECONFIGURE|REFERENCES|REPLICATION|RESTORE|RESTRICT|RETURN|REVOKE|RIGHT|ROLLBACK|ROWCOUNT|ROWGUIDCOL|ROWS?|RULE|SAVE|SCHEMA|SELECT|SESSION_USER|SET|SETUSER|SHUTDOWN|SOME|START|STATISTICS|SYSTEM_USER|TABLE|TEXTSIZE|THEN|TO|TOP|TRAN|TRANSACTION|TRIGGER|TRUNCATE|TSEQUAL|UNBOUNDED|UNION|UNIQUE|UNPIVOT|UPDATE|UPDATETEXT|USE|USER|USING|VALUES|VARYING|VIEW|WAITFOR|WHEN|WHERE|WHILE|WITH|WITHIN|WRITETEXT|XML)(?=[^\\w-]|$)/i, null],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z_][\\w-]*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0+\\-\\\"\\']*/]\n        ]),\n    ['sql']);\n","source":"plugins/prettify/lang-sql.js","raw":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for SQL.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-sql\">(my SQL code)</pre>\n *\n *\n * http://savage.net.au/SQL/sql-99.bnf.html is the basis for the grammar, and\n * http://msdn.microsoft.com/en-us/library/aa238507(SQL.80).aspx and\n * http://meta.stackoverflow.com/q/92352/137403 as the bases for the keyword\n * list.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\"(?:[^\\\"\\\\]|\\\\.)*\"|'(?:[^\\'\\\\]|\\\\.)*')/, null,\n          '\"\\'']\n        ],\n        [\n         // A comment is either a line comment that starts with two dashes, or\n         // two dashes preceding a long bracketed block.\n         [PR['PR_COMMENT'], /^(?:--[^\\r\\n]*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))/],\n         [PR['PR_KEYWORD'], /^(?:ADD|ALL|ALTER|AND|ANY|APPLY|AS|ASC|AUTHORIZATION|BACKUP|BEGIN|BETWEEN|BREAK|BROWSE|BULK|BY|CASCADE|CASE|CHECK|CHECKPOINT|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMN|COMMIT|COMPUTE|CONNECT|CONSTRAINT|CONTAINS|CONTAINSTABLE|CONTINUE|CONVERT|CREATE|CROSS|CURRENT|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|DATABASE|DBCC|DEALLOCATE|DECLARE|DEFAULT|DELETE|DENY|DESC|DISK|DISTINCT|DISTRIBUTED|DOUBLE|DROP|DUMMY|DUMP|ELSE|END|ERRLVL|ESCAPE|EXCEPT|EXEC|EXECUTE|EXISTS|EXIT|FETCH|FILE|FILLFACTOR|FOLLOWING|FOR|FOREIGN|FREETEXT|FREETEXTTABLE|FROM|FULL|FUNCTION|GOTO|GRANT|GROUP|HAVING|HOLDLOCK|IDENTITY|IDENTITYCOL|IDENTITY_INSERT|IF|IN|INDEX|INNER|INSERT|INTERSECT|INTO|IS|JOIN|KEY|KILL|LEFT|LIKE|LINENO|LOAD|MATCH|MATCHED|MERGE|NATURAL|NATIONAL|NOCHECK|NONCLUSTERED|NOCYCLE|NOT|NULL|NULLIF|OF|OFF|OFFSETS|ON|OPEN|OPENDATASOURCE|OPENQUERY|OPENROWSET|OPENXML|OPTION|OR|ORDER|OUTER|OVER|PARTITION|PERCENT|PIVOT|PLAN|PRECEDING|PRECISION|PRIMARY|PRINT|PROC|PROCEDURE|PUBLIC|RAISERROR|READ|READTEXT|RECONFIGURE|REFERENCES|REPLICATION|RESTORE|RESTRICT|RETURN|REVOKE|RIGHT|ROLLBACK|ROWCOUNT|ROWGUIDCOL|ROWS?|RULE|SAVE|SCHEMA|SELECT|SESSION_USER|SET|SETUSER|SHUTDOWN|SOME|START|STATISTICS|SYSTEM_USER|TABLE|TEXTSIZE|THEN|TO|TOP|TRAN|TRANSACTION|TRIGGER|TRUNCATE|TSEQUAL|UNBOUNDED|UNION|UNIQUE|UNPIVOT|UPDATE|UPDATETEXT|USE|USER|USING|VALUES|VARYING|VIEW|WAITFOR|WHEN|WHERE|WHILE|WITH|WITHIN|WRITETEXT|XML)(?=[^\\w-]|$)/i, null],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z_][\\w-]*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0+\\-\\\"\\']*/]\n        ]),\n    ['sql']);\n","date":"2019-04-30T08:09:45.647Z","updated":"2019-04-30T08:09:45.647Z","path":"plugins/prettify/lang-sql.js","layout":"false","title":"","comments":1,"_id":"cjxh80em1001q6c9vyef94ts1","content":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for SQL.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-sql\">(my SQL code)</pre>\n *\n *\n * http://savage.net.au/SQL/sql-99.bnf.html is the basis for the grammar, and\n * http://msdn.microsoft.com/en-us/library/aa238507(SQL.80).aspx and\n * http://meta.stackoverflow.com/q/92352/137403 as the bases for the keyword\n * list.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\"(?:[^\\\"\\\\]|\\\\.)*\"|'(?:[^\\'\\\\]|\\\\.)*')/, null,\n          '\"\\'']\n        ],\n        [\n         // A comment is either a line comment that starts with two dashes, or\n         // two dashes preceding a long bracketed block.\n         [PR['PR_COMMENT'], /^(?:--[^\\r\\n]*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))/],\n         [PR['PR_KEYWORD'], /^(?:ADD|ALL|ALTER|AND|ANY|APPLY|AS|ASC|AUTHORIZATION|BACKUP|BEGIN|BETWEEN|BREAK|BROWSE|BULK|BY|CASCADE|CASE|CHECK|CHECKPOINT|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMN|COMMIT|COMPUTE|CONNECT|CONSTRAINT|CONTAINS|CONTAINSTABLE|CONTINUE|CONVERT|CREATE|CROSS|CURRENT|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|DATABASE|DBCC|DEALLOCATE|DECLARE|DEFAULT|DELETE|DENY|DESC|DISK|DISTINCT|DISTRIBUTED|DOUBLE|DROP|DUMMY|DUMP|ELSE|END|ERRLVL|ESCAPE|EXCEPT|EXEC|EXECUTE|EXISTS|EXIT|FETCH|FILE|FILLFACTOR|FOLLOWING|FOR|FOREIGN|FREETEXT|FREETEXTTABLE|FROM|FULL|FUNCTION|GOTO|GRANT|GROUP|HAVING|HOLDLOCK|IDENTITY|IDENTITYCOL|IDENTITY_INSERT|IF|IN|INDEX|INNER|INSERT|INTERSECT|INTO|IS|JOIN|KEY|KILL|LEFT|LIKE|LINENO|LOAD|MATCH|MATCHED|MERGE|NATURAL|NATIONAL|NOCHECK|NONCLUSTERED|NOCYCLE|NOT|NULL|NULLIF|OF|OFF|OFFSETS|ON|OPEN|OPENDATASOURCE|OPENQUERY|OPENROWSET|OPENXML|OPTION|OR|ORDER|OUTER|OVER|PARTITION|PERCENT|PIVOT|PLAN|PRECEDING|PRECISION|PRIMARY|PRINT|PROC|PROCEDURE|PUBLIC|RAISERROR|READ|READTEXT|RECONFIGURE|REFERENCES|REPLICATION|RESTORE|RESTRICT|RETURN|REVOKE|RIGHT|ROLLBACK|ROWCOUNT|ROWGUIDCOL|ROWS?|RULE|SAVE|SCHEMA|SELECT|SESSION_USER|SET|SETUSER|SHUTDOWN|SOME|START|STATISTICS|SYSTEM_USER|TABLE|TEXTSIZE|THEN|TO|TOP|TRAN|TRANSACTION|TRIGGER|TRUNCATE|TSEQUAL|UNBOUNDED|UNION|UNIQUE|UNPIVOT|UPDATE|UPDATETEXT|USE|USER|USING|VALUES|VARYING|VIEW|WAITFOR|WHEN|WHERE|WHILE|WITH|WITHIN|WRITETEXT|XML)(?=[^\\w-]|$)/i, null],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z_][\\w-]*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0+\\-\\\"\\']*/]\n        ]),\n    ['sql']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for SQL.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-sql\">(my SQL code)</pre>\n *\n *\n * http://savage.net.au/SQL/sql-99.bnf.html is the basis for the grammar, and\n * http://msdn.microsoft.com/en-us/library/aa238507(SQL.80).aspx and\n * http://meta.stackoverflow.com/q/92352/137403 as the bases for the keyword\n * list.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\"(?:[^\\\"\\\\]|\\\\.)*\"|'(?:[^\\'\\\\]|\\\\.)*')/, null,\n          '\"\\'']\n        ],\n        [\n         // A comment is either a line comment that starts with two dashes, or\n         // two dashes preceding a long bracketed block.\n         [PR['PR_COMMENT'], /^(?:--[^\\r\\n]*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))/],\n         [PR['PR_KEYWORD'], /^(?:ADD|ALL|ALTER|AND|ANY|APPLY|AS|ASC|AUTHORIZATION|BACKUP|BEGIN|BETWEEN|BREAK|BROWSE|BULK|BY|CASCADE|CASE|CHECK|CHECKPOINT|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMN|COMMIT|COMPUTE|CONNECT|CONSTRAINT|CONTAINS|CONTAINSTABLE|CONTINUE|CONVERT|CREATE|CROSS|CURRENT|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|DATABASE|DBCC|DEALLOCATE|DECLARE|DEFAULT|DELETE|DENY|DESC|DISK|DISTINCT|DISTRIBUTED|DOUBLE|DROP|DUMMY|DUMP|ELSE|END|ERRLVL|ESCAPE|EXCEPT|EXEC|EXECUTE|EXISTS|EXIT|FETCH|FILE|FILLFACTOR|FOLLOWING|FOR|FOREIGN|FREETEXT|FREETEXTTABLE|FROM|FULL|FUNCTION|GOTO|GRANT|GROUP|HAVING|HOLDLOCK|IDENTITY|IDENTITYCOL|IDENTITY_INSERT|IF|IN|INDEX|INNER|INSERT|INTERSECT|INTO|IS|JOIN|KEY|KILL|LEFT|LIKE|LINENO|LOAD|MATCH|MATCHED|MERGE|NATURAL|NATIONAL|NOCHECK|NONCLUSTERED|NOCYCLE|NOT|NULL|NULLIF|OF|OFF|OFFSETS|ON|OPEN|OPENDATASOURCE|OPENQUERY|OPENROWSET|OPENXML|OPTION|OR|ORDER|OUTER|OVER|PARTITION|PERCENT|PIVOT|PLAN|PRECEDING|PRECISION|PRIMARY|PRINT|PROC|PROCEDURE|PUBLIC|RAISERROR|READ|READTEXT|RECONFIGURE|REFERENCES|REPLICATION|RESTORE|RESTRICT|RETURN|REVOKE|RIGHT|ROLLBACK|ROWCOUNT|ROWGUIDCOL|ROWS?|RULE|SAVE|SCHEMA|SELECT|SESSION_USER|SET|SETUSER|SHUTDOWN|SOME|START|STATISTICS|SYSTEM_USER|TABLE|TEXTSIZE|THEN|TO|TOP|TRAN|TRANSACTION|TRIGGER|TRUNCATE|TSEQUAL|UNBOUNDED|UNION|UNIQUE|UNPIVOT|UPDATE|UPDATETEXT|USE|USER|USING|VALUES|VARYING|VIEW|WAITFOR|WHEN|WHERE|WHILE|WITH|WITHIN|WRITETEXT|XML)(?=[^\\w-]|$)/i, null],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z_][\\w-]*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0+\\-\\\"\\']*/]\n        ]),\n    ['sql']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Swift\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-swift\">(my swift code)</pre>\n * This file supports the following language extensions:\n *     lang-swift - Swift\n *\n * I used https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AboutTheLanguageReference.html\n * as the source of truth for this. The revision from 2015-10-21 (Swift 2.1) was used in most recent update.\n *\n * @author cerech@google.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          //whitespace\n          [PR['PR_PLAIN'],                /^[ \\n\\r\\t\\v\\f\\0]+/, null, ' \\n\\r\\t\\v\\f\\0'],\n          //string literals\n          [PR['PR_STRING'],               /^\"(?:[^\"\\\\]|(?:\\\\.)|(?:\\\\\\((?:[^\"\\\\)]|\\\\.)*\\)))*\"/, null, '\"']\n        ],\n        [\n          //floating point literals\n          [PR['PR_LITERAL'],              /^(?:(?:0x[\\da-fA-F][\\da-fA-F_]*\\.[\\da-fA-F][\\da-fA-F_]*[pP]?)|(?:\\d[\\d_]*\\.\\d[\\d_]*[eE]?))[+-]?\\d[\\d_]*/, null],\n          //integer literals\n          [PR['PR_LITERAL'],              /^-?(?:(?:0(?:(?:b[01][01_]*)|(?:o[0-7][0-7_]*)|(?:x[\\da-fA-F][\\da-fA-F_]*)))|(?:\\d[\\d_]*))/, null],\n          //some other literals\n          [PR['PR_LITERAL'],              /^(?:_|Any|true|false|nil)\\b/, null],\n          //keywords\n          [PR['PR_KEYWORD'],              /^\\b(?:__COLUMN__|__FILE__|__FUNCTION__|__LINE__|#available|#colorLiteral|#column|#else|#elseif|#endif|#file|#fileLiteral|#function|#if|#imageLiteral|#line|#selector|#sourceLocation|arch|arm|arm64|associatedtype|associativity|as|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|dynamicType|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|import|indirect|infix|init|inout|internal|i386|if|in|iOS|iOSApplicationExtension|is|lazy|left|let|mutating|none|nonmutating|open|operator|optional|OSX|OSXApplicationExtension|override|postfix|precedence|prefix|private|protocol|Protocol|public|repeat|required|rethrows|return|right|safe|Self|self|set|static|struct|subscript|super|switch|throw|throws|try|Type|typealias|unowned|unsafe|var|weak|watchOS|where|while|willSet|x86_64)\\b/, null],\n          //double slash comments\n          [PR['PR_COMMENT'],              /^\\/\\/.*?[\\n\\r]/, null],\n          //slash star comments\n          [PR['PR_COMMENT'],              /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null],\n          //punctuation\n          [PR['PR_PUNCTUATION'],          /^<<=|<=|<<|>>=|>=|>>|===|==|\\.\\.\\.|&&=|\\.\\.<|!==|!=|&=|~=|~|\\(|\\)|\\[|\\]|{|}|@|#|;|\\.|,|:|\\|\\|=|\\?\\?|\\|\\||&&|&\\*|&\\+|&-|&=|\\+=|-=|\\/=|\\*=|\\^=|%=|\\|=|->|`|==|\\+\\+|--|\\/|\\+|!|\\*|%|<|>|&|\\||\\^|\\?|=|-|_/, null],\n          [PR['PR_TYPE'],                 /^\\b(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null]   //borrowing the type regex given by the main program for C-family languages\n        ]),\n    ['swift']); \n","source":"plugins/prettify/lang-swift.js","raw":"/**\n * @license\n * Copyright (C) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Swift\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-swift\">(my swift code)</pre>\n * This file supports the following language extensions:\n *     lang-swift - Swift\n *\n * I used https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AboutTheLanguageReference.html\n * as the source of truth for this. The revision from 2015-10-21 (Swift 2.1) was used in most recent update.\n *\n * @author cerech@google.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          //whitespace\n          [PR['PR_PLAIN'],                /^[ \\n\\r\\t\\v\\f\\0]+/, null, ' \\n\\r\\t\\v\\f\\0'],\n          //string literals\n          [PR['PR_STRING'],               /^\"(?:[^\"\\\\]|(?:\\\\.)|(?:\\\\\\((?:[^\"\\\\)]|\\\\.)*\\)))*\"/, null, '\"']\n        ],\n        [\n          //floating point literals\n          [PR['PR_LITERAL'],              /^(?:(?:0x[\\da-fA-F][\\da-fA-F_]*\\.[\\da-fA-F][\\da-fA-F_]*[pP]?)|(?:\\d[\\d_]*\\.\\d[\\d_]*[eE]?))[+-]?\\d[\\d_]*/, null],\n          //integer literals\n          [PR['PR_LITERAL'],              /^-?(?:(?:0(?:(?:b[01][01_]*)|(?:o[0-7][0-7_]*)|(?:x[\\da-fA-F][\\da-fA-F_]*)))|(?:\\d[\\d_]*))/, null],\n          //some other literals\n          [PR['PR_LITERAL'],              /^(?:_|Any|true|false|nil)\\b/, null],\n          //keywords\n          [PR['PR_KEYWORD'],              /^\\b(?:__COLUMN__|__FILE__|__FUNCTION__|__LINE__|#available|#colorLiteral|#column|#else|#elseif|#endif|#file|#fileLiteral|#function|#if|#imageLiteral|#line|#selector|#sourceLocation|arch|arm|arm64|associatedtype|associativity|as|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|dynamicType|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|import|indirect|infix|init|inout|internal|i386|if|in|iOS|iOSApplicationExtension|is|lazy|left|let|mutating|none|nonmutating|open|operator|optional|OSX|OSXApplicationExtension|override|postfix|precedence|prefix|private|protocol|Protocol|public|repeat|required|rethrows|return|right|safe|Self|self|set|static|struct|subscript|super|switch|throw|throws|try|Type|typealias|unowned|unsafe|var|weak|watchOS|where|while|willSet|x86_64)\\b/, null],\n          //double slash comments\n          [PR['PR_COMMENT'],              /^\\/\\/.*?[\\n\\r]/, null],\n          //slash star comments\n          [PR['PR_COMMENT'],              /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null],\n          //punctuation\n          [PR['PR_PUNCTUATION'],          /^<<=|<=|<<|>>=|>=|>>|===|==|\\.\\.\\.|&&=|\\.\\.<|!==|!=|&=|~=|~|\\(|\\)|\\[|\\]|{|}|@|#|;|\\.|,|:|\\|\\|=|\\?\\?|\\|\\||&&|&\\*|&\\+|&-|&=|\\+=|-=|\\/=|\\*=|\\^=|%=|\\|=|->|`|==|\\+\\+|--|\\/|\\+|!|\\*|%|<|>|&|\\||\\^|\\?|=|-|_/, null],\n          [PR['PR_TYPE'],                 /^\\b(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null]   //borrowing the type regex given by the main program for C-family languages\n        ]),\n    ['swift']); \n","date":"2019-04-30T08:09:45.644Z","updated":"2019-04-30T08:09:45.644Z","path":"plugins/prettify/lang-swift.js","layout":"false","title":"","comments":1,"_id":"cjxh80em1001r6c9vk36nti9c","content":"/**\n * @license\n * Copyright (C) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Swift\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-swift\">(my swift code)</pre>\n * This file supports the following language extensions:\n *     lang-swift - Swift\n *\n * I used https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AboutTheLanguageReference.html\n * as the source of truth for this. The revision from 2015-10-21 (Swift 2.1) was used in most recent update.\n *\n * @author cerech@google.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          //whitespace\n          [PR['PR_PLAIN'],                /^[ \\n\\r\\t\\v\\f\\0]+/, null, ' \\n\\r\\t\\v\\f\\0'],\n          //string literals\n          [PR['PR_STRING'],               /^\"(?:[^\"\\\\]|(?:\\\\.)|(?:\\\\\\((?:[^\"\\\\)]|\\\\.)*\\)))*\"/, null, '\"']\n        ],\n        [\n          //floating point literals\n          [PR['PR_LITERAL'],              /^(?:(?:0x[\\da-fA-F][\\da-fA-F_]*\\.[\\da-fA-F][\\da-fA-F_]*[pP]?)|(?:\\d[\\d_]*\\.\\d[\\d_]*[eE]?))[+-]?\\d[\\d_]*/, null],\n          //integer literals\n          [PR['PR_LITERAL'],              /^-?(?:(?:0(?:(?:b[01][01_]*)|(?:o[0-7][0-7_]*)|(?:x[\\da-fA-F][\\da-fA-F_]*)))|(?:\\d[\\d_]*))/, null],\n          //some other literals\n          [PR['PR_LITERAL'],              /^(?:_|Any|true|false|nil)\\b/, null],\n          //keywords\n          [PR['PR_KEYWORD'],              /^\\b(?:__COLUMN__|__FILE__|__FUNCTION__|__LINE__|#available|#colorLiteral|#column|#else|#elseif|#endif|#file|#fileLiteral|#function|#if|#imageLiteral|#line|#selector|#sourceLocation|arch|arm|arm64|associatedtype|associativity|as|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|dynamicType|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|import|indirect|infix|init|inout|internal|i386|if|in|iOS|iOSApplicationExtension|is|lazy|left|let|mutating|none|nonmutating|open|operator|optional|OSX|OSXApplicationExtension|override|postfix|precedence|prefix|private|protocol|Protocol|public|repeat|required|rethrows|return|right|safe|Self|self|set|static|struct|subscript|super|switch|throw|throws|try|Type|typealias|unowned|unsafe|var|weak|watchOS|where|while|willSet|x86_64)\\b/, null],\n          //double slash comments\n          [PR['PR_COMMENT'],              /^\\/\\/.*?[\\n\\r]/, null],\n          //slash star comments\n          [PR['PR_COMMENT'],              /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null],\n          //punctuation\n          [PR['PR_PUNCTUATION'],          /^<<=|<=|<<|>>=|>=|>>|===|==|\\.\\.\\.|&&=|\\.\\.<|!==|!=|&=|~=|~|\\(|\\)|\\[|\\]|{|}|@|#|;|\\.|,|:|\\|\\|=|\\?\\?|\\|\\||&&|&\\*|&\\+|&-|&=|\\+=|-=|\\ =|\\*=\"|\\^=|%=|\\|=|-\">|`|==|\\+\\+|--|\\/|\\+|!|\\*|%|<|>|&|\\||\\^|\\?|=|-|_/, null],\n          [PR['PR_TYPE'],                 /^\\b(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null]   //borrowing the type regex given by the main program for C-family languages\n        ]),\n    ['swift']); \n</|></|!==|!=|&=|~=|~|\\(|\\)|\\[|\\]|{|}|@|#|;|\\.|,|:|\\|\\|=|\\?\\?|\\|\\||&&|&\\*|&\\+|&-|&=|\\+=|-=|\\></=|<=|<<|>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Swift\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-swift\">(my swift code)</pre>\n * This file supports the following language extensions:\n *     lang-swift - Swift\n *\n * I used https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AboutTheLanguageReference.html\n * as the source of truth for this. The revision from 2015-10-21 (Swift 2.1) was used in most recent update.\n *\n * @author cerech@google.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          //whitespace\n          [PR['PR_PLAIN'],                /^[ \\n\\r\\t\\v\\f\\0]+/, null, ' \\n\\r\\t\\v\\f\\0'],\n          //string literals\n          [PR['PR_STRING'],               /^\"(?:[^\"\\\\]|(?:\\\\.)|(?:\\\\\\((?:[^\"\\\\)]|\\\\.)*\\)))*\"/, null, '\"']\n        ],\n        [\n          //floating point literals\n          [PR['PR_LITERAL'],              /^(?:(?:0x[\\da-fA-F][\\da-fA-F_]*\\.[\\da-fA-F][\\da-fA-F_]*[pP]?)|(?:\\d[\\d_]*\\.\\d[\\d_]*[eE]?))[+-]?\\d[\\d_]*/, null],\n          //integer literals\n          [PR['PR_LITERAL'],              /^-?(?:(?:0(?:(?:b[01][01_]*)|(?:o[0-7][0-7_]*)|(?:x[\\da-fA-F][\\da-fA-F_]*)))|(?:\\d[\\d_]*))/, null],\n          //some other literals\n          [PR['PR_LITERAL'],              /^(?:_|Any|true|false|nil)\\b/, null],\n          //keywords\n          [PR['PR_KEYWORD'],              /^\\b(?:__COLUMN__|__FILE__|__FUNCTION__|__LINE__|#available|#colorLiteral|#column|#else|#elseif|#endif|#file|#fileLiteral|#function|#if|#imageLiteral|#line|#selector|#sourceLocation|arch|arm|arm64|associatedtype|associativity|as|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|dynamicType|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|import|indirect|infix|init|inout|internal|i386|if|in|iOS|iOSApplicationExtension|is|lazy|left|let|mutating|none|nonmutating|open|operator|optional|OSX|OSXApplicationExtension|override|postfix|precedence|prefix|private|protocol|Protocol|public|repeat|required|rethrows|return|right|safe|Self|self|set|static|struct|subscript|super|switch|throw|throws|try|Type|typealias|unowned|unsafe|var|weak|watchOS|where|while|willSet|x86_64)\\b/, null],\n          //double slash comments\n          [PR['PR_COMMENT'],              /^\\/\\/.*?[\\n\\r]/, null],\n          //slash star comments\n          [PR['PR_COMMENT'],              /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null],\n          //punctuation\n          [PR['PR_PUNCTUATION'],          /^<<=|<=|<<|>>=|>=|>>|===|==|\\.\\.\\.|&&=|\\.\\.<|!==|!=|&=|~=|~|\\(|\\)|\\[|\\]|{|}|@|#|;|\\.|,|:|\\|\\|=|\\?\\?|\\|\\||&&|&\\*|&\\+|&-|&=|\\+=|-=|\\ =|\\*=\"|\\^=|%=|\\|=|-\">|`|==|\\+\\+|--|\\/|\\+|!|\\*|%|<|>|&|\\||\\^|\\?|=|-|_/, null],\n          [PR['PR_TYPE'],                 /^\\b(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null]   //borrowing the type regex given by the main program for C-family languages\n        ]),\n    ['swift']); \n</|></|!==|!=|&=|~=|~|\\(|\\)|\\[|\\]|{|}|@|#|;|\\.|,|:|\\|\\|=|\\?\\?|\\|\\||&&|&\\*|&\\+|&-|&=|\\+=|-=|\\></=|<=|<<|>"},{"_content":"/**\n * @license\n * Copyright (C) 2012 Pyrios\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for TCL\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-tcl\">proc foo {} {puts bar}</pre>\n *\n * I copy-pasted lang-lisp.js, so this is probably not 100% accurate.\n * I used http://wiki.tcl.tk/1019 for the keywords, but tried to only\n * include as keywords that had more impact on the program flow\n * rather than providing convenience. For example, I included 'if'\n * since that provides branching, but left off 'open' since that is more\n * like a proc. Add more if it makes sense.\n *\n * @author pyrios@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         ['opn',             /^\\{+/, null, '{'],\n         ['clo',             /^\\}+/, null, '}'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^#[^\\r\\n]*/, null, '#'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'],     /^(?:after|append|apply|array|break|case|catch|continue|error|eval|exec|exit|expr|for|foreach|if|incr|info|proc|return|set|switch|trace|uplevel|upvar|while)\\b/, null],\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // A word that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['tcl']);\n","source":"plugins/prettify/lang-tcl.js","raw":"/**\n * @license\n * Copyright (C) 2012 Pyrios\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for TCL\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-tcl\">proc foo {} {puts bar}</pre>\n *\n * I copy-pasted lang-lisp.js, so this is probably not 100% accurate.\n * I used http://wiki.tcl.tk/1019 for the keywords, but tried to only\n * include as keywords that had more impact on the program flow\n * rather than providing convenience. For example, I included 'if'\n * since that provides branching, but left off 'open' since that is more\n * like a proc. Add more if it makes sense.\n *\n * @author pyrios@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         ['opn',             /^\\{+/, null, '{'],\n         ['clo',             /^\\}+/, null, '}'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^#[^\\r\\n]*/, null, '#'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'],     /^(?:after|append|apply|array|break|case|catch|continue|error|eval|exec|exit|expr|for|foreach|if|incr|info|proc|return|set|switch|trace|uplevel|upvar|while)\\b/, null],\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // A word that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['tcl']);\n","date":"2019-04-30T08:09:45.626Z","updated":"2019-04-30T08:09:45.626Z","path":"plugins/prettify/lang-tcl.js","layout":"false","title":"","comments":1,"_id":"cjxh80em2001s6c9vut6x0tu2","content":"/**\n * @license\n * Copyright (C) 2012 Pyrios\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for TCL\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-tcl\">proc foo {} {puts bar}</pre>\n *\n * I copy-pasted lang-lisp.js, so this is probably not 100% accurate.\n * I used http://wiki.tcl.tk/1019 for the keywords, but tried to only\n * include as keywords that had more impact on the program flow\n * rather than providing convenience. For example, I included 'if'\n * since that provides branching, but left off 'open' since that is more\n * like a proc. Add more if it makes sense.\n *\n * @author pyrios@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         ['opn',             /^\\{+/, null, '{'],\n         ['clo',             /^\\}+/, null, '}'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^#[^\\r\\n]*/, null, '#'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'],     /^(?:after|append|apply|array|break|case|catch|continue|error|eval|exec|exit|expr|for|foreach|if|incr|info|proc|return|set|switch|trace|uplevel|upvar|while)\\b/, null],\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // A word that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['tcl']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2012 Pyrios\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for TCL\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-tcl\">proc foo {} {puts bar}</pre>\n *\n * I copy-pasted lang-lisp.js, so this is probably not 100% accurate.\n * I used http://wiki.tcl.tk/1019 for the keywords, but tried to only\n * include as keywords that had more impact on the program flow\n * rather than providing convenience. For example, I included 'if'\n * since that provides branching, but left off 'open' since that is more\n * like a proc. Add more if it makes sense.\n *\n * @author pyrios@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         ['opn',             /^\\{+/, null, '{'],\n         ['clo',             /^\\}+/, null, '}'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^#[^\\r\\n]*/, null, '#'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'],     /^(?:after|append|apply|array|break|case|catch|continue|error|eval|exec|exit|expr|for|foreach|if|incr|info|proc|return|set|switch|trace|uplevel|upvar|while)\\b/, null],\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // A word that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['tcl']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2011 Martin S.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Support for tex highlighting as discussed on\n * <a href=\"http://meta.tex.stackexchange.com/questions/872/text-immediate-following-double-backslashes-is-highlighted-as-macro-inside-a-code/876#876\">meta.tex.stackexchange.com</a>.\n *\n * @author Martin S.\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // whitespace\n         [PR['PR_PLAIN'],   /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // all comments begin with '%'\n         [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%']\n        ],\n        [\n         //[PR['PR_DECLARATION'], /^\\\\([egx]?def|(new|renew|provide)(command|environment))\\b/],\n         // any command starting with a \\ and contains\n         // either only letters (a-z,A-Z), '@' (internal macros)\n         [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/],\n         // or contains only one character\n         [PR['PR_KEYWORD'], /^\\\\./],\n         // Highlight dollar for math mode and ampersam for tabular\n         [PR['PR_TYPE'],    /^[$&]/],\n         // numeric measurement values with attached units\n         [PR['PR_LITERAL'],\n          /[+-]?(?:\\.\\d+|\\d+(?:\\.\\d*)?)(cm|em|ex|in|pc|pt|bp|mm)/i],\n         // punctuation usually occurring within commands\n         [PR['PR_PUNCTUATION'], /^[{}()\\[\\]=]+/]\n        ]),\n    ['latex', 'tex']);\n","source":"plugins/prettify/lang-tex.js","raw":"/**\n * @license\n * Copyright (C) 2011 Martin S.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Support for tex highlighting as discussed on\n * <a href=\"http://meta.tex.stackexchange.com/questions/872/text-immediate-following-double-backslashes-is-highlighted-as-macro-inside-a-code/876#876\">meta.tex.stackexchange.com</a>.\n *\n * @author Martin S.\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // whitespace\n         [PR['PR_PLAIN'],   /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // all comments begin with '%'\n         [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%']\n        ],\n        [\n         //[PR['PR_DECLARATION'], /^\\\\([egx]?def|(new|renew|provide)(command|environment))\\b/],\n         // any command starting with a \\ and contains\n         // either only letters (a-z,A-Z), '@' (internal macros)\n         [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/],\n         // or contains only one character\n         [PR['PR_KEYWORD'], /^\\\\./],\n         // Highlight dollar for math mode and ampersam for tabular\n         [PR['PR_TYPE'],    /^[$&]/],\n         // numeric measurement values with attached units\n         [PR['PR_LITERAL'],\n          /[+-]?(?:\\.\\d+|\\d+(?:\\.\\d*)?)(cm|em|ex|in|pc|pt|bp|mm)/i],\n         // punctuation usually occurring within commands\n         [PR['PR_PUNCTUATION'], /^[{}()\\[\\]=]+/]\n        ]),\n    ['latex', 'tex']);\n","date":"2019-04-30T08:09:45.661Z","updated":"2019-04-30T08:09:45.661Z","path":"plugins/prettify/lang-tex.js","layout":"false","title":"","comments":1,"_id":"cjxh80em2001t6c9vh0gs2nle","content":"/**\n * @license\n * Copyright (C) 2011 Martin S.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Support for tex highlighting as discussed on\n * <a href=\"http://meta.tex.stackexchange.com/questions/872/text-immediate-following-double-backslashes-is-highlighted-as-macro-inside-a-code/876#876\" target=\"_blank\" rel=\"noopener\">meta.tex.stackexchange.com</a>.\n *\n * @author Martin S.\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // whitespace\n         [PR['PR_PLAIN'],   /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // all comments begin with '%'\n         [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%']\n        ],\n        [\n         //[PR['PR_DECLARATION'], /^\\\\([egx]?def|(new|renew|provide)(command|environment))\\b/],\n         // any command starting with a \\ and contains\n         // either only letters (a-z,A-Z), '@' (internal macros)\n         [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/],\n         // or contains only one character\n         [PR['PR_KEYWORD'], /^\\\\./],\n         // Highlight dollar for math mode and ampersam for tabular\n         [PR['PR_TYPE'],    /^[$&]/],\n         // numeric measurement values with attached units\n         [PR['PR_LITERAL'],\n          /[+-]?(?:\\.\\d+|\\d+(?:\\.\\d*)?)(cm|em|ex|in|pc|pt|bp|mm)/i],\n         // punctuation usually occurring within commands\n         [PR['PR_PUNCTUATION'], /^[{}()\\[\\]=]+/]\n        ]),\n    ['latex', 'tex']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2011 Martin S.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Support for tex highlighting as discussed on\n * <a href=\"http://meta.tex.stackexchange.com/questions/872/text-immediate-following-double-backslashes-is-highlighted-as-macro-inside-a-code/876#876\" target=\"_blank\" rel=\"noopener\">meta.tex.stackexchange.com</a>.\n *\n * @author Martin S.\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // whitespace\n         [PR['PR_PLAIN'],   /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // all comments begin with '%'\n         [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%']\n        ],\n        [\n         //[PR['PR_DECLARATION'], /^\\\\([egx]?def|(new|renew|provide)(command|environment))\\b/],\n         // any command starting with a \\ and contains\n         // either only letters (a-z,A-Z), '@' (internal macros)\n         [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/],\n         // or contains only one character\n         [PR['PR_KEYWORD'], /^\\\\./],\n         // Highlight dollar for math mode and ampersam for tabular\n         [PR['PR_TYPE'],    /^[$&]/],\n         // numeric measurement values with attached units\n         [PR['PR_LITERAL'],\n          /[+-]?(?:\\.\\d+|\\d+(?:\\.\\d*)?)(cm|em|ex|in|pc|pt|bp|mm)/i],\n         // punctuation usually occurring within commands\n         [PR['PR_PUNCTUATION'], /^[{}()\\[\\]=]+/]\n        ]),\n    ['latex', 'tex']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for various flavors of basic.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-vb\"></pre>\n *\n *\n * http://msdn.microsoft.com/en-us/library/aa711638(VS.71).aspx defines the\n * visual basic grammar lexical grammar.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0\\u2028\\u2029]+/, null, '\\t\\n\\r \\xA0\\u2028\\u2029'],\n         // A double quoted string with quotes escaped by doubling them.\n         // A single character can be suffixed with C.\n         [PR['PR_STRING'],      /^(?:[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})(?:[\\\"\\u201C\\u201D]c|$)|[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})*(?:[\\\"\\u201C\\u201D]|$))/i, null,\n          '\"\\u201C\\u201D'],\n         // A comment starts with a single quote and runs until the end of the\n         // line.\n         // VB6 apparently allows _ as an escape sequence for newlines though\n         // this is not a documented feature of VB.net.\n         // http://meta.stackoverflow.com/q/121497/137403\n         [PR['PR_COMMENT'],     /^[\\'\\u2018\\u2019](?:_(?:\\r\\n?|[^\\r]?)|[^\\r\\n_\\u2028\\u2029])*/, null, '\\'\\u2018\\u2019']\n        ],\n        [\n         [PR['PR_KEYWORD'], /^(?:AddHandler|AddressOf|Alias|And|AndAlso|Ansi|As|Assembly|Auto|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|CBool|CByte|CChar|CDate|CDbl|CDec|Char|CInt|Class|CLng|CObj|Const|CShort|CSng|CStr|CType|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else|ElseIf|End|EndIf|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get|GetType|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|Let|Lib|Like|Long|Loop|Me|Mod|Module|MustInherit|MustOverride|MyBase|MyClass|Namespace|New|Next|Not|NotInheritable|NotOverridable|Object|On|Option|Optional|Or|OrElse|Overloads|Overridable|Overrides|ParamArray|Preserve|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|Select|Set|Shadows|Shared|Short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TypeOf|Unicode|Until|Variant|Wend|When|While|With|WithEvents|WriteOnly|Xor|EndIf|GoSub|Let|Variant|Wend)\\b/i, null],\n         // A second comment form\n         [PR['PR_COMMENT'], /^REM\\b[^\\r\\n\\u2028\\u2029]*/i],\n         // A boolean, numeric, or date literal.\n         [PR['PR_LITERAL'],\n          /^(?:True\\b|False\\b|Nothing\\b|\\d+(?:E[+\\-]?\\d+[FRD]?|[FRDSIL])?|(?:&H[0-9A-F]+|&O[0-7]+)[SIL]?|\\d*\\.\\d+(?:E[+\\-]?\\d+)?[FRD]?|#\\s+(?:\\d+[\\-\\/]\\d+[\\-\\/]\\d+(?:\\s+\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)?|\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)\\s+#)/i],\n         // An identifier.  Keywords can be turned into identifers\n         // with square brackets, and there may be optional type\n         // characters after a normal identifier in square brackets.\n         [PR['PR_PLAIN'], /^(?:(?:[a-z]|_\\w)\\w*(?:\\[[%&@!#]+\\])?|\\[(?:[a-z]|_\\w)\\w*\\])/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'],\n          /^[^\\w\\t\\n\\r \\\"\\'\\[\\]\\xA0\\u2018\\u2019\\u201C\\u201D\\u2028\\u2029]+/],\n         // Square brackets\n         [PR['PR_PUNCTUATION'], /^(?:\\[|\\])/]\n        ]),\n    ['vb', 'vbs']);\n","source":"plugins/prettify/lang-vb.js","raw":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for various flavors of basic.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-vb\"></pre>\n *\n *\n * http://msdn.microsoft.com/en-us/library/aa711638(VS.71).aspx defines the\n * visual basic grammar lexical grammar.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0\\u2028\\u2029]+/, null, '\\t\\n\\r \\xA0\\u2028\\u2029'],\n         // A double quoted string with quotes escaped by doubling them.\n         // A single character can be suffixed with C.\n         [PR['PR_STRING'],      /^(?:[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})(?:[\\\"\\u201C\\u201D]c|$)|[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})*(?:[\\\"\\u201C\\u201D]|$))/i, null,\n          '\"\\u201C\\u201D'],\n         // A comment starts with a single quote and runs until the end of the\n         // line.\n         // VB6 apparently allows _ as an escape sequence for newlines though\n         // this is not a documented feature of VB.net.\n         // http://meta.stackoverflow.com/q/121497/137403\n         [PR['PR_COMMENT'],     /^[\\'\\u2018\\u2019](?:_(?:\\r\\n?|[^\\r]?)|[^\\r\\n_\\u2028\\u2029])*/, null, '\\'\\u2018\\u2019']\n        ],\n        [\n         [PR['PR_KEYWORD'], /^(?:AddHandler|AddressOf|Alias|And|AndAlso|Ansi|As|Assembly|Auto|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|CBool|CByte|CChar|CDate|CDbl|CDec|Char|CInt|Class|CLng|CObj|Const|CShort|CSng|CStr|CType|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else|ElseIf|End|EndIf|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get|GetType|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|Let|Lib|Like|Long|Loop|Me|Mod|Module|MustInherit|MustOverride|MyBase|MyClass|Namespace|New|Next|Not|NotInheritable|NotOverridable|Object|On|Option|Optional|Or|OrElse|Overloads|Overridable|Overrides|ParamArray|Preserve|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|Select|Set|Shadows|Shared|Short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TypeOf|Unicode|Until|Variant|Wend|When|While|With|WithEvents|WriteOnly|Xor|EndIf|GoSub|Let|Variant|Wend)\\b/i, null],\n         // A second comment form\n         [PR['PR_COMMENT'], /^REM\\b[^\\r\\n\\u2028\\u2029]*/i],\n         // A boolean, numeric, or date literal.\n         [PR['PR_LITERAL'],\n          /^(?:True\\b|False\\b|Nothing\\b|\\d+(?:E[+\\-]?\\d+[FRD]?|[FRDSIL])?|(?:&H[0-9A-F]+|&O[0-7]+)[SIL]?|\\d*\\.\\d+(?:E[+\\-]?\\d+)?[FRD]?|#\\s+(?:\\d+[\\-\\/]\\d+[\\-\\/]\\d+(?:\\s+\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)?|\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)\\s+#)/i],\n         // An identifier.  Keywords can be turned into identifers\n         // with square brackets, and there may be optional type\n         // characters after a normal identifier in square brackets.\n         [PR['PR_PLAIN'], /^(?:(?:[a-z]|_\\w)\\w*(?:\\[[%&@!#]+\\])?|\\[(?:[a-z]|_\\w)\\w*\\])/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'],\n          /^[^\\w\\t\\n\\r \\\"\\'\\[\\]\\xA0\\u2018\\u2019\\u201C\\u201D\\u2028\\u2029]+/],\n         // Square brackets\n         [PR['PR_PUNCTUATION'], /^(?:\\[|\\])/]\n        ]),\n    ['vb', 'vbs']);\n","date":"2019-04-30T08:09:45.660Z","updated":"2019-04-30T08:09:45.660Z","path":"plugins/prettify/lang-vb.js","layout":"false","title":"","comments":1,"_id":"cjxh80em3001u6c9vfirrtp5i","content":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for various flavors of basic.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-vb\"></pre>\n *\n *\n * http://msdn.microsoft.com/en-us/library/aa711638(VS.71).aspx defines the\n * visual basic grammar lexical grammar.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0\\u2028\\u2029]+/, null, '\\t\\n\\r \\xA0\\u2028\\u2029'],\n         // A double quoted string with quotes escaped by doubling them.\n         // A single character can be suffixed with C.\n         [PR['PR_STRING'],      /^(?:[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})(?:[\\\"\\u201C\\u201D]c|$)|[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})*(?:[\\\"\\u201C\\u201D]|$))/i, null,\n          '\"\\u201C\\u201D'],\n         // A comment starts with a single quote and runs until the end of the\n         // line.\n         // VB6 apparently allows _ as an escape sequence for newlines though\n         // this is not a documented feature of VB.net.\n         // http://meta.stackoverflow.com/q/121497/137403\n         [PR['PR_COMMENT'],     /^[\\'\\u2018\\u2019](?:_(?:\\r\\n?|[^\\r]?)|[^\\r\\n_\\u2028\\u2029])*/, null, '\\'\\u2018\\u2019']\n        ],\n        [\n         [PR['PR_KEYWORD'], /^(?:AddHandler|AddressOf|Alias|And|AndAlso|Ansi|As|Assembly|Auto|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|CBool|CByte|CChar|CDate|CDbl|CDec|Char|CInt|Class|CLng|CObj|Const|CShort|CSng|CStr|CType|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else|ElseIf|End|EndIf|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get|GetType|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|Let|Lib|Like|Long|Loop|Me|Mod|Module|MustInherit|MustOverride|MyBase|MyClass|Namespace|New|Next|Not|NotInheritable|NotOverridable|Object|On|Option|Optional|Or|OrElse|Overloads|Overridable|Overrides|ParamArray|Preserve|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|Select|Set|Shadows|Shared|Short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TypeOf|Unicode|Until|Variant|Wend|When|While|With|WithEvents|WriteOnly|Xor|EndIf|GoSub|Let|Variant|Wend)\\b/i, null],\n         // A second comment form\n         [PR['PR_COMMENT'], /^REM\\b[^\\r\\n\\u2028\\u2029]*/i],\n         // A boolean, numeric, or date literal.\n         [PR['PR_LITERAL'],\n          /^(?:True\\b|False\\b|Nothing\\b|\\d+(?:E[+\\-]?\\d+[FRD]?|[FRDSIL])?|(?:&H[0-9A-F]+|&O[0-7]+)[SIL]?|\\d*\\.\\d+(?:E[+\\-]?\\d+)?[FRD]?|#\\s+(?:\\d+[\\-\\/]\\d+[\\-\\/]\\d+(?:\\s+\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)?|\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)\\s+#)/i],\n         // An identifier.  Keywords can be turned into identifers\n         // with square brackets, and there may be optional type\n         // characters after a normal identifier in square brackets.\n         [PR['PR_PLAIN'], /^(?:(?:[a-z]|_\\w)\\w*(?:\\[[%&@!#]+\\])?|\\[(?:[a-z]|_\\w)\\w*\\])/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'],\n          /^[^\\w\\t\\n\\r \\\"\\'\\[\\]\\xA0\\u2018\\u2019\\u201C\\u201D\\u2028\\u2029]+/],\n         // Square brackets\n         [PR['PR_PUNCTUATION'], /^(?:\\[|\\])/]\n        ]),\n    ['vb', 'vbs']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for various flavors of basic.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-vb\"></pre>\n *\n *\n * http://msdn.microsoft.com/en-us/library/aa711638(VS.71).aspx defines the\n * visual basic grammar lexical grammar.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0\\u2028\\u2029]+/, null, '\\t\\n\\r \\xA0\\u2028\\u2029'],\n         // A double quoted string with quotes escaped by doubling them.\n         // A single character can be suffixed with C.\n         [PR['PR_STRING'],      /^(?:[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})(?:[\\\"\\u201C\\u201D]c|$)|[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})*(?:[\\\"\\u201C\\u201D]|$))/i, null,\n          '\"\\u201C\\u201D'],\n         // A comment starts with a single quote and runs until the end of the\n         // line.\n         // VB6 apparently allows _ as an escape sequence for newlines though\n         // this is not a documented feature of VB.net.\n         // http://meta.stackoverflow.com/q/121497/137403\n         [PR['PR_COMMENT'],     /^[\\'\\u2018\\u2019](?:_(?:\\r\\n?|[^\\r]?)|[^\\r\\n_\\u2028\\u2029])*/, null, '\\'\\u2018\\u2019']\n        ],\n        [\n         [PR['PR_KEYWORD'], /^(?:AddHandler|AddressOf|Alias|And|AndAlso|Ansi|As|Assembly|Auto|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|CBool|CByte|CChar|CDate|CDbl|CDec|Char|CInt|Class|CLng|CObj|Const|CShort|CSng|CStr|CType|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else|ElseIf|End|EndIf|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get|GetType|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|Let|Lib|Like|Long|Loop|Me|Mod|Module|MustInherit|MustOverride|MyBase|MyClass|Namespace|New|Next|Not|NotInheritable|NotOverridable|Object|On|Option|Optional|Or|OrElse|Overloads|Overridable|Overrides|ParamArray|Preserve|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|Select|Set|Shadows|Shared|Short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TypeOf|Unicode|Until|Variant|Wend|When|While|With|WithEvents|WriteOnly|Xor|EndIf|GoSub|Let|Variant|Wend)\\b/i, null],\n         // A second comment form\n         [PR['PR_COMMENT'], /^REM\\b[^\\r\\n\\u2028\\u2029]*/i],\n         // A boolean, numeric, or date literal.\n         [PR['PR_LITERAL'],\n          /^(?:True\\b|False\\b|Nothing\\b|\\d+(?:E[+\\-]?\\d+[FRD]?|[FRDSIL])?|(?:&H[0-9A-F]+|&O[0-7]+)[SIL]?|\\d*\\.\\d+(?:E[+\\-]?\\d+)?[FRD]?|#\\s+(?:\\d+[\\-\\/]\\d+[\\-\\/]\\d+(?:\\s+\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)?|\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)\\s+#)/i],\n         // An identifier.  Keywords can be turned into identifers\n         // with square brackets, and there may be optional type\n         // characters after a normal identifier in square brackets.\n         [PR['PR_PLAIN'], /^(?:(?:[a-z]|_\\w)\\w*(?:\\[[%&@!#]+\\])?|\\[(?:[a-z]|_\\w)\\w*\\])/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'],\n          /^[^\\w\\t\\n\\r \\\"\\'\\[\\]\\xA0\\u2018\\u2019\\u201C\\u201D\\u2028\\u2029]+/],\n         // Square brackets\n         [PR['PR_PUNCTUATION'], /^(?:\\[|\\])/]\n        ]),\n    ['vb', 'vbs']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2010 benoit@ryder.fr\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for VHDL '93.\n *\n * Based on the lexical grammar and keywords at\n * http://www.iis.ee.ethz.ch/~zimmi/download/vhdl93_syntax.html\n *\n * @author benoit@ryder.fr\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0']\n        ],\n        [\n         // String, character or bit string\n         [PR['PR_STRING'], /^(?:[BOX]?\"(?:[^\\\"]|\"\")*\"|'.')/i],\n         // Comment, from two dashes until end of line.\n         [PR['PR_COMMENT'], /^--[^\\r\\n]*/],\n         [PR['PR_KEYWORD'], /^(?:abs|access|after|alias|all|and|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|mod|nand|new|next|nor|not|null|of|on|open|or|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|rem|report|return|rol|ror|select|severity|shared|signal|sla|sll|sra|srl|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with|xnor|xor)(?=[^\\w-]|$)/i, null],\n         // Type, predefined or standard\n         [PR['PR_TYPE'], /^(?:bit|bit_vector|character|boolean|integer|real|time|string|severity_level|positive|natural|signed|unsigned|line|text|std_u?logic(?:_vector)?)(?=[^\\w-]|$)/i, null],\n         // Predefined attributes\n         [PR['PR_TYPE'], /^\\'(?:ACTIVE|ASCENDING|BASE|DELAYED|DRIVING|DRIVING_VALUE|EVENT|HIGH|IMAGE|INSTANCE_NAME|LAST_ACTIVE|LAST_EVENT|LAST_VALUE|LEFT|LEFTOF|LENGTH|LOW|PATH_NAME|POS|PRED|QUIET|RANGE|REVERSE_RANGE|RIGHT|RIGHTOF|SIMPLE_NAME|STABLE|SUCC|TRANSACTION|VAL|VALUE)(?=[^\\w-]|$)/i, null],\n         // Number, decimal or based literal\n         [PR['PR_LITERAL'], /^\\d+(?:_\\d+)*(?:#[\\w\\\\.]+#(?:[+\\-]?\\d+(?:_\\d+)*)?|(?:\\.\\d+(?:_\\d+)*)?(?:E[+\\-]?\\d+(?:_\\d+)*)?)/i],\n         // Identifier, basic or extended\n         [PR['PR_PLAIN'], /^(?:[a-z]\\w*|\\\\[^\\\\]*\\\\)/i],\n         // Punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0\\-\\\"\\']*/]\n        ]),\n    ['vhdl', 'vhd']);\n","source":"plugins/prettify/lang-vhdl.js","raw":"/**\n * @license\n * Copyright (C) 2010 benoit@ryder.fr\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for VHDL '93.\n *\n * Based on the lexical grammar and keywords at\n * http://www.iis.ee.ethz.ch/~zimmi/download/vhdl93_syntax.html\n *\n * @author benoit@ryder.fr\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0']\n        ],\n        [\n         // String, character or bit string\n         [PR['PR_STRING'], /^(?:[BOX]?\"(?:[^\\\"]|\"\")*\"|'.')/i],\n         // Comment, from two dashes until end of line.\n         [PR['PR_COMMENT'], /^--[^\\r\\n]*/],\n         [PR['PR_KEYWORD'], /^(?:abs|access|after|alias|all|and|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|mod|nand|new|next|nor|not|null|of|on|open|or|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|rem|report|return|rol|ror|select|severity|shared|signal|sla|sll|sra|srl|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with|xnor|xor)(?=[^\\w-]|$)/i, null],\n         // Type, predefined or standard\n         [PR['PR_TYPE'], /^(?:bit|bit_vector|character|boolean|integer|real|time|string|severity_level|positive|natural|signed|unsigned|line|text|std_u?logic(?:_vector)?)(?=[^\\w-]|$)/i, null],\n         // Predefined attributes\n         [PR['PR_TYPE'], /^\\'(?:ACTIVE|ASCENDING|BASE|DELAYED|DRIVING|DRIVING_VALUE|EVENT|HIGH|IMAGE|INSTANCE_NAME|LAST_ACTIVE|LAST_EVENT|LAST_VALUE|LEFT|LEFTOF|LENGTH|LOW|PATH_NAME|POS|PRED|QUIET|RANGE|REVERSE_RANGE|RIGHT|RIGHTOF|SIMPLE_NAME|STABLE|SUCC|TRANSACTION|VAL|VALUE)(?=[^\\w-]|$)/i, null],\n         // Number, decimal or based literal\n         [PR['PR_LITERAL'], /^\\d+(?:_\\d+)*(?:#[\\w\\\\.]+#(?:[+\\-]?\\d+(?:_\\d+)*)?|(?:\\.\\d+(?:_\\d+)*)?(?:E[+\\-]?\\d+(?:_\\d+)*)?)/i],\n         // Identifier, basic or extended\n         [PR['PR_PLAIN'], /^(?:[a-z]\\w*|\\\\[^\\\\]*\\\\)/i],\n         // Punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0\\-\\\"\\']*/]\n        ]),\n    ['vhdl', 'vhd']);\n","date":"2019-04-30T08:09:45.627Z","updated":"2019-04-30T08:09:45.627Z","path":"plugins/prettify/lang-vhdl.js","layout":"false","title":"","comments":1,"_id":"cjxh80em3001v6c9v2ac8bh6e","content":"/**\n * @license\n * Copyright (C) 2010 benoit@ryder.fr\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for VHDL '93.\n *\n * Based on the lexical grammar and keywords at\n * http://www.iis.ee.ethz.ch/~zimmi/download/vhdl93_syntax.html\n *\n * @author benoit@ryder.fr\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0']\n        ],\n        [\n         // String, character or bit string\n         [PR['PR_STRING'], /^(?:[BOX]?\"(?:[^\\\"]|\"\")*\"|'.')/i],\n         // Comment, from two dashes until end of line.\n         [PR['PR_COMMENT'], /^--[^\\r\\n]*/],\n         [PR['PR_KEYWORD'], /^(?:abs|access|after|alias|all|and|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|mod|nand|new|next|nor|not|null|of|on|open|or|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|rem|report|return|rol|ror|select|severity|shared|signal|sla|sll|sra|srl|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with|xnor|xor)(?=[^\\w-]|$)/i, null],\n         // Type, predefined or standard\n         [PR['PR_TYPE'], /^(?:bit|bit_vector|character|boolean|integer|real|time|string|severity_level|positive|natural|signed|unsigned|line|text|std_u?logic(?:_vector)?)(?=[^\\w-]|$)/i, null],\n         // Predefined attributes\n         [PR['PR_TYPE'], /^\\'(?:ACTIVE|ASCENDING|BASE|DELAYED|DRIVING|DRIVING_VALUE|EVENT|HIGH|IMAGE|INSTANCE_NAME|LAST_ACTIVE|LAST_EVENT|LAST_VALUE|LEFT|LEFTOF|LENGTH|LOW|PATH_NAME|POS|PRED|QUIET|RANGE|REVERSE_RANGE|RIGHT|RIGHTOF|SIMPLE_NAME|STABLE|SUCC|TRANSACTION|VAL|VALUE)(?=[^\\w-]|$)/i, null],\n         // Number, decimal or based literal\n         [PR['PR_LITERAL'], /^\\d+(?:_\\d+)*(?:#[\\w\\\\.]+#(?:[+\\-]?\\d+(?:_\\d+)*)?|(?:\\.\\d+(?:_\\d+)*)?(?:E[+\\-]?\\d+(?:_\\d+)*)?)/i],\n         // Identifier, basic or extended\n         [PR['PR_PLAIN'], /^(?:[a-z]\\w*|\\\\[^\\\\]*\\\\)/i],\n         // Punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0\\-\\\"\\']*/]\n        ]),\n    ['vhdl', 'vhd']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2010 benoit@ryder.fr\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for VHDL '93.\n *\n * Based on the lexical grammar and keywords at\n * http://www.iis.ee.ethz.ch/~zimmi/download/vhdl93_syntax.html\n *\n * @author benoit@ryder.fr\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0']\n        ],\n        [\n         // String, character or bit string\n         [PR['PR_STRING'], /^(?:[BOX]?\"(?:[^\\\"]|\"\")*\"|'.')/i],\n         // Comment, from two dashes until end of line.\n         [PR['PR_COMMENT'], /^--[^\\r\\n]*/],\n         [PR['PR_KEYWORD'], /^(?:abs|access|after|alias|all|and|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|mod|nand|new|next|nor|not|null|of|on|open|or|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|rem|report|return|rol|ror|select|severity|shared|signal|sla|sll|sra|srl|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with|xnor|xor)(?=[^\\w-]|$)/i, null],\n         // Type, predefined or standard\n         [PR['PR_TYPE'], /^(?:bit|bit_vector|character|boolean|integer|real|time|string|severity_level|positive|natural|signed|unsigned|line|text|std_u?logic(?:_vector)?)(?=[^\\w-]|$)/i, null],\n         // Predefined attributes\n         [PR['PR_TYPE'], /^\\'(?:ACTIVE|ASCENDING|BASE|DELAYED|DRIVING|DRIVING_VALUE|EVENT|HIGH|IMAGE|INSTANCE_NAME|LAST_ACTIVE|LAST_EVENT|LAST_VALUE|LEFT|LEFTOF|LENGTH|LOW|PATH_NAME|POS|PRED|QUIET|RANGE|REVERSE_RANGE|RIGHT|RIGHTOF|SIMPLE_NAME|STABLE|SUCC|TRANSACTION|VAL|VALUE)(?=[^\\w-]|$)/i, null],\n         // Number, decimal or based literal\n         [PR['PR_LITERAL'], /^\\d+(?:_\\d+)*(?:#[\\w\\\\.]+#(?:[+\\-]?\\d+(?:_\\d+)*)?|(?:\\.\\d+(?:_\\d+)*)?(?:E[+\\-]?\\d+(?:_\\d+)*)?)/i],\n         // Identifier, basic or extended\n         [PR['PR_PLAIN'], /^(?:[a-z]\\w*|\\\\[^\\\\]*\\\\)/i],\n         // Punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0\\-\\\"\\']*/]\n        ]),\n    ['vhdl', 'vhd']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Wiki pages.\n *\n * Based on WikiSyntax at http://code.google.com/p/support/wiki/WikiSyntax\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t \\xA0a-gi-z0-9]+/, null,\n          '\\t \\xA0abcdefgijklmnopqrstuvwxyz0123456789'],\n         // Wiki formatting\n         [PR['PR_PUNCTUATION'], /^[=*~\\^\\[\\]]+/, null, '=*~^[]']\n        ],\n        [\n         // Meta-info like #summary, #labels, etc.\n         ['lang-wiki.meta',  /(?:^^|\\r\\n?|\\n)(#[a-z]+)\\b/],\n         // A WikiWord\n         [PR['PR_LITERAL'],     /^(?:[A-Z][a-z][a-z0-9]+[A-Z][a-z][a-zA-Z0-9]+)\\b/\n          ],\n         // A preformatted block in an unknown language\n         ['lang-',           /^\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/],\n         // A block of source code in an unknown language\n         ['lang-',           /^`([^\\r\\n`]+)`/],\n         // An inline URL.\n         [PR['PR_STRING'],\n          /^https?:\\/\\/[^\\/?#\\s]*(?:\\/[^?#\\s]*)?(?:\\?[^#\\s]*)?(?:#\\S*)?/i],\n         [PR['PR_PLAIN'],       /^(?:\\r\\n|[\\s\\S])[^#=*~^A-Zh\\{`\\[\\r\\n]*/]\n        ]),\n    ['wiki']);\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([[PR['PR_KEYWORD'], /^#[a-z]+/i, null, '#']], []),\n    ['wiki.meta']);\n","source":"plugins/prettify/lang-wiki.js","raw":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Wiki pages.\n *\n * Based on WikiSyntax at http://code.google.com/p/support/wiki/WikiSyntax\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t \\xA0a-gi-z0-9]+/, null,\n          '\\t \\xA0abcdefgijklmnopqrstuvwxyz0123456789'],\n         // Wiki formatting\n         [PR['PR_PUNCTUATION'], /^[=*~\\^\\[\\]]+/, null, '=*~^[]']\n        ],\n        [\n         // Meta-info like #summary, #labels, etc.\n         ['lang-wiki.meta',  /(?:^^|\\r\\n?|\\n)(#[a-z]+)\\b/],\n         // A WikiWord\n         [PR['PR_LITERAL'],     /^(?:[A-Z][a-z][a-z0-9]+[A-Z][a-z][a-zA-Z0-9]+)\\b/\n          ],\n         // A preformatted block in an unknown language\n         ['lang-',           /^\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/],\n         // A block of source code in an unknown language\n         ['lang-',           /^`([^\\r\\n`]+)`/],\n         // An inline URL.\n         [PR['PR_STRING'],\n          /^https?:\\/\\/[^\\/?#\\s]*(?:\\/[^?#\\s]*)?(?:\\?[^#\\s]*)?(?:#\\S*)?/i],\n         [PR['PR_PLAIN'],       /^(?:\\r\\n|[\\s\\S])[^#=*~^A-Zh\\{`\\[\\r\\n]*/]\n        ]),\n    ['wiki']);\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([[PR['PR_KEYWORD'], /^#[a-z]+/i, null, '#']], []),\n    ['wiki.meta']);\n","date":"2019-04-30T08:09:45.661Z","updated":"2019-04-30T08:09:45.661Z","path":"plugins/prettify/lang-wiki.js","layout":"false","title":"","comments":1,"_id":"cjxh80em3001w6c9v9roq8ca8","content":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Wiki pages.\n *\n * Based on WikiSyntax at http://code.google.com/p/support/wiki/WikiSyntax\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t \\xA0a-gi-z0-9]+/, null,\n          '\\t \\xA0abcdefgijklmnopqrstuvwxyz0123456789'],\n         // Wiki formatting\n         [PR['PR_PUNCTUATION'], /^[=*~\\^\\[\\]]+/, null, '=*~^[]']\n        ],\n        [\n         // Meta-info like #summary, #labels, etc.\n         ['lang-wiki.meta',  /(?:^^|\\r\\n?|\\n)(#[a-z]+)\\b/],\n         // A WikiWord\n         [PR['PR_LITERAL'],     /^(?:[A-Z][a-z][a-z0-9]+[A-Z][a-z][a-zA-Z0-9]+)\\b/\n          ],\n         // A preformatted block in an unknown language\n         ['lang-',           /^\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/],\n         // A block of source code in an unknown language\n         ['lang-',           /^`([^\\r\\n`]+)`/],\n         // An inline URL.\n         [PR['PR_STRING'],\n          /^https?:\\/\\/[^\\/?#\\s]*(?:\\/[^?#\\s]*)?(?:\\?[^#\\s]*)?(?:#\\S*)?/i],\n         [PR['PR_PLAIN'],       /^(?:\\r\\n|[\\s\\S])[^#=*~^A-Zh\\{`\\[\\r\\n]*/]\n        ]),\n    ['wiki']);\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([[PR['PR_KEYWORD'], /^#[a-z]+/i, null, '#']], []),\n    ['wiki.meta']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Wiki pages.\n *\n * Based on WikiSyntax at http://code.google.com/p/support/wiki/WikiSyntax\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t \\xA0a-gi-z0-9]+/, null,\n          '\\t \\xA0abcdefgijklmnopqrstuvwxyz0123456789'],\n         // Wiki formatting\n         [PR['PR_PUNCTUATION'], /^[=*~\\^\\[\\]]+/, null, '=*~^[]']\n        ],\n        [\n         // Meta-info like #summary, #labels, etc.\n         ['lang-wiki.meta',  /(?:^^|\\r\\n?|\\n)(#[a-z]+)\\b/],\n         // A WikiWord\n         [PR['PR_LITERAL'],     /^(?:[A-Z][a-z][a-z0-9]+[A-Z][a-z][a-zA-Z0-9]+)\\b/\n          ],\n         // A preformatted block in an unknown language\n         ['lang-',           /^\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/],\n         // A block of source code in an unknown language\n         ['lang-',           /^`([^\\r\\n`]+)`/],\n         // An inline URL.\n         [PR['PR_STRING'],\n          /^https?:\\/\\/[^\\/?#\\s]*(?:\\/[^?#\\s]*)?(?:\\?[^#\\s]*)?(?:#\\S*)?/i],\n         [PR['PR_PLAIN'],       /^(?:\\r\\n|[\\s\\S])[^#=*~^A-Zh\\{`\\[\\r\\n]*/]\n        ]),\n    ['wiki']);\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([[PR['PR_KEYWORD'], /^#[a-z]+/i, null, '#']], []),\n    ['wiki.meta']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2015 ribrdb @ code.google.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n// Contributed by ribrdb @ code.google.com\n\n/**\n * @fileoverview\n * Registers a language handler for YAML.\n *\n * @author ribrdb\n */\n\nPR['registerLangHandler'](\n  PR['createSimpleLexer'](\n    [\n      [PR['PR_PUNCTUATION'], /^[:|>?]+/, null, ':|>?'],\n      [PR['PR_DECLARATION'],  /^%(?:YAML|TAG)[^#\\r\\n]+/, null, '%'],\n      [PR['PR_TYPE'], /^[&]\\S+/, null, '&'],\n      [PR['PR_TYPE'], /^!\\S*/, null, '!'],\n      [PR['PR_STRING'], /^\"(?:[^\\\\\"]|\\\\.)*(?:\"|$)/, null, '\"'],\n      [PR['PR_STRING'], /^'(?:[^']|'')*(?:'|$)/, null, \"'\"],\n      [PR['PR_COMMENT'], /^#[^\\r\\n]*/, null, '#'],\n      [PR['PR_PLAIN'], /^\\s+/, null, ' \\t\\r\\n']\n    ],\n    [\n      [PR['PR_DECLARATION'], /^(?:---|\\.\\.\\.)(?:[\\r\\n]|$)/],\n      [PR['PR_PUNCTUATION'], /^-/],\n      [PR['PR_KEYWORD'], /^[\\w-]+:[ \\r\\n]/],\n      [PR['PR_PLAIN'], /^\\w+/]\n    ]), ['yaml', 'yml']);\n","source":"plugins/prettify/lang-yaml.js","raw":"/**\n * @license\n * Copyright (C) 2015 ribrdb @ code.google.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n// Contributed by ribrdb @ code.google.com\n\n/**\n * @fileoverview\n * Registers a language handler for YAML.\n *\n * @author ribrdb\n */\n\nPR['registerLangHandler'](\n  PR['createSimpleLexer'](\n    [\n      [PR['PR_PUNCTUATION'], /^[:|>?]+/, null, ':|>?'],\n      [PR['PR_DECLARATION'],  /^%(?:YAML|TAG)[^#\\r\\n]+/, null, '%'],\n      [PR['PR_TYPE'], /^[&]\\S+/, null, '&'],\n      [PR['PR_TYPE'], /^!\\S*/, null, '!'],\n      [PR['PR_STRING'], /^\"(?:[^\\\\\"]|\\\\.)*(?:\"|$)/, null, '\"'],\n      [PR['PR_STRING'], /^'(?:[^']|'')*(?:'|$)/, null, \"'\"],\n      [PR['PR_COMMENT'], /^#[^\\r\\n]*/, null, '#'],\n      [PR['PR_PLAIN'], /^\\s+/, null, ' \\t\\r\\n']\n    ],\n    [\n      [PR['PR_DECLARATION'], /^(?:---|\\.\\.\\.)(?:[\\r\\n]|$)/],\n      [PR['PR_PUNCTUATION'], /^-/],\n      [PR['PR_KEYWORD'], /^[\\w-]+:[ \\r\\n]/],\n      [PR['PR_PLAIN'], /^\\w+/]\n    ]), ['yaml', 'yml']);\n","date":"2019-04-30T08:09:45.662Z","updated":"2019-04-30T08:09:45.662Z","path":"plugins/prettify/lang-yaml.js","layout":"false","title":"","comments":1,"_id":"cjxh80em4001x6c9viiyvieo8","content":"/**\n * @license\n * Copyright (C) 2015 ribrdb @ code.google.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n// Contributed by ribrdb @ code.google.com\n\n/**\n * @fileoverview\n * Registers a language handler for YAML.\n *\n * @author ribrdb\n */\n\nPR['registerLangHandler'](\n  PR['createSimpleLexer'](\n    [\n      [PR['PR_PUNCTUATION'], /^[:|>?]+/, null, ':|>?'],\n      [PR['PR_DECLARATION'],  /^%(?:YAML|TAG)[^#\\r\\n]+/, null, '%'],\n      [PR['PR_TYPE'], /^[&]\\S+/, null, '&'],\n      [PR['PR_TYPE'], /^!\\S*/, null, '!'],\n      [PR['PR_STRING'], /^\"(?:[^\\\\\"]|\\\\.)*(?:\"|$)/, null, '\"'],\n      [PR['PR_STRING'], /^'(?:[^']|'')*(?:'|$)/, null, \"'\"],\n      [PR['PR_COMMENT'], /^#[^\\r\\n]*/, null, '#'],\n      [PR['PR_PLAIN'], /^\\s+/, null, ' \\t\\r\\n']\n    ],\n    [\n      [PR['PR_DECLARATION'], /^(?:---|\\.\\.\\.)(?:[\\r\\n]|$)/],\n      [PR['PR_PUNCTUATION'], /^-/],\n      [PR['PR_KEYWORD'], /^[\\w-]+:[ \\r\\n]/],\n      [PR['PR_PLAIN'], /^\\w+/]\n    ]), ['yaml', 'yml']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2015 ribrdb @ code.google.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n// Contributed by ribrdb @ code.google.com\n\n/**\n * @fileoverview\n * Registers a language handler for YAML.\n *\n * @author ribrdb\n */\n\nPR['registerLangHandler'](\n  PR['createSimpleLexer'](\n    [\n      [PR['PR_PUNCTUATION'], /^[:|>?]+/, null, ':|>?'],\n      [PR['PR_DECLARATION'],  /^%(?:YAML|TAG)[^#\\r\\n]+/, null, '%'],\n      [PR['PR_TYPE'], /^[&]\\S+/, null, '&'],\n      [PR['PR_TYPE'], /^!\\S*/, null, '!'],\n      [PR['PR_STRING'], /^\"(?:[^\\\\\"]|\\\\.)*(?:\"|$)/, null, '\"'],\n      [PR['PR_STRING'], /^'(?:[^']|'')*(?:'|$)/, null, \"'\"],\n      [PR['PR_COMMENT'], /^#[^\\r\\n]*/, null, '#'],\n      [PR['PR_PLAIN'], /^\\s+/, null, ' \\t\\r\\n']\n    ],\n    [\n      [PR['PR_DECLARATION'], /^(?:---|\\.\\.\\.)(?:[\\r\\n]|$)/],\n      [PR['PR_PUNCTUATION'], /^-/],\n      [PR['PR_KEYWORD'], /^[\\w-]+:[ \\r\\n]/],\n      [PR['PR_PLAIN'], /^\\w+/]\n    ]), ['yaml', 'yml']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* Pretty printing styles. Used with prettify.js. */\n\n\n/* SPAN elements with the classes below are added by prettyprint. */\n.pln { color: #000 }  /* plain text */\n\n@media screen {\n  .str { color: #080 }  /* string content */\n  .kwd { color: #008 }  /* a keyword */\n  .com { color: #800 }  /* a comment */\n  .typ { color: #606 }  /* a type name */\n  .lit { color: #066 }  /* a literal value */\n  /* punctuation, lisp open bracket, lisp close bracket */\n  .pun, .opn, .clo { color: #660 }\n  .tag { color: #008 }  /* a markup tag name */\n  .atn { color: #606 }  /* a markup attribute name */\n  .atv { color: #080 }  /* a markup attribute value */\n  .dec, .var { color: #606 }  /* a declaration; a variable name */\n  .fun { color: red }  /* a function name */\n}\n\n/* Use higher contrast and text-weight for printable form. */\n@media print, projection {\n  .str { color: #060 }\n  .kwd { color: #006; font-weight: bold }\n  .com { color: #600; font-style: italic }\n  .typ { color: #404; font-weight: bold }\n  .lit { color: #044 }\n  .pun, .opn, .clo { color: #440 }\n  .tag { color: #006; font-weight: bold }\n  .atn { color: #404 }\n  .atv { color: #060 }\n}\n\n/* Put a border around prettyprinted code snippets. */\npre.prettyprint { padding: 2px; border: 1px solid #888 }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums { margin-top: 0; margin-bottom: 0 } /* IE indents via margin-left */\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L5,\nli.L6,\nli.L7,\nli.L8 { list-style-type: none }\n/* Alternate shading for lines */\nli.L1,\nli.L3,\nli.L5,\nli.L7,\nli.L9 { background: #eee }\n","source":"plugins/prettify/prettify.css","raw":"/**\n * @license\n * Copyright (C) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* Pretty printing styles. Used with prettify.js. */\n\n\n/* SPAN elements with the classes below are added by prettyprint. */\n.pln { color: #000 }  /* plain text */\n\n@media screen {\n  .str { color: #080 }  /* string content */\n  .kwd { color: #008 }  /* a keyword */\n  .com { color: #800 }  /* a comment */\n  .typ { color: #606 }  /* a type name */\n  .lit { color: #066 }  /* a literal value */\n  /* punctuation, lisp open bracket, lisp close bracket */\n  .pun, .opn, .clo { color: #660 }\n  .tag { color: #008 }  /* a markup tag name */\n  .atn { color: #606 }  /* a markup attribute name */\n  .atv { color: #080 }  /* a markup attribute value */\n  .dec, .var { color: #606 }  /* a declaration; a variable name */\n  .fun { color: red }  /* a function name */\n}\n\n/* Use higher contrast and text-weight for printable form. */\n@media print, projection {\n  .str { color: #060 }\n  .kwd { color: #006; font-weight: bold }\n  .com { color: #600; font-style: italic }\n  .typ { color: #404; font-weight: bold }\n  .lit { color: #044 }\n  .pun, .opn, .clo { color: #440 }\n  .tag { color: #006; font-weight: bold }\n  .atn { color: #404 }\n  .atv { color: #060 }\n}\n\n/* Put a border around prettyprinted code snippets. */\npre.prettyprint { padding: 2px; border: 1px solid #888 }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums { margin-top: 0; margin-bottom: 0 } /* IE indents via margin-left */\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L5,\nli.L6,\nli.L7,\nli.L8 { list-style-type: none }\n/* Alternate shading for lines */\nli.L1,\nli.L3,\nli.L5,\nli.L7,\nli.L9 { background: #eee }\n","date":"2019-05-08T09:09:18.614Z","updated":"2019-05-08T09:09:18.614Z","path":"plugins/prettify/prettify.css","layout":"false","title":"","comments":1,"_id":"cjxh80em4001y6c9vn1edzb49","content":"/**\n * @license\n * Copyright (C) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* Pretty printing styles. Used with prettify.js. */\n\n\n/* SPAN elements with the classes below are added by prettyprint. */\n.pln { color: #000 }  /* plain text */\n\n@media screen {\n  .str { color: #080 }  /* string content */\n  .kwd { color: #008 }  /* a keyword */\n  .com { color: #800 }  /* a comment */\n  .typ { color: #606 }  /* a type name */\n  .lit { color: #066 }  /* a literal value */\n  /* punctuation, lisp open bracket, lisp close bracket */\n  .pun, .opn, .clo { color: #660 }\n  .tag { color: #008 }  /* a markup tag name */\n  .atn { color: #606 }  /* a markup attribute name */\n  .atv { color: #080 }  /* a markup attribute value */\n  .dec, .var { color: #606 }  /* a declaration; a variable name */\n  .fun { color: red }  /* a function name */\n}\n\n/* Use higher contrast and text-weight for printable form. */\n@media print, projection {\n  .str { color: #060 }\n  .kwd { color: #006; font-weight: bold }\n  .com { color: #600; font-style: italic }\n  .typ { color: #404; font-weight: bold }\n  .lit { color: #044 }\n  .pun, .opn, .clo { color: #440 }\n  .tag { color: #006; font-weight: bold }\n  .atn { color: #404 }\n  .atv { color: #060 }\n}\n\n/* Put a border around prettyprinted code snippets. */\npre.prettyprint { padding: 2px; border: 1px solid #888 }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums { margin-top: 0; margin-bottom: 0 } /* IE indents via margin-left */\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L5,\nli.L6,\nli.L7,\nli.L8 { list-style-type: none }\n/* Alternate shading for lines */\nli.L1,\nli.L3,\nli.L5,\nli.L7,\nli.L9 { background: #eee }\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* Pretty printing styles. Used with prettify.js. */\n\n\n/* SPAN elements with the classes below are added by prettyprint. */\n.pln { color: #000 }  /* plain text */\n\n@media screen {\n  .str { color: #080 }  /* string content */\n  .kwd { color: #008 }  /* a keyword */\n  .com { color: #800 }  /* a comment */\n  .typ { color: #606 }  /* a type name */\n  .lit { color: #066 }  /* a literal value */\n  /* punctuation, lisp open bracket, lisp close bracket */\n  .pun, .opn, .clo { color: #660 }\n  .tag { color: #008 }  /* a markup tag name */\n  .atn { color: #606 }  /* a markup attribute name */\n  .atv { color: #080 }  /* a markup attribute value */\n  .dec, .var { color: #606 }  /* a declaration; a variable name */\n  .fun { color: red }  /* a function name */\n}\n\n/* Use higher contrast and text-weight for printable form. */\n@media print, projection {\n  .str { color: #060 }\n  .kwd { color: #006; font-weight: bold }\n  .com { color: #600; font-style: italic }\n  .typ { color: #404; font-weight: bold }\n  .lit { color: #044 }\n  .pun, .opn, .clo { color: #440 }\n  .tag { color: #006; font-weight: bold }\n  .atn { color: #404 }\n  .atv { color: #060 }\n}\n\n/* Put a border around prettyprinted code snippets. */\npre.prettyprint { padding: 2px; border: 1px solid #888 }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums { margin-top: 0; margin-bottom: 0 } /* IE indents via margin-left */\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L5,\nli.L6,\nli.L7,\nli.L8 { list-style-type: none }\n/* Alternate shading for lines */\nli.L1,\nli.L3,\nli.L5,\nli.L7,\nli.L9 { background: #eee }\n"},{"_content":"/**\n * @license\n * Copyright (C) 2011 Patrick Wied\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @fileoverview\n * Registers a language handler for XQuery.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-xq\"></pre>\n *\n *\n * @author Patrick Wied ( patpa7p@live.de )\n * @version 2010-09-28\n */\n\n(function () {\n// Falls back to plain for stylesheets that don't style fun.\nvar PR_FUNCTION = 'fun pln';\n// Falls back to plaiin for stylesheets that don't style var.\nvar PR_VARIABLE = 'var pln';\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Matching $var-ia_bles\n         [PR_VARIABLE, /^\\$[A-Za-z0-9_\\-]+/, null, \"$\"]\n        ],\n        [\n         // Matching lt and gt operators\n         // Not the best matching solution but you have to differentiate between the gt operator and the tag closing char\n         [PR['PR_PLAIN'], /^[\\s=][<>][\\s=]/],\n         // Matching @Attributes\n         [PR['PR_LITERAL'], /^\\@[\\w-]+/],\n         // Matching xml tags\n         [PR['PR_TAG'], /^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n         // Matching single or multiline xquery comments -> (: <text> :)\n         [PR['PR_COMMENT'], /^\\(:[\\s\\S]*?:\\)/],\n         // Tokenizing /{}:=;*,[]() as plain\n         [PR['PR_PLAIN'], /^[\\/\\{\\};,\\[\\]\\(\\)]$/],\n         // Matching a double or single quoted, possibly multi-line, string.\n         // with the special condition that a { in a string changes to xquery context \n         [PR['PR_STRING'], /^(?:\\\"(?:[^\\\"\\\\\\{]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\\\{]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\''],\n         // Matching standard xquery keywords\n         [PR['PR_KEYWORD'], /^(?:xquery|where|version|variable|union|typeswitch|treat|to|then|text|stable|sortby|some|self|schema|satisfies|returns|return|ref|processing-instruction|preceding-sibling|preceding|precedes|parent|only|of|node|namespace|module|let|item|intersect|instance|in|import|if|function|for|follows|following-sibling|following|external|except|every|else|element|descending|descendant-or-self|descendant|define|default|declare|comment|child|cast|case|before|attribute|assert|ascending|as|ancestor-or-self|ancestor|after|eq|order|by|or|and|schema-element|document-node|node|at)\\b/],\n         // Matching standard xquery types\n         [PR['PR_TYPE'], /^(?:xs:yearMonthDuration|xs:unsignedLong|xs:time|xs:string|xs:short|xs:QName|xs:Name|xs:long|xs:integer|xs:int|xs:gYearMonth|xs:gYear|xs:gMonthDay|xs:gDay|xs:float|xs:duration|xs:double|xs:decimal|xs:dayTimeDuration|xs:dateTime|xs:date|xs:byte|xs:boolean|xs:anyURI|xf:yearMonthDuration)\\b/, null],\n         // Matching standard xquery functions\n         [PR_FUNCTION, /^(?:xp:dereference|xinc:node-expand|xinc:link-references|xinc:link-expand|xhtml:restructure|xhtml:clean|xhtml:add-lists|xdmp:zip-manifest|xdmp:zip-get|xdmp:zip-create|xdmp:xquery-version|xdmp:word-convert|xdmp:with-namespaces|xdmp:version|xdmp:value|xdmp:user-roles|xdmp:user-last-login|xdmp:user|xdmp:url-encode|xdmp:url-decode|xdmp:uri-is-file|xdmp:uri-format|xdmp:uri-content-type|xdmp:unquote|xdmp:unpath|xdmp:triggers-database|xdmp:trace|xdmp:to-json|xdmp:tidy|xdmp:subbinary|xdmp:strftime|xdmp:spawn-in|xdmp:spawn|xdmp:sleep|xdmp:shutdown|xdmp:set-session-field|xdmp:set-response-encoding|xdmp:set-response-content-type|xdmp:set-response-code|xdmp:set-request-time-limit|xdmp:set|xdmp:servers|xdmp:server-status|xdmp:server-name|xdmp:server|xdmp:security-database|xdmp:security-assert|xdmp:schema-database|xdmp:save|xdmp:role-roles|xdmp:role|xdmp:rethrow|xdmp:restart|xdmp:request-timestamp|xdmp:request-status|xdmp:request-cancel|xdmp:request|xdmp:redirect-response|xdmp:random|xdmp:quote|xdmp:query-trace|xdmp:query-meters|xdmp:product-edition|xdmp:privilege-roles|xdmp:privilege|xdmp:pretty-print|xdmp:powerpoint-convert|xdmp:platform|xdmp:permission|xdmp:pdf-convert|xdmp:path|xdmp:octal-to-integer|xdmp:node-uri|xdmp:node-replace|xdmp:node-kind|xdmp:node-insert-child|xdmp:node-insert-before|xdmp:node-insert-after|xdmp:node-delete|xdmp:node-database|xdmp:mul64|xdmp:modules-root|xdmp:modules-database|xdmp:merging|xdmp:merge-cancel|xdmp:merge|xdmp:md5|xdmp:logout|xdmp:login|xdmp:log-level|xdmp:log|xdmp:lock-release|xdmp:lock-acquire|xdmp:load|xdmp:invoke-in|xdmp:invoke|xdmp:integer-to-octal|xdmp:integer-to-hex|xdmp:http-put|xdmp:http-post|xdmp:http-options|xdmp:http-head|xdmp:http-get|xdmp:http-delete|xdmp:hosts|xdmp:host-status|xdmp:host-name|xdmp:host|xdmp:hex-to-integer|xdmp:hash64|xdmp:hash32|xdmp:has-privilege|xdmp:groups|xdmp:group-serves|xdmp:group-servers|xdmp:group-name|xdmp:group-hosts|xdmp:group|xdmp:get-session-field-names|xdmp:get-session-field|xdmp:get-response-encoding|xdmp:get-response-code|xdmp:get-request-username|xdmp:get-request-user|xdmp:get-request-url|xdmp:get-request-protocol|xdmp:get-request-path|xdmp:get-request-method|xdmp:get-request-header-names|xdmp:get-request-header|xdmp:get-request-field-names|xdmp:get-request-field-filename|xdmp:get-request-field-content-type|xdmp:get-request-field|xdmp:get-request-client-certificate|xdmp:get-request-client-address|xdmp:get-request-body|xdmp:get-current-user|xdmp:get-current-roles|xdmp:get|xdmp:function-name|xdmp:function-module|xdmp:function|xdmp:from-json|xdmp:forests|xdmp:forest-status|xdmp:forest-restore|xdmp:forest-restart|xdmp:forest-name|xdmp:forest-delete|xdmp:forest-databases|xdmp:forest-counts|xdmp:forest-clear|xdmp:forest-backup|xdmp:forest|xdmp:filesystem-file|xdmp:filesystem-directory|xdmp:exists|xdmp:excel-convert|xdmp:eval-in|xdmp:eval|xdmp:estimate|xdmp:email|xdmp:element-content-type|xdmp:elapsed-time|xdmp:document-set-quality|xdmp:document-set-property|xdmp:document-set-properties|xdmp:document-set-permissions|xdmp:document-set-collections|xdmp:document-remove-properties|xdmp:document-remove-permissions|xdmp:document-remove-collections|xdmp:document-properties|xdmp:document-locks|xdmp:document-load|xdmp:document-insert|xdmp:document-get-quality|xdmp:document-get-properties|xdmp:document-get-permissions|xdmp:document-get-collections|xdmp:document-get|xdmp:document-forest|xdmp:document-delete|xdmp:document-add-properties|xdmp:document-add-permissions|xdmp:document-add-collections|xdmp:directory-properties|xdmp:directory-locks|xdmp:directory-delete|xdmp:directory-create|xdmp:directory|xdmp:diacritic-less|xdmp:describe|xdmp:default-permissions|xdmp:default-collections|xdmp:databases|xdmp:database-restore-validate|xdmp:database-restore-status|xdmp:database-restore-cancel|xdmp:database-restore|xdmp:database-name|xdmp:database-forests|xdmp:database-backup-validate|xdmp:database-backup-status|xdmp:database-backup-purge|xdmp:database-backup-cancel|xdmp:database-backup|xdmp:database|xdmp:collection-properties|xdmp:collection-locks|xdmp:collection-delete|xdmp:collation-canonical-uri|xdmp:castable-as|xdmp:can-grant-roles|xdmp:base64-encode|xdmp:base64-decode|xdmp:architecture|xdmp:apply|xdmp:amp-roles|xdmp:amp|xdmp:add64|xdmp:add-response-header|xdmp:access|trgr:trigger-set-recursive|trgr:trigger-set-permissions|trgr:trigger-set-name|trgr:trigger-set-module|trgr:trigger-set-event|trgr:trigger-set-description|trgr:trigger-remove-permissions|trgr:trigger-module|trgr:trigger-get-permissions|trgr:trigger-enable|trgr:trigger-disable|trgr:trigger-database-online-event|trgr:trigger-data-event|trgr:trigger-add-permissions|trgr:remove-trigger|trgr:property-content|trgr:pre-commit|trgr:post-commit|trgr:get-trigger-by-id|trgr:get-trigger|trgr:document-scope|trgr:document-content|trgr:directory-scope|trgr:create-trigger|trgr:collection-scope|trgr:any-property-content|thsr:set-entry|thsr:remove-term|thsr:remove-synonym|thsr:remove-entry|thsr:query-lookup|thsr:lookup|thsr:load|thsr:insert|thsr:expand|thsr:add-synonym|spell:suggest-detailed|spell:suggest|spell:remove-word|spell:make-dictionary|spell:load|spell:levenshtein-distance|spell:is-correct|spell:insert|spell:double-metaphone|spell:add-word|sec:users-collection|sec:user-set-roles|sec:user-set-password|sec:user-set-name|sec:user-set-description|sec:user-set-default-permissions|sec:user-set-default-collections|sec:user-remove-roles|sec:user-privileges|sec:user-get-roles|sec:user-get-description|sec:user-get-default-permissions|sec:user-get-default-collections|sec:user-doc-permissions|sec:user-doc-collections|sec:user-add-roles|sec:unprotect-collection|sec:uid-for-name|sec:set-realm|sec:security-version|sec:security-namespace|sec:security-installed|sec:security-collection|sec:roles-collection|sec:role-set-roles|sec:role-set-name|sec:role-set-description|sec:role-set-default-permissions|sec:role-set-default-collections|sec:role-remove-roles|sec:role-privileges|sec:role-get-roles|sec:role-get-description|sec:role-get-default-permissions|sec:role-get-default-collections|sec:role-doc-permissions|sec:role-doc-collections|sec:role-add-roles|sec:remove-user|sec:remove-role-from-users|sec:remove-role-from-role|sec:remove-role-from-privileges|sec:remove-role-from-amps|sec:remove-role|sec:remove-privilege|sec:remove-amp|sec:protect-collection|sec:privileges-collection|sec:privilege-set-roles|sec:privilege-set-name|sec:privilege-remove-roles|sec:privilege-get-roles|sec:privilege-add-roles|sec:priv-doc-permissions|sec:priv-doc-collections|sec:get-user-names|sec:get-unique-elem-id|sec:get-role-names|sec:get-role-ids|sec:get-privilege|sec:get-distinct-permissions|sec:get-collection|sec:get-amp|sec:create-user-with-role|sec:create-user|sec:create-role|sec:create-privilege|sec:create-amp|sec:collections-collection|sec:collection-set-permissions|sec:collection-remove-permissions|sec:collection-get-permissions|sec:collection-add-permissions|sec:check-admin|sec:amps-collection|sec:amp-set-roles|sec:amp-remove-roles|sec:amp-get-roles|sec:amp-doc-permissions|sec:amp-doc-collections|sec:amp-add-roles|search:unparse|search:suggest|search:snippet|search:search|search:resolve-nodes|search:resolve|search:remove-constraint|search:parse|search:get-default-options|search:estimate|search:check-options|prof:value|prof:reset|prof:report|prof:invoke|prof:eval|prof:enable|prof:disable|prof:allowed|ppt:clean|pki:template-set-request|pki:template-set-name|pki:template-set-key-type|pki:template-set-key-options|pki:template-set-description|pki:template-in-use|pki:template-get-version|pki:template-get-request|pki:template-get-name|pki:template-get-key-type|pki:template-get-key-options|pki:template-get-id|pki:template-get-description|pki:need-certificate|pki:is-temporary|pki:insert-trusted-certificates|pki:insert-template|pki:insert-signed-certificates|pki:insert-certificate-revocation-list|pki:get-trusted-certificate-ids|pki:get-template-ids|pki:get-template-certificate-authority|pki:get-template-by-name|pki:get-template|pki:get-pending-certificate-requests-xml|pki:get-pending-certificate-requests-pem|pki:get-pending-certificate-request|pki:get-certificates-for-template-xml|pki:get-certificates-for-template|pki:get-certificates|pki:get-certificate-xml|pki:get-certificate-pem|pki:get-certificate|pki:generate-temporary-certificate-if-necessary|pki:generate-temporary-certificate|pki:generate-template-certificate-authority|pki:generate-certificate-request|pki:delete-template|pki:delete-certificate|pki:create-template|pdf:make-toc|pdf:insert-toc-headers|pdf:get-toc|pdf:clean|p:status-transition|p:state-transition|p:remove|p:pipelines|p:insert|p:get-by-id|p:get|p:execute|p:create|p:condition|p:collection|p:action|ooxml:runs-merge|ooxml:package-uris|ooxml:package-parts-insert|ooxml:package-parts|msword:clean|mcgm:polygon|mcgm:point|mcgm:geospatial-query-from-elements|mcgm:geospatial-query|mcgm:circle|math:tanh|math:tan|math:sqrt|math:sinh|math:sin|math:pow|math:modf|math:log10|math:log|math:ldexp|math:frexp|math:fmod|math:floor|math:fabs|math:exp|math:cosh|math:cos|math:ceil|math:atan2|math:atan|math:asin|math:acos|map:put|map:map|map:keys|map:get|map:delete|map:count|map:clear|lnk:to|lnk:remove|lnk:insert|lnk:get|lnk:from|lnk:create|kml:polygon|kml:point|kml:interior-polygon|kml:geospatial-query-from-elements|kml:geospatial-query|kml:circle|kml:box|gml:polygon|gml:point|gml:interior-polygon|gml:geospatial-query-from-elements|gml:geospatial-query|gml:circle|gml:box|georss:point|georss:geospatial-query|georss:circle|geo:polygon|geo:point|geo:interior-polygon|geo:geospatial-query-from-elements|geo:geospatial-query|geo:circle|geo:box|fn:zero-or-one|fn:years-from-duration|fn:year-from-dateTime|fn:year-from-date|fn:upper-case|fn:unordered|fn:true|fn:translate|fn:trace|fn:tokenize|fn:timezone-from-time|fn:timezone-from-dateTime|fn:timezone-from-date|fn:sum|fn:subtract-dateTimes-yielding-yearMonthDuration|fn:subtract-dateTimes-yielding-dayTimeDuration|fn:substring-before|fn:substring-after|fn:substring|fn:subsequence|fn:string-to-codepoints|fn:string-pad|fn:string-length|fn:string-join|fn:string|fn:static-base-uri|fn:starts-with|fn:seconds-from-time|fn:seconds-from-duration|fn:seconds-from-dateTime|fn:round-half-to-even|fn:round|fn:root|fn:reverse|fn:resolve-uri|fn:resolve-QName|fn:replace|fn:remove|fn:QName|fn:prefix-from-QName|fn:position|fn:one-or-more|fn:number|fn:not|fn:normalize-unicode|fn:normalize-space|fn:node-name|fn:node-kind|fn:nilled|fn:namespace-uri-from-QName|fn:namespace-uri-for-prefix|fn:namespace-uri|fn:name|fn:months-from-duration|fn:month-from-dateTime|fn:month-from-date|fn:minutes-from-time|fn:minutes-from-duration|fn:minutes-from-dateTime|fn:min|fn:max|fn:matches|fn:lower-case|fn:local-name-from-QName|fn:local-name|fn:last|fn:lang|fn:iri-to-uri|fn:insert-before|fn:index-of|fn:in-scope-prefixes|fn:implicit-timezone|fn:idref|fn:id|fn:hours-from-time|fn:hours-from-duration|fn:hours-from-dateTime|fn:floor|fn:false|fn:expanded-QName|fn:exists|fn:exactly-one|fn:escape-uri|fn:escape-html-uri|fn:error|fn:ends-with|fn:encode-for-uri|fn:empty|fn:document-uri|fn:doc-available|fn:doc|fn:distinct-values|fn:distinct-nodes|fn:default-collation|fn:deep-equal|fn:days-from-duration|fn:day-from-dateTime|fn:day-from-date|fn:data|fn:current-time|fn:current-dateTime|fn:current-date|fn:count|fn:contains|fn:concat|fn:compare|fn:collection|fn:codepoints-to-string|fn:codepoint-equal|fn:ceiling|fn:boolean|fn:base-uri|fn:avg|fn:adjust-time-to-timezone|fn:adjust-dateTime-to-timezone|fn:adjust-date-to-timezone|fn:abs|feed:unsubscribe|feed:subscription|feed:subscribe|feed:request|feed:item|feed:description|excel:clean|entity:enrich|dom:set-pipelines|dom:set-permissions|dom:set-name|dom:set-evaluation-context|dom:set-domain-scope|dom:set-description|dom:remove-pipeline|dom:remove-permissions|dom:remove|dom:get|dom:evaluation-context|dom:domains|dom:domain-scope|dom:create|dom:configuration-set-restart-user|dom:configuration-set-permissions|dom:configuration-set-evaluation-context|dom:configuration-set-default-domain|dom:configuration-get|dom:configuration-create|dom:collection|dom:add-pipeline|dom:add-permissions|dls:retention-rules|dls:retention-rule-remove|dls:retention-rule-insert|dls:retention-rule|dls:purge|dls:node-expand|dls:link-references|dls:link-expand|dls:documents-query|dls:document-versions-query|dls:document-version-uri|dls:document-version-query|dls:document-version-delete|dls:document-version-as-of|dls:document-version|dls:document-update|dls:document-unmanage|dls:document-set-quality|dls:document-set-property|dls:document-set-properties|dls:document-set-permissions|dls:document-set-collections|dls:document-retention-rules|dls:document-remove-properties|dls:document-remove-permissions|dls:document-remove-collections|dls:document-purge|dls:document-manage|dls:document-is-managed|dls:document-insert-and-manage|dls:document-include-query|dls:document-history|dls:document-get-permissions|dls:document-extract-part|dls:document-delete|dls:document-checkout-status|dls:document-checkout|dls:document-checkin|dls:document-add-properties|dls:document-add-permissions|dls:document-add-collections|dls:break-checkout|dls:author-query|dls:as-of-query|dbk:convert|dbg:wait|dbg:value|dbg:stopped|dbg:stop|dbg:step|dbg:status|dbg:stack|dbg:out|dbg:next|dbg:line|dbg:invoke|dbg:function|dbg:finish|dbg:expr|dbg:eval|dbg:disconnect|dbg:detach|dbg:continue|dbg:connect|dbg:clear|dbg:breakpoints|dbg:break|dbg:attached|dbg:attach|cvt:save-converted-documents|cvt:part-uri|cvt:destination-uri|cvt:basepath|cvt:basename|cts:words|cts:word-query-weight|cts:word-query-text|cts:word-query-options|cts:word-query|cts:word-match|cts:walk|cts:uris|cts:uri-match|cts:train|cts:tokenize|cts:thresholds|cts:stem|cts:similar-query-weight|cts:similar-query-nodes|cts:similar-query|cts:shortest-distance|cts:search|cts:score|cts:reverse-query-weight|cts:reverse-query-nodes|cts:reverse-query|cts:remainder|cts:registered-query-weight|cts:registered-query-options|cts:registered-query-ids|cts:registered-query|cts:register|cts:query|cts:quality|cts:properties-query-query|cts:properties-query|cts:polygon-vertices|cts:polygon|cts:point-longitude|cts:point-latitude|cts:point|cts:or-query-queries|cts:or-query|cts:not-query-weight|cts:not-query-query|cts:not-query|cts:near-query-weight|cts:near-query-queries|cts:near-query-options|cts:near-query-distance|cts:near-query|cts:highlight|cts:geospatial-co-occurrences|cts:frequency|cts:fitness|cts:field-words|cts:field-word-query-weight|cts:field-word-query-text|cts:field-word-query-options|cts:field-word-query-field-name|cts:field-word-query|cts:field-word-match|cts:entity-highlight|cts:element-words|cts:element-word-query-weight|cts:element-word-query-text|cts:element-word-query-options|cts:element-word-query-element-name|cts:element-word-query|cts:element-word-match|cts:element-values|cts:element-value-ranges|cts:element-value-query-weight|cts:element-value-query-text|cts:element-value-query-options|cts:element-value-query-element-name|cts:element-value-query|cts:element-value-match|cts:element-value-geospatial-co-occurrences|cts:element-value-co-occurrences|cts:element-range-query-weight|cts:element-range-query-value|cts:element-range-query-options|cts:element-range-query-operator|cts:element-range-query-element-name|cts:element-range-query|cts:element-query-query|cts:element-query-element-name|cts:element-query|cts:element-pair-geospatial-values|cts:element-pair-geospatial-value-match|cts:element-pair-geospatial-query-weight|cts:element-pair-geospatial-query-region|cts:element-pair-geospatial-query-options|cts:element-pair-geospatial-query-longitude-name|cts:element-pair-geospatial-query-latitude-name|cts:element-pair-geospatial-query-element-name|cts:element-pair-geospatial-query|cts:element-pair-geospatial-boxes|cts:element-geospatial-values|cts:element-geospatial-value-match|cts:element-geospatial-query-weight|cts:element-geospatial-query-region|cts:element-geospatial-query-options|cts:element-geospatial-query-element-name|cts:element-geospatial-query|cts:element-geospatial-boxes|cts:element-child-geospatial-values|cts:element-child-geospatial-value-match|cts:element-child-geospatial-query-weight|cts:element-child-geospatial-query-region|cts:element-child-geospatial-query-options|cts:element-child-geospatial-query-element-name|cts:element-child-geospatial-query-child-name|cts:element-child-geospatial-query|cts:element-child-geospatial-boxes|cts:element-attribute-words|cts:element-attribute-word-query-weight|cts:element-attribute-word-query-text|cts:element-attribute-word-query-options|cts:element-attribute-word-query-element-name|cts:element-attribute-word-query-attribute-name|cts:element-attribute-word-query|cts:element-attribute-word-match|cts:element-attribute-values|cts:element-attribute-value-ranges|cts:element-attribute-value-query-weight|cts:element-attribute-value-query-text|cts:element-attribute-value-query-options|cts:element-attribute-value-query-element-name|cts:element-attribute-value-query-attribute-name|cts:element-attribute-value-query|cts:element-attribute-value-match|cts:element-attribute-value-geospatial-co-occurrences|cts:element-attribute-value-co-occurrences|cts:element-attribute-range-query-weight|cts:element-attribute-range-query-value|cts:element-attribute-range-query-options|cts:element-attribute-range-query-operator|cts:element-attribute-range-query-element-name|cts:element-attribute-range-query-attribute-name|cts:element-attribute-range-query|cts:element-attribute-pair-geospatial-values|cts:element-attribute-pair-geospatial-value-match|cts:element-attribute-pair-geospatial-query-weight|cts:element-attribute-pair-geospatial-query-region|cts:element-attribute-pair-geospatial-query-options|cts:element-attribute-pair-geospatial-query-longitude-name|cts:element-attribute-pair-geospatial-query-latitude-name|cts:element-attribute-pair-geospatial-query-element-name|cts:element-attribute-pair-geospatial-query|cts:element-attribute-pair-geospatial-boxes|cts:document-query-uris|cts:document-query|cts:distance|cts:directory-query-uris|cts:directory-query-depth|cts:directory-query|cts:destination|cts:deregister|cts:contains|cts:confidence|cts:collections|cts:collection-query-uris|cts:collection-query|cts:collection-match|cts:classify|cts:circle-radius|cts:circle-center|cts:circle|cts:box-west|cts:box-south|cts:box-north|cts:box-east|cts:box|cts:bearing|cts:arc-intersection|cts:and-query-queries|cts:and-query-options|cts:and-query|cts:and-not-query-positive-query|cts:and-not-query-negative-query|cts:and-not-query|css:get|css:convert|cpf:success|cpf:failure|cpf:document-set-state|cpf:document-set-processing-status|cpf:document-set-last-updated|cpf:document-set-error|cpf:document-get-state|cpf:document-get-processing-status|cpf:document-get-last-updated|cpf:document-get-error|cpf:check-transition|alert:spawn-matching-actions|alert:rule-user-id-query|alert:rule-set-user-id|alert:rule-set-query|alert:rule-set-options|alert:rule-set-name|alert:rule-set-description|alert:rule-set-action|alert:rule-remove|alert:rule-name-query|alert:rule-insert|alert:rule-id-query|alert:rule-get-user-id|alert:rule-get-query|alert:rule-get-options|alert:rule-get-name|alert:rule-get-id|alert:rule-get-description|alert:rule-get-action|alert:rule-action-query|alert:remove-triggers|alert:make-rule|alert:make-log-action|alert:make-config|alert:make-action|alert:invoke-matching-actions|alert:get-my-rules|alert:get-all-rules|alert:get-actions|alert:find-matching-rules|alert:create-triggers|alert:config-set-uri|alert:config-set-trigger-ids|alert:config-set-options|alert:config-set-name|alert:config-set-description|alert:config-set-cpf-domain-names|alert:config-set-cpf-domain-ids|alert:config-insert|alert:config-get-uri|alert:config-get-trigger-ids|alert:config-get-options|alert:config-get-name|alert:config-get-id|alert:config-get-description|alert:config-get-cpf-domain-names|alert:config-get-cpf-domain-ids|alert:config-get|alert:config-delete|alert:action-set-options|alert:action-set-name|alert:action-set-module-root|alert:action-set-module-db|alert:action-set-module|alert:action-set-description|alert:action-remove|alert:action-insert|alert:action-get-options|alert:action-get-name|alert:action-get-module-root|alert:action-get-module-db|alert:action-get-module|alert:action-get-description|zero-or-one|years-from-duration|year-from-dateTime|year-from-date|upper-case|unordered|true|translate|trace|tokenize|timezone-from-time|timezone-from-dateTime|timezone-from-date|sum|subtract-dateTimes-yielding-yearMonthDuration|subtract-dateTimes-yielding-dayTimeDuration|substring-before|substring-after|substring|subsequence|string-to-codepoints|string-pad|string-length|string-join|string|static-base-uri|starts-with|seconds-from-time|seconds-from-duration|seconds-from-dateTime|round-half-to-even|round|root|reverse|resolve-uri|resolve-QName|replace|remove|QName|prefix-from-QName|position|one-or-more|number|not|normalize-unicode|normalize-space|node-name|node-kind|nilled|namespace-uri-from-QName|namespace-uri-for-prefix|namespace-uri|name|months-from-duration|month-from-dateTime|month-from-date|minutes-from-time|minutes-from-duration|minutes-from-dateTime|min|max|matches|lower-case|local-name-from-QName|local-name|last|lang|iri-to-uri|insert-before|index-of|in-scope-prefixes|implicit-timezone|idref|id|hours-from-time|hours-from-duration|hours-from-dateTime|floor|false|expanded-QName|exists|exactly-one|escape-uri|escape-html-uri|error|ends-with|encode-for-uri|empty|document-uri|doc-available|doc|distinct-values|distinct-nodes|default-collation|deep-equal|days-from-duration|day-from-dateTime|day-from-date|data|current-time|current-dateTime|current-date|count|contains|concat|compare|collection|codepoints-to-string|codepoint-equal|ceiling|boolean|base-uri|avg|adjust-time-to-timezone|adjust-dateTime-to-timezone|adjust-date-to-timezone|abs)\\b/],\n         // Matching normal words if none of the previous regular expressions matched\n         [PR['PR_PLAIN'], /^[A-Za-z0-9_\\-\\:]+/],\n         // Matching whitespaces\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/]\n         ]),\n    ['xq', 'xquery']);\n})();\n","source":"plugins/prettify/lang-xq.js","raw":"/**\n * @license\n * Copyright (C) 2011 Patrick Wied\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @fileoverview\n * Registers a language handler for XQuery.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-xq\"></pre>\n *\n *\n * @author Patrick Wied ( patpa7p@live.de )\n * @version 2010-09-28\n */\n\n(function () {\n// Falls back to plain for stylesheets that don't style fun.\nvar PR_FUNCTION = 'fun pln';\n// Falls back to plaiin for stylesheets that don't style var.\nvar PR_VARIABLE = 'var pln';\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Matching $var-ia_bles\n         [PR_VARIABLE, /^\\$[A-Za-z0-9_\\-]+/, null, \"$\"]\n        ],\n        [\n         // Matching lt and gt operators\n         // Not the best matching solution but you have to differentiate between the gt operator and the tag closing char\n         [PR['PR_PLAIN'], /^[\\s=][<>][\\s=]/],\n         // Matching @Attributes\n         [PR['PR_LITERAL'], /^\\@[\\w-]+/],\n         // Matching xml tags\n         [PR['PR_TAG'], /^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n         // Matching single or multiline xquery comments -> (: <text> :)\n         [PR['PR_COMMENT'], /^\\(:[\\s\\S]*?:\\)/],\n         // Tokenizing /{}:=;*,[]() as plain\n         [PR['PR_PLAIN'], /^[\\/\\{\\};,\\[\\]\\(\\)]$/],\n         // Matching a double or single quoted, possibly multi-line, string.\n         // with the special condition that a { in a string changes to xquery context \n         [PR['PR_STRING'], /^(?:\\\"(?:[^\\\"\\\\\\{]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\\\{]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\''],\n         // Matching standard xquery keywords\n         [PR['PR_KEYWORD'], /^(?:xquery|where|version|variable|union|typeswitch|treat|to|then|text|stable|sortby|some|self|schema|satisfies|returns|return|ref|processing-instruction|preceding-sibling|preceding|precedes|parent|only|of|node|namespace|module|let|item|intersect|instance|in|import|if|function|for|follows|following-sibling|following|external|except|every|else|element|descending|descendant-or-self|descendant|define|default|declare|comment|child|cast|case|before|attribute|assert|ascending|as|ancestor-or-self|ancestor|after|eq|order|by|or|and|schema-element|document-node|node|at)\\b/],\n         // Matching standard xquery types\n         [PR['PR_TYPE'], /^(?:xs:yearMonthDuration|xs:unsignedLong|xs:time|xs:string|xs:short|xs:QName|xs:Name|xs:long|xs:integer|xs:int|xs:gYearMonth|xs:gYear|xs:gMonthDay|xs:gDay|xs:float|xs:duration|xs:double|xs:decimal|xs:dayTimeDuration|xs:dateTime|xs:date|xs:byte|xs:boolean|xs:anyURI|xf:yearMonthDuration)\\b/, null],\n         // Matching standard xquery functions\n         [PR_FUNCTION, /^(?:xp:dereference|xinc:node-expand|xinc:link-references|xinc:link-expand|xhtml:restructure|xhtml:clean|xhtml:add-lists|xdmp:zip-manifest|xdmp:zip-get|xdmp:zip-create|xdmp:xquery-version|xdmp:word-convert|xdmp:with-namespaces|xdmp:version|xdmp:value|xdmp:user-roles|xdmp:user-last-login|xdmp:user|xdmp:url-encode|xdmp:url-decode|xdmp:uri-is-file|xdmp:uri-format|xdmp:uri-content-type|xdmp:unquote|xdmp:unpath|xdmp:triggers-database|xdmp:trace|xdmp:to-json|xdmp:tidy|xdmp:subbinary|xdmp:strftime|xdmp:spawn-in|xdmp:spawn|xdmp:sleep|xdmp:shutdown|xdmp:set-session-field|xdmp:set-response-encoding|xdmp:set-response-content-type|xdmp:set-response-code|xdmp:set-request-time-limit|xdmp:set|xdmp:servers|xdmp:server-status|xdmp:server-name|xdmp:server|xdmp:security-database|xdmp:security-assert|xdmp:schema-database|xdmp:save|xdmp:role-roles|xdmp:role|xdmp:rethrow|xdmp:restart|xdmp:request-timestamp|xdmp:request-status|xdmp:request-cancel|xdmp:request|xdmp:redirect-response|xdmp:random|xdmp:quote|xdmp:query-trace|xdmp:query-meters|xdmp:product-edition|xdmp:privilege-roles|xdmp:privilege|xdmp:pretty-print|xdmp:powerpoint-convert|xdmp:platform|xdmp:permission|xdmp:pdf-convert|xdmp:path|xdmp:octal-to-integer|xdmp:node-uri|xdmp:node-replace|xdmp:node-kind|xdmp:node-insert-child|xdmp:node-insert-before|xdmp:node-insert-after|xdmp:node-delete|xdmp:node-database|xdmp:mul64|xdmp:modules-root|xdmp:modules-database|xdmp:merging|xdmp:merge-cancel|xdmp:merge|xdmp:md5|xdmp:logout|xdmp:login|xdmp:log-level|xdmp:log|xdmp:lock-release|xdmp:lock-acquire|xdmp:load|xdmp:invoke-in|xdmp:invoke|xdmp:integer-to-octal|xdmp:integer-to-hex|xdmp:http-put|xdmp:http-post|xdmp:http-options|xdmp:http-head|xdmp:http-get|xdmp:http-delete|xdmp:hosts|xdmp:host-status|xdmp:host-name|xdmp:host|xdmp:hex-to-integer|xdmp:hash64|xdmp:hash32|xdmp:has-privilege|xdmp:groups|xdmp:group-serves|xdmp:group-servers|xdmp:group-name|xdmp:group-hosts|xdmp:group|xdmp:get-session-field-names|xdmp:get-session-field|xdmp:get-response-encoding|xdmp:get-response-code|xdmp:get-request-username|xdmp:get-request-user|xdmp:get-request-url|xdmp:get-request-protocol|xdmp:get-request-path|xdmp:get-request-method|xdmp:get-request-header-names|xdmp:get-request-header|xdmp:get-request-field-names|xdmp:get-request-field-filename|xdmp:get-request-field-content-type|xdmp:get-request-field|xdmp:get-request-client-certificate|xdmp:get-request-client-address|xdmp:get-request-body|xdmp:get-current-user|xdmp:get-current-roles|xdmp:get|xdmp:function-name|xdmp:function-module|xdmp:function|xdmp:from-json|xdmp:forests|xdmp:forest-status|xdmp:forest-restore|xdmp:forest-restart|xdmp:forest-name|xdmp:forest-delete|xdmp:forest-databases|xdmp:forest-counts|xdmp:forest-clear|xdmp:forest-backup|xdmp:forest|xdmp:filesystem-file|xdmp:filesystem-directory|xdmp:exists|xdmp:excel-convert|xdmp:eval-in|xdmp:eval|xdmp:estimate|xdmp:email|xdmp:element-content-type|xdmp:elapsed-time|xdmp:document-set-quality|xdmp:document-set-property|xdmp:document-set-properties|xdmp:document-set-permissions|xdmp:document-set-collections|xdmp:document-remove-properties|xdmp:document-remove-permissions|xdmp:document-remove-collections|xdmp:document-properties|xdmp:document-locks|xdmp:document-load|xdmp:document-insert|xdmp:document-get-quality|xdmp:document-get-properties|xdmp:document-get-permissions|xdmp:document-get-collections|xdmp:document-get|xdmp:document-forest|xdmp:document-delete|xdmp:document-add-properties|xdmp:document-add-permissions|xdmp:document-add-collections|xdmp:directory-properties|xdmp:directory-locks|xdmp:directory-delete|xdmp:directory-create|xdmp:directory|xdmp:diacritic-less|xdmp:describe|xdmp:default-permissions|xdmp:default-collections|xdmp:databases|xdmp:database-restore-validate|xdmp:database-restore-status|xdmp:database-restore-cancel|xdmp:database-restore|xdmp:database-name|xdmp:database-forests|xdmp:database-backup-validate|xdmp:database-backup-status|xdmp:database-backup-purge|xdmp:database-backup-cancel|xdmp:database-backup|xdmp:database|xdmp:collection-properties|xdmp:collection-locks|xdmp:collection-delete|xdmp:collation-canonical-uri|xdmp:castable-as|xdmp:can-grant-roles|xdmp:base64-encode|xdmp:base64-decode|xdmp:architecture|xdmp:apply|xdmp:amp-roles|xdmp:amp|xdmp:add64|xdmp:add-response-header|xdmp:access|trgr:trigger-set-recursive|trgr:trigger-set-permissions|trgr:trigger-set-name|trgr:trigger-set-module|trgr:trigger-set-event|trgr:trigger-set-description|trgr:trigger-remove-permissions|trgr:trigger-module|trgr:trigger-get-permissions|trgr:trigger-enable|trgr:trigger-disable|trgr:trigger-database-online-event|trgr:trigger-data-event|trgr:trigger-add-permissions|trgr:remove-trigger|trgr:property-content|trgr:pre-commit|trgr:post-commit|trgr:get-trigger-by-id|trgr:get-trigger|trgr:document-scope|trgr:document-content|trgr:directory-scope|trgr:create-trigger|trgr:collection-scope|trgr:any-property-content|thsr:set-entry|thsr:remove-term|thsr:remove-synonym|thsr:remove-entry|thsr:query-lookup|thsr:lookup|thsr:load|thsr:insert|thsr:expand|thsr:add-synonym|spell:suggest-detailed|spell:suggest|spell:remove-word|spell:make-dictionary|spell:load|spell:levenshtein-distance|spell:is-correct|spell:insert|spell:double-metaphone|spell:add-word|sec:users-collection|sec:user-set-roles|sec:user-set-password|sec:user-set-name|sec:user-set-description|sec:user-set-default-permissions|sec:user-set-default-collections|sec:user-remove-roles|sec:user-privileges|sec:user-get-roles|sec:user-get-description|sec:user-get-default-permissions|sec:user-get-default-collections|sec:user-doc-permissions|sec:user-doc-collections|sec:user-add-roles|sec:unprotect-collection|sec:uid-for-name|sec:set-realm|sec:security-version|sec:security-namespace|sec:security-installed|sec:security-collection|sec:roles-collection|sec:role-set-roles|sec:role-set-name|sec:role-set-description|sec:role-set-default-permissions|sec:role-set-default-collections|sec:role-remove-roles|sec:role-privileges|sec:role-get-roles|sec:role-get-description|sec:role-get-default-permissions|sec:role-get-default-collections|sec:role-doc-permissions|sec:role-doc-collections|sec:role-add-roles|sec:remove-user|sec:remove-role-from-users|sec:remove-role-from-role|sec:remove-role-from-privileges|sec:remove-role-from-amps|sec:remove-role|sec:remove-privilege|sec:remove-amp|sec:protect-collection|sec:privileges-collection|sec:privilege-set-roles|sec:privilege-set-name|sec:privilege-remove-roles|sec:privilege-get-roles|sec:privilege-add-roles|sec:priv-doc-permissions|sec:priv-doc-collections|sec:get-user-names|sec:get-unique-elem-id|sec:get-role-names|sec:get-role-ids|sec:get-privilege|sec:get-distinct-permissions|sec:get-collection|sec:get-amp|sec:create-user-with-role|sec:create-user|sec:create-role|sec:create-privilege|sec:create-amp|sec:collections-collection|sec:collection-set-permissions|sec:collection-remove-permissions|sec:collection-get-permissions|sec:collection-add-permissions|sec:check-admin|sec:amps-collection|sec:amp-set-roles|sec:amp-remove-roles|sec:amp-get-roles|sec:amp-doc-permissions|sec:amp-doc-collections|sec:amp-add-roles|search:unparse|search:suggest|search:snippet|search:search|search:resolve-nodes|search:resolve|search:remove-constraint|search:parse|search:get-default-options|search:estimate|search:check-options|prof:value|prof:reset|prof:report|prof:invoke|prof:eval|prof:enable|prof:disable|prof:allowed|ppt:clean|pki:template-set-request|pki:template-set-name|pki:template-set-key-type|pki:template-set-key-options|pki:template-set-description|pki:template-in-use|pki:template-get-version|pki:template-get-request|pki:template-get-name|pki:template-get-key-type|pki:template-get-key-options|pki:template-get-id|pki:template-get-description|pki:need-certificate|pki:is-temporary|pki:insert-trusted-certificates|pki:insert-template|pki:insert-signed-certificates|pki:insert-certificate-revocation-list|pki:get-trusted-certificate-ids|pki:get-template-ids|pki:get-template-certificate-authority|pki:get-template-by-name|pki:get-template|pki:get-pending-certificate-requests-xml|pki:get-pending-certificate-requests-pem|pki:get-pending-certificate-request|pki:get-certificates-for-template-xml|pki:get-certificates-for-template|pki:get-certificates|pki:get-certificate-xml|pki:get-certificate-pem|pki:get-certificate|pki:generate-temporary-certificate-if-necessary|pki:generate-temporary-certificate|pki:generate-template-certificate-authority|pki:generate-certificate-request|pki:delete-template|pki:delete-certificate|pki:create-template|pdf:make-toc|pdf:insert-toc-headers|pdf:get-toc|pdf:clean|p:status-transition|p:state-transition|p:remove|p:pipelines|p:insert|p:get-by-id|p:get|p:execute|p:create|p:condition|p:collection|p:action|ooxml:runs-merge|ooxml:package-uris|ooxml:package-parts-insert|ooxml:package-parts|msword:clean|mcgm:polygon|mcgm:point|mcgm:geospatial-query-from-elements|mcgm:geospatial-query|mcgm:circle|math:tanh|math:tan|math:sqrt|math:sinh|math:sin|math:pow|math:modf|math:log10|math:log|math:ldexp|math:frexp|math:fmod|math:floor|math:fabs|math:exp|math:cosh|math:cos|math:ceil|math:atan2|math:atan|math:asin|math:acos|map:put|map:map|map:keys|map:get|map:delete|map:count|map:clear|lnk:to|lnk:remove|lnk:insert|lnk:get|lnk:from|lnk:create|kml:polygon|kml:point|kml:interior-polygon|kml:geospatial-query-from-elements|kml:geospatial-query|kml:circle|kml:box|gml:polygon|gml:point|gml:interior-polygon|gml:geospatial-query-from-elements|gml:geospatial-query|gml:circle|gml:box|georss:point|georss:geospatial-query|georss:circle|geo:polygon|geo:point|geo:interior-polygon|geo:geospatial-query-from-elements|geo:geospatial-query|geo:circle|geo:box|fn:zero-or-one|fn:years-from-duration|fn:year-from-dateTime|fn:year-from-date|fn:upper-case|fn:unordered|fn:true|fn:translate|fn:trace|fn:tokenize|fn:timezone-from-time|fn:timezone-from-dateTime|fn:timezone-from-date|fn:sum|fn:subtract-dateTimes-yielding-yearMonthDuration|fn:subtract-dateTimes-yielding-dayTimeDuration|fn:substring-before|fn:substring-after|fn:substring|fn:subsequence|fn:string-to-codepoints|fn:string-pad|fn:string-length|fn:string-join|fn:string|fn:static-base-uri|fn:starts-with|fn:seconds-from-time|fn:seconds-from-duration|fn:seconds-from-dateTime|fn:round-half-to-even|fn:round|fn:root|fn:reverse|fn:resolve-uri|fn:resolve-QName|fn:replace|fn:remove|fn:QName|fn:prefix-from-QName|fn:position|fn:one-or-more|fn:number|fn:not|fn:normalize-unicode|fn:normalize-space|fn:node-name|fn:node-kind|fn:nilled|fn:namespace-uri-from-QName|fn:namespace-uri-for-prefix|fn:namespace-uri|fn:name|fn:months-from-duration|fn:month-from-dateTime|fn:month-from-date|fn:minutes-from-time|fn:minutes-from-duration|fn:minutes-from-dateTime|fn:min|fn:max|fn:matches|fn:lower-case|fn:local-name-from-QName|fn:local-name|fn:last|fn:lang|fn:iri-to-uri|fn:insert-before|fn:index-of|fn:in-scope-prefixes|fn:implicit-timezone|fn:idref|fn:id|fn:hours-from-time|fn:hours-from-duration|fn:hours-from-dateTime|fn:floor|fn:false|fn:expanded-QName|fn:exists|fn:exactly-one|fn:escape-uri|fn:escape-html-uri|fn:error|fn:ends-with|fn:encode-for-uri|fn:empty|fn:document-uri|fn:doc-available|fn:doc|fn:distinct-values|fn:distinct-nodes|fn:default-collation|fn:deep-equal|fn:days-from-duration|fn:day-from-dateTime|fn:day-from-date|fn:data|fn:current-time|fn:current-dateTime|fn:current-date|fn:count|fn:contains|fn:concat|fn:compare|fn:collection|fn:codepoints-to-string|fn:codepoint-equal|fn:ceiling|fn:boolean|fn:base-uri|fn:avg|fn:adjust-time-to-timezone|fn:adjust-dateTime-to-timezone|fn:adjust-date-to-timezone|fn:abs|feed:unsubscribe|feed:subscription|feed:subscribe|feed:request|feed:item|feed:description|excel:clean|entity:enrich|dom:set-pipelines|dom:set-permissions|dom:set-name|dom:set-evaluation-context|dom:set-domain-scope|dom:set-description|dom:remove-pipeline|dom:remove-permissions|dom:remove|dom:get|dom:evaluation-context|dom:domains|dom:domain-scope|dom:create|dom:configuration-set-restart-user|dom:configuration-set-permissions|dom:configuration-set-evaluation-context|dom:configuration-set-default-domain|dom:configuration-get|dom:configuration-create|dom:collection|dom:add-pipeline|dom:add-permissions|dls:retention-rules|dls:retention-rule-remove|dls:retention-rule-insert|dls:retention-rule|dls:purge|dls:node-expand|dls:link-references|dls:link-expand|dls:documents-query|dls:document-versions-query|dls:document-version-uri|dls:document-version-query|dls:document-version-delete|dls:document-version-as-of|dls:document-version|dls:document-update|dls:document-unmanage|dls:document-set-quality|dls:document-set-property|dls:document-set-properties|dls:document-set-permissions|dls:document-set-collections|dls:document-retention-rules|dls:document-remove-properties|dls:document-remove-permissions|dls:document-remove-collections|dls:document-purge|dls:document-manage|dls:document-is-managed|dls:document-insert-and-manage|dls:document-include-query|dls:document-history|dls:document-get-permissions|dls:document-extract-part|dls:document-delete|dls:document-checkout-status|dls:document-checkout|dls:document-checkin|dls:document-add-properties|dls:document-add-permissions|dls:document-add-collections|dls:break-checkout|dls:author-query|dls:as-of-query|dbk:convert|dbg:wait|dbg:value|dbg:stopped|dbg:stop|dbg:step|dbg:status|dbg:stack|dbg:out|dbg:next|dbg:line|dbg:invoke|dbg:function|dbg:finish|dbg:expr|dbg:eval|dbg:disconnect|dbg:detach|dbg:continue|dbg:connect|dbg:clear|dbg:breakpoints|dbg:break|dbg:attached|dbg:attach|cvt:save-converted-documents|cvt:part-uri|cvt:destination-uri|cvt:basepath|cvt:basename|cts:words|cts:word-query-weight|cts:word-query-text|cts:word-query-options|cts:word-query|cts:word-match|cts:walk|cts:uris|cts:uri-match|cts:train|cts:tokenize|cts:thresholds|cts:stem|cts:similar-query-weight|cts:similar-query-nodes|cts:similar-query|cts:shortest-distance|cts:search|cts:score|cts:reverse-query-weight|cts:reverse-query-nodes|cts:reverse-query|cts:remainder|cts:registered-query-weight|cts:registered-query-options|cts:registered-query-ids|cts:registered-query|cts:register|cts:query|cts:quality|cts:properties-query-query|cts:properties-query|cts:polygon-vertices|cts:polygon|cts:point-longitude|cts:point-latitude|cts:point|cts:or-query-queries|cts:or-query|cts:not-query-weight|cts:not-query-query|cts:not-query|cts:near-query-weight|cts:near-query-queries|cts:near-query-options|cts:near-query-distance|cts:near-query|cts:highlight|cts:geospatial-co-occurrences|cts:frequency|cts:fitness|cts:field-words|cts:field-word-query-weight|cts:field-word-query-text|cts:field-word-query-options|cts:field-word-query-field-name|cts:field-word-query|cts:field-word-match|cts:entity-highlight|cts:element-words|cts:element-word-query-weight|cts:element-word-query-text|cts:element-word-query-options|cts:element-word-query-element-name|cts:element-word-query|cts:element-word-match|cts:element-values|cts:element-value-ranges|cts:element-value-query-weight|cts:element-value-query-text|cts:element-value-query-options|cts:element-value-query-element-name|cts:element-value-query|cts:element-value-match|cts:element-value-geospatial-co-occurrences|cts:element-value-co-occurrences|cts:element-range-query-weight|cts:element-range-query-value|cts:element-range-query-options|cts:element-range-query-operator|cts:element-range-query-element-name|cts:element-range-query|cts:element-query-query|cts:element-query-element-name|cts:element-query|cts:element-pair-geospatial-values|cts:element-pair-geospatial-value-match|cts:element-pair-geospatial-query-weight|cts:element-pair-geospatial-query-region|cts:element-pair-geospatial-query-options|cts:element-pair-geospatial-query-longitude-name|cts:element-pair-geospatial-query-latitude-name|cts:element-pair-geospatial-query-element-name|cts:element-pair-geospatial-query|cts:element-pair-geospatial-boxes|cts:element-geospatial-values|cts:element-geospatial-value-match|cts:element-geospatial-query-weight|cts:element-geospatial-query-region|cts:element-geospatial-query-options|cts:element-geospatial-query-element-name|cts:element-geospatial-query|cts:element-geospatial-boxes|cts:element-child-geospatial-values|cts:element-child-geospatial-value-match|cts:element-child-geospatial-query-weight|cts:element-child-geospatial-query-region|cts:element-child-geospatial-query-options|cts:element-child-geospatial-query-element-name|cts:element-child-geospatial-query-child-name|cts:element-child-geospatial-query|cts:element-child-geospatial-boxes|cts:element-attribute-words|cts:element-attribute-word-query-weight|cts:element-attribute-word-query-text|cts:element-attribute-word-query-options|cts:element-attribute-word-query-element-name|cts:element-attribute-word-query-attribute-name|cts:element-attribute-word-query|cts:element-attribute-word-match|cts:element-attribute-values|cts:element-attribute-value-ranges|cts:element-attribute-value-query-weight|cts:element-attribute-value-query-text|cts:element-attribute-value-query-options|cts:element-attribute-value-query-element-name|cts:element-attribute-value-query-attribute-name|cts:element-attribute-value-query|cts:element-attribute-value-match|cts:element-attribute-value-geospatial-co-occurrences|cts:element-attribute-value-co-occurrences|cts:element-attribute-range-query-weight|cts:element-attribute-range-query-value|cts:element-attribute-range-query-options|cts:element-attribute-range-query-operator|cts:element-attribute-range-query-element-name|cts:element-attribute-range-query-attribute-name|cts:element-attribute-range-query|cts:element-attribute-pair-geospatial-values|cts:element-attribute-pair-geospatial-value-match|cts:element-attribute-pair-geospatial-query-weight|cts:element-attribute-pair-geospatial-query-region|cts:element-attribute-pair-geospatial-query-options|cts:element-attribute-pair-geospatial-query-longitude-name|cts:element-attribute-pair-geospatial-query-latitude-name|cts:element-attribute-pair-geospatial-query-element-name|cts:element-attribute-pair-geospatial-query|cts:element-attribute-pair-geospatial-boxes|cts:document-query-uris|cts:document-query|cts:distance|cts:directory-query-uris|cts:directory-query-depth|cts:directory-query|cts:destination|cts:deregister|cts:contains|cts:confidence|cts:collections|cts:collection-query-uris|cts:collection-query|cts:collection-match|cts:classify|cts:circle-radius|cts:circle-center|cts:circle|cts:box-west|cts:box-south|cts:box-north|cts:box-east|cts:box|cts:bearing|cts:arc-intersection|cts:and-query-queries|cts:and-query-options|cts:and-query|cts:and-not-query-positive-query|cts:and-not-query-negative-query|cts:and-not-query|css:get|css:convert|cpf:success|cpf:failure|cpf:document-set-state|cpf:document-set-processing-status|cpf:document-set-last-updated|cpf:document-set-error|cpf:document-get-state|cpf:document-get-processing-status|cpf:document-get-last-updated|cpf:document-get-error|cpf:check-transition|alert:spawn-matching-actions|alert:rule-user-id-query|alert:rule-set-user-id|alert:rule-set-query|alert:rule-set-options|alert:rule-set-name|alert:rule-set-description|alert:rule-set-action|alert:rule-remove|alert:rule-name-query|alert:rule-insert|alert:rule-id-query|alert:rule-get-user-id|alert:rule-get-query|alert:rule-get-options|alert:rule-get-name|alert:rule-get-id|alert:rule-get-description|alert:rule-get-action|alert:rule-action-query|alert:remove-triggers|alert:make-rule|alert:make-log-action|alert:make-config|alert:make-action|alert:invoke-matching-actions|alert:get-my-rules|alert:get-all-rules|alert:get-actions|alert:find-matching-rules|alert:create-triggers|alert:config-set-uri|alert:config-set-trigger-ids|alert:config-set-options|alert:config-set-name|alert:config-set-description|alert:config-set-cpf-domain-names|alert:config-set-cpf-domain-ids|alert:config-insert|alert:config-get-uri|alert:config-get-trigger-ids|alert:config-get-options|alert:config-get-name|alert:config-get-id|alert:config-get-description|alert:config-get-cpf-domain-names|alert:config-get-cpf-domain-ids|alert:config-get|alert:config-delete|alert:action-set-options|alert:action-set-name|alert:action-set-module-root|alert:action-set-module-db|alert:action-set-module|alert:action-set-description|alert:action-remove|alert:action-insert|alert:action-get-options|alert:action-get-name|alert:action-get-module-root|alert:action-get-module-db|alert:action-get-module|alert:action-get-description|zero-or-one|years-from-duration|year-from-dateTime|year-from-date|upper-case|unordered|true|translate|trace|tokenize|timezone-from-time|timezone-from-dateTime|timezone-from-date|sum|subtract-dateTimes-yielding-yearMonthDuration|subtract-dateTimes-yielding-dayTimeDuration|substring-before|substring-after|substring|subsequence|string-to-codepoints|string-pad|string-length|string-join|string|static-base-uri|starts-with|seconds-from-time|seconds-from-duration|seconds-from-dateTime|round-half-to-even|round|root|reverse|resolve-uri|resolve-QName|replace|remove|QName|prefix-from-QName|position|one-or-more|number|not|normalize-unicode|normalize-space|node-name|node-kind|nilled|namespace-uri-from-QName|namespace-uri-for-prefix|namespace-uri|name|months-from-duration|month-from-dateTime|month-from-date|minutes-from-time|minutes-from-duration|minutes-from-dateTime|min|max|matches|lower-case|local-name-from-QName|local-name|last|lang|iri-to-uri|insert-before|index-of|in-scope-prefixes|implicit-timezone|idref|id|hours-from-time|hours-from-duration|hours-from-dateTime|floor|false|expanded-QName|exists|exactly-one|escape-uri|escape-html-uri|error|ends-with|encode-for-uri|empty|document-uri|doc-available|doc|distinct-values|distinct-nodes|default-collation|deep-equal|days-from-duration|day-from-dateTime|day-from-date|data|current-time|current-dateTime|current-date|count|contains|concat|compare|collection|codepoints-to-string|codepoint-equal|ceiling|boolean|base-uri|avg|adjust-time-to-timezone|adjust-dateTime-to-timezone|adjust-date-to-timezone|abs)\\b/],\n         // Matching normal words if none of the previous regular expressions matched\n         [PR['PR_PLAIN'], /^[A-Za-z0-9_\\-\\:]+/],\n         // Matching whitespaces\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/]\n         ]),\n    ['xq', 'xquery']);\n})();\n","date":"2019-04-30T08:09:45.644Z","updated":"2019-04-30T08:09:45.643Z","path":"plugins/prettify/lang-xq.js","layout":"false","title":"","comments":1,"_id":"cjxh80em5001z6c9v22i21u8i","content":"/**\n * @license\n * Copyright (C) 2011 Patrick Wied\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @fileoverview\n * Registers a language handler for XQuery.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-xq\"></pre>\n *\n *\n * @author Patrick Wied ( patpa7p@live.de )\n * @version 2010-09-28\n */\n\n(function () {\n// Falls back to plain for stylesheets that don't style fun.\nvar PR_FUNCTION = 'fun pln';\n// Falls back to plaiin for stylesheets that don't style var.\nvar PR_VARIABLE = 'var pln';\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Matching $var-ia_bles\n         [PR_VARIABLE, /^\\$[A-Za-z0-9_\\-]+/, null, \"$\"]\n        ],\n        [\n         // Matching lt and gt operators\n         // Not the best matching solution but you have to differentiate between the gt operator and the tag closing char\n         [PR['PR_PLAIN'], /^[\\s=][<>][\\s=]/],\n         // Matching @Attributes\n         [PR['PR_LITERAL'], /^\\@[\\w-]+/],\n         // Matching xml tags\n         [PR['PR_TAG'], /^<\\ ?[a-z](?:[\\w.:-]*\\w)?|\\ ?>$/i],\n         // Matching single or multiline xquery comments -> (: <text> :)\n         [PR['PR_COMMENT'], /^\\(:[\\s\\S]*?:\\)/],\n         // Tokenizing /{}:=;*,[]() as plain\n         [PR['PR_PLAIN'], /^[\\/\\{\\};,\\[\\]\\(\\)]$/],\n         // Matching a double or single quoted, possibly multi-line, string.\n         // with the special condition that a { in a string changes to xquery context \n         [PR['PR_STRING'], /^(?:\\\"(?:[^\\\"\\\\\\{]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\\\{]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\''],\n         // Matching standard xquery keywords\n         [PR['PR_KEYWORD'], /^(?:xquery|where|version|variable|union|typeswitch|treat|to|then|text|stable|sortby|some|self|schema|satisfies|returns|return|ref|processing-instruction|preceding-sibling|preceding|precedes|parent|only|of|node|namespace|module|let|item|intersect|instance|in|import|if|function|for|follows|following-sibling|following|external|except|every|else|element|descending|descendant-or-self|descendant|define|default|declare|comment|child|cast|case|before|attribute|assert|ascending|as|ancestor-or-self|ancestor|after|eq|order|by|or|and|schema-element|document-node|node|at)\\b/],\n         // Matching standard xquery types\n         [PR['PR_TYPE'], /^(?:xs:yearMonthDuration|xs:unsignedLong|xs:time|xs:string|xs:short|xs:QName|xs:Name|xs:long|xs:integer|xs:int|xs:gYearMonth|xs:gYear|xs:gMonthDay|xs:gDay|xs:float|xs:duration|xs:double|xs:decimal|xs:dayTimeDuration|xs:dateTime|xs:date|xs:byte|xs:boolean|xs:anyURI|xf:yearMonthDuration)\\b/, null],\n         // Matching standard xquery functions\n         [PR_FUNCTION, /^(?:xp:dereference|xinc:node-expand|xinc:link-references|xinc:link-expand|xhtml:restructure|xhtml:clean|xhtml:add-lists|xdmp:zip-manifest|xdmp:zip-get|xdmp:zip-create|xdmp:xquery-version|xdmp:word-convert|xdmp:with-namespaces|xdmp:version|xdmp:value|xdmp:user-roles|xdmp:user-last-login|xdmp:user|xdmp:url-encode|xdmp:url-decode|xdmp:uri-is-file|xdmp:uri-format|xdmp:uri-content-type|xdmp:unquote|xdmp:unpath|xdmp:triggers-database|xdmp:trace|xdmp:to-json|xdmp:tidy|xdmp:subbinary|xdmp:strftime|xdmp:spawn-in|xdmp:spawn|xdmp:sleep|xdmp:shutdown|xdmp:set-session-field|xdmp:set-response-encoding|xdmp:set-response-content-type|xdmp:set-response-code|xdmp:set-request-time-limit|xdmp:set|xdmp:servers|xdmp:server-status|xdmp:server-name|xdmp:server|xdmp:security-database|xdmp:security-assert|xdmp:schema-database|xdmp:save|xdmp:role-roles|xdmp:role|xdmp:rethrow|xdmp:restart|xdmp:request-timestamp|xdmp:request-status|xdmp:request-cancel|xdmp:request|xdmp:redirect-response|xdmp:random|xdmp:quote|xdmp:query-trace|xdmp:query-meters|xdmp:product-edition|xdmp:privilege-roles|xdmp:privilege|xdmp:pretty-print|xdmp:powerpoint-convert|xdmp:platform|xdmp:permission|xdmp:pdf-convert|xdmp:path|xdmp:octal-to-integer|xdmp:node-uri|xdmp:node-replace|xdmp:node-kind|xdmp:node-insert-child|xdmp:node-insert-before|xdmp:node-insert-after|xdmp:node-delete|xdmp:node-database|xdmp:mul64|xdmp:modules-root|xdmp:modules-database|xdmp:merging|xdmp:merge-cancel|xdmp:merge|xdmp:md5|xdmp:logout|xdmp:login|xdmp:log-level|xdmp:log|xdmp:lock-release|xdmp:lock-acquire|xdmp:load|xdmp:invoke-in|xdmp:invoke|xdmp:integer-to-octal|xdmp:integer-to-hex|xdmp:http-put|xdmp:http-post|xdmp:http-options|xdmp:http-head|xdmp:http-get|xdmp:http-delete|xdmp:hosts|xdmp:host-status|xdmp:host-name|xdmp:host|xdmp:hex-to-integer|xdmp:hash64|xdmp:hash32|xdmp:has-privilege|xdmp:groups|xdmp:group-serves|xdmp:group-servers|xdmp:group-name|xdmp:group-hosts|xdmp:group|xdmp:get-session-field-names|xdmp:get-session-field|xdmp:get-response-encoding|xdmp:get-response-code|xdmp:get-request-username|xdmp:get-request-user|xdmp:get-request-url|xdmp:get-request-protocol|xdmp:get-request-path|xdmp:get-request-method|xdmp:get-request-header-names|xdmp:get-request-header|xdmp:get-request-field-names|xdmp:get-request-field-filename|xdmp:get-request-field-content-type|xdmp:get-request-field|xdmp:get-request-client-certificate|xdmp:get-request-client-address|xdmp:get-request-body|xdmp:get-current-user|xdmp:get-current-roles|xdmp:get|xdmp:function-name|xdmp:function-module|xdmp:function|xdmp:from-json|xdmp:forests|xdmp:forest-status|xdmp:forest-restore|xdmp:forest-restart|xdmp:forest-name|xdmp:forest-delete|xdmp:forest-databases|xdmp:forest-counts|xdmp:forest-clear|xdmp:forest-backup|xdmp:forest|xdmp:filesystem-file|xdmp:filesystem-directory|xdmp:exists|xdmp:excel-convert|xdmp:eval-in|xdmp:eval|xdmp:estimate|xdmp:email|xdmp:element-content-type|xdmp:elapsed-time|xdmp:document-set-quality|xdmp:document-set-property|xdmp:document-set-properties|xdmp:document-set-permissions|xdmp:document-set-collections|xdmp:document-remove-properties|xdmp:document-remove-permissions|xdmp:document-remove-collections|xdmp:document-properties|xdmp:document-locks|xdmp:document-load|xdmp:document-insert|xdmp:document-get-quality|xdmp:document-get-properties|xdmp:document-get-permissions|xdmp:document-get-collections|xdmp:document-get|xdmp:document-forest|xdmp:document-delete|xdmp:document-add-properties|xdmp:document-add-permissions|xdmp:document-add-collections|xdmp:directory-properties|xdmp:directory-locks|xdmp:directory-delete|xdmp:directory-create|xdmp:directory|xdmp:diacritic-less|xdmp:describe|xdmp:default-permissions|xdmp:default-collections|xdmp:databases|xdmp:database-restore-validate|xdmp:database-restore-status|xdmp:database-restore-cancel|xdmp:database-restore|xdmp:database-name|xdmp:database-forests|xdmp:database-backup-validate|xdmp:database-backup-status|xdmp:database-backup-purge|xdmp:database-backup-cancel|xdmp:database-backup|xdmp:database|xdmp:collection-properties|xdmp:collection-locks|xdmp:collection-delete|xdmp:collation-canonical-uri|xdmp:castable-as|xdmp:can-grant-roles|xdmp:base64-encode|xdmp:base64-decode|xdmp:architecture|xdmp:apply|xdmp:amp-roles|xdmp:amp|xdmp:add64|xdmp:add-response-header|xdmp:access|trgr:trigger-set-recursive|trgr:trigger-set-permissions|trgr:trigger-set-name|trgr:trigger-set-module|trgr:trigger-set-event|trgr:trigger-set-description|trgr:trigger-remove-permissions|trgr:trigger-module|trgr:trigger-get-permissions|trgr:trigger-enable|trgr:trigger-disable|trgr:trigger-database-online-event|trgr:trigger-data-event|trgr:trigger-add-permissions|trgr:remove-trigger|trgr:property-content|trgr:pre-commit|trgr:post-commit|trgr:get-trigger-by-id|trgr:get-trigger|trgr:document-scope|trgr:document-content|trgr:directory-scope|trgr:create-trigger|trgr:collection-scope|trgr:any-property-content|thsr:set-entry|thsr:remove-term|thsr:remove-synonym|thsr:remove-entry|thsr:query-lookup|thsr:lookup|thsr:load|thsr:insert|thsr:expand|thsr:add-synonym|spell:suggest-detailed|spell:suggest|spell:remove-word|spell:make-dictionary|spell:load|spell:levenshtein-distance|spell:is-correct|spell:insert|spell:double-metaphone|spell:add-word|sec:users-collection|sec:user-set-roles|sec:user-set-password|sec:user-set-name|sec:user-set-description|sec:user-set-default-permissions|sec:user-set-default-collections|sec:user-remove-roles|sec:user-privileges|sec:user-get-roles|sec:user-get-description|sec:user-get-default-permissions|sec:user-get-default-collections|sec:user-doc-permissions|sec:user-doc-collections|sec:user-add-roles|sec:unprotect-collection|sec:uid-for-name|sec:set-realm|sec:security-version|sec:security-namespace|sec:security-installed|sec:security-collection|sec:roles-collection|sec:role-set-roles|sec:role-set-name|sec:role-set-description|sec:role-set-default-permissions|sec:role-set-default-collections|sec:role-remove-roles|sec:role-privileges|sec:role-get-roles|sec:role-get-description|sec:role-get-default-permissions|sec:role-get-default-collections|sec:role-doc-permissions|sec:role-doc-collections|sec:role-add-roles|sec:remove-user|sec:remove-role-from-users|sec:remove-role-from-role|sec:remove-role-from-privileges|sec:remove-role-from-amps|sec:remove-role|sec:remove-privilege|sec:remove-amp|sec:protect-collection|sec:privileges-collection|sec:privilege-set-roles|sec:privilege-set-name|sec:privilege-remove-roles|sec:privilege-get-roles|sec:privilege-add-roles|sec:priv-doc-permissions|sec:priv-doc-collections|sec:get-user-names|sec:get-unique-elem-id|sec:get-role-names|sec:get-role-ids|sec:get-privilege|sec:get-distinct-permissions|sec:get-collection|sec:get-amp|sec:create-user-with-role|sec:create-user|sec:create-role|sec:create-privilege|sec:create-amp|sec:collections-collection|sec:collection-set-permissions|sec:collection-remove-permissions|sec:collection-get-permissions|sec:collection-add-permissions|sec:check-admin|sec:amps-collection|sec:amp-set-roles|sec:amp-remove-roles|sec:amp-get-roles|sec:amp-doc-permissions|sec:amp-doc-collections|sec:amp-add-roles|search:unparse|search:suggest|search:snippet|search:search|search:resolve-nodes|search:resolve|search:remove-constraint|search:parse|search:get-default-options|search:estimate|search:check-options|prof:value|prof:reset|prof:report|prof:invoke|prof:eval|prof:enable|prof:disable|prof:allowed|ppt:clean|pki:template-set-request|pki:template-set-name|pki:template-set-key-type|pki:template-set-key-options|pki:template-set-description|pki:template-in-use|pki:template-get-version|pki:template-get-request|pki:template-get-name|pki:template-get-key-type|pki:template-get-key-options|pki:template-get-id|pki:template-get-description|pki:need-certificate|pki:is-temporary|pki:insert-trusted-certificates|pki:insert-template|pki:insert-signed-certificates|pki:insert-certificate-revocation-list|pki:get-trusted-certificate-ids|pki:get-template-ids|pki:get-template-certificate-authority|pki:get-template-by-name|pki:get-template|pki:get-pending-certificate-requests-xml|pki:get-pending-certificate-requests-pem|pki:get-pending-certificate-request|pki:get-certificates-for-template-xml|pki:get-certificates-for-template|pki:get-certificates|pki:get-certificate-xml|pki:get-certificate-pem|pki:get-certificate|pki:generate-temporary-certificate-if-necessary|pki:generate-temporary-certificate|pki:generate-template-certificate-authority|pki:generate-certificate-request|pki:delete-template|pki:delete-certificate|pki:create-template|pdf:make-toc|pdf:insert-toc-headers|pdf:get-toc|pdf:clean|p:status-transition|p:state-transition|p:remove|p:pipelines|p:insert|p:get-by-id|p:get|p:execute|p:create|p:condition|p:collection|p:action|ooxml:runs-merge|ooxml:package-uris|ooxml:package-parts-insert|ooxml:package-parts|msword:clean|mcgm:polygon|mcgm:point|mcgm:geospatial-query-from-elements|mcgm:geospatial-query|mcgm:circle|math:tanh|math:tan|math:sqrt|math:sinh|math:sin|math:pow|math:modf|math:log10|math:log|math:ldexp|math:frexp|math:fmod|math:floor|math:fabs|math:exp|math:cosh|math:cos|math:ceil|math:atan2|math:atan|math:asin|math:acos|map:put|map:map|map:keys|map:get|map:delete|map:count|map:clear|lnk:to|lnk:remove|lnk:insert|lnk:get|lnk:from|lnk:create|kml:polygon|kml:point|kml:interior-polygon|kml:geospatial-query-from-elements|kml:geospatial-query|kml:circle|kml:box|gml:polygon|gml:point|gml:interior-polygon|gml:geospatial-query-from-elements|gml:geospatial-query|gml:circle|gml:box|georss:point|georss:geospatial-query|georss:circle|geo:polygon|geo:point|geo:interior-polygon|geo:geospatial-query-from-elements|geo:geospatial-query|geo:circle|geo:box|fn:zero-or-one|fn:years-from-duration|fn:year-from-dateTime|fn:year-from-date|fn:upper-case|fn:unordered|fn:true|fn:translate|fn:trace|fn:tokenize|fn:timezone-from-time|fn:timezone-from-dateTime|fn:timezone-from-date|fn:sum|fn:subtract-dateTimes-yielding-yearMonthDuration|fn:subtract-dateTimes-yielding-dayTimeDuration|fn:substring-before|fn:substring-after|fn:substring|fn:subsequence|fn:string-to-codepoints|fn:string-pad|fn:string-length|fn:string-join|fn:string|fn:static-base-uri|fn:starts-with|fn:seconds-from-time|fn:seconds-from-duration|fn:seconds-from-dateTime|fn:round-half-to-even|fn:round|fn:root|fn:reverse|fn:resolve-uri|fn:resolve-QName|fn:replace|fn:remove|fn:QName|fn:prefix-from-QName|fn:position|fn:one-or-more|fn:number|fn:not|fn:normalize-unicode|fn:normalize-space|fn:node-name|fn:node-kind|fn:nilled|fn:namespace-uri-from-QName|fn:namespace-uri-for-prefix|fn:namespace-uri|fn:name|fn:months-from-duration|fn:month-from-dateTime|fn:month-from-date|fn:minutes-from-time|fn:minutes-from-duration|fn:minutes-from-dateTime|fn:min|fn:max|fn:matches|fn:lower-case|fn:local-name-from-QName|fn:local-name|fn:last|fn:lang|fn:iri-to-uri|fn:insert-before|fn:index-of|fn:in-scope-prefixes|fn:implicit-timezone|fn:idref|fn:id|fn:hours-from-time|fn:hours-from-duration|fn:hours-from-dateTime|fn:floor|fn:false|fn:expanded-QName|fn:exists|fn:exactly-one|fn:escape-uri|fn:escape-html-uri|fn:error|fn:ends-with|fn:encode-for-uri|fn:empty|fn:document-uri|fn:doc-available|fn:doc|fn:distinct-values|fn:distinct-nodes|fn:default-collation|fn:deep-equal|fn:days-from-duration|fn:day-from-dateTime|fn:day-from-date|fn:data|fn:current-time|fn:current-dateTime|fn:current-date|fn:count|fn:contains|fn:concat|fn:compare|fn:collection|fn:codepoints-to-string|fn:codepoint-equal|fn:ceiling|fn:boolean|fn:base-uri|fn:avg|fn:adjust-time-to-timezone|fn:adjust-dateTime-to-timezone|fn:adjust-date-to-timezone|fn:abs|feed:unsubscribe|feed:subscription|feed:subscribe|feed:request|feed:item|feed:description|excel:clean|entity:enrich|dom:set-pipelines|dom:set-permissions|dom:set-name|dom:set-evaluation-context|dom:set-domain-scope|dom:set-description|dom:remove-pipeline|dom:remove-permissions|dom:remove|dom:get|dom:evaluation-context|dom:domains|dom:domain-scope|dom:create|dom:configuration-set-restart-user|dom:configuration-set-permissions|dom:configuration-set-evaluation-context|dom:configuration-set-default-domain|dom:configuration-get|dom:configuration-create|dom:collection|dom:add-pipeline|dom:add-permissions|dls:retention-rules|dls:retention-rule-remove|dls:retention-rule-insert|dls:retention-rule|dls:purge|dls:node-expand|dls:link-references|dls:link-expand|dls:documents-query|dls:document-versions-query|dls:document-version-uri|dls:document-version-query|dls:document-version-delete|dls:document-version-as-of|dls:document-version|dls:document-update|dls:document-unmanage|dls:document-set-quality|dls:document-set-property|dls:document-set-properties|dls:document-set-permissions|dls:document-set-collections|dls:document-retention-rules|dls:document-remove-properties|dls:document-remove-permissions|dls:document-remove-collections|dls:document-purge|dls:document-manage|dls:document-is-managed|dls:document-insert-and-manage|dls:document-include-query|dls:document-history|dls:document-get-permissions|dls:document-extract-part|dls:document-delete|dls:document-checkout-status|dls:document-checkout|dls:document-checkin|dls:document-add-properties|dls:document-add-permissions|dls:document-add-collections|dls:break-checkout|dls:author-query|dls:as-of-query|dbk:convert|dbg:wait|dbg:value|dbg:stopped|dbg:stop|dbg:step|dbg:status|dbg:stack|dbg:out|dbg:next|dbg:line|dbg:invoke|dbg:function|dbg:finish|dbg:expr|dbg:eval|dbg:disconnect|dbg:detach|dbg:continue|dbg:connect|dbg:clear|dbg:breakpoints|dbg:break|dbg:attached|dbg:attach|cvt:save-converted-documents|cvt:part-uri|cvt:destination-uri|cvt:basepath|cvt:basename|cts:words|cts:word-query-weight|cts:word-query-text|cts:word-query-options|cts:word-query|cts:word-match|cts:walk|cts:uris|cts:uri-match|cts:train|cts:tokenize|cts:thresholds|cts:stem|cts:similar-query-weight|cts:similar-query-nodes|cts:similar-query|cts:shortest-distance|cts:search|cts:score|cts:reverse-query-weight|cts:reverse-query-nodes|cts:reverse-query|cts:remainder|cts:registered-query-weight|cts:registered-query-options|cts:registered-query-ids|cts:registered-query|cts:register|cts:query|cts:quality|cts:properties-query-query|cts:properties-query|cts:polygon-vertices|cts:polygon|cts:point-longitude|cts:point-latitude|cts:point|cts:or-query-queries|cts:or-query|cts:not-query-weight|cts:not-query-query|cts:not-query|cts:near-query-weight|cts:near-query-queries|cts:near-query-options|cts:near-query-distance|cts:near-query|cts:highlight|cts:geospatial-co-occurrences|cts:frequency|cts:fitness|cts:field-words|cts:field-word-query-weight|cts:field-word-query-text|cts:field-word-query-options|cts:field-word-query-field-name|cts:field-word-query|cts:field-word-match|cts:entity-highlight|cts:element-words|cts:element-word-query-weight|cts:element-word-query-text|cts:element-word-query-options|cts:element-word-query-element-name|cts:element-word-query|cts:element-word-match|cts:element-values|cts:element-value-ranges|cts:element-value-query-weight|cts:element-value-query-text|cts:element-value-query-options|cts:element-value-query-element-name|cts:element-value-query|cts:element-value-match|cts:element-value-geospatial-co-occurrences|cts:element-value-co-occurrences|cts:element-range-query-weight|cts:element-range-query-value|cts:element-range-query-options|cts:element-range-query-operator|cts:element-range-query-element-name|cts:element-range-query|cts:element-query-query|cts:element-query-element-name|cts:element-query|cts:element-pair-geospatial-values|cts:element-pair-geospatial-value-match|cts:element-pair-geospatial-query-weight|cts:element-pair-geospatial-query-region|cts:element-pair-geospatial-query-options|cts:element-pair-geospatial-query-longitude-name|cts:element-pair-geospatial-query-latitude-name|cts:element-pair-geospatial-query-element-name|cts:element-pair-geospatial-query|cts:element-pair-geospatial-boxes|cts:element-geospatial-values|cts:element-geospatial-value-match|cts:element-geospatial-query-weight|cts:element-geospatial-query-region|cts:element-geospatial-query-options|cts:element-geospatial-query-element-name|cts:element-geospatial-query|cts:element-geospatial-boxes|cts:element-child-geospatial-values|cts:element-child-geospatial-value-match|cts:element-child-geospatial-query-weight|cts:element-child-geospatial-query-region|cts:element-child-geospatial-query-options|cts:element-child-geospatial-query-element-name|cts:element-child-geospatial-query-child-name|cts:element-child-geospatial-query|cts:element-child-geospatial-boxes|cts:element-attribute-words|cts:element-attribute-word-query-weight|cts:element-attribute-word-query-text|cts:element-attribute-word-query-options|cts:element-attribute-word-query-element-name|cts:element-attribute-word-query-attribute-name|cts:element-attribute-word-query|cts:element-attribute-word-match|cts:element-attribute-values|cts:element-attribute-value-ranges|cts:element-attribute-value-query-weight|cts:element-attribute-value-query-text|cts:element-attribute-value-query-options|cts:element-attribute-value-query-element-name|cts:element-attribute-value-query-attribute-name|cts:element-attribute-value-query|cts:element-attribute-value-match|cts:element-attribute-value-geospatial-co-occurrences|cts:element-attribute-value-co-occurrences|cts:element-attribute-range-query-weight|cts:element-attribute-range-query-value|cts:element-attribute-range-query-options|cts:element-attribute-range-query-operator|cts:element-attribute-range-query-element-name|cts:element-attribute-range-query-attribute-name|cts:element-attribute-range-query|cts:element-attribute-pair-geospatial-values|cts:element-attribute-pair-geospatial-value-match|cts:element-attribute-pair-geospatial-query-weight|cts:element-attribute-pair-geospatial-query-region|cts:element-attribute-pair-geospatial-query-options|cts:element-attribute-pair-geospatial-query-longitude-name|cts:element-attribute-pair-geospatial-query-latitude-name|cts:element-attribute-pair-geospatial-query-element-name|cts:element-attribute-pair-geospatial-query|cts:element-attribute-pair-geospatial-boxes|cts:document-query-uris|cts:document-query|cts:distance|cts:directory-query-uris|cts:directory-query-depth|cts:directory-query|cts:destination|cts:deregister|cts:contains|cts:confidence|cts:collections|cts:collection-query-uris|cts:collection-query|cts:collection-match|cts:classify|cts:circle-radius|cts:circle-center|cts:circle|cts:box-west|cts:box-south|cts:box-north|cts:box-east|cts:box|cts:bearing|cts:arc-intersection|cts:and-query-queries|cts:and-query-options|cts:and-query|cts:and-not-query-positive-query|cts:and-not-query-negative-query|cts:and-not-query|css:get|css:convert|cpf:success|cpf:failure|cpf:document-set-state|cpf:document-set-processing-status|cpf:document-set-last-updated|cpf:document-set-error|cpf:document-get-state|cpf:document-get-processing-status|cpf:document-get-last-updated|cpf:document-get-error|cpf:check-transition|alert:spawn-matching-actions|alert:rule-user-id-query|alert:rule-set-user-id|alert:rule-set-query|alert:rule-set-options|alert:rule-set-name|alert:rule-set-description|alert:rule-set-action|alert:rule-remove|alert:rule-name-query|alert:rule-insert|alert:rule-id-query|alert:rule-get-user-id|alert:rule-get-query|alert:rule-get-options|alert:rule-get-name|alert:rule-get-id|alert:rule-get-description|alert:rule-get-action|alert:rule-action-query|alert:remove-triggers|alert:make-rule|alert:make-log-action|alert:make-config|alert:make-action|alert:invoke-matching-actions|alert:get-my-rules|alert:get-all-rules|alert:get-actions|alert:find-matching-rules|alert:create-triggers|alert:config-set-uri|alert:config-set-trigger-ids|alert:config-set-options|alert:config-set-name|alert:config-set-description|alert:config-set-cpf-domain-names|alert:config-set-cpf-domain-ids|alert:config-insert|alert:config-get-uri|alert:config-get-trigger-ids|alert:config-get-options|alert:config-get-name|alert:config-get-id|alert:config-get-description|alert:config-get-cpf-domain-names|alert:config-get-cpf-domain-ids|alert:config-get|alert:config-delete|alert:action-set-options|alert:action-set-name|alert:action-set-module-root|alert:action-set-module-db|alert:action-set-module|alert:action-set-description|alert:action-remove|alert:action-insert|alert:action-get-options|alert:action-get-name|alert:action-get-module-root|alert:action-get-module-db|alert:action-get-module|alert:action-get-description|zero-or-one|years-from-duration|year-from-dateTime|year-from-date|upper-case|unordered|true|translate|trace|tokenize|timezone-from-time|timezone-from-dateTime|timezone-from-date|sum|subtract-dateTimes-yielding-yearMonthDuration|subtract-dateTimes-yielding-dayTimeDuration|substring-before|substring-after|substring|subsequence|string-to-codepoints|string-pad|string-length|string-join|string|static-base-uri|starts-with|seconds-from-time|seconds-from-duration|seconds-from-dateTime|round-half-to-even|round|root|reverse|resolve-uri|resolve-QName|replace|remove|QName|prefix-from-QName|position|one-or-more|number|not|normalize-unicode|normalize-space|node-name|node-kind|nilled|namespace-uri-from-QName|namespace-uri-for-prefix|namespace-uri|name|months-from-duration|month-from-dateTime|month-from-date|minutes-from-time|minutes-from-duration|minutes-from-dateTime|min|max|matches|lower-case|local-name-from-QName|local-name|last|lang|iri-to-uri|insert-before|index-of|in-scope-prefixes|implicit-timezone|idref|id|hours-from-time|hours-from-duration|hours-from-dateTime|floor|false|expanded-QName|exists|exactly-one|escape-uri|escape-html-uri|error|ends-with|encode-for-uri|empty|document-uri|doc-available|doc|distinct-values|distinct-nodes|default-collation|deep-equal|days-from-duration|day-from-dateTime|day-from-date|data|current-time|current-dateTime|current-date|count|contains|concat|compare|collection|codepoints-to-string|codepoint-equal|ceiling|boolean|base-uri|avg|adjust-time-to-timezone|adjust-dateTime-to-timezone|adjust-date-to-timezone|abs)\\b/],\n         // Matching normal words if none of the previous regular expressions matched\n         [PR['PR_PLAIN'], /^[A-Za-z0-9_\\-\\:]+/],\n         // Matching whitespaces\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/]\n         ]),\n    ['xq', 'xquery']);\n})();\n</text></\\>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2011 Patrick Wied\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @fileoverview\n * Registers a language handler for XQuery.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-xq\"></pre>\n *\n *\n * @author Patrick Wied ( patpa7p@live.de )\n * @version 2010-09-28\n */\n\n(function () {\n// Falls back to plain for stylesheets that don't style fun.\nvar PR_FUNCTION = 'fun pln';\n// Falls back to plaiin for stylesheets that don't style var.\nvar PR_VARIABLE = 'var pln';\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Matching $var-ia_bles\n         [PR_VARIABLE, /^\\$[A-Za-z0-9_\\-]+/, null, \"$\"]\n        ],\n        [\n         // Matching lt and gt operators\n         // Not the best matching solution but you have to differentiate between the gt operator and the tag closing char\n         [PR['PR_PLAIN'], /^[\\s=][<>][\\s=]/],\n         // Matching @Attributes\n         [PR['PR_LITERAL'], /^\\@[\\w-]+/],\n         // Matching xml tags\n         [PR['PR_TAG'], /^<\\ ?[a-z](?:[\\w.:-]*\\w)?|\\ ?>$/i],\n         // Matching single or multiline xquery comments -> (: <text> :)\n         [PR['PR_COMMENT'], /^\\(:[\\s\\S]*?:\\)/],\n         // Tokenizing /{}:=;*,[]() as plain\n         [PR['PR_PLAIN'], /^[\\/\\{\\};,\\[\\]\\(\\)]$/],\n         // Matching a double or single quoted, possibly multi-line, string.\n         // with the special condition that a { in a string changes to xquery context \n         [PR['PR_STRING'], /^(?:\\\"(?:[^\\\"\\\\\\{]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\\\{]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\''],\n         // Matching standard xquery keywords\n         [PR['PR_KEYWORD'], /^(?:xquery|where|version|variable|union|typeswitch|treat|to|then|text|stable|sortby|some|self|schema|satisfies|returns|return|ref|processing-instruction|preceding-sibling|preceding|precedes|parent|only|of|node|namespace|module|let|item|intersect|instance|in|import|if|function|for|follows|following-sibling|following|external|except|every|else|element|descending|descendant-or-self|descendant|define|default|declare|comment|child|cast|case|before|attribute|assert|ascending|as|ancestor-or-self|ancestor|after|eq|order|by|or|and|schema-element|document-node|node|at)\\b/],\n         // Matching standard xquery types\n         [PR['PR_TYPE'], /^(?:xs:yearMonthDuration|xs:unsignedLong|xs:time|xs:string|xs:short|xs:QName|xs:Name|xs:long|xs:integer|xs:int|xs:gYearMonth|xs:gYear|xs:gMonthDay|xs:gDay|xs:float|xs:duration|xs:double|xs:decimal|xs:dayTimeDuration|xs:dateTime|xs:date|xs:byte|xs:boolean|xs:anyURI|xf:yearMonthDuration)\\b/, null],\n         // Matching standard xquery functions\n         [PR_FUNCTION, /^(?:xp:dereference|xinc:node-expand|xinc:link-references|xinc:link-expand|xhtml:restructure|xhtml:clean|xhtml:add-lists|xdmp:zip-manifest|xdmp:zip-get|xdmp:zip-create|xdmp:xquery-version|xdmp:word-convert|xdmp:with-namespaces|xdmp:version|xdmp:value|xdmp:user-roles|xdmp:user-last-login|xdmp:user|xdmp:url-encode|xdmp:url-decode|xdmp:uri-is-file|xdmp:uri-format|xdmp:uri-content-type|xdmp:unquote|xdmp:unpath|xdmp:triggers-database|xdmp:trace|xdmp:to-json|xdmp:tidy|xdmp:subbinary|xdmp:strftime|xdmp:spawn-in|xdmp:spawn|xdmp:sleep|xdmp:shutdown|xdmp:set-session-field|xdmp:set-response-encoding|xdmp:set-response-content-type|xdmp:set-response-code|xdmp:set-request-time-limit|xdmp:set|xdmp:servers|xdmp:server-status|xdmp:server-name|xdmp:server|xdmp:security-database|xdmp:security-assert|xdmp:schema-database|xdmp:save|xdmp:role-roles|xdmp:role|xdmp:rethrow|xdmp:restart|xdmp:request-timestamp|xdmp:request-status|xdmp:request-cancel|xdmp:request|xdmp:redirect-response|xdmp:random|xdmp:quote|xdmp:query-trace|xdmp:query-meters|xdmp:product-edition|xdmp:privilege-roles|xdmp:privilege|xdmp:pretty-print|xdmp:powerpoint-convert|xdmp:platform|xdmp:permission|xdmp:pdf-convert|xdmp:path|xdmp:octal-to-integer|xdmp:node-uri|xdmp:node-replace|xdmp:node-kind|xdmp:node-insert-child|xdmp:node-insert-before|xdmp:node-insert-after|xdmp:node-delete|xdmp:node-database|xdmp:mul64|xdmp:modules-root|xdmp:modules-database|xdmp:merging|xdmp:merge-cancel|xdmp:merge|xdmp:md5|xdmp:logout|xdmp:login|xdmp:log-level|xdmp:log|xdmp:lock-release|xdmp:lock-acquire|xdmp:load|xdmp:invoke-in|xdmp:invoke|xdmp:integer-to-octal|xdmp:integer-to-hex|xdmp:http-put|xdmp:http-post|xdmp:http-options|xdmp:http-head|xdmp:http-get|xdmp:http-delete|xdmp:hosts|xdmp:host-status|xdmp:host-name|xdmp:host|xdmp:hex-to-integer|xdmp:hash64|xdmp:hash32|xdmp:has-privilege|xdmp:groups|xdmp:group-serves|xdmp:group-servers|xdmp:group-name|xdmp:group-hosts|xdmp:group|xdmp:get-session-field-names|xdmp:get-session-field|xdmp:get-response-encoding|xdmp:get-response-code|xdmp:get-request-username|xdmp:get-request-user|xdmp:get-request-url|xdmp:get-request-protocol|xdmp:get-request-path|xdmp:get-request-method|xdmp:get-request-header-names|xdmp:get-request-header|xdmp:get-request-field-names|xdmp:get-request-field-filename|xdmp:get-request-field-content-type|xdmp:get-request-field|xdmp:get-request-client-certificate|xdmp:get-request-client-address|xdmp:get-request-body|xdmp:get-current-user|xdmp:get-current-roles|xdmp:get|xdmp:function-name|xdmp:function-module|xdmp:function|xdmp:from-json|xdmp:forests|xdmp:forest-status|xdmp:forest-restore|xdmp:forest-restart|xdmp:forest-name|xdmp:forest-delete|xdmp:forest-databases|xdmp:forest-counts|xdmp:forest-clear|xdmp:forest-backup|xdmp:forest|xdmp:filesystem-file|xdmp:filesystem-directory|xdmp:exists|xdmp:excel-convert|xdmp:eval-in|xdmp:eval|xdmp:estimate|xdmp:email|xdmp:element-content-type|xdmp:elapsed-time|xdmp:document-set-quality|xdmp:document-set-property|xdmp:document-set-properties|xdmp:document-set-permissions|xdmp:document-set-collections|xdmp:document-remove-properties|xdmp:document-remove-permissions|xdmp:document-remove-collections|xdmp:document-properties|xdmp:document-locks|xdmp:document-load|xdmp:document-insert|xdmp:document-get-quality|xdmp:document-get-properties|xdmp:document-get-permissions|xdmp:document-get-collections|xdmp:document-get|xdmp:document-forest|xdmp:document-delete|xdmp:document-add-properties|xdmp:document-add-permissions|xdmp:document-add-collections|xdmp:directory-properties|xdmp:directory-locks|xdmp:directory-delete|xdmp:directory-create|xdmp:directory|xdmp:diacritic-less|xdmp:describe|xdmp:default-permissions|xdmp:default-collections|xdmp:databases|xdmp:database-restore-validate|xdmp:database-restore-status|xdmp:database-restore-cancel|xdmp:database-restore|xdmp:database-name|xdmp:database-forests|xdmp:database-backup-validate|xdmp:database-backup-status|xdmp:database-backup-purge|xdmp:database-backup-cancel|xdmp:database-backup|xdmp:database|xdmp:collection-properties|xdmp:collection-locks|xdmp:collection-delete|xdmp:collation-canonical-uri|xdmp:castable-as|xdmp:can-grant-roles|xdmp:base64-encode|xdmp:base64-decode|xdmp:architecture|xdmp:apply|xdmp:amp-roles|xdmp:amp|xdmp:add64|xdmp:add-response-header|xdmp:access|trgr:trigger-set-recursive|trgr:trigger-set-permissions|trgr:trigger-set-name|trgr:trigger-set-module|trgr:trigger-set-event|trgr:trigger-set-description|trgr:trigger-remove-permissions|trgr:trigger-module|trgr:trigger-get-permissions|trgr:trigger-enable|trgr:trigger-disable|trgr:trigger-database-online-event|trgr:trigger-data-event|trgr:trigger-add-permissions|trgr:remove-trigger|trgr:property-content|trgr:pre-commit|trgr:post-commit|trgr:get-trigger-by-id|trgr:get-trigger|trgr:document-scope|trgr:document-content|trgr:directory-scope|trgr:create-trigger|trgr:collection-scope|trgr:any-property-content|thsr:set-entry|thsr:remove-term|thsr:remove-synonym|thsr:remove-entry|thsr:query-lookup|thsr:lookup|thsr:load|thsr:insert|thsr:expand|thsr:add-synonym|spell:suggest-detailed|spell:suggest|spell:remove-word|spell:make-dictionary|spell:load|spell:levenshtein-distance|spell:is-correct|spell:insert|spell:double-metaphone|spell:add-word|sec:users-collection|sec:user-set-roles|sec:user-set-password|sec:user-set-name|sec:user-set-description|sec:user-set-default-permissions|sec:user-set-default-collections|sec:user-remove-roles|sec:user-privileges|sec:user-get-roles|sec:user-get-description|sec:user-get-default-permissions|sec:user-get-default-collections|sec:user-doc-permissions|sec:user-doc-collections|sec:user-add-roles|sec:unprotect-collection|sec:uid-for-name|sec:set-realm|sec:security-version|sec:security-namespace|sec:security-installed|sec:security-collection|sec:roles-collection|sec:role-set-roles|sec:role-set-name|sec:role-set-description|sec:role-set-default-permissions|sec:role-set-default-collections|sec:role-remove-roles|sec:role-privileges|sec:role-get-roles|sec:role-get-description|sec:role-get-default-permissions|sec:role-get-default-collections|sec:role-doc-permissions|sec:role-doc-collections|sec:role-add-roles|sec:remove-user|sec:remove-role-from-users|sec:remove-role-from-role|sec:remove-role-from-privileges|sec:remove-role-from-amps|sec:remove-role|sec:remove-privilege|sec:remove-amp|sec:protect-collection|sec:privileges-collection|sec:privilege-set-roles|sec:privilege-set-name|sec:privilege-remove-roles|sec:privilege-get-roles|sec:privilege-add-roles|sec:priv-doc-permissions|sec:priv-doc-collections|sec:get-user-names|sec:get-unique-elem-id|sec:get-role-names|sec:get-role-ids|sec:get-privilege|sec:get-distinct-permissions|sec:get-collection|sec:get-amp|sec:create-user-with-role|sec:create-user|sec:create-role|sec:create-privilege|sec:create-amp|sec:collections-collection|sec:collection-set-permissions|sec:collection-remove-permissions|sec:collection-get-permissions|sec:collection-add-permissions|sec:check-admin|sec:amps-collection|sec:amp-set-roles|sec:amp-remove-roles|sec:amp-get-roles|sec:amp-doc-permissions|sec:amp-doc-collections|sec:amp-add-roles|search:unparse|search:suggest|search:snippet|search:search|search:resolve-nodes|search:resolve|search:remove-constraint|search:parse|search:get-default-options|search:estimate|search:check-options|prof:value|prof:reset|prof:report|prof:invoke|prof:eval|prof:enable|prof:disable|prof:allowed|ppt:clean|pki:template-set-request|pki:template-set-name|pki:template-set-key-type|pki:template-set-key-options|pki:template-set-description|pki:template-in-use|pki:template-get-version|pki:template-get-request|pki:template-get-name|pki:template-get-key-type|pki:template-get-key-options|pki:template-get-id|pki:template-get-description|pki:need-certificate|pki:is-temporary|pki:insert-trusted-certificates|pki:insert-template|pki:insert-signed-certificates|pki:insert-certificate-revocation-list|pki:get-trusted-certificate-ids|pki:get-template-ids|pki:get-template-certificate-authority|pki:get-template-by-name|pki:get-template|pki:get-pending-certificate-requests-xml|pki:get-pending-certificate-requests-pem|pki:get-pending-certificate-request|pki:get-certificates-for-template-xml|pki:get-certificates-for-template|pki:get-certificates|pki:get-certificate-xml|pki:get-certificate-pem|pki:get-certificate|pki:generate-temporary-certificate-if-necessary|pki:generate-temporary-certificate|pki:generate-template-certificate-authority|pki:generate-certificate-request|pki:delete-template|pki:delete-certificate|pki:create-template|pdf:make-toc|pdf:insert-toc-headers|pdf:get-toc|pdf:clean|p:status-transition|p:state-transition|p:remove|p:pipelines|p:insert|p:get-by-id|p:get|p:execute|p:create|p:condition|p:collection|p:action|ooxml:runs-merge|ooxml:package-uris|ooxml:package-parts-insert|ooxml:package-parts|msword:clean|mcgm:polygon|mcgm:point|mcgm:geospatial-query-from-elements|mcgm:geospatial-query|mcgm:circle|math:tanh|math:tan|math:sqrt|math:sinh|math:sin|math:pow|math:modf|math:log10|math:log|math:ldexp|math:frexp|math:fmod|math:floor|math:fabs|math:exp|math:cosh|math:cos|math:ceil|math:atan2|math:atan|math:asin|math:acos|map:put|map:map|map:keys|map:get|map:delete|map:count|map:clear|lnk:to|lnk:remove|lnk:insert|lnk:get|lnk:from|lnk:create|kml:polygon|kml:point|kml:interior-polygon|kml:geospatial-query-from-elements|kml:geospatial-query|kml:circle|kml:box|gml:polygon|gml:point|gml:interior-polygon|gml:geospatial-query-from-elements|gml:geospatial-query|gml:circle|gml:box|georss:point|georss:geospatial-query|georss:circle|geo:polygon|geo:point|geo:interior-polygon|geo:geospatial-query-from-elements|geo:geospatial-query|geo:circle|geo:box|fn:zero-or-one|fn:years-from-duration|fn:year-from-dateTime|fn:year-from-date|fn:upper-case|fn:unordered|fn:true|fn:translate|fn:trace|fn:tokenize|fn:timezone-from-time|fn:timezone-from-dateTime|fn:timezone-from-date|fn:sum|fn:subtract-dateTimes-yielding-yearMonthDuration|fn:subtract-dateTimes-yielding-dayTimeDuration|fn:substring-before|fn:substring-after|fn:substring|fn:subsequence|fn:string-to-codepoints|fn:string-pad|fn:string-length|fn:string-join|fn:string|fn:static-base-uri|fn:starts-with|fn:seconds-from-time|fn:seconds-from-duration|fn:seconds-from-dateTime|fn:round-half-to-even|fn:round|fn:root|fn:reverse|fn:resolve-uri|fn:resolve-QName|fn:replace|fn:remove|fn:QName|fn:prefix-from-QName|fn:position|fn:one-or-more|fn:number|fn:not|fn:normalize-unicode|fn:normalize-space|fn:node-name|fn:node-kind|fn:nilled|fn:namespace-uri-from-QName|fn:namespace-uri-for-prefix|fn:namespace-uri|fn:name|fn:months-from-duration|fn:month-from-dateTime|fn:month-from-date|fn:minutes-from-time|fn:minutes-from-duration|fn:minutes-from-dateTime|fn:min|fn:max|fn:matches|fn:lower-case|fn:local-name-from-QName|fn:local-name|fn:last|fn:lang|fn:iri-to-uri|fn:insert-before|fn:index-of|fn:in-scope-prefixes|fn:implicit-timezone|fn:idref|fn:id|fn:hours-from-time|fn:hours-from-duration|fn:hours-from-dateTime|fn:floor|fn:false|fn:expanded-QName|fn:exists|fn:exactly-one|fn:escape-uri|fn:escape-html-uri|fn:error|fn:ends-with|fn:encode-for-uri|fn:empty|fn:document-uri|fn:doc-available|fn:doc|fn:distinct-values|fn:distinct-nodes|fn:default-collation|fn:deep-equal|fn:days-from-duration|fn:day-from-dateTime|fn:day-from-date|fn:data|fn:current-time|fn:current-dateTime|fn:current-date|fn:count|fn:contains|fn:concat|fn:compare|fn:collection|fn:codepoints-to-string|fn:codepoint-equal|fn:ceiling|fn:boolean|fn:base-uri|fn:avg|fn:adjust-time-to-timezone|fn:adjust-dateTime-to-timezone|fn:adjust-date-to-timezone|fn:abs|feed:unsubscribe|feed:subscription|feed:subscribe|feed:request|feed:item|feed:description|excel:clean|entity:enrich|dom:set-pipelines|dom:set-permissions|dom:set-name|dom:set-evaluation-context|dom:set-domain-scope|dom:set-description|dom:remove-pipeline|dom:remove-permissions|dom:remove|dom:get|dom:evaluation-context|dom:domains|dom:domain-scope|dom:create|dom:configuration-set-restart-user|dom:configuration-set-permissions|dom:configuration-set-evaluation-context|dom:configuration-set-default-domain|dom:configuration-get|dom:configuration-create|dom:collection|dom:add-pipeline|dom:add-permissions|dls:retention-rules|dls:retention-rule-remove|dls:retention-rule-insert|dls:retention-rule|dls:purge|dls:node-expand|dls:link-references|dls:link-expand|dls:documents-query|dls:document-versions-query|dls:document-version-uri|dls:document-version-query|dls:document-version-delete|dls:document-version-as-of|dls:document-version|dls:document-update|dls:document-unmanage|dls:document-set-quality|dls:document-set-property|dls:document-set-properties|dls:document-set-permissions|dls:document-set-collections|dls:document-retention-rules|dls:document-remove-properties|dls:document-remove-permissions|dls:document-remove-collections|dls:document-purge|dls:document-manage|dls:document-is-managed|dls:document-insert-and-manage|dls:document-include-query|dls:document-history|dls:document-get-permissions|dls:document-extract-part|dls:document-delete|dls:document-checkout-status|dls:document-checkout|dls:document-checkin|dls:document-add-properties|dls:document-add-permissions|dls:document-add-collections|dls:break-checkout|dls:author-query|dls:as-of-query|dbk:convert|dbg:wait|dbg:value|dbg:stopped|dbg:stop|dbg:step|dbg:status|dbg:stack|dbg:out|dbg:next|dbg:line|dbg:invoke|dbg:function|dbg:finish|dbg:expr|dbg:eval|dbg:disconnect|dbg:detach|dbg:continue|dbg:connect|dbg:clear|dbg:breakpoints|dbg:break|dbg:attached|dbg:attach|cvt:save-converted-documents|cvt:part-uri|cvt:destination-uri|cvt:basepath|cvt:basename|cts:words|cts:word-query-weight|cts:word-query-text|cts:word-query-options|cts:word-query|cts:word-match|cts:walk|cts:uris|cts:uri-match|cts:train|cts:tokenize|cts:thresholds|cts:stem|cts:similar-query-weight|cts:similar-query-nodes|cts:similar-query|cts:shortest-distance|cts:search|cts:score|cts:reverse-query-weight|cts:reverse-query-nodes|cts:reverse-query|cts:remainder|cts:registered-query-weight|cts:registered-query-options|cts:registered-query-ids|cts:registered-query|cts:register|cts:query|cts:quality|cts:properties-query-query|cts:properties-query|cts:polygon-vertices|cts:polygon|cts:point-longitude|cts:point-latitude|cts:point|cts:or-query-queries|cts:or-query|cts:not-query-weight|cts:not-query-query|cts:not-query|cts:near-query-weight|cts:near-query-queries|cts:near-query-options|cts:near-query-distance|cts:near-query|cts:highlight|cts:geospatial-co-occurrences|cts:frequency|cts:fitness|cts:field-words|cts:field-word-query-weight|cts:field-word-query-text|cts:field-word-query-options|cts:field-word-query-field-name|cts:field-word-query|cts:field-word-match|cts:entity-highlight|cts:element-words|cts:element-word-query-weight|cts:element-word-query-text|cts:element-word-query-options|cts:element-word-query-element-name|cts:element-word-query|cts:element-word-match|cts:element-values|cts:element-value-ranges|cts:element-value-query-weight|cts:element-value-query-text|cts:element-value-query-options|cts:element-value-query-element-name|cts:element-value-query|cts:element-value-match|cts:element-value-geospatial-co-occurrences|cts:element-value-co-occurrences|cts:element-range-query-weight|cts:element-range-query-value|cts:element-range-query-options|cts:element-range-query-operator|cts:element-range-query-element-name|cts:element-range-query|cts:element-query-query|cts:element-query-element-name|cts:element-query|cts:element-pair-geospatial-values|cts:element-pair-geospatial-value-match|cts:element-pair-geospatial-query-weight|cts:element-pair-geospatial-query-region|cts:element-pair-geospatial-query-options|cts:element-pair-geospatial-query-longitude-name|cts:element-pair-geospatial-query-latitude-name|cts:element-pair-geospatial-query-element-name|cts:element-pair-geospatial-query|cts:element-pair-geospatial-boxes|cts:element-geospatial-values|cts:element-geospatial-value-match|cts:element-geospatial-query-weight|cts:element-geospatial-query-region|cts:element-geospatial-query-options|cts:element-geospatial-query-element-name|cts:element-geospatial-query|cts:element-geospatial-boxes|cts:element-child-geospatial-values|cts:element-child-geospatial-value-match|cts:element-child-geospatial-query-weight|cts:element-child-geospatial-query-region|cts:element-child-geospatial-query-options|cts:element-child-geospatial-query-element-name|cts:element-child-geospatial-query-child-name|cts:element-child-geospatial-query|cts:element-child-geospatial-boxes|cts:element-attribute-words|cts:element-attribute-word-query-weight|cts:element-attribute-word-query-text|cts:element-attribute-word-query-options|cts:element-attribute-word-query-element-name|cts:element-attribute-word-query-attribute-name|cts:element-attribute-word-query|cts:element-attribute-word-match|cts:element-attribute-values|cts:element-attribute-value-ranges|cts:element-attribute-value-query-weight|cts:element-attribute-value-query-text|cts:element-attribute-value-query-options|cts:element-attribute-value-query-element-name|cts:element-attribute-value-query-attribute-name|cts:element-attribute-value-query|cts:element-attribute-value-match|cts:element-attribute-value-geospatial-co-occurrences|cts:element-attribute-value-co-occurrences|cts:element-attribute-range-query-weight|cts:element-attribute-range-query-value|cts:element-attribute-range-query-options|cts:element-attribute-range-query-operator|cts:element-attribute-range-query-element-name|cts:element-attribute-range-query-attribute-name|cts:element-attribute-range-query|cts:element-attribute-pair-geospatial-values|cts:element-attribute-pair-geospatial-value-match|cts:element-attribute-pair-geospatial-query-weight|cts:element-attribute-pair-geospatial-query-region|cts:element-attribute-pair-geospatial-query-options|cts:element-attribute-pair-geospatial-query-longitude-name|cts:element-attribute-pair-geospatial-query-latitude-name|cts:element-attribute-pair-geospatial-query-element-name|cts:element-attribute-pair-geospatial-query|cts:element-attribute-pair-geospatial-boxes|cts:document-query-uris|cts:document-query|cts:distance|cts:directory-query-uris|cts:directory-query-depth|cts:directory-query|cts:destination|cts:deregister|cts:contains|cts:confidence|cts:collections|cts:collection-query-uris|cts:collection-query|cts:collection-match|cts:classify|cts:circle-radius|cts:circle-center|cts:circle|cts:box-west|cts:box-south|cts:box-north|cts:box-east|cts:box|cts:bearing|cts:arc-intersection|cts:and-query-queries|cts:and-query-options|cts:and-query|cts:and-not-query-positive-query|cts:and-not-query-negative-query|cts:and-not-query|css:get|css:convert|cpf:success|cpf:failure|cpf:document-set-state|cpf:document-set-processing-status|cpf:document-set-last-updated|cpf:document-set-error|cpf:document-get-state|cpf:document-get-processing-status|cpf:document-get-last-updated|cpf:document-get-error|cpf:check-transition|alert:spawn-matching-actions|alert:rule-user-id-query|alert:rule-set-user-id|alert:rule-set-query|alert:rule-set-options|alert:rule-set-name|alert:rule-set-description|alert:rule-set-action|alert:rule-remove|alert:rule-name-query|alert:rule-insert|alert:rule-id-query|alert:rule-get-user-id|alert:rule-get-query|alert:rule-get-options|alert:rule-get-name|alert:rule-get-id|alert:rule-get-description|alert:rule-get-action|alert:rule-action-query|alert:remove-triggers|alert:make-rule|alert:make-log-action|alert:make-config|alert:make-action|alert:invoke-matching-actions|alert:get-my-rules|alert:get-all-rules|alert:get-actions|alert:find-matching-rules|alert:create-triggers|alert:config-set-uri|alert:config-set-trigger-ids|alert:config-set-options|alert:config-set-name|alert:config-set-description|alert:config-set-cpf-domain-names|alert:config-set-cpf-domain-ids|alert:config-insert|alert:config-get-uri|alert:config-get-trigger-ids|alert:config-get-options|alert:config-get-name|alert:config-get-id|alert:config-get-description|alert:config-get-cpf-domain-names|alert:config-get-cpf-domain-ids|alert:config-get|alert:config-delete|alert:action-set-options|alert:action-set-name|alert:action-set-module-root|alert:action-set-module-db|alert:action-set-module|alert:action-set-description|alert:action-remove|alert:action-insert|alert:action-get-options|alert:action-get-name|alert:action-get-module-root|alert:action-get-module-db|alert:action-get-module|alert:action-get-description|zero-or-one|years-from-duration|year-from-dateTime|year-from-date|upper-case|unordered|true|translate|trace|tokenize|timezone-from-time|timezone-from-dateTime|timezone-from-date|sum|subtract-dateTimes-yielding-yearMonthDuration|subtract-dateTimes-yielding-dayTimeDuration|substring-before|substring-after|substring|subsequence|string-to-codepoints|string-pad|string-length|string-join|string|static-base-uri|starts-with|seconds-from-time|seconds-from-duration|seconds-from-dateTime|round-half-to-even|round|root|reverse|resolve-uri|resolve-QName|replace|remove|QName|prefix-from-QName|position|one-or-more|number|not|normalize-unicode|normalize-space|node-name|node-kind|nilled|namespace-uri-from-QName|namespace-uri-for-prefix|namespace-uri|name|months-from-duration|month-from-dateTime|month-from-date|minutes-from-time|minutes-from-duration|minutes-from-dateTime|min|max|matches|lower-case|local-name-from-QName|local-name|last|lang|iri-to-uri|insert-before|index-of|in-scope-prefixes|implicit-timezone|idref|id|hours-from-time|hours-from-duration|hours-from-dateTime|floor|false|expanded-QName|exists|exactly-one|escape-uri|escape-html-uri|error|ends-with|encode-for-uri|empty|document-uri|doc-available|doc|distinct-values|distinct-nodes|default-collation|deep-equal|days-from-duration|day-from-dateTime|day-from-date|data|current-time|current-dateTime|current-date|count|contains|concat|compare|collection|codepoints-to-string|codepoint-equal|ceiling|boolean|base-uri|avg|adjust-time-to-timezone|adjust-dateTime-to-timezone|adjust-date-to-timezone|abs)\\b/],\n         // Matching normal words if none of the previous regular expressions matched\n         [PR['PR_PLAIN'], /^[A-Za-z0-9_\\-\\:]+/],\n         // Matching whitespaces\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/]\n         ]),\n    ['xq', 'xquery']);\n})();\n</text></\\>"},{"_content":"\nvar IN_GLOBAL_SCOPE = false;\n\n/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * <p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * <li> define style rules.  See the example page for examples.\n * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nvar PR_SHOULD_USE_CONTINUATION = true\nif (typeof window !== 'undefined') {\n  window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n}\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = (typeof window !== 'undefined') ? window : {};\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,from,function,\" +\n      \"get,import,implements,instanceof,interface,let,null,of,set,undefined,\" +\n      \"var,with,yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n\n  // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n  // Do not modify, your changes will be erased.\n\n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n\n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n\n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n\n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= c1 && c1 <= '7') {\n        return parseInt(charsetPart.substring(1), 8);\n      } else if (c1 === 'u' || c1 === 'x') {\n        return parseInt(charsetPart.substring(2), 16);\n      } else {\n        return charsetPart.charCodeAt(1);\n      }\n    }\n\n    function encodeEscape(charCode) {\n      if (charCode < 0x20) {\n        return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n      }\n      var ch = String.fromCharCode(charCode);\n      return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n          ? \"\\\\\" + ch : ch;\n    }\n\n    function caseFoldCharset(charSet) {\n      var charsetParts = charSet.substring(1, charSet.length - 1).match(\n          new RegExp(\n              '\\\\\\\\u[0-9A-Fa-f]{4}'\n              + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n              + '|\\\\\\\\[0-3][0-7]{0,2}'\n              + '|\\\\\\\\[0-7]{1,2}'\n              + '|\\\\\\\\[\\\\s\\\\S]'\n              + '|-'\n              + '|[^-\\\\\\\\]',\n              'g'));\n      var ranges = [];\n      var inverse = charsetParts[0] === '^';\n\n      var out = ['['];\n      if (inverse) { out.push('^'); }\n\n      for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n        var p = charsetParts[i];\n        if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n          out.push(p);\n        } else {\n          var start = decodeEscape(p);\n          var end;\n          if (i + 2 < n && '-' === charsetParts[i + 1]) {\n            end = decodeEscape(charsetParts[i + 2]);\n            i += 2;\n          } else {\n            end = start;\n          }\n          ranges.push([start, end]);\n          // If the range might intersect letters, then expand it.\n          // This case handling is too simplistic.\n          // It does not deal with non-latin case folding.\n          // It works for latin source code identifiers though.\n          if (!(end < 65 || start > 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n\n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastRange[1] + 1) {\n          lastRange[1] = Math.max(lastRange[1], range[1]);\n        } else {\n          consolidatedRanges.push(lastRange = range);\n        }\n      }\n\n      for (var i = 0; i < consolidatedRanges.length; ++i) {\n        var range = consolidatedRanges[i];\n        out.push(encodeEscape(range[0]));\n        if (range[1] > range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n\n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n\n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n\n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupIndex) {\n              capturedGroups[decimalValue] = -1;\n            } else {\n              // Replace with an unambiguous escape sequence so that\n              // an octal escape sequence does not turn into a backreference\n              // to a capturing group from an earlier regex.\n              parts[i] = encodeEscape(decimalValue);\n            }\n          }\n        }\n      }\n\n      // Renumber groups and reduce capturing groups to non-capturing groups\n      // where possible.\n      for (var i = 1; i < capturedGroups.length; ++i) {\n        if (-1 === capturedGroups[i]) {\n          capturedGroups[i] = ++capturedGroupIndex;\n        }\n      }\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          ++groupIndex;\n          if (!capturedGroups[groupIndex]) {\n            parts[i] = '(?:';\n          }\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue && decimalValue <= groupIndex) {\n            parts[i] = '\\\\' + capturedGroups[decimalValue];\n          }\n        }\n      }\n\n      // Remove any prefix anchors so that the output will match anywhere.\n      // ^^ really does mean an anchored match though.\n      for (var i = 0; i < n; ++i) {\n        if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n      }\n\n      // Expand letters to groups to handle mixing of case-sensitive and\n      // case-insensitive patterns if necessary.\n      if (regex.ignoreCase && needToFoldCase) {\n        for (var i = 0; i < n; ++i) {\n          var p = parts[i];\n          var ch0 = p.charAt(0);\n          if (p.length >= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n\n      return parts.join('');\n    }\n\n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n\n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n\n    walk(node);\n\n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n    * all characters in sourceCode[index_n-1:index_n].\n    *\n    * The stylePatterns is a list whose elements have the form\n    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n    *\n    * Style is a style constant like PR_PLAIN, or can be a string of the\n    * form 'lang-FOO', where FOO is a language extension describing the\n    * language of the portion of the token in $1 after pattern executes.\n    * E.g., if style is 'lang-lisp', and group 1 contains the text\n    * '(hello (world))', then that portion of the token will be passed to the\n    * registered lisp handler for formatting.\n    * The text before and after group 1 will be restyled using this decorator\n    * so decorators should take care that this doesn't result in infinite\n    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n    * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo {#}\n      // {#}\n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n\n    var document = node.ownerDocument;\n\n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName.toLowerCase()) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n\n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n\n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n\n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n\n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n\n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n\n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n\n    node.appendChild(ol);\n  }\n\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n\n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n\n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n\n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n\n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n\n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n\n    nDecorations = decorations.length = decPos;\n\n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n\n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n        var end = Math.min(spanEnd, decEnd);\n\n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n\n        sourceIndex = end;\n\n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n\n\nvar path = require('path');\n\nmodule.exports = {\n  prettyPrint: prettyPrint,\n  prettyPrintOne: prettyPrintOne,\n  // include paths for css preprocessor support\n  includePaths: [\n    __dirname,\n    path.resolve(__dirname, '../styles')\n  ]\n};\n","source":"plugins/prettify/node_prettify.js","raw":"\nvar IN_GLOBAL_SCOPE = false;\n\n/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * <p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * <li> define style rules.  See the example page for examples.\n * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nvar PR_SHOULD_USE_CONTINUATION = true\nif (typeof window !== 'undefined') {\n  window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n}\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = (typeof window !== 'undefined') ? window : {};\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,from,function,\" +\n      \"get,import,implements,instanceof,interface,let,null,of,set,undefined,\" +\n      \"var,with,yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n\n  // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n  // Do not modify, your changes will be erased.\n\n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n\n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n\n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n\n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= c1 && c1 <= '7') {\n        return parseInt(charsetPart.substring(1), 8);\n      } else if (c1 === 'u' || c1 === 'x') {\n        return parseInt(charsetPart.substring(2), 16);\n      } else {\n        return charsetPart.charCodeAt(1);\n      }\n    }\n\n    function encodeEscape(charCode) {\n      if (charCode < 0x20) {\n        return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n      }\n      var ch = String.fromCharCode(charCode);\n      return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n          ? \"\\\\\" + ch : ch;\n    }\n\n    function caseFoldCharset(charSet) {\n      var charsetParts = charSet.substring(1, charSet.length - 1).match(\n          new RegExp(\n              '\\\\\\\\u[0-9A-Fa-f]{4}'\n              + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n              + '|\\\\\\\\[0-3][0-7]{0,2}'\n              + '|\\\\\\\\[0-7]{1,2}'\n              + '|\\\\\\\\[\\\\s\\\\S]'\n              + '|-'\n              + '|[^-\\\\\\\\]',\n              'g'));\n      var ranges = [];\n      var inverse = charsetParts[0] === '^';\n\n      var out = ['['];\n      if (inverse) { out.push('^'); }\n\n      for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n        var p = charsetParts[i];\n        if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n          out.push(p);\n        } else {\n          var start = decodeEscape(p);\n          var end;\n          if (i + 2 < n && '-' === charsetParts[i + 1]) {\n            end = decodeEscape(charsetParts[i + 2]);\n            i += 2;\n          } else {\n            end = start;\n          }\n          ranges.push([start, end]);\n          // If the range might intersect letters, then expand it.\n          // This case handling is too simplistic.\n          // It does not deal with non-latin case folding.\n          // It works for latin source code identifiers though.\n          if (!(end < 65 || start > 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n\n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastRange[1] + 1) {\n          lastRange[1] = Math.max(lastRange[1], range[1]);\n        } else {\n          consolidatedRanges.push(lastRange = range);\n        }\n      }\n\n      for (var i = 0; i < consolidatedRanges.length; ++i) {\n        var range = consolidatedRanges[i];\n        out.push(encodeEscape(range[0]));\n        if (range[1] > range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n\n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n\n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n\n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupIndex) {\n              capturedGroups[decimalValue] = -1;\n            } else {\n              // Replace with an unambiguous escape sequence so that\n              // an octal escape sequence does not turn into a backreference\n              // to a capturing group from an earlier regex.\n              parts[i] = encodeEscape(decimalValue);\n            }\n          }\n        }\n      }\n\n      // Renumber groups and reduce capturing groups to non-capturing groups\n      // where possible.\n      for (var i = 1; i < capturedGroups.length; ++i) {\n        if (-1 === capturedGroups[i]) {\n          capturedGroups[i] = ++capturedGroupIndex;\n        }\n      }\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          ++groupIndex;\n          if (!capturedGroups[groupIndex]) {\n            parts[i] = '(?:';\n          }\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue && decimalValue <= groupIndex) {\n            parts[i] = '\\\\' + capturedGroups[decimalValue];\n          }\n        }\n      }\n\n      // Remove any prefix anchors so that the output will match anywhere.\n      // ^^ really does mean an anchored match though.\n      for (var i = 0; i < n; ++i) {\n        if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n      }\n\n      // Expand letters to groups to handle mixing of case-sensitive and\n      // case-insensitive patterns if necessary.\n      if (regex.ignoreCase && needToFoldCase) {\n        for (var i = 0; i < n; ++i) {\n          var p = parts[i];\n          var ch0 = p.charAt(0);\n          if (p.length >= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n\n      return parts.join('');\n    }\n\n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n\n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n\n    walk(node);\n\n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n    * all characters in sourceCode[index_n-1:index_n].\n    *\n    * The stylePatterns is a list whose elements have the form\n    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n    *\n    * Style is a style constant like PR_PLAIN, or can be a string of the\n    * form 'lang-FOO', where FOO is a language extension describing the\n    * language of the portion of the token in $1 after pattern executes.\n    * E.g., if style is 'lang-lisp', and group 1 contains the text\n    * '(hello (world))', then that portion of the token will be passed to the\n    * registered lisp handler for formatting.\n    * The text before and after group 1 will be restyled using this decorator\n    * so decorators should take care that this doesn't result in infinite\n    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n    * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo {#}\n      // {#}\n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n\n    var document = node.ownerDocument;\n\n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName.toLowerCase()) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n\n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n\n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n\n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n\n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n\n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n\n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n\n    node.appendChild(ol);\n  }\n\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n\n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n\n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n\n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n\n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n\n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n\n    nDecorations = decorations.length = decPos;\n\n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n\n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n        var end = Math.min(spanEnd, decEnd);\n\n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n\n        sourceIndex = end;\n\n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n\n\nvar path = require('path');\n\nmodule.exports = {\n  prettyPrint: prettyPrint,\n  prettyPrintOne: prettyPrintOne,\n  // include paths for css preprocessor support\n  includePaths: [\n    __dirname,\n    path.resolve(__dirname, '../styles')\n  ]\n};\n","date":"2019-04-30T08:09:45.664Z","updated":"2019-04-30T08:09:45.664Z","path":"plugins/prettify/node_prettify.js","layout":"false","title":"","comments":1,"_id":"cjxh80em500206c9v4dfw0wuq","content":"\nvar IN_GLOBAL_SCOPE = false;\n\n/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\" target=\"_blank\" rel=\"noopener\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * </p><p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * </li><li> define style rules.  See the example page for examples.\n * </li><li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </xmp></code></pre></li></ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nvar PR_SHOULD_USE_CONTINUATION = true\nif (typeof window !== 'undefined') {\n  window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n}\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = (typeof window !== 'undefined') ? window : {};\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,from,function,\" +\n      \"get,import,implements,instanceof,interface,let,null,of,set,undefined,\" +\n      \"var,with,yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n\n  // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n  // Do not modify, your changes will be erased.\n\n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<regexp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n\n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n\n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n\n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= 1 2 65 c1 && <=\"7\" ) { return parseint(charsetpart.substring(1), 8); } else if (c1=\"==\" 'u' || 'x') parseint(charsetpart.substring(2), 16); charsetpart.charcodeat(1); function encodeescape(charcode) (charcode 0x20) 0x10 ? '\\\\x0' : '\\\\x') + charcode.tostring(16); var ch=\"String.fromCharCode(charCode);\" (ch=\"==\" '\\\\' '-' ']' '^') \"\\\\\" ch; casefoldcharset(charset) charsetparts=\"charSet.substring(1,\" charset.length - 1).match( new regexp( '\\\\\\\\u[0-9a-fa-f]{4}' '|\\\\\\\\x[0-9a-fa-f]{2}' '|\\\\\\\\[0-3][0-7]{0,2}' '|\\\\\\\\[0-7]{1,2}' '|\\\\\\\\[\\\\s\\\\s]' '|-' '|[^-\\\\\\\\]', 'g')); ranges=\"[];\" inverse=\"charsetParts[0]\" ==\"=\" '^'; out=\"['['];\" (inverse) out.push('^'); for (var i=\"inverse\" 0, n=\"charsetParts.length;\" n; ++i) p=\"charsetParts[i];\" ( \\\\[bdsw] i.test(p)) don't muck with named groups. out.push(p); start=\"decodeEscape(p);\" end; (i charsetparts[i 1]) end=\"decodeEscape(charsetParts[i\" 2]); ranges.push([start, end]); the range might intersect letters, then expand it. this case handling is too simplistic. it does not deal non-latin folding. works latin source code identifiers though. (!(end> 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n\n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastrange[1] + 1) { range[1]); } else consolidatedranges.push(lastrange=\"range);\" for (var i=\"0;\" < consolidatedranges.length; ++i) var range=\"consolidatedRanges[i];\" out.push(encodeescape(range[0])); if (range[1]> range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n\n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n\n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n\n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupindex) { capturedgroups[decimalvalue]=\"-1;\" } else replace with an unambiguous escape sequence so that octal does not turn into a backreference to capturing group from earlier regex. parts[i]=\"encodeEscape(decimalValue);\" renumber groups and reduce non-capturing where possible. for (var i=\"1;\" < capturedgroups.length; ++i) if (-1=\"==\" capturedgroups[i]) capturedgroups[i]=\"++capturedGroupIndex;\" groupindex=\"0;\" n; var p=\"parts[i];\" (p=\"==\" '(') ++groupindex; (!capturedgroups[groupindex]) ; ('\\\\'=\"==\" p.charat(0)) decimalvalue=\"+p.substring(1);\" (decimalvalue && + capturedgroups[decimalvalue]; remove any prefix anchors the output will match anywhere. ^^ really mean anchored though. ('^'=\"==\" '^' !=\"=\" parts[i 1]) expand letters handle mixing of case-sensitive case-insensitive patterns necessary. (regex.ignorecase needtofoldcase) ch0=\"p.charAt(0);\" (p.length>= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n\n      return parts.join('');\n    }\n\n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n\n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code </p><p><b>print </b>'Hello '<br>  + 'World';</p>}.</=></=></=></regexp></code></pre></string></p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n\n    walk(node);\n\n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= 1 index_n, and style_n-1 applies to * all characters in sourcecode[index_n-1:index_n]. the stylepatterns is a list whose elements have form [style : string, pattern regexp, deprecated, shortcut string]. style constant like pr_plain, or can be string of 'lang-foo', where foo language extension describing portion token $1 after executes. e.g., if 'lang-lisp', group contains text '(hello (world))', then that will passed registered lisp handler for formatting. before restyled using this decorator so decorators should take care doesn't result infinite recursion. example, html lexer rule script looks something ['lang-js', <[s]cript>(.+?)<\\ script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo \n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n\n    var document = node.ownerDocument;\n\n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName.toLowerCase()) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n\n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n\n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n\n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n\n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n\n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n\n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n\n    node.appendChild(ol);\n  }\n\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n\n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n\n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n\n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n\n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n\n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n\n    nDecorations = decorations.length = decPos;\n\n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n\n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n        var end = Math.min(spanEnd, decEnd);\n\n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n\n        sourceIndex = end;\n\n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n\n\nvar path = require('path');\n\nmodule.exports = {\n  prettyPrint: prettyPrint,\n  prettyPrintOne: prettyPrintOne,\n  // include paths for css preprocessor support\n  includePaths: [\n    __dirname,\n    path.resolve(__dirname, '../styles')\n  ]\n};\n</script></\\></=></code></pre></p></pre></code></pre></p>","site":{"data":{}},"excerpt":"","more":"\nvar IN_GLOBAL_SCOPE = false;\n\n/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\" target=\"_blank\" rel=\"noopener\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * </p><p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * </li><li> define style rules.  See the example page for examples.\n * </li><li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </xmp></code></pre></li></ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nvar PR_SHOULD_USE_CONTINUATION = true\nif (typeof window !== 'undefined') {\n  window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n}\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = (typeof window !== 'undefined') ? window : {};\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,from,function,\" +\n      \"get,import,implements,instanceof,interface,let,null,of,set,undefined,\" +\n      \"var,with,yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n\n  // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n  // Do not modify, your changes will be erased.\n\n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<regexp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n\n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n\n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n\n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= 1 2 65 c1 && <=\"7\" ) { return parseint(charsetpart.substring(1), 8); } else if (c1=\"==\" 'u' || 'x') parseint(charsetpart.substring(2), 16); charsetpart.charcodeat(1); function encodeescape(charcode) (charcode 0x20) 0x10 ? '\\\\x0' : '\\\\x') + charcode.tostring(16); var ch=\"String.fromCharCode(charCode);\" (ch=\"==\" '\\\\' '-' ']' '^') \"\\\\\" ch; casefoldcharset(charset) charsetparts=\"charSet.substring(1,\" charset.length - 1).match( new regexp( '\\\\\\\\u[0-9a-fa-f]{4}' '|\\\\\\\\x[0-9a-fa-f]{2}' '|\\\\\\\\[0-3][0-7]{0,2}' '|\\\\\\\\[0-7]{1,2}' '|\\\\\\\\[\\\\s\\\\s]' '|-' '|[^-\\\\\\\\]', 'g')); ranges=\"[];\" inverse=\"charsetParts[0]\" ==\"=\" '^'; out=\"['['];\" (inverse) out.push('^'); for (var i=\"inverse\" 0, n=\"charsetParts.length;\" n; ++i) p=\"charsetParts[i];\" ( \\\\[bdsw] i.test(p)) don't muck with named groups. out.push(p); start=\"decodeEscape(p);\" end; (i charsetparts[i 1]) end=\"decodeEscape(charsetParts[i\" 2]); ranges.push([start, end]); the range might intersect letters, then expand it. this case handling is too simplistic. it does not deal non-latin folding. works latin source code identifiers though. (!(end> 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n\n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastrange[1] + 1) { range[1]); } else consolidatedranges.push(lastrange=\"range);\" for (var i=\"0;\" < consolidatedranges.length; ++i) var range=\"consolidatedRanges[i];\" out.push(encodeescape(range[0])); if (range[1]> range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n\n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n\n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n\n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupindex) { capturedgroups[decimalvalue]=\"-1;\" } else replace with an unambiguous escape sequence so that octal does not turn into a backreference to capturing group from earlier regex. parts[i]=\"encodeEscape(decimalValue);\" renumber groups and reduce non-capturing where possible. for (var i=\"1;\" < capturedgroups.length; ++i) if (-1=\"==\" capturedgroups[i]) capturedgroups[i]=\"++capturedGroupIndex;\" groupindex=\"0;\" n; var p=\"parts[i];\" (p=\"==\" '(') ++groupindex; (!capturedgroups[groupindex]) ; ('\\\\'=\"==\" p.charat(0)) decimalvalue=\"+p.substring(1);\" (decimalvalue && + capturedgroups[decimalvalue]; remove any prefix anchors the output will match anywhere. ^^ really mean anchored though. ('^'=\"==\" '^' !=\"=\" parts[i 1]) expand letters handle mixing of case-sensitive case-insensitive patterns necessary. (regex.ignorecase needtofoldcase) ch0=\"p.charAt(0);\" (p.length>= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n\n      return parts.join('');\n    }\n\n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n\n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code </p><p><b>print </b>'Hello '<br>  + 'World';</p>}.</=></=></=></regexp></code></pre></string></p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n\n    walk(node);\n\n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= 1 index_n, and style_n-1 applies to * all characters in sourcecode[index_n-1:index_n]. the stylepatterns is a list whose elements have form [style : string, pattern regexp, deprecated, shortcut string]. style constant like pr_plain, or can be string of 'lang-foo', where foo language extension describing portion token $1 after executes. e.g., if 'lang-lisp', group contains text '(hello (world))', then that will passed registered lisp handler for formatting. before restyled using this decorator so decorators should take care doesn't result infinite recursion. example, html lexer rule script looks something ['lang-js', <[s]cript>(.+?)<\\ script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo \n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n\n    var document = node.ownerDocument;\n\n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName.toLowerCase()) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n\n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n\n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n\n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n\n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n\n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n\n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n\n    node.appendChild(ol);\n  }\n\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n\n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n\n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n\n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n\n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n\n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n\n    nDecorations = decorations.length = decPos;\n\n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n\n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n        var end = Math.min(spanEnd, decEnd);\n\n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n\n        sourceIndex = end;\n\n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n\n\nvar path = require('path');\n\nmodule.exports = {\n  prettyPrint: prettyPrint,\n  prettyPrintOne: prettyPrintOne,\n  // include paths for css preprocessor support\n  includePaths: [\n    __dirname,\n    path.resolve(__dirname, '../styles')\n  ]\n};\n</script></\\></=></code></pre></p></pre></code></pre></p>"},{"_content":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * <p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * <li> define style rules.  See the example page for examples.\n * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n/**\n * @typedef {!Array.<number|string>}\n * Alternating indices and the decorations that should be inserted there.\n * The indices are monotonically increasing.\n */\nvar DecorationsT;\n\n/**\n * @typedef {!{\n *   sourceNode: !Element,\n *   pre: !(number|boolean),\n *   langExtension: ?string,\n *   numberLines: ?(number|boolean),\n *   sourceCode: ?string,\n *   spans: ?(Array.<number|Node>),\n *   basePos: ?number,\n *   decorations: ?DecorationsT\n * }}\n * <dl>\n *  <dt>sourceNode<dd>the element containing the source\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>pre<dd>truthy if white-space in text nodes\n *     should be considered significant.\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n *  <dt>decorations<dd>an array of style classes preceded\n *     by the position at which they start in job.sourceCode in order\n *  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n *     source.\n * </dl>\n */\nvar JobT;\n\n/**\n * @typedef {!{\n *   sourceCode: string,\n *   spans: !(Array.<number|Node>)\n * }}\n * <dl>\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n * </dl>\n */\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = true;\n\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nvar PR_SHOULD_USE_CONTINUATION = true\nif (typeof window !== 'undefined') {\n  window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n}\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = (typeof window !== 'undefined') ? window : {};\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,from,function,\" +\n      \"get,import,implements,instanceof,interface,let,null,of,set,undefined,\" +\n      \"var,with,yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n\n  // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n  // Do not modify, your changes will be erased.\n\n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n\n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n\n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n\n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= c1 && c1 <= '7') {\n        return parseInt(charsetPart.substring(1), 8);\n      } else if (c1 === 'u' || c1 === 'x') {\n        return parseInt(charsetPart.substring(2), 16);\n      } else {\n        return charsetPart.charCodeAt(1);\n      }\n    }\n\n    function encodeEscape(charCode) {\n      if (charCode < 0x20) {\n        return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n      }\n      var ch = String.fromCharCode(charCode);\n      return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n          ? \"\\\\\" + ch : ch;\n    }\n\n    function caseFoldCharset(charSet) {\n      var charsetParts = charSet.substring(1, charSet.length - 1).match(\n          new RegExp(\n              '\\\\\\\\u[0-9A-Fa-f]{4}'\n              + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n              + '|\\\\\\\\[0-3][0-7]{0,2}'\n              + '|\\\\\\\\[0-7]{1,2}'\n              + '|\\\\\\\\[\\\\s\\\\S]'\n              + '|-'\n              + '|[^-\\\\\\\\]',\n              'g'));\n      var ranges = [];\n      var inverse = charsetParts[0] === '^';\n\n      var out = ['['];\n      if (inverse) { out.push('^'); }\n\n      for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n        var p = charsetParts[i];\n        if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n          out.push(p);\n        } else {\n          var start = decodeEscape(p);\n          var end;\n          if (i + 2 < n && '-' === charsetParts[i + 1]) {\n            end = decodeEscape(charsetParts[i + 2]);\n            i += 2;\n          } else {\n            end = start;\n          }\n          ranges.push([start, end]);\n          // If the range might intersect letters, then expand it.\n          // This case handling is too simplistic.\n          // It does not deal with non-latin case folding.\n          // It works for latin source code identifiers though.\n          if (!(end < 65 || start > 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n\n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastRange[1] + 1) {\n          lastRange[1] = Math.max(lastRange[1], range[1]);\n        } else {\n          consolidatedRanges.push(lastRange = range);\n        }\n      }\n\n      for (var i = 0; i < consolidatedRanges.length; ++i) {\n        var range = consolidatedRanges[i];\n        out.push(encodeEscape(range[0]));\n        if (range[1] > range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n\n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n\n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n\n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupIndex) {\n              capturedGroups[decimalValue] = -1;\n            } else {\n              // Replace with an unambiguous escape sequence so that\n              // an octal escape sequence does not turn into a backreference\n              // to a capturing group from an earlier regex.\n              parts[i] = encodeEscape(decimalValue);\n            }\n          }\n        }\n      }\n\n      // Renumber groups and reduce capturing groups to non-capturing groups\n      // where possible.\n      for (var i = 1; i < capturedGroups.length; ++i) {\n        if (-1 === capturedGroups[i]) {\n          capturedGroups[i] = ++capturedGroupIndex;\n        }\n      }\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          ++groupIndex;\n          if (!capturedGroups[groupIndex]) {\n            parts[i] = '(?:';\n          }\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue && decimalValue <= groupIndex) {\n            parts[i] = '\\\\' + capturedGroups[decimalValue];\n          }\n        }\n      }\n\n      // Remove any prefix anchors so that the output will match anywhere.\n      // ^^ really does mean an anchored match though.\n      for (var i = 0; i < n; ++i) {\n        if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n      }\n\n      // Expand letters to groups to handle mixing of case-sensitive and\n      // case-insensitive patterns if necessary.\n      if (regex.ignoreCase && needToFoldCase) {\n        for (var i = 0; i < n; ++i) {\n          var p = parts[i];\n          var ch0 = p.charAt(0);\n          if (p.length >= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n\n      return parts.join('');\n    }\n\n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n\n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n\n    walk(node);\n\n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n    * all characters in sourceCode[index_n-1:index_n].\n    *\n    * The stylePatterns is a list whose elements have the form\n    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n    *\n    * Style is a style constant like PR_PLAIN, or can be a string of the\n    * form 'lang-FOO', where FOO is a language extension describing the\n    * language of the portion of the token in $1 after pattern executes.\n    * E.g., if style is 'lang-lisp', and group 1 contains the text\n    * '(hello (world))', then that portion of the token will be passed to the\n    * registered lisp handler for formatting.\n    * The text before and after group 1 will be restyled using this decorator\n    * so decorators should take care that this doesn't result in infinite\n    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n    * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo {#}\n      // {#}\n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n\n    var document = node.ownerDocument;\n\n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName.toLowerCase()) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n\n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n\n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n\n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n\n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n\n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n\n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n\n    node.appendChild(ol);\n  }\n\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n\n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n\n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n\n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n\n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n\n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n\n    nDecorations = decorations.length = decPos;\n\n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n\n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n        var end = Math.min(spanEnd, decEnd);\n\n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n\n        sourceIndex = end;\n\n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    console.log(\"prettyPrint\");\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n","source":"plugins/prettify/prettify.js","raw":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * <p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * <li> define style rules.  See the example page for examples.\n * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n/**\n * @typedef {!Array.<number|string>}\n * Alternating indices and the decorations that should be inserted there.\n * The indices are monotonically increasing.\n */\nvar DecorationsT;\n\n/**\n * @typedef {!{\n *   sourceNode: !Element,\n *   pre: !(number|boolean),\n *   langExtension: ?string,\n *   numberLines: ?(number|boolean),\n *   sourceCode: ?string,\n *   spans: ?(Array.<number|Node>),\n *   basePos: ?number,\n *   decorations: ?DecorationsT\n * }}\n * <dl>\n *  <dt>sourceNode<dd>the element containing the source\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>pre<dd>truthy if white-space in text nodes\n *     should be considered significant.\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n *  <dt>decorations<dd>an array of style classes preceded\n *     by the position at which they start in job.sourceCode in order\n *  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n *     source.\n * </dl>\n */\nvar JobT;\n\n/**\n * @typedef {!{\n *   sourceCode: string,\n *   spans: !(Array.<number|Node>)\n * }}\n * <dl>\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n * </dl>\n */\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = true;\n\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nvar PR_SHOULD_USE_CONTINUATION = true\nif (typeof window !== 'undefined') {\n  window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n}\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = (typeof window !== 'undefined') ? window : {};\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,from,function,\" +\n      \"get,import,implements,instanceof,interface,let,null,of,set,undefined,\" +\n      \"var,with,yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n\n  // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n  // Do not modify, your changes will be erased.\n\n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n\n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n\n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n\n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= c1 && c1 <= '7') {\n        return parseInt(charsetPart.substring(1), 8);\n      } else if (c1 === 'u' || c1 === 'x') {\n        return parseInt(charsetPart.substring(2), 16);\n      } else {\n        return charsetPart.charCodeAt(1);\n      }\n    }\n\n    function encodeEscape(charCode) {\n      if (charCode < 0x20) {\n        return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n      }\n      var ch = String.fromCharCode(charCode);\n      return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n          ? \"\\\\\" + ch : ch;\n    }\n\n    function caseFoldCharset(charSet) {\n      var charsetParts = charSet.substring(1, charSet.length - 1).match(\n          new RegExp(\n              '\\\\\\\\u[0-9A-Fa-f]{4}'\n              + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n              + '|\\\\\\\\[0-3][0-7]{0,2}'\n              + '|\\\\\\\\[0-7]{1,2}'\n              + '|\\\\\\\\[\\\\s\\\\S]'\n              + '|-'\n              + '|[^-\\\\\\\\]',\n              'g'));\n      var ranges = [];\n      var inverse = charsetParts[0] === '^';\n\n      var out = ['['];\n      if (inverse) { out.push('^'); }\n\n      for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n        var p = charsetParts[i];\n        if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n          out.push(p);\n        } else {\n          var start = decodeEscape(p);\n          var end;\n          if (i + 2 < n && '-' === charsetParts[i + 1]) {\n            end = decodeEscape(charsetParts[i + 2]);\n            i += 2;\n          } else {\n            end = start;\n          }\n          ranges.push([start, end]);\n          // If the range might intersect letters, then expand it.\n          // This case handling is too simplistic.\n          // It does not deal with non-latin case folding.\n          // It works for latin source code identifiers though.\n          if (!(end < 65 || start > 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n\n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastRange[1] + 1) {\n          lastRange[1] = Math.max(lastRange[1], range[1]);\n        } else {\n          consolidatedRanges.push(lastRange = range);\n        }\n      }\n\n      for (var i = 0; i < consolidatedRanges.length; ++i) {\n        var range = consolidatedRanges[i];\n        out.push(encodeEscape(range[0]));\n        if (range[1] > range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n\n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n\n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n\n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupIndex) {\n              capturedGroups[decimalValue] = -1;\n            } else {\n              // Replace with an unambiguous escape sequence so that\n              // an octal escape sequence does not turn into a backreference\n              // to a capturing group from an earlier regex.\n              parts[i] = encodeEscape(decimalValue);\n            }\n          }\n        }\n      }\n\n      // Renumber groups and reduce capturing groups to non-capturing groups\n      // where possible.\n      for (var i = 1; i < capturedGroups.length; ++i) {\n        if (-1 === capturedGroups[i]) {\n          capturedGroups[i] = ++capturedGroupIndex;\n        }\n      }\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          ++groupIndex;\n          if (!capturedGroups[groupIndex]) {\n            parts[i] = '(?:';\n          }\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue && decimalValue <= groupIndex) {\n            parts[i] = '\\\\' + capturedGroups[decimalValue];\n          }\n        }\n      }\n\n      // Remove any prefix anchors so that the output will match anywhere.\n      // ^^ really does mean an anchored match though.\n      for (var i = 0; i < n; ++i) {\n        if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n      }\n\n      // Expand letters to groups to handle mixing of case-sensitive and\n      // case-insensitive patterns if necessary.\n      if (regex.ignoreCase && needToFoldCase) {\n        for (var i = 0; i < n; ++i) {\n          var p = parts[i];\n          var ch0 = p.charAt(0);\n          if (p.length >= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n\n      return parts.join('');\n    }\n\n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n\n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n\n    walk(node);\n\n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n    * all characters in sourceCode[index_n-1:index_n].\n    *\n    * The stylePatterns is a list whose elements have the form\n    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n    *\n    * Style is a style constant like PR_PLAIN, or can be a string of the\n    * form 'lang-FOO', where FOO is a language extension describing the\n    * language of the portion of the token in $1 after pattern executes.\n    * E.g., if style is 'lang-lisp', and group 1 contains the text\n    * '(hello (world))', then that portion of the token will be passed to the\n    * registered lisp handler for formatting.\n    * The text before and after group 1 will be restyled using this decorator\n    * so decorators should take care that this doesn't result in infinite\n    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n    * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo {#}\n      // {#}\n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n\n    var document = node.ownerDocument;\n\n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName.toLowerCase()) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n\n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n\n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n\n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n\n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n\n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n\n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n\n    node.appendChild(ol);\n  }\n\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n\n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n\n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n\n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n\n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n\n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n\n    nDecorations = decorations.length = decPos;\n\n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n\n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n        var end = Math.min(spanEnd, decEnd);\n\n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n\n        sourceIndex = end;\n\n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    console.log(\"prettyPrint\");\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n","date":"2019-04-30T11:41:51.807Z","updated":"2019-04-30T11:41:51.807Z","path":"plugins/prettify/prettify.js","layout":"false","title":"","comments":1,"_id":"cjxh80em500216c9vaygakysf","content":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\" target=\"_blank\" rel=\"noopener\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * </p><p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * </li><li> define style rules.  See the example page for examples.\n * </li><li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </xmp></code></pre></li></ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n/**\n * @typedef {!Array.<number|string>}\n * Alternating indices and the decorations that should be inserted there.\n * The indices are monotonically increasing.\n */\nvar DecorationsT;\n\n/**\n * @typedef {!{\n *   sourceNode: !Element,\n *   pre: !(number|boolean),\n *   langExtension: ?string,\n *   numberLines: ?(number|boolean),\n *   sourceCode: ?string,\n *   spans: ?(Array.<number|node>),\n *   basePos: ?number,\n *   decorations: ?DecorationsT\n * }}\n * <dl>\n *  <dt>sourceNode<dd>the element containing the source\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>pre<dd>truthy if white-space in text nodes\n *     should be considered significant.\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <br>}) corresponding to that\n *     span.\n *  <dt>decorations<dd>an array of style classes preceded\n *     by the position at which they start in job.sourceCode in order\n *  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n *     source.\n * </dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dl>\n */\nvar JobT;\n\n/**\n * @typedef {!{\n *   sourceCode: string,\n *   spans: !(Array.<number|node>)\n * }}\n * <dl>\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <br>}) corresponding to that\n *     span.\n * </dd></dt></dd></dt></dl>\n */\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = true;\n\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nvar PR_SHOULD_USE_CONTINUATION = true\nif (typeof window !== 'undefined') {\n  window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n}\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = (typeof window !== 'undefined') ? window : {};\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,from,function,\" +\n      \"get,import,implements,instanceof,interface,let,null,of,set,undefined,\" +\n      \"var,with,yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n\n  // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n  // Do not modify, your changes will be erased.\n\n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<regexp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n\n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n\n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n\n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= 1 2 65 c1 && <=\"7\" ) { return parseint(charsetpart.substring(1), 8); } else if (c1=\"==\" 'u' || 'x') parseint(charsetpart.substring(2), 16); charsetpart.charcodeat(1); function encodeescape(charcode) (charcode 0x20) 0x10 ? '\\\\x0' : '\\\\x') + charcode.tostring(16); var ch=\"String.fromCharCode(charCode);\" (ch=\"==\" '\\\\' '-' ']' '^') \"\\\\\" ch; casefoldcharset(charset) charsetparts=\"charSet.substring(1,\" charset.length - 1).match( new regexp( '\\\\\\\\u[0-9a-fa-f]{4}' '|\\\\\\\\x[0-9a-fa-f]{2}' '|\\\\\\\\[0-3][0-7]{0,2}' '|\\\\\\\\[0-7]{1,2}' '|\\\\\\\\[\\\\s\\\\s]' '|-' '|[^-\\\\\\\\]', 'g')); ranges=\"[];\" inverse=\"charsetParts[0]\" ==\"=\" '^'; out=\"['['];\" (inverse) out.push('^'); for (var i=\"inverse\" 0, n=\"charsetParts.length;\" n; ++i) p=\"charsetParts[i];\" ( \\\\[bdsw] i.test(p)) don't muck with named groups. out.push(p); start=\"decodeEscape(p);\" end; (i charsetparts[i 1]) end=\"decodeEscape(charsetParts[i\" 2]); ranges.push([start, end]); the range might intersect letters, then expand it. this case handling is too simplistic. it does not deal non-latin folding. works latin source code identifiers though. (!(end> 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n\n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastrange[1] + 1) { range[1]); } else consolidatedranges.push(lastrange=\"range);\" for (var i=\"0;\" < consolidatedranges.length; ++i) var range=\"consolidatedRanges[i];\" out.push(encodeescape(range[0])); if (range[1]> range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n\n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n\n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n\n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupindex) { capturedgroups[decimalvalue]=\"-1;\" } else replace with an unambiguous escape sequence so that octal does not turn into a backreference to capturing group from earlier regex. parts[i]=\"encodeEscape(decimalValue);\" renumber groups and reduce non-capturing where possible. for (var i=\"1;\" < capturedgroups.length; ++i) if (-1=\"==\" capturedgroups[i]) capturedgroups[i]=\"++capturedGroupIndex;\" groupindex=\"0;\" n; var p=\"parts[i];\" (p=\"==\" '(') ++groupindex; (!capturedgroups[groupindex]) ; ('\\\\'=\"==\" p.charat(0)) decimalvalue=\"+p.substring(1);\" (decimalvalue && + capturedgroups[decimalvalue]; remove any prefix anchors the output will match anywhere. ^^ really mean anchored though. ('^'=\"==\" '^' !=\"=\" parts[i 1]) expand letters handle mixing of case-sensitive case-insensitive patterns necessary. (regex.ignorecase needtofoldcase) ch0=\"p.charAt(0);\" (p.length>= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n\n      return parts.join('');\n    }\n\n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n\n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code </p><p><b>print </b>'Hello '<br>  + 'World';</p>}.</=></=></=></regexp></code></pre></string></number|node></number|node></number|string></p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n\n    walk(node);\n\n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= 1 index_n, and style_n-1 applies to * all characters in sourcecode[index_n-1:index_n]. the stylepatterns is a list whose elements have form [style : string, pattern regexp, deprecated, shortcut string]. style constant like pr_plain, or can be string of 'lang-foo', where foo language extension describing portion token $1 after executes. e.g., if 'lang-lisp', group contains text '(hello (world))', then that will passed registered lisp handler for formatting. before restyled using this decorator so decorators should take care doesn't result infinite recursion. example, html lexer rule script looks something ['lang-js', <[s]cript>(.+?)<\\ script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo \n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n\n    var document = node.ownerDocument;\n\n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName.toLowerCase()) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n\n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n\n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n\n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n\n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n\n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n\n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n\n    node.appendChild(ol);\n  }\n\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n\n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n\n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n\n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n\n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n\n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n\n    nDecorations = decorations.length = decPos;\n\n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n\n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n        var end = Math.min(spanEnd, decEnd);\n\n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n\n        sourceIndex = end;\n\n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    console.log(\"prettyPrint\");\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n</script></\\></=></code></pre></p></pre></code></pre></p>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\" target=\"_blank\" rel=\"noopener\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * </p><p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * </li><li> define style rules.  See the example page for examples.\n * </li><li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </xmp></code></pre></li></ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n/**\n * @typedef {!Array.<number|string>}\n * Alternating indices and the decorations that should be inserted there.\n * The indices are monotonically increasing.\n */\nvar DecorationsT;\n\n/**\n * @typedef {!{\n *   sourceNode: !Element,\n *   pre: !(number|boolean),\n *   langExtension: ?string,\n *   numberLines: ?(number|boolean),\n *   sourceCode: ?string,\n *   spans: ?(Array.<number|node>),\n *   basePos: ?number,\n *   decorations: ?DecorationsT\n * }}\n * <dl>\n *  <dt>sourceNode<dd>the element containing the source\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>pre<dd>truthy if white-space in text nodes\n *     should be considered significant.\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <br>}) corresponding to that\n *     span.\n *  <dt>decorations<dd>an array of style classes preceded\n *     by the position at which they start in job.sourceCode in order\n *  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n *     source.\n * </dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dl>\n */\nvar JobT;\n\n/**\n * @typedef {!{\n *   sourceCode: string,\n *   spans: !(Array.<number|node>)\n * }}\n * <dl>\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <br>}) corresponding to that\n *     span.\n * </dd></dt></dd></dt></dl>\n */\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = true;\n\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nvar PR_SHOULD_USE_CONTINUATION = true\nif (typeof window !== 'undefined') {\n  window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n}\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = (typeof window !== 'undefined') ? window : {};\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,from,function,\" +\n      \"get,import,implements,instanceof,interface,let,null,of,set,undefined,\" +\n      \"var,with,yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n\n  // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n  // Do not modify, your changes will be erased.\n\n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<regexp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n\n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n\n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n\n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= 1 2 65 c1 && <=\"7\" ) { return parseint(charsetpart.substring(1), 8); } else if (c1=\"==\" 'u' || 'x') parseint(charsetpart.substring(2), 16); charsetpart.charcodeat(1); function encodeescape(charcode) (charcode 0x20) 0x10 ? '\\\\x0' : '\\\\x') + charcode.tostring(16); var ch=\"String.fromCharCode(charCode);\" (ch=\"==\" '\\\\' '-' ']' '^') \"\\\\\" ch; casefoldcharset(charset) charsetparts=\"charSet.substring(1,\" charset.length - 1).match( new regexp( '\\\\\\\\u[0-9a-fa-f]{4}' '|\\\\\\\\x[0-9a-fa-f]{2}' '|\\\\\\\\[0-3][0-7]{0,2}' '|\\\\\\\\[0-7]{1,2}' '|\\\\\\\\[\\\\s\\\\s]' '|-' '|[^-\\\\\\\\]', 'g')); ranges=\"[];\" inverse=\"charsetParts[0]\" ==\"=\" '^'; out=\"['['];\" (inverse) out.push('^'); for (var i=\"inverse\" 0, n=\"charsetParts.length;\" n; ++i) p=\"charsetParts[i];\" ( \\\\[bdsw] i.test(p)) don't muck with named groups. out.push(p); start=\"decodeEscape(p);\" end; (i charsetparts[i 1]) end=\"decodeEscape(charsetParts[i\" 2]); ranges.push([start, end]); the range might intersect letters, then expand it. this case handling is too simplistic. it does not deal non-latin folding. works latin source code identifiers though. (!(end> 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n\n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastrange[1] + 1) { range[1]); } else consolidatedranges.push(lastrange=\"range);\" for (var i=\"0;\" < consolidatedranges.length; ++i) var range=\"consolidatedRanges[i];\" out.push(encodeescape(range[0])); if (range[1]> range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n\n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n\n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n\n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupindex) { capturedgroups[decimalvalue]=\"-1;\" } else replace with an unambiguous escape sequence so that octal does not turn into a backreference to capturing group from earlier regex. parts[i]=\"encodeEscape(decimalValue);\" renumber groups and reduce non-capturing where possible. for (var i=\"1;\" < capturedgroups.length; ++i) if (-1=\"==\" capturedgroups[i]) capturedgroups[i]=\"++capturedGroupIndex;\" groupindex=\"0;\" n; var p=\"parts[i];\" (p=\"==\" '(') ++groupindex; (!capturedgroups[groupindex]) ; ('\\\\'=\"==\" p.charat(0)) decimalvalue=\"+p.substring(1);\" (decimalvalue && + capturedgroups[decimalvalue]; remove any prefix anchors the output will match anywhere. ^^ really mean anchored though. ('^'=\"==\" '^' !=\"=\" parts[i 1]) expand letters handle mixing of case-sensitive case-insensitive patterns necessary. (regex.ignorecase needtofoldcase) ch0=\"p.charAt(0);\" (p.length>= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n\n      return parts.join('');\n    }\n\n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n\n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code </p><p><b>print </b>'Hello '<br>  + 'World';</p>}.</=></=></=></regexp></code></pre></string></number|node></number|node></number|string></p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n\n    walk(node);\n\n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= 1 index_n, and style_n-1 applies to * all characters in sourcecode[index_n-1:index_n]. the stylepatterns is a list whose elements have form [style : string, pattern regexp, deprecated, shortcut string]. style constant like pr_plain, or can be string of 'lang-foo', where foo language extension describing portion token $1 after executes. e.g., if 'lang-lisp', group contains text '(hello (world))', then that will passed registered lisp handler for formatting. before restyled using this decorator so decorators should take care doesn't result infinite recursion. example, html lexer rule script looks something ['lang-js', <[s]cript>(.+?)<\\ script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo \n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n\n    var document = node.ownerDocument;\n\n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName.toLowerCase()) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n\n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n\n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n\n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n\n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n\n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n\n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n\n    node.appendChild(ol);\n  }\n\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n\n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n\n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n\n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n\n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n\n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n\n    nDecorations = decorations.length = decPos;\n\n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n\n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n        var end = Math.min(spanEnd, decEnd);\n\n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n\n        sourceIndex = end;\n\n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    console.log(\"prettyPrint\");\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n</script></\\></=></code></pre></p></pre></code></pre></p>"},{"_content":"/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * <div style=\"white-space: pre\">\n * Looks at query parameters to decide which language handlers and style-sheets\n * to load.\n *\n * Query Parameter     Format           Effect                        Default\n * +------------------+---------------+------------------------------+--------+\n * | autorun=         | true | false  | If true then prettyPrint()   | \"true\" |\n * |                  |               | is called on page load.      |        |\n * +------------------+---------------+------------------------------+--------+\n * | lang=            | language name | Loads the language handler   | Can    |\n * |                  |               | named \"lang-<NAME>.js\".      | appear |\n * |                  |               | See available handlers at    | many   |\n * |                  |               | https://github.com/google/   | times. |\n * |                  |               | code-prettify/tree/master/   |        |\n * |                  |               | src                          |        |\n * +------------------+---------------+------------------------------+--------+\n * | skin=            | skin name     | Loads the skin stylesheet    | none.  |\n * |                  |               | named \"<NAME>.css\".          |        |\n * |                  |               | https://raw.githack.com/     |        |\n * |                  |               | google/code-prettify/master/ |        |\n * |                  |               | styles/index.html            |        |\n * +------------------+---------------+------------------------------+--------+\n * | callback=        | JS identifier | When \"prettyPrint\" finishes  | none   |\n * |                  |               | window.exports[js_ident] is  |        |\n * |                  |               | called.                      |        |\n * |                  |               | The callback must be under   |        |\n * |                  |               | exports to reduce the risk   |        |\n * |                  |               | of XSS via query parameter   |        |\n * |                  |               | injection.                   |        |\n * +------------------+---------------+------------------------------+--------+\n *\n * Examples\n * .../run_prettify.js?lang=css&skin=sunburst\n *   1. Loads the CSS language handler which can be used to prettify CSS\n *      stylesheets, HTML <style> element bodies and style=\"...\" attributes\n *      values.\n *   2. Loads the sunburst.css stylesheet instead of the default prettify.css\n *      stylesheet.\n *      A gallery of stylesheets is available at\n *      https://raw.githack.com/google/code-prettify/master/styles/index.html\n *   3. Since autorun=false is not specified, calls prettyPrint() on page load.\n * </div>\n */\n\n/**\n * @typedef {!Array.<number|string>}\n * Alternating indices and the decorations that should be inserted there.\n * The indices are monotonically increasing.\n */\nvar DecorationsT;\n\n/**\n * @typedef {!{\n *   sourceNode: !Element,\n *   pre: !(number|boolean),\n *   langExtension: ?string,\n *   numberLines: ?(number|boolean),\n *   sourceCode: ?string,\n *   spans: ?(Array.<number|Node>),\n *   basePos: ?number,\n *   decorations: ?DecorationsT\n * }}\n * <dl>\n *  <dt>sourceNode<dd>the element containing the source\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>pre<dd>truthy if white-space in text nodes\n *     should be considered significant.\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n *  <dt>decorations<dd>an array of style classes preceded\n *     by the position at which they start in job.sourceCode in order\n *  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n *     source.\n * </dl>\n */\nvar JobT;\n\n/**\n * @typedef {!{\n *   sourceCode: string,\n *   spans: !(Array.<number|Node>)\n * }}\n * <dl>\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n * </dl>\n */\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = false;\n\n\n(function () {\n  \"use strict\";\n\n  var win = window;\n  var doc = document;\n  var root = doc.documentElement;\n  var head = doc['head'] || doc.getElementsByTagName(\"head\")[0] || root;\n\n  // From http://javascript.nwbox.com/ContentLoaded/contentloaded.js\n  // Author: Diego Perini (diego.perini at gmail.com)\n  // Summary: cross-browser wrapper for DOMContentLoaded\n  // Updated: 20101020\n  // License: MIT\n  // Version: 1.2\n  function contentLoaded(callback) {\n    var addEventListener = doc['addEventListener'];\n    var done = false, top = true,\n        add = addEventListener ? 'addEventListener' : 'attachEvent',\n        rem = addEventListener ? 'removeEventListener' : 'detachEvent',\n        pre = addEventListener ? '' : 'on',\n\n        init = function(e) {\n          if (e.type == 'readystatechange' && doc.readyState != 'complete') {\n            return;\n          }\n          (e.type == 'load' ? win : doc)[rem](pre + e.type, init, false);\n          if (!done && (done = true)) { callback.call(win, e.type || e); }\n        },\n\n        poll = function() {\n          try {\n            root.doScroll('left');\n          } catch(e) {\n            win.setTimeout(poll, 50);\n            return;\n          }\n          init('poll');\n        };\n\n    if (doc.readyState == 'complete') {\n      callback.call(win, 'lazy');\n    } else {\n      if (doc.createEventObject && root.doScroll) {\n        try { top = !win.frameElement; } catch(e) { }\n        if (top) { poll(); }\n      }\n      doc[add](pre + 'DOMContentLoaded', init, false);\n      doc[add](pre + 'readystatechange', init, false);\n      win[add](pre + 'load', init, false);\n    }\n  }\n\n  // Given a list of URLs to stylesheets, loads the first that loads without\n  // triggering an error event.\n  function loadStylesheetsFallingBack(stylesheets) {\n    var n = stylesheets.length;\n    function load(i) {\n      if (i === n) { return; }\n      var link = doc.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      if (i + 1 < n) {\n        // http://pieisgood.org/test/script-link-events/ indicates that many\n        // versions of IE do not support onerror on <link>s, though\n        // http://msdn.microsoft.com/en-us/library/ie/ms535848(v=vs.85).aspx\n        // indicates that recent IEs do support error.\n        link.error = link.onerror = function () { load(i + 1); };\n      }\n      link.href = stylesheets[i];\n      head.appendChild(link);\n    }\n    load(0);\n  }\n\n  var scriptQuery = '';\n  // Look for the <script> node that loads this script to get its parameters.\n  // This starts looking at the end instead of just considering the last\n  // because deferred and async scripts run out of order.\n  // If the script is loaded twice, then this will run in reverse order.\n  var scripts = doc.getElementsByTagName('script');\n  for (var i = scripts.length; --i >= 0;) {\n    var script = scripts[i];\n    var match = script.src.match(\n        /^[^?#]*\\/run_prettify\\.js(\\?[^#]*)?(?:#.*)?$/);\n    if (match) {\n      scriptQuery = match[1] || '';\n      // Remove the script from the DOM so that multiple runs at least run\n      // multiple times even if parameter sets are interpreted in reverse\n      // order.\n      script.parentNode.removeChild(script);\n      break;\n    }\n  }\n\n  // Pull parameters into local variables.\n  var autorun = true;\n  var langs = [];\n  var skins = [];\n  var callbacks = [];\n  scriptQuery.replace(\n      /[?&]([^&=]+)=([^&]+)/g,\n      function (_, name, value) {\n        value = decodeURIComponent(value);\n        name = decodeURIComponent(name);\n        if (name == 'autorun')   { autorun = !/^[0fn]/i.test(value); } else\n        if (name == 'lang')      { langs.push(value);                } else\n        if (name == 'skin')      { skins.push(value);                } else\n        if (name == 'callback')  { callbacks.push(value);            }\n      });\n\n  // Use https to avoid mixed content warnings in client pages and to\n  // prevent a MITM from rewrite prettify mid-flight.\n  // This only works if this script is loaded via https : something\n  // over which we exercise no control.\n  var LOADER_BASE_URL =\n     'https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader';\n\n  for (var i = 0, n = langs.length; i < n; ++i) (function (lang) {\n    var script = doc.createElement(\"script\");\n\n    // Excerpted from jQuery.ajaxTransport(\"script\") to fire events when\n    // a script is finished loading.\n    // Attach handlers for each script\n    script.onload = script.onerror = script.onreadystatechange = function () {\n      if (script && (\n            !script.readyState || /loaded|complete/.test(script.readyState))) {\n        // Handle memory leak in IE\n        script.onerror = script.onload = script.onreadystatechange = null;\n\n        --pendingLanguages;\n        checkPendingLanguages();\n\n        // Remove the script\n        if (script.parentNode) {\n          script.parentNode.removeChild(script);\n        }\n\n        script = null;\n      }\n    };\n\n    script.type = 'text/javascript';\n    script.src = LOADER_BASE_URL\n      + '/lang-' + encodeURIComponent(langs[i]) + '.js';\n\n    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n    head.insertBefore(script, head.firstChild);\n  })(langs[i]);\n\n  var pendingLanguages = langs.length;\n  function checkPendingLanguages() {\n    if (!pendingLanguages) {\n      win.setTimeout(onLangsLoaded, 0);\n    }\n  }\n\n  var skinUrls = [];\n  for (var i = 0, n = skins.length; i < n; ++i) {\n    skinUrls.push(LOADER_BASE_URL\n        + '/skins/' + encodeURIComponent(skins[i]) + '.css');\n  }\n  skinUrls.push(LOADER_BASE_URL + '/prettify.css');\n  loadStylesheetsFallingBack(skinUrls);\n\n  var prettyPrint = (function () {\n    /**\n     * @license\n     * Copyright (C) 2006 Google Inc.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n\n    /**\n     * @fileoverview\n     * some functions for browser-side pretty printing of code contained in html.\n     *\n     * <p>\n     * For a fairly comprehensive set of languages see the\n     * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n     * file that came with this source.  At a minimum, the lexer should work on a\n     * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n     * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n     * and a subset of Perl, but, because of commenting conventions, doesn't work on\n     * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n     * <p>\n     * Usage: <ol>\n     * <li> include this source file in an html page via\n     *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n     * <li> define style rules.  See the example page for examples.\n     * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n     *    {@code class=prettyprint.}\n     *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n     *    printer needs to do more substantial DOM manipulations to support that, so\n     *    some css styles may not be preserved.\n     * </ol>\n     * That's it.  I wanted to keep the API as simple as possible, so there's no\n     * need to specify which language the code is in, but if you wish, you can add\n     * another class to the {@code <pre>} or {@code <code>} element to specify the\n     * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n     * starts with \"lang-\" followed by a file extension, specifies the file type.\n     * See the \"lang-*.js\" files in this directory for code that implements\n     * per-language file handlers.\n     * <p>\n     * Change log:<br>\n     * cbeust, 2006/08/22\n     * <blockquote>\n     *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n     * </blockquote>\n     * @requires console\n     */\n\n    // JSLint declarations\n    /*global console, document, navigator, setTimeout, window, define */\n\n\n    /**\n     * {@type !{\n     *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n     *   'registerLangHandler': function (function (JobT), Array.<string>),\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_VALUE': string,\n     *   'PR_COMMENT': string,\n     *   'PR_DECLARATION': string,\n     *   'PR_KEYWORD': string,\n     *   'PR_LITERAL': string,\n     *   'PR_NOCODE': string,\n     *   'PR_PLAIN': string,\n     *   'PR_PUNCTUATION': string,\n     *   'PR_SOURCE': string,\n     *   'PR_STRING': string,\n     *   'PR_TAG': string,\n     *   'PR_TYPE': string,\n     *   'prettyPrintOne': function (string, string, number|boolean),\n     *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n     * }}\n     * @const\n     */\n    var PR;\n\n    /**\n     * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n     * UI events.\n     * If set to {@code false}, {@code prettyPrint()} is synchronous.\n     */\n    var PR_SHOULD_USE_CONTINUATION = true\n    if (typeof window !== 'undefined') {\n      window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n    }\n\n    /**\n     * Pretty print a chunk of code.\n     * @param {string} sourceCodeHtml The HTML to pretty print.\n     * @param {string} opt_langExtension The language name to use.\n     *     Typically, a filename extension like 'cpp' or 'java'.\n     * @param {number|boolean} opt_numberLines True to number lines,\n     *     or the 1-indexed number of the first line in sourceCodeHtml.\n     * @return {string} code as html, but prettier\n     */\n    var prettyPrintOne;\n    /**\n     * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n     * {@code class=prettyprint} and prettify them.\n     *\n     * @param {Function} opt_whenDone called when prettifying is done.\n     * @param {HTMLElement|HTMLDocument} opt_root an element or document\n     *   containing all the elements to pretty print.\n     *   Defaults to {@code document.body}.\n     */\n    var prettyPrint;\n\n\n    (function () {\n      var win = (typeof window !== 'undefined') ? window : {};\n      // Keyword lists for various languages.\n      // We use things that coerce to strings to make them compact when minified\n      // and to defeat aggressive optimizers that fold large string constants.\n      var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n      var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n          \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n          \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n      var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n          \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n      var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n          \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n          \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n          \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n          \"static_cast,template,typeid,typename,using,virtual,where\"];\n      var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n          \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n          \"throws,transient\"];\n      var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n          \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n          \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n          \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n          \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n      var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n          \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n          \"throw,true,try,unless,until,when,while,yes\";\n      var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,async,await,constructor,debugger,enum,eval,export,from,function,\" +\n          \"get,import,implements,instanceof,interface,let,null,of,set,undefined,\" +\n          \"var,with,yield,Infinity,NaN\"];\n      var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n          \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n          \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n      var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n          \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n          \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n          \"False,True,None\"];\n      var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n          \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n          \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n          \"BEGIN,END\"];\n      var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n          \"function,in,local,set,then,until\"];\n      var ALL_KEYWORDS = [\n          CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n          PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n      var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n      // token style names.  correspond to css classes\n      /**\n       * token style for a string literal\n       * @const\n       */\n      var PR_STRING = 'str';\n      /**\n       * token style for a keyword\n       * @const\n       */\n      var PR_KEYWORD = 'kwd';\n      /**\n       * token style for a comment\n       * @const\n       */\n      var PR_COMMENT = 'com';\n      /**\n       * token style for a type\n       * @const\n       */\n      var PR_TYPE = 'typ';\n      /**\n       * token style for a literal value.  e.g. 1, null, true.\n       * @const\n       */\n      var PR_LITERAL = 'lit';\n      /**\n       * token style for a punctuation string.\n       * @const\n       */\n      var PR_PUNCTUATION = 'pun';\n      /**\n       * token style for plain text.\n       * @const\n       */\n      var PR_PLAIN = 'pln';\n\n      /**\n       * token style for an sgml tag.\n       * @const\n       */\n      var PR_TAG = 'tag';\n      /**\n       * token style for a markup declaration such as a DOCTYPE.\n       * @const\n       */\n      var PR_DECLARATION = 'dec';\n      /**\n       * token style for embedded source.\n       * @const\n       */\n      var PR_SOURCE = 'src';\n      /**\n       * token style for an sgml attribute name.\n       * @const\n       */\n      var PR_ATTRIB_NAME = 'atn';\n      /**\n       * token style for an sgml attribute value.\n       * @const\n       */\n      var PR_ATTRIB_VALUE = 'atv';\n\n      /**\n       * A class that indicates a section of markup that is not code, e.g. to allow\n       * embedding of line numbers within code listings.\n       * @const\n       */\n      var PR_NOCODE = 'nocode';\n\n\n      // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n      // Do not modify, your changes will be erased.\n\n      // CAVEAT: this does not properly handle the case where a regular\n      // expression immediately follows another since a regular expression may\n      // have flags for case-sensitivity and the like.  Having regexp tokens\n      // adjacent is not valid in any language I'm aware of, so I'm punting.\n      // TODO: maybe style special characters inside a regexp as punctuation.\n\n      /**\n       * A set of tokens that can precede a regular expression literal in\n       * javascript\n       * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n       * has the full list, but I've removed ones that might be problematic when\n       * seen in languages that don't support regular expression literals.\n       *\n       * Specifically, I've removed any keywords that can't precede a regexp\n       * literal in a syntactically legal javascript program, and I've removed the\n       * \"in\" keyword since it's not a keyword in many languages, and might be used\n       * as a count of inches.\n       *\n       * The link above does not accurately describe EcmaScript rules since\n       * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n       * very well in practice.\n       *\n       * @private\n       * @const\n       */\n      var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n      /**\n       * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n       * matches the union of the sets of strings matched by the input RegExp.\n       * Since it matches globally, if the input strings have a start-of-input\n       * anchor (/^.../), it is ignored for the purposes of unioning.\n       * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n       * @return {RegExp} a global regex.\n       */\n      function combinePrefixPatterns(regexs) {\n        var capturedGroupIndex = 0;\n\n        var needToFoldCase = false;\n        var ignoreCase = false;\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.ignoreCase) {\n            ignoreCase = true;\n          } else if (/[a-z]/i.test(regex.source.replace(\n                         /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n            needToFoldCase = true;\n            ignoreCase = false;\n            break;\n          }\n        }\n\n        var escapeCharToCodeUnit = {\n          'b': 8,\n          't': 9,\n          'n': 0xa,\n          'v': 0xb,\n          'f': 0xc,\n          'r': 0xd\n        };\n\n        function decodeEscape(charsetPart) {\n          var cc0 = charsetPart.charCodeAt(0);\n          if (cc0 !== 92 /* \\\\ */) {\n            return cc0;\n          }\n          var c1 = charsetPart.charAt(1);\n          cc0 = escapeCharToCodeUnit[c1];\n          if (cc0) {\n            return cc0;\n          } else if ('0' <= c1 && c1 <= '7') {\n            return parseInt(charsetPart.substring(1), 8);\n          } else if (c1 === 'u' || c1 === 'x') {\n            return parseInt(charsetPart.substring(2), 16);\n          } else {\n            return charsetPart.charCodeAt(1);\n          }\n        }\n\n        function encodeEscape(charCode) {\n          if (charCode < 0x20) {\n            return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n          }\n          var ch = String.fromCharCode(charCode);\n          return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n              ? \"\\\\\" + ch : ch;\n        }\n\n        function caseFoldCharset(charSet) {\n          var charsetParts = charSet.substring(1, charSet.length - 1).match(\n              new RegExp(\n                  '\\\\\\\\u[0-9A-Fa-f]{4}'\n                  + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n                  + '|\\\\\\\\[0-3][0-7]{0,2}'\n                  + '|\\\\\\\\[0-7]{1,2}'\n                  + '|\\\\\\\\[\\\\s\\\\S]'\n                  + '|-'\n                  + '|[^-\\\\\\\\]',\n                  'g'));\n          var ranges = [];\n          var inverse = charsetParts[0] === '^';\n\n          var out = ['['];\n          if (inverse) { out.push('^'); }\n\n          for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n            var p = charsetParts[i];\n            if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n              out.push(p);\n            } else {\n              var start = decodeEscape(p);\n              var end;\n              if (i + 2 < n && '-' === charsetParts[i + 1]) {\n                end = decodeEscape(charsetParts[i + 2]);\n                i += 2;\n              } else {\n                end = start;\n              }\n              ranges.push([start, end]);\n              // If the range might intersect letters, then expand it.\n              // This case handling is too simplistic.\n              // It does not deal with non-latin case folding.\n              // It works for latin source code identifiers though.\n              if (!(end < 65 || start > 122)) {\n                if (!(end < 65 || start > 90)) {\n                  ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n                }\n                if (!(end < 97 || start > 122)) {\n                  ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n                }\n              }\n            }\n          }\n\n          // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n          // -> [[1, 12], [14, 14], [16, 17]]\n          ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n          var consolidatedRanges = [];\n          var lastRange = [];\n          for (var i = 0; i < ranges.length; ++i) {\n            var range = ranges[i];\n            if (range[0] <= lastRange[1] + 1) {\n              lastRange[1] = Math.max(lastRange[1], range[1]);\n            } else {\n              consolidatedRanges.push(lastRange = range);\n            }\n          }\n\n          for (var i = 0; i < consolidatedRanges.length; ++i) {\n            var range = consolidatedRanges[i];\n            out.push(encodeEscape(range[0]));\n            if (range[1] > range[0]) {\n              if (range[1] + 1 > range[0]) { out.push('-'); }\n              out.push(encodeEscape(range[1]));\n            }\n          }\n          out.push(']');\n          return out.join('');\n        }\n\n        function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n          // Split into character sets, escape sequences, punctuation strings\n          // like ('(', '(?:', ')', '^'), and runs of characters that do not\n          // include any of the above.\n          var parts = regex.source.match(\n              new RegExp(\n                  '(?:'\n                  + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n                  + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n                  + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n                  + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n                  + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n                  + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n                  + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n                  + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n                  + ')',\n                  'g'));\n          var n = parts.length;\n\n          // Maps captured group numbers to the number they will occupy in\n          // the output or to -1 if that has not been determined, or to\n          // undefined if they need not be capturing in the output.\n          var capturedGroups = [];\n\n          // Walk over and identify back references to build the capturedGroups\n          // mapping.\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              // groups are 1-indexed, so max group index is count of '('\n              ++groupIndex;\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue) {\n                if (decimalValue <= groupIndex) {\n                  capturedGroups[decimalValue] = -1;\n                } else {\n                  // Replace with an unambiguous escape sequence so that\n                  // an octal escape sequence does not turn into a backreference\n                  // to a capturing group from an earlier regex.\n                  parts[i] = encodeEscape(decimalValue);\n                }\n              }\n            }\n          }\n\n          // Renumber groups and reduce capturing groups to non-capturing groups\n          // where possible.\n          for (var i = 1; i < capturedGroups.length; ++i) {\n            if (-1 === capturedGroups[i]) {\n              capturedGroups[i] = ++capturedGroupIndex;\n            }\n          }\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              ++groupIndex;\n              if (!capturedGroups[groupIndex]) {\n                parts[i] = '(?:';\n              }\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue && decimalValue <= groupIndex) {\n                parts[i] = '\\\\' + capturedGroups[decimalValue];\n              }\n            }\n          }\n\n          // Remove any prefix anchors so that the output will match anywhere.\n          // ^^ really does mean an anchored match though.\n          for (var i = 0; i < n; ++i) {\n            if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n          }\n\n          // Expand letters to groups to handle mixing of case-sensitive and\n          // case-insensitive patterns if necessary.\n          if (regex.ignoreCase && needToFoldCase) {\n            for (var i = 0; i < n; ++i) {\n              var p = parts[i];\n              var ch0 = p.charAt(0);\n              if (p.length >= 2 && ch0 === '[') {\n                parts[i] = caseFoldCharset(p);\n              } else if (ch0 !== '\\\\') {\n                // TODO: handle letters in numeric escapes.\n                parts[i] = p.replace(\n                    /[a-zA-Z]/g,\n                    function (ch) {\n                      var cc = ch.charCodeAt(0);\n                      return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                    });\n              }\n            }\n          }\n\n          return parts.join('');\n        }\n\n        var rewritten = [];\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.global || regex.multiline) { throw new Error('' + regex); }\n          rewritten.push(\n              '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n        }\n\n        return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n      }\n\n\n      /**\n       * Split markup into a string of source code and an array mapping ranges in\n       * that string to the text nodes in which they appear.\n       *\n       * <p>\n       * The HTML DOM structure:</p>\n       * <pre>\n       * (Element   \"p\"\n       *   (Element \"b\"\n       *     (Text  \"print \"))       ; #1\n       *   (Text    \"'Hello '\")      ; #2\n       *   (Element \"br\")            ; #3\n       *   (Text    \"  + 'World';\")) ; #4\n       * </pre>\n       * <p>\n       * corresponds to the HTML\n       * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n       *\n       * <p>\n       * It will produce the output:</p>\n       * <pre>\n       * {\n       *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n       *   //                     1          2\n       *   //           012345678901234 5678901234567\n       *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n       * }\n       * </pre>\n       * <p>\n       * where #1 is a reference to the {@code \"print \"} text node above, and so\n       * on for the other text nodes.\n       * </p>\n       *\n       * <p>\n       * The {@code} spans array is an array of pairs.  Even elements are the start\n       * indices of substrings, and odd elements are the text nodes (or BR elements)\n       * that contain the text for those substrings.\n       * Substrings continue until the next index or the end of the source.\n       * </p>\n       *\n       * @param {Node} node an HTML DOM subtree containing source-code.\n       * @param {boolean|number} isPreformatted truthy if white-space in\n       *    text nodes should be considered significant.\n       * @return {SourceSpansT} source code and the nodes in which they occur.\n       */\n      function extractSourceSpans(node, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n        var chunks = [];\n        var length = 0;\n        var spans = [];\n        var k = 0;\n\n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1) {  // Element\n            if (nocode.test(node.className)) { return; }\n            for (var child = node.firstChild; child; child = child.nextSibling) {\n              walk(child);\n            }\n            var nodeName = node.nodeName.toLowerCase();\n            if ('br' === nodeName || 'li' === nodeName) {\n              chunks[k] = '\\n';\n              spans[k << 1] = length++;\n              spans[(k++ << 1) | 1] = node;\n            }\n          } else if (type == 3 || type == 4) {  // Text\n            var text = node.nodeValue;\n            if (text.length) {\n              if (!isPreformatted) {\n                text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n              } else {\n                text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n              }\n              // TODO: handle tabs here?\n              chunks[k] = text;\n              spans[k << 1] = length;\n              length += text.length;\n              spans[(k++ << 1) | 1] = node;\n            }\n          }\n        }\n\n        walk(node);\n\n        return {\n          sourceCode: chunks.join('').replace(/\\n$/, ''),\n          spans: spans\n        };\n      }\n\n\n      /**\n       * Apply the given language handler to sourceCode and add the resulting\n       * decorations to out.\n       * @param {!Element} sourceNode\n       * @param {number} basePos the index of sourceCode within the chunk of source\n       *    whose decorations are already present on out.\n       * @param {string} sourceCode\n       * @param {function(JobT)} langHandler\n       * @param {DecorationsT} out\n       */\n      function appendDecorations(\n          sourceNode, basePos, sourceCode, langHandler, out) {\n        if (!sourceCode) { return; }\n        /** @type {JobT} */\n        var job = {\n          sourceNode: sourceNode,\n          pre: 1,\n          langExtension: null,\n          numberLines: null,\n          sourceCode: sourceCode,\n          spans: null,\n          basePos: basePos,\n          decorations: null\n        };\n        langHandler(job);\n        out.push.apply(out, job.decorations);\n      }\n\n      var notWs = /\\S/;\n\n      /**\n       * Given an element, if it contains only one child element and any text nodes\n       * it contains contain only space characters, return the sole child element.\n       * Otherwise returns undefined.\n       * <p>\n       * This is meant to return the CODE element in {@code <pre><code ...>} when\n       * there is a single child element that contains all the non-space textual\n       * content, but not to return anything where there are multiple child elements\n       * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n       * is textual content.\n       */\n      function childContentWrapper(element) {\n        var wrapper = undefined;\n        for (var c = element.firstChild; c; c = c.nextSibling) {\n          var type = c.nodeType;\n          wrapper = (type === 1)  // Element Node\n              ? (wrapper ? element : c)\n              : (type === 3)  // Text Node\n              ? (notWs.test(c.nodeValue) ? element : wrapper)\n              : wrapper;\n        }\n        return wrapper === element ? undefined : wrapper;\n      }\n\n      /** Given triples of [style, pattern, context] returns a lexing function,\n        * The lexing function interprets the patterns to find token boundaries and\n        * returns a decoration list of the form\n        * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n        * where index_n is an index into the sourceCode, and style_n is a style\n        * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n        * all characters in sourceCode[index_n-1:index_n].\n        *\n        * The stylePatterns is a list whose elements have the form\n        * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n        *\n        * Style is a style constant like PR_PLAIN, or can be a string of the\n        * form 'lang-FOO', where FOO is a language extension describing the\n        * language of the portion of the token in $1 after pattern executes.\n        * E.g., if style is 'lang-lisp', and group 1 contains the text\n        * '(hello (world))', then that portion of the token will be passed to the\n        * registered lisp handler for formatting.\n        * The text before and after group 1 will be restyled using this decorator\n        * so decorators should take care that this doesn't result in infinite\n        * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n        * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n        * '<script>foo()<\\/script>', which would cause the current decorator to\n        * be called with '<script>' which would not match the same rule since\n        * group 1 must not be empty, so it would be instead styled as PR_TAG by\n        * the generic tag rule.  The handler registered for the 'js' extension would\n        * then be called with 'foo()', and finally, the current decorator would\n        * be called with '<\\/script>' which would not match the original rule and\n        * so the generic tag rule would identify it as a tag.\n        *\n        * Pattern must only match prefixes, and if it matches a prefix, then that\n        * match is considered a token with the same style.\n        *\n        * Context is applied to the last non-whitespace, non-comment token\n        * recognized.\n        *\n        * Shortcut is an optional string of characters, any of which, if the first\n        * character, gurantee that this pattern and only this pattern matches.\n        *\n        * @param {Array} shortcutStylePatterns patterns that always start with\n        *   a known character.  Must have a shortcut string.\n        * @param {Array} fallthroughStylePatterns patterns that will be tried in\n        *   order if the shortcut ones fail.  May have shortcuts.\n        *\n        * @return {function (JobT)} a function that takes an undecorated job and\n        *   attaches a list of decorations.\n        */\n      function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n        var shortcuts = {};\n        var tokenizer;\n        (function () {\n          var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n          var allRegexs = [];\n          var regexKeys = {};\n          for (var i = 0, n = allPatterns.length; i < n; ++i) {\n            var patternParts = allPatterns[i];\n            var shortcutChars = patternParts[3];\n            if (shortcutChars) {\n              for (var c = shortcutChars.length; --c >= 0;) {\n                shortcuts[shortcutChars.charAt(c)] = patternParts;\n              }\n            }\n            var regex = patternParts[1];\n            var k = '' + regex;\n            if (!regexKeys.hasOwnProperty(k)) {\n              allRegexs.push(regex);\n              regexKeys[k] = null;\n            }\n          }\n          allRegexs.push(/[\\0-\\uffff]/);\n          tokenizer = combinePrefixPatterns(allRegexs);\n        })();\n\n        var nPatterns = fallthroughStylePatterns.length;\n\n        /**\n         * Lexes job.sourceCode and attaches an output array job.decorations of\n         * style classes preceded by the position at which they start in\n         * job.sourceCode in order.\n         *\n         * @type{function (JobT)}\n         */\n        var decorate = function (job) {\n          var sourceCode = job.sourceCode, basePos = job.basePos;\n          var sourceNode = job.sourceNode;\n          /** Even entries are positions in source in ascending order.  Odd enties\n            * are style markers (e.g., PR_COMMENT) that run from that position until\n            * the end.\n            * @type {DecorationsT}\n            */\n          var decorations = [basePos, PR_PLAIN];\n          var pos = 0;  // index into sourceCode\n          var tokens = sourceCode.match(tokenizer) || [];\n          var styleCache = {};\n\n          for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n            var token = tokens[ti];\n            var style = styleCache[token];\n            var match = void 0;\n\n            var isEmbedded;\n            if (typeof style === 'string') {\n              isEmbedded = false;\n            } else {\n              var patternParts = shortcuts[token.charAt(0)];\n              if (patternParts) {\n                match = token.match(patternParts[1]);\n                style = patternParts[0];\n              } else {\n                for (var i = 0; i < nPatterns; ++i) {\n                  patternParts = fallthroughStylePatterns[i];\n                  match = token.match(patternParts[1]);\n                  if (match) {\n                    style = patternParts[0];\n                    break;\n                  }\n                }\n\n                if (!match) {  // make sure that we make progress\n                  style = PR_PLAIN;\n                }\n              }\n\n              isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n              if (isEmbedded && !(match && typeof match[1] === 'string')) {\n                isEmbedded = false;\n                style = PR_SOURCE;\n              }\n\n              if (!isEmbedded) { styleCache[token] = style; }\n            }\n\n            var tokenStart = pos;\n            pos += token.length;\n\n            if (!isEmbedded) {\n              decorations.push(basePos + tokenStart, style);\n            } else {  // Treat group 1 as an embedded block of source code.\n              var embeddedSource = match[1];\n              var embeddedSourceStart = token.indexOf(embeddedSource);\n              var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n              if (match[2]) {\n                // If embeddedSource can be blank, then it would match at the\n                // beginning which would cause us to infinitely recurse on the\n                // entire token, so we catch the right context in match[2].\n                embeddedSourceEnd = token.length - match[2].length;\n                embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n              }\n              var lang = style.substring(5);\n              // Decorate the left of the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart,\n                  token.substring(0, embeddedSourceStart),\n                  decorate, decorations);\n              // Decorate the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceStart,\n                  embeddedSource,\n                  langHandlerForExtension(lang, embeddedSource),\n                  decorations);\n              // Decorate the right of the embedded section\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceEnd,\n                  token.substring(embeddedSourceEnd),\n                  decorate, decorations);\n            }\n          }\n          job.decorations = decorations;\n        };\n        return decorate;\n      }\n\n      /** returns a function that produces a list of decorations from source text.\n        *\n        * This code treats \", ', and ` as string delimiters, and \\ as a string\n        * escape.  It does not recognize perl's qq() style strings.\n        * It has no special handling for double delimiter escapes as in basic, or\n        * the tripled delimiters used in python, but should work on those regardless\n        * although in those cases a single string literal may be broken up into\n        * multiple adjacent string literals.\n        *\n        * It recognizes C, C++, and shell style comments.\n        *\n        * @param {Object} options a set of optional parameters.\n        * @return {function (JobT)} a function that examines the source code\n        *     in the input job and builds a decoration list which it attaches to\n        *     the job.\n        */\n      function sourceDecorator(options) {\n        var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n        if (options['tripleQuotedStrings']) {\n          // '''multi-line-string''', 'single-line-string', and double-quoted\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n               null, '\\'\"']);\n        } else if (options['multiLineStrings']) {\n          // 'multi-line-string', \"multi-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n               null, '\\'\"`']);\n        } else {\n          // 'single-line-string', \"single-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,\n               /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n               null, '\"\\'']);\n        }\n        if (options['verbatimStrings']) {\n          // verbatim-string-literal production from the C# grammar.  See issue 93.\n          fallthroughStylePatterns.push(\n              [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n        }\n        var hc = options['hashComments'];\n        if (hc) {\n          if (options['cStyleComments']) {\n            if (hc > 1) {  // multiline hash comments\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n            } else {\n              // Stop C preprocessor declarations at an unclosed open comment\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n                   null, '#']);\n            }\n            // #include <stdio.h>\n            fallthroughStylePatterns.push(\n                [PR_STRING,\n                 /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n                 null]);\n          } else {\n            shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n          }\n        }\n        if (options['cStyleComments']) {\n          fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n          fallthroughStylePatterns.push(\n              [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n        }\n        var regexLiterals = options['regexLiterals'];\n        if (regexLiterals) {\n          /**\n           * @const\n           */\n          var regexExcls = regexLiterals > 1\n            ? ''  // Multiline regex literals\n            : '\\n\\r';\n          /**\n           * @const\n           */\n          var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n          /**\n           * @const\n           */\n          var REGEX_LITERAL = (\n              // A regular expression literal starts with a slash that is\n              // not followed by * or / so that it is not confused with\n              // comments.\n              '/(?=[^/*' + regexExcls + '])'\n              // and then contains any number of raw characters,\n              + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n              // escape sequences (\\x5C),\n              +    '|\\\\x5C' + regexAny\n              // or non-nesting character sets (\\x5B\\x5D);\n              +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n              +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n              // finally closed by a /.\n              + '/');\n          fallthroughStylePatterns.push(\n              ['lang-regex',\n               RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n               ]);\n        }\n\n        var types = options['types'];\n        if (types) {\n          fallthroughStylePatterns.push([PR_TYPE, types]);\n        }\n\n        var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n        if (keywords.length) {\n          fallthroughStylePatterns.push(\n              [PR_KEYWORD,\n               new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n               null]);\n        }\n\n        shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n        var punctuation =\n          // The Bash man page says\n\n          // A word is a sequence of characters considered as a single\n          // unit by GRUB. Words are separated by metacharacters,\n          // which are the following plus space, tab, and newline: { }\n          // | & $ ; < >\n          // ...\n\n          // A word beginning with # causes that word and all remaining\n          // characters on that line to be ignored.\n\n          // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n          // comment but empirically\n          // $ echo {#}\n          // {#}\n          // $ echo \\$#\n          // $#\n          // $ echo }#\n          // }#\n\n          // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n          // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n          // suggests that this definition is compatible with a\n          // default mode that tries to use a single token definition\n          // to recognize both bash/python style comments and C\n          // preprocessor directives.\n\n          // This definition of punctuation does not include # in the list of\n          // follow-on exclusions, so # will not be broken before if preceeded\n          // by a punctuation character.  We could try to exclude # after\n          // [|&;<>] but that doesn't seem to cause many major problems.\n          // If that does turn out to be a problem, we should change the below\n          // when hc is truthy to include # in the run of punctuation characters\n          // only when not followint [|&;<>].\n          '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n        if (options['regexLiterals']) {\n          punctuation += '(?!\\s*\\/)';\n        }\n\n        fallthroughStylePatterns.push(\n            // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n            [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n            [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_LITERAL,\n             new RegExp(\n                 '^(?:'\n                 // A hex number\n                 + '0x[a-f0-9]+'\n                 // or an octal or decimal number,\n                 + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n                 // possibly in scientific notation\n                 + '(?:e[+\\\\-]?\\\\d+)?'\n                 + ')'\n                 // with an optional modifier like UL for unsigned long\n                 + '[a-z]*', 'i'),\n             null, '0123456789'],\n            // Don't treat escaped quotes in bash as starting strings.\n            // See issue 144.\n            [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n            [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n        return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n      }\n\n      var decorateSource = sourceDecorator({\n            'keywords': ALL_KEYWORDS,\n            'hashComments': true,\n            'cStyleComments': true,\n            'multiLineStrings': true,\n            'regexLiterals': true\n          });\n\n      /**\n       * Given a DOM subtree, wraps it in a list, and puts each line into its own\n       * list item.\n       *\n       * @param {Node} node modified in place.  Its content is pulled into an\n       *     HTMLOListElement, and each line is moved into a separate list item.\n       *     This requires cloning elements, so the input might not have unique\n       *     IDs after numbering.\n       * @param {number|null|boolean} startLineNum\n       *     If truthy, coerced to an integer which is the 1-indexed line number\n       *     of the first line of code.  The number of the first line will be\n       *     attached to the list.\n       * @param {boolean} isPreformatted true iff white-space in text nodes should\n       *     be treated as significant.\n       */\n      function numberLines(node, startLineNum, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n        var lineBreak = /\\r\\n?|\\n/;\n\n        var document = node.ownerDocument;\n\n        var li = document.createElement('li');\n        while (node.firstChild) {\n          li.appendChild(node.firstChild);\n        }\n        // An array of lines.  We split below, so this is initialized to one\n        // un-split line.\n        var listItems = [li];\n\n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1 && !nocode.test(node.className)) {  // Element\n            if ('br' === node.nodeName.toLowerCase()) {\n              breakAfter(node);\n              // Discard the <BR> since it is now flush against a </LI>.\n              if (node.parentNode) {\n                node.parentNode.removeChild(node);\n              }\n            } else {\n              for (var child = node.firstChild; child; child = child.nextSibling) {\n                walk(child);\n              }\n            }\n          } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n            var text = node.nodeValue;\n            var match = text.match(lineBreak);\n            if (match) {\n              var firstLine = text.substring(0, match.index);\n              node.nodeValue = firstLine;\n              var tail = text.substring(match.index + match[0].length);\n              if (tail) {\n                var parent = node.parentNode;\n                parent.insertBefore(\n                  document.createTextNode(tail), node.nextSibling);\n              }\n              breakAfter(node);\n              if (!firstLine) {\n                // Don't leave blank text nodes in the DOM.\n                node.parentNode.removeChild(node);\n              }\n            }\n          }\n        }\n\n        // Split a line after the given node.\n        function breakAfter(lineEndNode) {\n          // If there's nothing to the right, then we can skip ending the line\n          // here, and move root-wards since splitting just before an end-tag\n          // would require us to create a bunch of empty copies.\n          while (!lineEndNode.nextSibling) {\n            lineEndNode = lineEndNode.parentNode;\n            if (!lineEndNode) { return; }\n          }\n\n          function breakLeftOf(limit, copy) {\n            // Clone shallowly if this node needs to be on both sides of the break.\n            var rightSide = copy ? limit.cloneNode(false) : limit;\n            var parent = limit.parentNode;\n            if (parent) {\n              // We clone the parent chain.\n              // This helps us resurrect important styling elements that cross lines.\n              // E.g. in <i>Foo<br>Bar</i>\n              // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n              var parentClone = breakLeftOf(parent, 1);\n              // Move the clone and everything to the right of the original\n              // onto the cloned parent.\n              var next = limit.nextSibling;\n              parentClone.appendChild(rightSide);\n              for (var sibling = next; sibling; sibling = next) {\n                next = sibling.nextSibling;\n                parentClone.appendChild(sibling);\n              }\n            }\n            return rightSide;\n          }\n\n          var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n          // Walk the parent chain until we reach an unattached LI.\n          for (var parent;\n               // Check nodeType since IE invents document fragments.\n               (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n            copiedListItem = parent;\n          }\n          // Put it on the list of lines for later processing.\n          listItems.push(copiedListItem);\n        }\n\n        // Split lines while there are lines left to split.\n        for (var i = 0;  // Number of lines that have been split so far.\n             i < listItems.length;  // length updated by breakAfter calls.\n             ++i) {\n          walk(listItems[i]);\n        }\n\n        // Make sure numeric indices show correctly.\n        if (startLineNum === (startLineNum|0)) {\n          listItems[0].setAttribute('value', startLineNum);\n        }\n\n        var ol = document.createElement('ol');\n        ol.className = 'linenums';\n        var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n        for (var i = 0, n = listItems.length; i < n; ++i) {\n          li = listItems[i];\n          // Stick a class on the LIs so that stylesheets can\n          // color odd/even rows, or any other row pattern that\n          // is co-prime with 10.\n          li.className = 'L' + ((i + offset) % 10);\n          if (!li.firstChild) {\n            li.appendChild(document.createTextNode('\\xA0'));\n          }\n          ol.appendChild(li);\n        }\n\n        node.appendChild(ol);\n      }\n\n\n      /**\n       * Breaks {@code job.sourceCode} around style boundaries in\n       * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n       * @param {JobT} job\n       * @private\n       */\n      function recombineTagsAndDecorations(job) {\n        var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n        isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n        var newlineRe = /\\n/g;\n\n        var source = job.sourceCode;\n        var sourceLength = source.length;\n        // Index into source after the last code-unit recombined.\n        var sourceIndex = 0;\n\n        var spans = job.spans;\n        var nSpans = spans.length;\n        // Index into spans after the last span which ends at or before sourceIndex.\n        var spanIndex = 0;\n\n        var decorations = job.decorations;\n        var nDecorations = decorations.length;\n        // Index into decorations after the last decoration which ends at or before\n        // sourceIndex.\n        var decorationIndex = 0;\n\n        // Remove all zero-length decorations.\n        decorations[nDecorations] = sourceLength;\n        var decPos, i;\n        for (i = decPos = 0; i < nDecorations;) {\n          if (decorations[i] !== decorations[i + 2]) {\n            decorations[decPos++] = decorations[i++];\n            decorations[decPos++] = decorations[i++];\n          } else {\n            i += 2;\n          }\n        }\n        nDecorations = decPos;\n\n        // Simplify decorations.\n        for (i = decPos = 0; i < nDecorations;) {\n          var startPos = decorations[i];\n          // Conflate all adjacent decorations that use the same style.\n          var startDec = decorations[i + 1];\n          var end = i + 2;\n          while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n            end += 2;\n          }\n          decorations[decPos++] = startPos;\n          decorations[decPos++] = startDec;\n          i = end;\n        }\n\n        nDecorations = decorations.length = decPos;\n\n        var sourceNode = job.sourceNode;\n        var oldDisplay = \"\";\n        if (sourceNode) {\n          oldDisplay = sourceNode.style.display;\n          sourceNode.style.display = 'none';\n        }\n        try {\n          var decoration = null;\n          while (spanIndex < nSpans) {\n            var spanStart = spans[spanIndex];\n            var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n                || sourceLength;\n\n            var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n            var end = Math.min(spanEnd, decEnd);\n\n            var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n            var styledText;\n            if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n                // Don't introduce spans around empty text nodes.\n                && (styledText = source.substring(sourceIndex, end))) {\n              // This may seem bizarre, and it is.  Emitting LF on IE causes the\n              // code to display with spaces instead of line breaks.\n              // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n              // space to appear at the beginning of every line but the first.\n              // Emitting an old Mac OS 9 line separator makes everything spiffy.\n              if (isIE8OrEarlier) {\n                styledText = styledText.replace(newlineRe, '\\r');\n              }\n              textNode.nodeValue = styledText;\n              var document = textNode.ownerDocument;\n              var span = document.createElement('span');\n              span.className = decorations[decorationIndex + 1];\n              var parentNode = textNode.parentNode;\n              parentNode.replaceChild(span, textNode);\n              span.appendChild(textNode);\n              if (sourceIndex < spanEnd) {  // Split off a text node.\n                spans[spanIndex + 1] = textNode\n                    // TODO: Possibly optimize by using '' if there's no flicker.\n                    = document.createTextNode(source.substring(end, spanEnd));\n                parentNode.insertBefore(textNode, span.nextSibling);\n              }\n            }\n\n            sourceIndex = end;\n\n            if (sourceIndex >= spanEnd) {\n              spanIndex += 2;\n            }\n            if (sourceIndex >= decEnd) {\n              decorationIndex += 2;\n            }\n          }\n        } finally {\n          if (sourceNode) {\n            sourceNode.style.display = oldDisplay;\n          }\n        }\n      }\n\n\n      /** Maps language-specific file extensions to handlers. */\n      var langHandlerRegistry = {};\n      /** Register a language handler for the given file extensions.\n        * @param {function (JobT)} handler a function from source code to a list\n        *      of decorations.  Takes a single argument job which describes the\n        *      state of the computation and attaches the decorations to it.\n        * @param {Array.<string>} fileExtensions\n        */\n      function registerLangHandler(handler, fileExtensions) {\n        for (var i = fileExtensions.length; --i >= 0;) {\n          var ext = fileExtensions[i];\n          if (!langHandlerRegistry.hasOwnProperty(ext)) {\n            langHandlerRegistry[ext] = handler;\n          } else if (win['console']) {\n            console['warn']('cannot override language handler %s', ext);\n          }\n        }\n      }\n      function langHandlerForExtension(extension, source) {\n        if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n          // Treat it as markup if the first non whitespace character is a < and\n          // the last non-whitespace character is a >.\n          extension = /^\\s*</.test(source)\n              ? 'default-markup'\n              : 'default-code';\n        }\n        return langHandlerRegistry[extension];\n      }\n      registerLangHandler(decorateSource, ['default-code']);\n      registerLangHandler(\n          createSimpleLexer(\n              [],\n              [\n               [PR_PLAIN,       /^[^<?]+/],\n               [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n               [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n               // Unescaped content in an unknown language\n               ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n               ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n               [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n               ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n               // Unescaped content in javascript.  (Or possibly vbscript).\n               ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n               // Contains unescaped stylesheet content\n               ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n               ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n              ]),\n          ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n      registerLangHandler(\n          createSimpleLexer(\n              [\n               [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n               [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n               ],\n              [\n               [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n               [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n               ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n               [PR_PUNCTUATION,  /^[=<>\\/]+/],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n               ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n               ]),\n          ['in.tag']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CPP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'types': C_TYPES\n            }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': 'null,true,false'\n            }), ['json']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CSHARP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'verbatimStrings': true,\n              'types': C_TYPES\n            }), ['cs']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JAVA_KEYWORDS,\n              'cStyleComments': true\n            }), ['java']);\n      registerLangHandler(sourceDecorator({\n              'keywords': SH_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true\n            }), ['bash', 'bsh', 'csh', 'sh']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PYTHON_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'tripleQuotedStrings': true\n            }), ['cv', 'py', 'python']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PERL_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': 2  // multiline regex literals\n            }), ['perl', 'pl', 'pm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': RUBY_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': true\n            }), ['rb', 'ruby']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JSCRIPT_KEYWORDS,\n              'cStyleComments': true,\n              'regexLiterals': true\n            }), ['javascript', 'js', 'ts', 'typescript']);\n      registerLangHandler(sourceDecorator({\n              'keywords': COFFEE_KEYWORDS,\n              'hashComments': 3,  // ### style block comments\n              'cStyleComments': true,\n              'multilineStrings': true,\n              'tripleQuotedStrings': true,\n              'regexLiterals': true\n            }), ['coffee']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n      /** @param {JobT} job */\n      function applyDecorator(job) {\n        var opt_langExtension = job.langExtension;\n\n        try {\n          // Extract tags, and convert the source code to plain text.\n          var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n          /** Plain text. @type {string} */\n          var source = sourceAndSpans.sourceCode;\n          job.sourceCode = source;\n          job.spans = sourceAndSpans.spans;\n          job.basePos = 0;\n\n          // Apply the appropriate language handler\n          langHandlerForExtension(opt_langExtension, source)(job);\n\n          // Integrate the decorations and tags back into the source code,\n          // modifying the sourceNode in place.\n          recombineTagsAndDecorations(job);\n        } catch (e) {\n          if (win['console']) {\n            console['log'](e && e['stack'] || e);\n          }\n        }\n      }\n\n      /**\n       * Pretty print a chunk of code.\n       * @param sourceCodeHtml {string} The HTML to pretty print.\n       * @param opt_langExtension {string} The language name to use.\n       *     Typically, a filename extension like 'cpp' or 'java'.\n       * @param opt_numberLines {number|boolean} True to number lines,\n       *     or the 1-indexed number of the first line in sourceCodeHtml.\n       */\n      function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n        /** @type{number|boolean} */\n        var nl = opt_numberLines || false;\n        /** @type{string|null} */\n        var langExtension = opt_langExtension || null;\n        /** @type{!Element} */\n        var container = document.createElement('div');\n        // This could cause images to load and onload listeners to fire.\n        // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n        // We assume that the inner HTML is from a trusted source.\n        // The pre-tag is required for IE8 which strips newlines from innerHTML\n        // when it is injected into a <pre> tag.\n        // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n        // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n        container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n        container = /** @type{!Element} */(container.firstChild);\n        if (nl) {\n          numberLines(container, nl, true);\n        }\n\n        /** @type{JobT} */\n        var job = {\n          langExtension: langExtension,\n          numberLines: nl,\n          sourceNode: container,\n          pre: 1,\n          sourceCode: null,\n          basePos: null,\n          spans: null,\n          decorations: null\n        };\n        applyDecorator(job);\n        return container.innerHTML;\n      }\n\n       /**\n        * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n        * {@code class=prettyprint} and prettify them.\n        *\n        * @param {Function} opt_whenDone called when prettifying is done.\n        * @param {HTMLElement|HTMLDocument} opt_root an element or document\n        *   containing all the elements to pretty print.\n        *   Defaults to {@code document.body}.\n        */\n      function $prettyPrint(opt_whenDone, opt_root) {\n        var root = opt_root || document.body;\n        var doc = root.ownerDocument || document;\n        function byTagName(tn) { return root.getElementsByTagName(tn); }\n        // fetch a list of nodes to rewrite\n        var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n        var elements = [];\n        for (var i = 0; i < codeSegments.length; ++i) {\n          for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n            elements.push(codeSegments[i][j]);\n          }\n        }\n        codeSegments = null;\n\n        var clock = Date;\n        if (!clock['now']) {\n          clock = { 'now': function () { return +(new Date); } };\n        }\n\n        // The loop is broken into a series of continuations to make sure that we\n        // don't make the browser unresponsive when rewriting a large page.\n        var k = 0;\n\n        var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n        var prettyPrintRe = /\\bprettyprint\\b/;\n        var prettyPrintedRe = /\\bprettyprinted\\b/;\n        var preformattedTagNameRe = /pre|xmp/i;\n        var codeRe = /^code$/i;\n        var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n        var EMPTY = {};\n\n        function doWork() {\n          var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                         clock['now']() + 250 /* ms */ :\n                         Infinity);\n          for (; k < elements.length && clock['now']() < endTime; k++) {\n            var cs = elements[k];\n\n            // Look for a preceding comment like\n            // <?prettify lang=\"...\" linenums=\"...\"?>\n            var attrs = EMPTY;\n            {\n              for (var preceder = cs; (preceder = preceder.previousSibling);) {\n                var nt = preceder.nodeType;\n                // <?foo?> is parsed by HTML 5 to a comment node (8)\n                // like <!--?foo?-->, but in XML is a processing instruction\n                var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n                if (value\n                    ? !/^\\??prettify\\b/.test(value)\n                    : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n                  // Skip over white-space text nodes but not others.\n                  break;\n                }\n                if (value) {\n                  attrs = {};\n                  value.replace(\n                      /\\b(\\w+)=([\\w:.%+-]+)/g,\n                    function (_, name, value) { attrs[name] = value; });\n                  break;\n                }\n              }\n            }\n\n            var className = cs.className;\n            if ((attrs !== EMPTY || prettyPrintRe.test(className))\n                // Don't redo this if we've already done it.\n                // This allows recalling pretty print to just prettyprint elements\n                // that have been added to the page since last call.\n                && !prettyPrintedRe.test(className)) {\n\n              // make sure this is not nested in an already prettified element\n              var nested = false;\n              for (var p = cs.parentNode; p; p = p.parentNode) {\n                var tn = p.tagName;\n                if (preCodeXmpRe.test(tn)\n                    && p.className && prettyPrintRe.test(p.className)) {\n                  nested = true;\n                  break;\n                }\n              }\n              if (!nested) {\n                // Mark done.  If we fail to prettyprint for whatever reason,\n                // we shouldn't try again.\n                cs.className += ' prettyprinted';\n\n                // If the classes includes a language extensions, use it.\n                // Language extensions can be specified like\n                //     <pre class=\"prettyprint lang-cpp\">\n                // the language extension \"cpp\" is used to find a language handler\n                // as passed to PR.registerLangHandler.\n                // HTML5 recommends that a language be specified using \"language-\"\n                // as the prefix instead.  Google Code Prettify supports both.\n                // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n                var langExtension = attrs['lang'];\n                if (!langExtension) {\n                  langExtension = className.match(langExtensionRe);\n                  // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n                  var wrapper;\n                  if (!langExtension && (wrapper = childContentWrapper(cs))\n                      && codeRe.test(wrapper.tagName)) {\n                    langExtension = wrapper.className.match(langExtensionRe);\n                  }\n\n                  if (langExtension) { langExtension = langExtension[1]; }\n                }\n\n                var preformatted;\n                if (preformattedTagNameRe.test(cs.tagName)) {\n                  preformatted = 1;\n                } else {\n                  var currentStyle = cs['currentStyle'];\n                  var defaultView = doc.defaultView;\n                  var whitespace = (\n                      currentStyle\n                      ? currentStyle['whiteSpace']\n                      : (defaultView\n                         && defaultView.getComputedStyle)\n                      ? defaultView.getComputedStyle(cs, null)\n                      .getPropertyValue('white-space')\n                      : 0);\n                  preformatted = whitespace\n                      && 'pre' === whitespace.substring(0, 3);\n                }\n\n                // Look for a class like linenums or linenums:<n> where <n> is the\n                // 1-indexed number of the first line.\n                var lineNums = attrs['linenums'];\n                if (!(lineNums = lineNums === 'true' || +lineNums)) {\n                  lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n                  lineNums =\n                    lineNums\n                    ? lineNums[1] && lineNums[1].length\n                      ? +lineNums[1] : true\n                    : false;\n                }\n                if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n                // do the pretty printing\n                var prettyPrintingJob = {\n                  langExtension: langExtension,\n                  sourceNode: cs,\n                  numberLines: lineNums,\n                  pre: preformatted,\n                  sourceCode: null,\n                  basePos: null,\n                  spans: null,\n                  decorations: null\n                };\n                applyDecorator(prettyPrintingJob);\n              }\n            }\n          }\n          if (k < elements.length) {\n            // finish up in a continuation\n            win.setTimeout(doWork, 250);\n          } else if ('function' === typeof opt_whenDone) {\n            opt_whenDone();\n          }\n        }\n\n        doWork();\n      }\n\n      /**\n       * Contains functions for creating and registering new language handlers.\n       * @type {Object}\n       */\n      var PR = win['PR'] = {\n            'createSimpleLexer': createSimpleLexer,\n            'registerLangHandler': registerLangHandler,\n            'sourceDecorator': sourceDecorator,\n            'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n            'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n            'PR_COMMENT': PR_COMMENT,\n            'PR_DECLARATION': PR_DECLARATION,\n            'PR_KEYWORD': PR_KEYWORD,\n            'PR_LITERAL': PR_LITERAL,\n            'PR_NOCODE': PR_NOCODE,\n            'PR_PLAIN': PR_PLAIN,\n            'PR_PUNCTUATION': PR_PUNCTUATION,\n            'PR_SOURCE': PR_SOURCE,\n            'PR_STRING': PR_STRING,\n            'PR_TAG': PR_TAG,\n            'PR_TYPE': PR_TYPE,\n            'prettyPrintOne':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrintOne'] = $prettyPrintOne)\n                 : (prettyPrintOne = $prettyPrintOne),\n            'prettyPrint':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrint'] = $prettyPrint)\n                 : (prettyPrint = $prettyPrint)\n          };\n\n      // Make PR available via the Asynchronous Module Definition (AMD) API.\n      // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n      // The Asynchronous Module Definition (AMD) API specifies a\n      // mechanism for defining modules such that the module and its\n      // dependencies can be asynchronously loaded.\n      // ...\n      // To allow a clear indicator that a global define function (as\n      // needed for script src browser loading) conforms to the AMD API,\n      // any global define function SHOULD have a property called \"amd\"\n      // whose value is an object. This helps avoid conflict with any\n      // other existing JavaScript code that could have defined a define()\n      // function that does not conform to the AMD API.\n      var define = win['define'];\n      if (typeof define === \"function\" && define['amd']) {\n        define(\"google-code-prettify\", [], function () {\n          return PR;\n        });\n      }\n    })();\n\n    return prettyPrint;\n  })();\n\n  // If this script is deferred or async and the document is already\n  // loaded we need to wait for language handlers to load before performing\n  // any autorun.\n  function onLangsLoaded() {\n    if (autorun) {\n      contentLoaded(\n        function () {\n          var n = callbacks.length;\n          var callback = n ? function () {\n            for (var i = 0; i < n; ++i) {\n              (function (i) {\n                win.setTimeout(\n                   function () {\n                     win['exports'][callbacks[i]].apply(win, arguments);\n                   }, 0);\n               })(i);\n            }\n          } : void 0;\n          prettyPrint(callback);\n        });\n    }\n  }\n  checkPendingLanguages();\n\n}());\n","source":"plugins/prettify/run_prettify.js","raw":"/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * <div style=\"white-space: pre\">\n * Looks at query parameters to decide which language handlers and style-sheets\n * to load.\n *\n * Query Parameter     Format           Effect                        Default\n * +------------------+---------------+------------------------------+--------+\n * | autorun=         | true | false  | If true then prettyPrint()   | \"true\" |\n * |                  |               | is called on page load.      |        |\n * +------------------+---------------+------------------------------+--------+\n * | lang=            | language name | Loads the language handler   | Can    |\n * |                  |               | named \"lang-<NAME>.js\".      | appear |\n * |                  |               | See available handlers at    | many   |\n * |                  |               | https://github.com/google/   | times. |\n * |                  |               | code-prettify/tree/master/   |        |\n * |                  |               | src                          |        |\n * +------------------+---------------+------------------------------+--------+\n * | skin=            | skin name     | Loads the skin stylesheet    | none.  |\n * |                  |               | named \"<NAME>.css\".          |        |\n * |                  |               | https://raw.githack.com/     |        |\n * |                  |               | google/code-prettify/master/ |        |\n * |                  |               | styles/index.html            |        |\n * +------------------+---------------+------------------------------+--------+\n * | callback=        | JS identifier | When \"prettyPrint\" finishes  | none   |\n * |                  |               | window.exports[js_ident] is  |        |\n * |                  |               | called.                      |        |\n * |                  |               | The callback must be under   |        |\n * |                  |               | exports to reduce the risk   |        |\n * |                  |               | of XSS via query parameter   |        |\n * |                  |               | injection.                   |        |\n * +------------------+---------------+------------------------------+--------+\n *\n * Examples\n * .../run_prettify.js?lang=css&skin=sunburst\n *   1. Loads the CSS language handler which can be used to prettify CSS\n *      stylesheets, HTML <style> element bodies and style=\"...\" attributes\n *      values.\n *   2. Loads the sunburst.css stylesheet instead of the default prettify.css\n *      stylesheet.\n *      A gallery of stylesheets is available at\n *      https://raw.githack.com/google/code-prettify/master/styles/index.html\n *   3. Since autorun=false is not specified, calls prettyPrint() on page load.\n * </div>\n */\n\n/**\n * @typedef {!Array.<number|string>}\n * Alternating indices and the decorations that should be inserted there.\n * The indices are monotonically increasing.\n */\nvar DecorationsT;\n\n/**\n * @typedef {!{\n *   sourceNode: !Element,\n *   pre: !(number|boolean),\n *   langExtension: ?string,\n *   numberLines: ?(number|boolean),\n *   sourceCode: ?string,\n *   spans: ?(Array.<number|Node>),\n *   basePos: ?number,\n *   decorations: ?DecorationsT\n * }}\n * <dl>\n *  <dt>sourceNode<dd>the element containing the source\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>pre<dd>truthy if white-space in text nodes\n *     should be considered significant.\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n *  <dt>decorations<dd>an array of style classes preceded\n *     by the position at which they start in job.sourceCode in order\n *  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n *     source.\n * </dl>\n */\nvar JobT;\n\n/**\n * @typedef {!{\n *   sourceCode: string,\n *   spans: !(Array.<number|Node>)\n * }}\n * <dl>\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n * </dl>\n */\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = false;\n\n\n(function () {\n  \"use strict\";\n\n  var win = window;\n  var doc = document;\n  var root = doc.documentElement;\n  var head = doc['head'] || doc.getElementsByTagName(\"head\")[0] || root;\n\n  // From http://javascript.nwbox.com/ContentLoaded/contentloaded.js\n  // Author: Diego Perini (diego.perini at gmail.com)\n  // Summary: cross-browser wrapper for DOMContentLoaded\n  // Updated: 20101020\n  // License: MIT\n  // Version: 1.2\n  function contentLoaded(callback) {\n    var addEventListener = doc['addEventListener'];\n    var done = false, top = true,\n        add = addEventListener ? 'addEventListener' : 'attachEvent',\n        rem = addEventListener ? 'removeEventListener' : 'detachEvent',\n        pre = addEventListener ? '' : 'on',\n\n        init = function(e) {\n          if (e.type == 'readystatechange' && doc.readyState != 'complete') {\n            return;\n          }\n          (e.type == 'load' ? win : doc)[rem](pre + e.type, init, false);\n          if (!done && (done = true)) { callback.call(win, e.type || e); }\n        },\n\n        poll = function() {\n          try {\n            root.doScroll('left');\n          } catch(e) {\n            win.setTimeout(poll, 50);\n            return;\n          }\n          init('poll');\n        };\n\n    if (doc.readyState == 'complete') {\n      callback.call(win, 'lazy');\n    } else {\n      if (doc.createEventObject && root.doScroll) {\n        try { top = !win.frameElement; } catch(e) { }\n        if (top) { poll(); }\n      }\n      doc[add](pre + 'DOMContentLoaded', init, false);\n      doc[add](pre + 'readystatechange', init, false);\n      win[add](pre + 'load', init, false);\n    }\n  }\n\n  // Given a list of URLs to stylesheets, loads the first that loads without\n  // triggering an error event.\n  function loadStylesheetsFallingBack(stylesheets) {\n    var n = stylesheets.length;\n    function load(i) {\n      if (i === n) { return; }\n      var link = doc.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      if (i + 1 < n) {\n        // http://pieisgood.org/test/script-link-events/ indicates that many\n        // versions of IE do not support onerror on <link>s, though\n        // http://msdn.microsoft.com/en-us/library/ie/ms535848(v=vs.85).aspx\n        // indicates that recent IEs do support error.\n        link.error = link.onerror = function () { load(i + 1); };\n      }\n      link.href = stylesheets[i];\n      head.appendChild(link);\n    }\n    load(0);\n  }\n\n  var scriptQuery = '';\n  // Look for the <script> node that loads this script to get its parameters.\n  // This starts looking at the end instead of just considering the last\n  // because deferred and async scripts run out of order.\n  // If the script is loaded twice, then this will run in reverse order.\n  var scripts = doc.getElementsByTagName('script');\n  for (var i = scripts.length; --i >= 0;) {\n    var script = scripts[i];\n    var match = script.src.match(\n        /^[^?#]*\\/run_prettify\\.js(\\?[^#]*)?(?:#.*)?$/);\n    if (match) {\n      scriptQuery = match[1] || '';\n      // Remove the script from the DOM so that multiple runs at least run\n      // multiple times even if parameter sets are interpreted in reverse\n      // order.\n      script.parentNode.removeChild(script);\n      break;\n    }\n  }\n\n  // Pull parameters into local variables.\n  var autorun = true;\n  var langs = [];\n  var skins = [];\n  var callbacks = [];\n  scriptQuery.replace(\n      /[?&]([^&=]+)=([^&]+)/g,\n      function (_, name, value) {\n        value = decodeURIComponent(value);\n        name = decodeURIComponent(name);\n        if (name == 'autorun')   { autorun = !/^[0fn]/i.test(value); } else\n        if (name == 'lang')      { langs.push(value);                } else\n        if (name == 'skin')      { skins.push(value);                } else\n        if (name == 'callback')  { callbacks.push(value);            }\n      });\n\n  // Use https to avoid mixed content warnings in client pages and to\n  // prevent a MITM from rewrite prettify mid-flight.\n  // This only works if this script is loaded via https : something\n  // over which we exercise no control.\n  var LOADER_BASE_URL =\n     'https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader';\n\n  for (var i = 0, n = langs.length; i < n; ++i) (function (lang) {\n    var script = doc.createElement(\"script\");\n\n    // Excerpted from jQuery.ajaxTransport(\"script\") to fire events when\n    // a script is finished loading.\n    // Attach handlers for each script\n    script.onload = script.onerror = script.onreadystatechange = function () {\n      if (script && (\n            !script.readyState || /loaded|complete/.test(script.readyState))) {\n        // Handle memory leak in IE\n        script.onerror = script.onload = script.onreadystatechange = null;\n\n        --pendingLanguages;\n        checkPendingLanguages();\n\n        // Remove the script\n        if (script.parentNode) {\n          script.parentNode.removeChild(script);\n        }\n\n        script = null;\n      }\n    };\n\n    script.type = 'text/javascript';\n    script.src = LOADER_BASE_URL\n      + '/lang-' + encodeURIComponent(langs[i]) + '.js';\n\n    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n    head.insertBefore(script, head.firstChild);\n  })(langs[i]);\n\n  var pendingLanguages = langs.length;\n  function checkPendingLanguages() {\n    if (!pendingLanguages) {\n      win.setTimeout(onLangsLoaded, 0);\n    }\n  }\n\n  var skinUrls = [];\n  for (var i = 0, n = skins.length; i < n; ++i) {\n    skinUrls.push(LOADER_BASE_URL\n        + '/skins/' + encodeURIComponent(skins[i]) + '.css');\n  }\n  skinUrls.push(LOADER_BASE_URL + '/prettify.css');\n  loadStylesheetsFallingBack(skinUrls);\n\n  var prettyPrint = (function () {\n    /**\n     * @license\n     * Copyright (C) 2006 Google Inc.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n\n    /**\n     * @fileoverview\n     * some functions for browser-side pretty printing of code contained in html.\n     *\n     * <p>\n     * For a fairly comprehensive set of languages see the\n     * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n     * file that came with this source.  At a minimum, the lexer should work on a\n     * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n     * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n     * and a subset of Perl, but, because of commenting conventions, doesn't work on\n     * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n     * <p>\n     * Usage: <ol>\n     * <li> include this source file in an html page via\n     *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n     * <li> define style rules.  See the example page for examples.\n     * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n     *    {@code class=prettyprint.}\n     *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n     *    printer needs to do more substantial DOM manipulations to support that, so\n     *    some css styles may not be preserved.\n     * </ol>\n     * That's it.  I wanted to keep the API as simple as possible, so there's no\n     * need to specify which language the code is in, but if you wish, you can add\n     * another class to the {@code <pre>} or {@code <code>} element to specify the\n     * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n     * starts with \"lang-\" followed by a file extension, specifies the file type.\n     * See the \"lang-*.js\" files in this directory for code that implements\n     * per-language file handlers.\n     * <p>\n     * Change log:<br>\n     * cbeust, 2006/08/22\n     * <blockquote>\n     *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n     * </blockquote>\n     * @requires console\n     */\n\n    // JSLint declarations\n    /*global console, document, navigator, setTimeout, window, define */\n\n\n    /**\n     * {@type !{\n     *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n     *   'registerLangHandler': function (function (JobT), Array.<string>),\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_VALUE': string,\n     *   'PR_COMMENT': string,\n     *   'PR_DECLARATION': string,\n     *   'PR_KEYWORD': string,\n     *   'PR_LITERAL': string,\n     *   'PR_NOCODE': string,\n     *   'PR_PLAIN': string,\n     *   'PR_PUNCTUATION': string,\n     *   'PR_SOURCE': string,\n     *   'PR_STRING': string,\n     *   'PR_TAG': string,\n     *   'PR_TYPE': string,\n     *   'prettyPrintOne': function (string, string, number|boolean),\n     *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n     * }}\n     * @const\n     */\n    var PR;\n\n    /**\n     * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n     * UI events.\n     * If set to {@code false}, {@code prettyPrint()} is synchronous.\n     */\n    var PR_SHOULD_USE_CONTINUATION = true\n    if (typeof window !== 'undefined') {\n      window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n    }\n\n    /**\n     * Pretty print a chunk of code.\n     * @param {string} sourceCodeHtml The HTML to pretty print.\n     * @param {string} opt_langExtension The language name to use.\n     *     Typically, a filename extension like 'cpp' or 'java'.\n     * @param {number|boolean} opt_numberLines True to number lines,\n     *     or the 1-indexed number of the first line in sourceCodeHtml.\n     * @return {string} code as html, but prettier\n     */\n    var prettyPrintOne;\n    /**\n     * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n     * {@code class=prettyprint} and prettify them.\n     *\n     * @param {Function} opt_whenDone called when prettifying is done.\n     * @param {HTMLElement|HTMLDocument} opt_root an element or document\n     *   containing all the elements to pretty print.\n     *   Defaults to {@code document.body}.\n     */\n    var prettyPrint;\n\n\n    (function () {\n      var win = (typeof window !== 'undefined') ? window : {};\n      // Keyword lists for various languages.\n      // We use things that coerce to strings to make them compact when minified\n      // and to defeat aggressive optimizers that fold large string constants.\n      var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n      var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n          \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n          \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n      var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n          \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n      var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n          \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n          \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n          \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n          \"static_cast,template,typeid,typename,using,virtual,where\"];\n      var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n          \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n          \"throws,transient\"];\n      var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n          \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n          \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n          \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n          \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n      var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n          \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n          \"throw,true,try,unless,until,when,while,yes\";\n      var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,async,await,constructor,debugger,enum,eval,export,from,function,\" +\n          \"get,import,implements,instanceof,interface,let,null,of,set,undefined,\" +\n          \"var,with,yield,Infinity,NaN\"];\n      var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n          \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n          \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n      var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n          \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n          \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n          \"False,True,None\"];\n      var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n          \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n          \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n          \"BEGIN,END\"];\n      var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n          \"function,in,local,set,then,until\"];\n      var ALL_KEYWORDS = [\n          CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n          PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n      var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n      // token style names.  correspond to css classes\n      /**\n       * token style for a string literal\n       * @const\n       */\n      var PR_STRING = 'str';\n      /**\n       * token style for a keyword\n       * @const\n       */\n      var PR_KEYWORD = 'kwd';\n      /**\n       * token style for a comment\n       * @const\n       */\n      var PR_COMMENT = 'com';\n      /**\n       * token style for a type\n       * @const\n       */\n      var PR_TYPE = 'typ';\n      /**\n       * token style for a literal value.  e.g. 1, null, true.\n       * @const\n       */\n      var PR_LITERAL = 'lit';\n      /**\n       * token style for a punctuation string.\n       * @const\n       */\n      var PR_PUNCTUATION = 'pun';\n      /**\n       * token style for plain text.\n       * @const\n       */\n      var PR_PLAIN = 'pln';\n\n      /**\n       * token style for an sgml tag.\n       * @const\n       */\n      var PR_TAG = 'tag';\n      /**\n       * token style for a markup declaration such as a DOCTYPE.\n       * @const\n       */\n      var PR_DECLARATION = 'dec';\n      /**\n       * token style for embedded source.\n       * @const\n       */\n      var PR_SOURCE = 'src';\n      /**\n       * token style for an sgml attribute name.\n       * @const\n       */\n      var PR_ATTRIB_NAME = 'atn';\n      /**\n       * token style for an sgml attribute value.\n       * @const\n       */\n      var PR_ATTRIB_VALUE = 'atv';\n\n      /**\n       * A class that indicates a section of markup that is not code, e.g. to allow\n       * embedding of line numbers within code listings.\n       * @const\n       */\n      var PR_NOCODE = 'nocode';\n\n\n      // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n      // Do not modify, your changes will be erased.\n\n      // CAVEAT: this does not properly handle the case where a regular\n      // expression immediately follows another since a regular expression may\n      // have flags for case-sensitivity and the like.  Having regexp tokens\n      // adjacent is not valid in any language I'm aware of, so I'm punting.\n      // TODO: maybe style special characters inside a regexp as punctuation.\n\n      /**\n       * A set of tokens that can precede a regular expression literal in\n       * javascript\n       * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n       * has the full list, but I've removed ones that might be problematic when\n       * seen in languages that don't support regular expression literals.\n       *\n       * Specifically, I've removed any keywords that can't precede a regexp\n       * literal in a syntactically legal javascript program, and I've removed the\n       * \"in\" keyword since it's not a keyword in many languages, and might be used\n       * as a count of inches.\n       *\n       * The link above does not accurately describe EcmaScript rules since\n       * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n       * very well in practice.\n       *\n       * @private\n       * @const\n       */\n      var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n      /**\n       * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n       * matches the union of the sets of strings matched by the input RegExp.\n       * Since it matches globally, if the input strings have a start-of-input\n       * anchor (/^.../), it is ignored for the purposes of unioning.\n       * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n       * @return {RegExp} a global regex.\n       */\n      function combinePrefixPatterns(regexs) {\n        var capturedGroupIndex = 0;\n\n        var needToFoldCase = false;\n        var ignoreCase = false;\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.ignoreCase) {\n            ignoreCase = true;\n          } else if (/[a-z]/i.test(regex.source.replace(\n                         /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n            needToFoldCase = true;\n            ignoreCase = false;\n            break;\n          }\n        }\n\n        var escapeCharToCodeUnit = {\n          'b': 8,\n          't': 9,\n          'n': 0xa,\n          'v': 0xb,\n          'f': 0xc,\n          'r': 0xd\n        };\n\n        function decodeEscape(charsetPart) {\n          var cc0 = charsetPart.charCodeAt(0);\n          if (cc0 !== 92 /* \\\\ */) {\n            return cc0;\n          }\n          var c1 = charsetPart.charAt(1);\n          cc0 = escapeCharToCodeUnit[c1];\n          if (cc0) {\n            return cc0;\n          } else if ('0' <= c1 && c1 <= '7') {\n            return parseInt(charsetPart.substring(1), 8);\n          } else if (c1 === 'u' || c1 === 'x') {\n            return parseInt(charsetPart.substring(2), 16);\n          } else {\n            return charsetPart.charCodeAt(1);\n          }\n        }\n\n        function encodeEscape(charCode) {\n          if (charCode < 0x20) {\n            return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n          }\n          var ch = String.fromCharCode(charCode);\n          return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n              ? \"\\\\\" + ch : ch;\n        }\n\n        function caseFoldCharset(charSet) {\n          var charsetParts = charSet.substring(1, charSet.length - 1).match(\n              new RegExp(\n                  '\\\\\\\\u[0-9A-Fa-f]{4}'\n                  + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n                  + '|\\\\\\\\[0-3][0-7]{0,2}'\n                  + '|\\\\\\\\[0-7]{1,2}'\n                  + '|\\\\\\\\[\\\\s\\\\S]'\n                  + '|-'\n                  + '|[^-\\\\\\\\]',\n                  'g'));\n          var ranges = [];\n          var inverse = charsetParts[0] === '^';\n\n          var out = ['['];\n          if (inverse) { out.push('^'); }\n\n          for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n            var p = charsetParts[i];\n            if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n              out.push(p);\n            } else {\n              var start = decodeEscape(p);\n              var end;\n              if (i + 2 < n && '-' === charsetParts[i + 1]) {\n                end = decodeEscape(charsetParts[i + 2]);\n                i += 2;\n              } else {\n                end = start;\n              }\n              ranges.push([start, end]);\n              // If the range might intersect letters, then expand it.\n              // This case handling is too simplistic.\n              // It does not deal with non-latin case folding.\n              // It works for latin source code identifiers though.\n              if (!(end < 65 || start > 122)) {\n                if (!(end < 65 || start > 90)) {\n                  ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n                }\n                if (!(end < 97 || start > 122)) {\n                  ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n                }\n              }\n            }\n          }\n\n          // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n          // -> [[1, 12], [14, 14], [16, 17]]\n          ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n          var consolidatedRanges = [];\n          var lastRange = [];\n          for (var i = 0; i < ranges.length; ++i) {\n            var range = ranges[i];\n            if (range[0] <= lastRange[1] + 1) {\n              lastRange[1] = Math.max(lastRange[1], range[1]);\n            } else {\n              consolidatedRanges.push(lastRange = range);\n            }\n          }\n\n          for (var i = 0; i < consolidatedRanges.length; ++i) {\n            var range = consolidatedRanges[i];\n            out.push(encodeEscape(range[0]));\n            if (range[1] > range[0]) {\n              if (range[1] + 1 > range[0]) { out.push('-'); }\n              out.push(encodeEscape(range[1]));\n            }\n          }\n          out.push(']');\n          return out.join('');\n        }\n\n        function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n          // Split into character sets, escape sequences, punctuation strings\n          // like ('(', '(?:', ')', '^'), and runs of characters that do not\n          // include any of the above.\n          var parts = regex.source.match(\n              new RegExp(\n                  '(?:'\n                  + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n                  + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n                  + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n                  + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n                  + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n                  + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n                  + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n                  + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n                  + ')',\n                  'g'));\n          var n = parts.length;\n\n          // Maps captured group numbers to the number they will occupy in\n          // the output or to -1 if that has not been determined, or to\n          // undefined if they need not be capturing in the output.\n          var capturedGroups = [];\n\n          // Walk over and identify back references to build the capturedGroups\n          // mapping.\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              // groups are 1-indexed, so max group index is count of '('\n              ++groupIndex;\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue) {\n                if (decimalValue <= groupIndex) {\n                  capturedGroups[decimalValue] = -1;\n                } else {\n                  // Replace with an unambiguous escape sequence so that\n                  // an octal escape sequence does not turn into a backreference\n                  // to a capturing group from an earlier regex.\n                  parts[i] = encodeEscape(decimalValue);\n                }\n              }\n            }\n          }\n\n          // Renumber groups and reduce capturing groups to non-capturing groups\n          // where possible.\n          for (var i = 1; i < capturedGroups.length; ++i) {\n            if (-1 === capturedGroups[i]) {\n              capturedGroups[i] = ++capturedGroupIndex;\n            }\n          }\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              ++groupIndex;\n              if (!capturedGroups[groupIndex]) {\n                parts[i] = '(?:';\n              }\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue && decimalValue <= groupIndex) {\n                parts[i] = '\\\\' + capturedGroups[decimalValue];\n              }\n            }\n          }\n\n          // Remove any prefix anchors so that the output will match anywhere.\n          // ^^ really does mean an anchored match though.\n          for (var i = 0; i < n; ++i) {\n            if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n          }\n\n          // Expand letters to groups to handle mixing of case-sensitive and\n          // case-insensitive patterns if necessary.\n          if (regex.ignoreCase && needToFoldCase) {\n            for (var i = 0; i < n; ++i) {\n              var p = parts[i];\n              var ch0 = p.charAt(0);\n              if (p.length >= 2 && ch0 === '[') {\n                parts[i] = caseFoldCharset(p);\n              } else if (ch0 !== '\\\\') {\n                // TODO: handle letters in numeric escapes.\n                parts[i] = p.replace(\n                    /[a-zA-Z]/g,\n                    function (ch) {\n                      var cc = ch.charCodeAt(0);\n                      return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                    });\n              }\n            }\n          }\n\n          return parts.join('');\n        }\n\n        var rewritten = [];\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.global || regex.multiline) { throw new Error('' + regex); }\n          rewritten.push(\n              '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n        }\n\n        return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n      }\n\n\n      /**\n       * Split markup into a string of source code and an array mapping ranges in\n       * that string to the text nodes in which they appear.\n       *\n       * <p>\n       * The HTML DOM structure:</p>\n       * <pre>\n       * (Element   \"p\"\n       *   (Element \"b\"\n       *     (Text  \"print \"))       ; #1\n       *   (Text    \"'Hello '\")      ; #2\n       *   (Element \"br\")            ; #3\n       *   (Text    \"  + 'World';\")) ; #4\n       * </pre>\n       * <p>\n       * corresponds to the HTML\n       * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n       *\n       * <p>\n       * It will produce the output:</p>\n       * <pre>\n       * {\n       *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n       *   //                     1          2\n       *   //           012345678901234 5678901234567\n       *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n       * }\n       * </pre>\n       * <p>\n       * where #1 is a reference to the {@code \"print \"} text node above, and so\n       * on for the other text nodes.\n       * </p>\n       *\n       * <p>\n       * The {@code} spans array is an array of pairs.  Even elements are the start\n       * indices of substrings, and odd elements are the text nodes (or BR elements)\n       * that contain the text for those substrings.\n       * Substrings continue until the next index or the end of the source.\n       * </p>\n       *\n       * @param {Node} node an HTML DOM subtree containing source-code.\n       * @param {boolean|number} isPreformatted truthy if white-space in\n       *    text nodes should be considered significant.\n       * @return {SourceSpansT} source code and the nodes in which they occur.\n       */\n      function extractSourceSpans(node, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n        var chunks = [];\n        var length = 0;\n        var spans = [];\n        var k = 0;\n\n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1) {  // Element\n            if (nocode.test(node.className)) { return; }\n            for (var child = node.firstChild; child; child = child.nextSibling) {\n              walk(child);\n            }\n            var nodeName = node.nodeName.toLowerCase();\n            if ('br' === nodeName || 'li' === nodeName) {\n              chunks[k] = '\\n';\n              spans[k << 1] = length++;\n              spans[(k++ << 1) | 1] = node;\n            }\n          } else if (type == 3 || type == 4) {  // Text\n            var text = node.nodeValue;\n            if (text.length) {\n              if (!isPreformatted) {\n                text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n              } else {\n                text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n              }\n              // TODO: handle tabs here?\n              chunks[k] = text;\n              spans[k << 1] = length;\n              length += text.length;\n              spans[(k++ << 1) | 1] = node;\n            }\n          }\n        }\n\n        walk(node);\n\n        return {\n          sourceCode: chunks.join('').replace(/\\n$/, ''),\n          spans: spans\n        };\n      }\n\n\n      /**\n       * Apply the given language handler to sourceCode and add the resulting\n       * decorations to out.\n       * @param {!Element} sourceNode\n       * @param {number} basePos the index of sourceCode within the chunk of source\n       *    whose decorations are already present on out.\n       * @param {string} sourceCode\n       * @param {function(JobT)} langHandler\n       * @param {DecorationsT} out\n       */\n      function appendDecorations(\n          sourceNode, basePos, sourceCode, langHandler, out) {\n        if (!sourceCode) { return; }\n        /** @type {JobT} */\n        var job = {\n          sourceNode: sourceNode,\n          pre: 1,\n          langExtension: null,\n          numberLines: null,\n          sourceCode: sourceCode,\n          spans: null,\n          basePos: basePos,\n          decorations: null\n        };\n        langHandler(job);\n        out.push.apply(out, job.decorations);\n      }\n\n      var notWs = /\\S/;\n\n      /**\n       * Given an element, if it contains only one child element and any text nodes\n       * it contains contain only space characters, return the sole child element.\n       * Otherwise returns undefined.\n       * <p>\n       * This is meant to return the CODE element in {@code <pre><code ...>} when\n       * there is a single child element that contains all the non-space textual\n       * content, but not to return anything where there are multiple child elements\n       * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n       * is textual content.\n       */\n      function childContentWrapper(element) {\n        var wrapper = undefined;\n        for (var c = element.firstChild; c; c = c.nextSibling) {\n          var type = c.nodeType;\n          wrapper = (type === 1)  // Element Node\n              ? (wrapper ? element : c)\n              : (type === 3)  // Text Node\n              ? (notWs.test(c.nodeValue) ? element : wrapper)\n              : wrapper;\n        }\n        return wrapper === element ? undefined : wrapper;\n      }\n\n      /** Given triples of [style, pattern, context] returns a lexing function,\n        * The lexing function interprets the patterns to find token boundaries and\n        * returns a decoration list of the form\n        * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n        * where index_n is an index into the sourceCode, and style_n is a style\n        * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n        * all characters in sourceCode[index_n-1:index_n].\n        *\n        * The stylePatterns is a list whose elements have the form\n        * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n        *\n        * Style is a style constant like PR_PLAIN, or can be a string of the\n        * form 'lang-FOO', where FOO is a language extension describing the\n        * language of the portion of the token in $1 after pattern executes.\n        * E.g., if style is 'lang-lisp', and group 1 contains the text\n        * '(hello (world))', then that portion of the token will be passed to the\n        * registered lisp handler for formatting.\n        * The text before and after group 1 will be restyled using this decorator\n        * so decorators should take care that this doesn't result in infinite\n        * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n        * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n        * '<script>foo()<\\/script>', which would cause the current decorator to\n        * be called with '<script>' which would not match the same rule since\n        * group 1 must not be empty, so it would be instead styled as PR_TAG by\n        * the generic tag rule.  The handler registered for the 'js' extension would\n        * then be called with 'foo()', and finally, the current decorator would\n        * be called with '<\\/script>' which would not match the original rule and\n        * so the generic tag rule would identify it as a tag.\n        *\n        * Pattern must only match prefixes, and if it matches a prefix, then that\n        * match is considered a token with the same style.\n        *\n        * Context is applied to the last non-whitespace, non-comment token\n        * recognized.\n        *\n        * Shortcut is an optional string of characters, any of which, if the first\n        * character, gurantee that this pattern and only this pattern matches.\n        *\n        * @param {Array} shortcutStylePatterns patterns that always start with\n        *   a known character.  Must have a shortcut string.\n        * @param {Array} fallthroughStylePatterns patterns that will be tried in\n        *   order if the shortcut ones fail.  May have shortcuts.\n        *\n        * @return {function (JobT)} a function that takes an undecorated job and\n        *   attaches a list of decorations.\n        */\n      function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n        var shortcuts = {};\n        var tokenizer;\n        (function () {\n          var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n          var allRegexs = [];\n          var regexKeys = {};\n          for (var i = 0, n = allPatterns.length; i < n; ++i) {\n            var patternParts = allPatterns[i];\n            var shortcutChars = patternParts[3];\n            if (shortcutChars) {\n              for (var c = shortcutChars.length; --c >= 0;) {\n                shortcuts[shortcutChars.charAt(c)] = patternParts;\n              }\n            }\n            var regex = patternParts[1];\n            var k = '' + regex;\n            if (!regexKeys.hasOwnProperty(k)) {\n              allRegexs.push(regex);\n              regexKeys[k] = null;\n            }\n          }\n          allRegexs.push(/[\\0-\\uffff]/);\n          tokenizer = combinePrefixPatterns(allRegexs);\n        })();\n\n        var nPatterns = fallthroughStylePatterns.length;\n\n        /**\n         * Lexes job.sourceCode and attaches an output array job.decorations of\n         * style classes preceded by the position at which they start in\n         * job.sourceCode in order.\n         *\n         * @type{function (JobT)}\n         */\n        var decorate = function (job) {\n          var sourceCode = job.sourceCode, basePos = job.basePos;\n          var sourceNode = job.sourceNode;\n          /** Even entries are positions in source in ascending order.  Odd enties\n            * are style markers (e.g., PR_COMMENT) that run from that position until\n            * the end.\n            * @type {DecorationsT}\n            */\n          var decorations = [basePos, PR_PLAIN];\n          var pos = 0;  // index into sourceCode\n          var tokens = sourceCode.match(tokenizer) || [];\n          var styleCache = {};\n\n          for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n            var token = tokens[ti];\n            var style = styleCache[token];\n            var match = void 0;\n\n            var isEmbedded;\n            if (typeof style === 'string') {\n              isEmbedded = false;\n            } else {\n              var patternParts = shortcuts[token.charAt(0)];\n              if (patternParts) {\n                match = token.match(patternParts[1]);\n                style = patternParts[0];\n              } else {\n                for (var i = 0; i < nPatterns; ++i) {\n                  patternParts = fallthroughStylePatterns[i];\n                  match = token.match(patternParts[1]);\n                  if (match) {\n                    style = patternParts[0];\n                    break;\n                  }\n                }\n\n                if (!match) {  // make sure that we make progress\n                  style = PR_PLAIN;\n                }\n              }\n\n              isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n              if (isEmbedded && !(match && typeof match[1] === 'string')) {\n                isEmbedded = false;\n                style = PR_SOURCE;\n              }\n\n              if (!isEmbedded) { styleCache[token] = style; }\n            }\n\n            var tokenStart = pos;\n            pos += token.length;\n\n            if (!isEmbedded) {\n              decorations.push(basePos + tokenStart, style);\n            } else {  // Treat group 1 as an embedded block of source code.\n              var embeddedSource = match[1];\n              var embeddedSourceStart = token.indexOf(embeddedSource);\n              var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n              if (match[2]) {\n                // If embeddedSource can be blank, then it would match at the\n                // beginning which would cause us to infinitely recurse on the\n                // entire token, so we catch the right context in match[2].\n                embeddedSourceEnd = token.length - match[2].length;\n                embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n              }\n              var lang = style.substring(5);\n              // Decorate the left of the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart,\n                  token.substring(0, embeddedSourceStart),\n                  decorate, decorations);\n              // Decorate the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceStart,\n                  embeddedSource,\n                  langHandlerForExtension(lang, embeddedSource),\n                  decorations);\n              // Decorate the right of the embedded section\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceEnd,\n                  token.substring(embeddedSourceEnd),\n                  decorate, decorations);\n            }\n          }\n          job.decorations = decorations;\n        };\n        return decorate;\n      }\n\n      /** returns a function that produces a list of decorations from source text.\n        *\n        * This code treats \", ', and ` as string delimiters, and \\ as a string\n        * escape.  It does not recognize perl's qq() style strings.\n        * It has no special handling for double delimiter escapes as in basic, or\n        * the tripled delimiters used in python, but should work on those regardless\n        * although in those cases a single string literal may be broken up into\n        * multiple adjacent string literals.\n        *\n        * It recognizes C, C++, and shell style comments.\n        *\n        * @param {Object} options a set of optional parameters.\n        * @return {function (JobT)} a function that examines the source code\n        *     in the input job and builds a decoration list which it attaches to\n        *     the job.\n        */\n      function sourceDecorator(options) {\n        var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n        if (options['tripleQuotedStrings']) {\n          // '''multi-line-string''', 'single-line-string', and double-quoted\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n               null, '\\'\"']);\n        } else if (options['multiLineStrings']) {\n          // 'multi-line-string', \"multi-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n               null, '\\'\"`']);\n        } else {\n          // 'single-line-string', \"single-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,\n               /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n               null, '\"\\'']);\n        }\n        if (options['verbatimStrings']) {\n          // verbatim-string-literal production from the C# grammar.  See issue 93.\n          fallthroughStylePatterns.push(\n              [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n        }\n        var hc = options['hashComments'];\n        if (hc) {\n          if (options['cStyleComments']) {\n            if (hc > 1) {  // multiline hash comments\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n            } else {\n              // Stop C preprocessor declarations at an unclosed open comment\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n                   null, '#']);\n            }\n            // #include <stdio.h>\n            fallthroughStylePatterns.push(\n                [PR_STRING,\n                 /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n                 null]);\n          } else {\n            shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n          }\n        }\n        if (options['cStyleComments']) {\n          fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n          fallthroughStylePatterns.push(\n              [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n        }\n        var regexLiterals = options['regexLiterals'];\n        if (regexLiterals) {\n          /**\n           * @const\n           */\n          var regexExcls = regexLiterals > 1\n            ? ''  // Multiline regex literals\n            : '\\n\\r';\n          /**\n           * @const\n           */\n          var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n          /**\n           * @const\n           */\n          var REGEX_LITERAL = (\n              // A regular expression literal starts with a slash that is\n              // not followed by * or / so that it is not confused with\n              // comments.\n              '/(?=[^/*' + regexExcls + '])'\n              // and then contains any number of raw characters,\n              + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n              // escape sequences (\\x5C),\n              +    '|\\\\x5C' + regexAny\n              // or non-nesting character sets (\\x5B\\x5D);\n              +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n              +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n              // finally closed by a /.\n              + '/');\n          fallthroughStylePatterns.push(\n              ['lang-regex',\n               RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n               ]);\n        }\n\n        var types = options['types'];\n        if (types) {\n          fallthroughStylePatterns.push([PR_TYPE, types]);\n        }\n\n        var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n        if (keywords.length) {\n          fallthroughStylePatterns.push(\n              [PR_KEYWORD,\n               new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n               null]);\n        }\n\n        shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n        var punctuation =\n          // The Bash man page says\n\n          // A word is a sequence of characters considered as a single\n          // unit by GRUB. Words are separated by metacharacters,\n          // which are the following plus space, tab, and newline: { }\n          // | & $ ; < >\n          // ...\n\n          // A word beginning with # causes that word and all remaining\n          // characters on that line to be ignored.\n\n          // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n          // comment but empirically\n          // $ echo {#}\n          // {#}\n          // $ echo \\$#\n          // $#\n          // $ echo }#\n          // }#\n\n          // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n          // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n          // suggests that this definition is compatible with a\n          // default mode that tries to use a single token definition\n          // to recognize both bash/python style comments and C\n          // preprocessor directives.\n\n          // This definition of punctuation does not include # in the list of\n          // follow-on exclusions, so # will not be broken before if preceeded\n          // by a punctuation character.  We could try to exclude # after\n          // [|&;<>] but that doesn't seem to cause many major problems.\n          // If that does turn out to be a problem, we should change the below\n          // when hc is truthy to include # in the run of punctuation characters\n          // only when not followint [|&;<>].\n          '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n        if (options['regexLiterals']) {\n          punctuation += '(?!\\s*\\/)';\n        }\n\n        fallthroughStylePatterns.push(\n            // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n            [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n            [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_LITERAL,\n             new RegExp(\n                 '^(?:'\n                 // A hex number\n                 + '0x[a-f0-9]+'\n                 // or an octal or decimal number,\n                 + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n                 // possibly in scientific notation\n                 + '(?:e[+\\\\-]?\\\\d+)?'\n                 + ')'\n                 // with an optional modifier like UL for unsigned long\n                 + '[a-z]*', 'i'),\n             null, '0123456789'],\n            // Don't treat escaped quotes in bash as starting strings.\n            // See issue 144.\n            [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n            [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n        return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n      }\n\n      var decorateSource = sourceDecorator({\n            'keywords': ALL_KEYWORDS,\n            'hashComments': true,\n            'cStyleComments': true,\n            'multiLineStrings': true,\n            'regexLiterals': true\n          });\n\n      /**\n       * Given a DOM subtree, wraps it in a list, and puts each line into its own\n       * list item.\n       *\n       * @param {Node} node modified in place.  Its content is pulled into an\n       *     HTMLOListElement, and each line is moved into a separate list item.\n       *     This requires cloning elements, so the input might not have unique\n       *     IDs after numbering.\n       * @param {number|null|boolean} startLineNum\n       *     If truthy, coerced to an integer which is the 1-indexed line number\n       *     of the first line of code.  The number of the first line will be\n       *     attached to the list.\n       * @param {boolean} isPreformatted true iff white-space in text nodes should\n       *     be treated as significant.\n       */\n      function numberLines(node, startLineNum, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n        var lineBreak = /\\r\\n?|\\n/;\n\n        var document = node.ownerDocument;\n\n        var li = document.createElement('li');\n        while (node.firstChild) {\n          li.appendChild(node.firstChild);\n        }\n        // An array of lines.  We split below, so this is initialized to one\n        // un-split line.\n        var listItems = [li];\n\n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1 && !nocode.test(node.className)) {  // Element\n            if ('br' === node.nodeName.toLowerCase()) {\n              breakAfter(node);\n              // Discard the <BR> since it is now flush against a </LI>.\n              if (node.parentNode) {\n                node.parentNode.removeChild(node);\n              }\n            } else {\n              for (var child = node.firstChild; child; child = child.nextSibling) {\n                walk(child);\n              }\n            }\n          } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n            var text = node.nodeValue;\n            var match = text.match(lineBreak);\n            if (match) {\n              var firstLine = text.substring(0, match.index);\n              node.nodeValue = firstLine;\n              var tail = text.substring(match.index + match[0].length);\n              if (tail) {\n                var parent = node.parentNode;\n                parent.insertBefore(\n                  document.createTextNode(tail), node.nextSibling);\n              }\n              breakAfter(node);\n              if (!firstLine) {\n                // Don't leave blank text nodes in the DOM.\n                node.parentNode.removeChild(node);\n              }\n            }\n          }\n        }\n\n        // Split a line after the given node.\n        function breakAfter(lineEndNode) {\n          // If there's nothing to the right, then we can skip ending the line\n          // here, and move root-wards since splitting just before an end-tag\n          // would require us to create a bunch of empty copies.\n          while (!lineEndNode.nextSibling) {\n            lineEndNode = lineEndNode.parentNode;\n            if (!lineEndNode) { return; }\n          }\n\n          function breakLeftOf(limit, copy) {\n            // Clone shallowly if this node needs to be on both sides of the break.\n            var rightSide = copy ? limit.cloneNode(false) : limit;\n            var parent = limit.parentNode;\n            if (parent) {\n              // We clone the parent chain.\n              // This helps us resurrect important styling elements that cross lines.\n              // E.g. in <i>Foo<br>Bar</i>\n              // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n              var parentClone = breakLeftOf(parent, 1);\n              // Move the clone and everything to the right of the original\n              // onto the cloned parent.\n              var next = limit.nextSibling;\n              parentClone.appendChild(rightSide);\n              for (var sibling = next; sibling; sibling = next) {\n                next = sibling.nextSibling;\n                parentClone.appendChild(sibling);\n              }\n            }\n            return rightSide;\n          }\n\n          var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n          // Walk the parent chain until we reach an unattached LI.\n          for (var parent;\n               // Check nodeType since IE invents document fragments.\n               (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n            copiedListItem = parent;\n          }\n          // Put it on the list of lines for later processing.\n          listItems.push(copiedListItem);\n        }\n\n        // Split lines while there are lines left to split.\n        for (var i = 0;  // Number of lines that have been split so far.\n             i < listItems.length;  // length updated by breakAfter calls.\n             ++i) {\n          walk(listItems[i]);\n        }\n\n        // Make sure numeric indices show correctly.\n        if (startLineNum === (startLineNum|0)) {\n          listItems[0].setAttribute('value', startLineNum);\n        }\n\n        var ol = document.createElement('ol');\n        ol.className = 'linenums';\n        var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n        for (var i = 0, n = listItems.length; i < n; ++i) {\n          li = listItems[i];\n          // Stick a class on the LIs so that stylesheets can\n          // color odd/even rows, or any other row pattern that\n          // is co-prime with 10.\n          li.className = 'L' + ((i + offset) % 10);\n          if (!li.firstChild) {\n            li.appendChild(document.createTextNode('\\xA0'));\n          }\n          ol.appendChild(li);\n        }\n\n        node.appendChild(ol);\n      }\n\n\n      /**\n       * Breaks {@code job.sourceCode} around style boundaries in\n       * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n       * @param {JobT} job\n       * @private\n       */\n      function recombineTagsAndDecorations(job) {\n        var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n        isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n        var newlineRe = /\\n/g;\n\n        var source = job.sourceCode;\n        var sourceLength = source.length;\n        // Index into source after the last code-unit recombined.\n        var sourceIndex = 0;\n\n        var spans = job.spans;\n        var nSpans = spans.length;\n        // Index into spans after the last span which ends at or before sourceIndex.\n        var spanIndex = 0;\n\n        var decorations = job.decorations;\n        var nDecorations = decorations.length;\n        // Index into decorations after the last decoration which ends at or before\n        // sourceIndex.\n        var decorationIndex = 0;\n\n        // Remove all zero-length decorations.\n        decorations[nDecorations] = sourceLength;\n        var decPos, i;\n        for (i = decPos = 0; i < nDecorations;) {\n          if (decorations[i] !== decorations[i + 2]) {\n            decorations[decPos++] = decorations[i++];\n            decorations[decPos++] = decorations[i++];\n          } else {\n            i += 2;\n          }\n        }\n        nDecorations = decPos;\n\n        // Simplify decorations.\n        for (i = decPos = 0; i < nDecorations;) {\n          var startPos = decorations[i];\n          // Conflate all adjacent decorations that use the same style.\n          var startDec = decorations[i + 1];\n          var end = i + 2;\n          while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n            end += 2;\n          }\n          decorations[decPos++] = startPos;\n          decorations[decPos++] = startDec;\n          i = end;\n        }\n\n        nDecorations = decorations.length = decPos;\n\n        var sourceNode = job.sourceNode;\n        var oldDisplay = \"\";\n        if (sourceNode) {\n          oldDisplay = sourceNode.style.display;\n          sourceNode.style.display = 'none';\n        }\n        try {\n          var decoration = null;\n          while (spanIndex < nSpans) {\n            var spanStart = spans[spanIndex];\n            var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n                || sourceLength;\n\n            var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n            var end = Math.min(spanEnd, decEnd);\n\n            var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n            var styledText;\n            if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n                // Don't introduce spans around empty text nodes.\n                && (styledText = source.substring(sourceIndex, end))) {\n              // This may seem bizarre, and it is.  Emitting LF on IE causes the\n              // code to display with spaces instead of line breaks.\n              // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n              // space to appear at the beginning of every line but the first.\n              // Emitting an old Mac OS 9 line separator makes everything spiffy.\n              if (isIE8OrEarlier) {\n                styledText = styledText.replace(newlineRe, '\\r');\n              }\n              textNode.nodeValue = styledText;\n              var document = textNode.ownerDocument;\n              var span = document.createElement('span');\n              span.className = decorations[decorationIndex + 1];\n              var parentNode = textNode.parentNode;\n              parentNode.replaceChild(span, textNode);\n              span.appendChild(textNode);\n              if (sourceIndex < spanEnd) {  // Split off a text node.\n                spans[spanIndex + 1] = textNode\n                    // TODO: Possibly optimize by using '' if there's no flicker.\n                    = document.createTextNode(source.substring(end, spanEnd));\n                parentNode.insertBefore(textNode, span.nextSibling);\n              }\n            }\n\n            sourceIndex = end;\n\n            if (sourceIndex >= spanEnd) {\n              spanIndex += 2;\n            }\n            if (sourceIndex >= decEnd) {\n              decorationIndex += 2;\n            }\n          }\n        } finally {\n          if (sourceNode) {\n            sourceNode.style.display = oldDisplay;\n          }\n        }\n      }\n\n\n      /** Maps language-specific file extensions to handlers. */\n      var langHandlerRegistry = {};\n      /** Register a language handler for the given file extensions.\n        * @param {function (JobT)} handler a function from source code to a list\n        *      of decorations.  Takes a single argument job which describes the\n        *      state of the computation and attaches the decorations to it.\n        * @param {Array.<string>} fileExtensions\n        */\n      function registerLangHandler(handler, fileExtensions) {\n        for (var i = fileExtensions.length; --i >= 0;) {\n          var ext = fileExtensions[i];\n          if (!langHandlerRegistry.hasOwnProperty(ext)) {\n            langHandlerRegistry[ext] = handler;\n          } else if (win['console']) {\n            console['warn']('cannot override language handler %s', ext);\n          }\n        }\n      }\n      function langHandlerForExtension(extension, source) {\n        if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n          // Treat it as markup if the first non whitespace character is a < and\n          // the last non-whitespace character is a >.\n          extension = /^\\s*</.test(source)\n              ? 'default-markup'\n              : 'default-code';\n        }\n        return langHandlerRegistry[extension];\n      }\n      registerLangHandler(decorateSource, ['default-code']);\n      registerLangHandler(\n          createSimpleLexer(\n              [],\n              [\n               [PR_PLAIN,       /^[^<?]+/],\n               [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n               [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n               // Unescaped content in an unknown language\n               ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n               ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n               [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n               ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n               // Unescaped content in javascript.  (Or possibly vbscript).\n               ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n               // Contains unescaped stylesheet content\n               ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n               ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n              ]),\n          ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n      registerLangHandler(\n          createSimpleLexer(\n              [\n               [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n               [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n               ],\n              [\n               [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n               [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n               ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n               [PR_PUNCTUATION,  /^[=<>\\/]+/],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n               ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n               ]),\n          ['in.tag']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CPP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'types': C_TYPES\n            }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': 'null,true,false'\n            }), ['json']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CSHARP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'verbatimStrings': true,\n              'types': C_TYPES\n            }), ['cs']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JAVA_KEYWORDS,\n              'cStyleComments': true\n            }), ['java']);\n      registerLangHandler(sourceDecorator({\n              'keywords': SH_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true\n            }), ['bash', 'bsh', 'csh', 'sh']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PYTHON_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'tripleQuotedStrings': true\n            }), ['cv', 'py', 'python']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PERL_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': 2  // multiline regex literals\n            }), ['perl', 'pl', 'pm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': RUBY_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': true\n            }), ['rb', 'ruby']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JSCRIPT_KEYWORDS,\n              'cStyleComments': true,\n              'regexLiterals': true\n            }), ['javascript', 'js', 'ts', 'typescript']);\n      registerLangHandler(sourceDecorator({\n              'keywords': COFFEE_KEYWORDS,\n              'hashComments': 3,  // ### style block comments\n              'cStyleComments': true,\n              'multilineStrings': true,\n              'tripleQuotedStrings': true,\n              'regexLiterals': true\n            }), ['coffee']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n      /** @param {JobT} job */\n      function applyDecorator(job) {\n        var opt_langExtension = job.langExtension;\n\n        try {\n          // Extract tags, and convert the source code to plain text.\n          var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n          /** Plain text. @type {string} */\n          var source = sourceAndSpans.sourceCode;\n          job.sourceCode = source;\n          job.spans = sourceAndSpans.spans;\n          job.basePos = 0;\n\n          // Apply the appropriate language handler\n          langHandlerForExtension(opt_langExtension, source)(job);\n\n          // Integrate the decorations and tags back into the source code,\n          // modifying the sourceNode in place.\n          recombineTagsAndDecorations(job);\n        } catch (e) {\n          if (win['console']) {\n            console['log'](e && e['stack'] || e);\n          }\n        }\n      }\n\n      /**\n       * Pretty print a chunk of code.\n       * @param sourceCodeHtml {string} The HTML to pretty print.\n       * @param opt_langExtension {string} The language name to use.\n       *     Typically, a filename extension like 'cpp' or 'java'.\n       * @param opt_numberLines {number|boolean} True to number lines,\n       *     or the 1-indexed number of the first line in sourceCodeHtml.\n       */\n      function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n        /** @type{number|boolean} */\n        var nl = opt_numberLines || false;\n        /** @type{string|null} */\n        var langExtension = opt_langExtension || null;\n        /** @type{!Element} */\n        var container = document.createElement('div');\n        // This could cause images to load and onload listeners to fire.\n        // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n        // We assume that the inner HTML is from a trusted source.\n        // The pre-tag is required for IE8 which strips newlines from innerHTML\n        // when it is injected into a <pre> tag.\n        // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n        // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n        container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n        container = /** @type{!Element} */(container.firstChild);\n        if (nl) {\n          numberLines(container, nl, true);\n        }\n\n        /** @type{JobT} */\n        var job = {\n          langExtension: langExtension,\n          numberLines: nl,\n          sourceNode: container,\n          pre: 1,\n          sourceCode: null,\n          basePos: null,\n          spans: null,\n          decorations: null\n        };\n        applyDecorator(job);\n        return container.innerHTML;\n      }\n\n       /**\n        * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n        * {@code class=prettyprint} and prettify them.\n        *\n        * @param {Function} opt_whenDone called when prettifying is done.\n        * @param {HTMLElement|HTMLDocument} opt_root an element or document\n        *   containing all the elements to pretty print.\n        *   Defaults to {@code document.body}.\n        */\n      function $prettyPrint(opt_whenDone, opt_root) {\n        var root = opt_root || document.body;\n        var doc = root.ownerDocument || document;\n        function byTagName(tn) { return root.getElementsByTagName(tn); }\n        // fetch a list of nodes to rewrite\n        var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n        var elements = [];\n        for (var i = 0; i < codeSegments.length; ++i) {\n          for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n            elements.push(codeSegments[i][j]);\n          }\n        }\n        codeSegments = null;\n\n        var clock = Date;\n        if (!clock['now']) {\n          clock = { 'now': function () { return +(new Date); } };\n        }\n\n        // The loop is broken into a series of continuations to make sure that we\n        // don't make the browser unresponsive when rewriting a large page.\n        var k = 0;\n\n        var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n        var prettyPrintRe = /\\bprettyprint\\b/;\n        var prettyPrintedRe = /\\bprettyprinted\\b/;\n        var preformattedTagNameRe = /pre|xmp/i;\n        var codeRe = /^code$/i;\n        var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n        var EMPTY = {};\n\n        function doWork() {\n          var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                         clock['now']() + 250 /* ms */ :\n                         Infinity);\n          for (; k < elements.length && clock['now']() < endTime; k++) {\n            var cs = elements[k];\n\n            // Look for a preceding comment like\n            // <?prettify lang=\"...\" linenums=\"...\"?>\n            var attrs = EMPTY;\n            {\n              for (var preceder = cs; (preceder = preceder.previousSibling);) {\n                var nt = preceder.nodeType;\n                // <?foo?> is parsed by HTML 5 to a comment node (8)\n                // like <!--?foo?-->, but in XML is a processing instruction\n                var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n                if (value\n                    ? !/^\\??prettify\\b/.test(value)\n                    : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n                  // Skip over white-space text nodes but not others.\n                  break;\n                }\n                if (value) {\n                  attrs = {};\n                  value.replace(\n                      /\\b(\\w+)=([\\w:.%+-]+)/g,\n                    function (_, name, value) { attrs[name] = value; });\n                  break;\n                }\n              }\n            }\n\n            var className = cs.className;\n            if ((attrs !== EMPTY || prettyPrintRe.test(className))\n                // Don't redo this if we've already done it.\n                // This allows recalling pretty print to just prettyprint elements\n                // that have been added to the page since last call.\n                && !prettyPrintedRe.test(className)) {\n\n              // make sure this is not nested in an already prettified element\n              var nested = false;\n              for (var p = cs.parentNode; p; p = p.parentNode) {\n                var tn = p.tagName;\n                if (preCodeXmpRe.test(tn)\n                    && p.className && prettyPrintRe.test(p.className)) {\n                  nested = true;\n                  break;\n                }\n              }\n              if (!nested) {\n                // Mark done.  If we fail to prettyprint for whatever reason,\n                // we shouldn't try again.\n                cs.className += ' prettyprinted';\n\n                // If the classes includes a language extensions, use it.\n                // Language extensions can be specified like\n                //     <pre class=\"prettyprint lang-cpp\">\n                // the language extension \"cpp\" is used to find a language handler\n                // as passed to PR.registerLangHandler.\n                // HTML5 recommends that a language be specified using \"language-\"\n                // as the prefix instead.  Google Code Prettify supports both.\n                // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n                var langExtension = attrs['lang'];\n                if (!langExtension) {\n                  langExtension = className.match(langExtensionRe);\n                  // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n                  var wrapper;\n                  if (!langExtension && (wrapper = childContentWrapper(cs))\n                      && codeRe.test(wrapper.tagName)) {\n                    langExtension = wrapper.className.match(langExtensionRe);\n                  }\n\n                  if (langExtension) { langExtension = langExtension[1]; }\n                }\n\n                var preformatted;\n                if (preformattedTagNameRe.test(cs.tagName)) {\n                  preformatted = 1;\n                } else {\n                  var currentStyle = cs['currentStyle'];\n                  var defaultView = doc.defaultView;\n                  var whitespace = (\n                      currentStyle\n                      ? currentStyle['whiteSpace']\n                      : (defaultView\n                         && defaultView.getComputedStyle)\n                      ? defaultView.getComputedStyle(cs, null)\n                      .getPropertyValue('white-space')\n                      : 0);\n                  preformatted = whitespace\n                      && 'pre' === whitespace.substring(0, 3);\n                }\n\n                // Look for a class like linenums or linenums:<n> where <n> is the\n                // 1-indexed number of the first line.\n                var lineNums = attrs['linenums'];\n                if (!(lineNums = lineNums === 'true' || +lineNums)) {\n                  lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n                  lineNums =\n                    lineNums\n                    ? lineNums[1] && lineNums[1].length\n                      ? +lineNums[1] : true\n                    : false;\n                }\n                if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n                // do the pretty printing\n                var prettyPrintingJob = {\n                  langExtension: langExtension,\n                  sourceNode: cs,\n                  numberLines: lineNums,\n                  pre: preformatted,\n                  sourceCode: null,\n                  basePos: null,\n                  spans: null,\n                  decorations: null\n                };\n                applyDecorator(prettyPrintingJob);\n              }\n            }\n          }\n          if (k < elements.length) {\n            // finish up in a continuation\n            win.setTimeout(doWork, 250);\n          } else if ('function' === typeof opt_whenDone) {\n            opt_whenDone();\n          }\n        }\n\n        doWork();\n      }\n\n      /**\n       * Contains functions for creating and registering new language handlers.\n       * @type {Object}\n       */\n      var PR = win['PR'] = {\n            'createSimpleLexer': createSimpleLexer,\n            'registerLangHandler': registerLangHandler,\n            'sourceDecorator': sourceDecorator,\n            'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n            'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n            'PR_COMMENT': PR_COMMENT,\n            'PR_DECLARATION': PR_DECLARATION,\n            'PR_KEYWORD': PR_KEYWORD,\n            'PR_LITERAL': PR_LITERAL,\n            'PR_NOCODE': PR_NOCODE,\n            'PR_PLAIN': PR_PLAIN,\n            'PR_PUNCTUATION': PR_PUNCTUATION,\n            'PR_SOURCE': PR_SOURCE,\n            'PR_STRING': PR_STRING,\n            'PR_TAG': PR_TAG,\n            'PR_TYPE': PR_TYPE,\n            'prettyPrintOne':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrintOne'] = $prettyPrintOne)\n                 : (prettyPrintOne = $prettyPrintOne),\n            'prettyPrint':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrint'] = $prettyPrint)\n                 : (prettyPrint = $prettyPrint)\n          };\n\n      // Make PR available via the Asynchronous Module Definition (AMD) API.\n      // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n      // The Asynchronous Module Definition (AMD) API specifies a\n      // mechanism for defining modules such that the module and its\n      // dependencies can be asynchronously loaded.\n      // ...\n      // To allow a clear indicator that a global define function (as\n      // needed for script src browser loading) conforms to the AMD API,\n      // any global define function SHOULD have a property called \"amd\"\n      // whose value is an object. This helps avoid conflict with any\n      // other existing JavaScript code that could have defined a define()\n      // function that does not conform to the AMD API.\n      var define = win['define'];\n      if (typeof define === \"function\" && define['amd']) {\n        define(\"google-code-prettify\", [], function () {\n          return PR;\n        });\n      }\n    })();\n\n    return prettyPrint;\n  })();\n\n  // If this script is deferred or async and the document is already\n  // loaded we need to wait for language handlers to load before performing\n  // any autorun.\n  function onLangsLoaded() {\n    if (autorun) {\n      contentLoaded(\n        function () {\n          var n = callbacks.length;\n          var callback = n ? function () {\n            for (var i = 0; i < n; ++i) {\n              (function (i) {\n                win.setTimeout(\n                   function () {\n                     win['exports'][callbacks[i]].apply(win, arguments);\n                   }, 0);\n               })(i);\n            }\n          } : void 0;\n          prettyPrint(callback);\n        });\n    }\n  }\n  checkPendingLanguages();\n\n}());\n","date":"2019-04-30T08:09:45.646Z","updated":"2019-04-30T08:09:45.646Z","path":"plugins/prettify/run_prettify.js","layout":"false","title":"","comments":1,"_id":"cjxh80em900226c9vygh9eimu","content":"/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * <div style=\"white-space: pre\">\n * Looks at query parameters to decide which language handlers and style-sheets\n * to load.\n *\n * Query Parameter     Format           Effect                        Default\n * +------------------+---------------+------------------------------+--------+\n * | autorun=         | true | false  | If true then prettyPrint()   | \"true\" |\n * |                  |               | is called on page load.      |        |\n * +------------------+---------------+------------------------------+--------+\n * | lang=            | language name | Loads the language handler   | Can    |\n * |                  |               | named \"lang-<name>.js\".      | appear |\n * |                  |               | See available handlers at    | many   |\n * |                  |               | https://github.com/google/   | times. |\n * |                  |               | code-prettify/tree/master/   |        |\n * |                  |               | src                          |        |\n * +------------------+---------------+------------------------------+--------+\n * | skin=            | skin name     | Loads the skin stylesheet    | none.  |\n * |                  |               | named \"<name>.css\".          |        |\n * |                  |               | https://raw.githack.com/     |        |\n * |                  |               | google/code-prettify/master/ |        |\n * |                  |               | styles/index.html            |        |\n * +------------------+---------------+------------------------------+--------+\n * | callback=        | JS identifier | When \"prettyPrint\" finishes  | none   |\n * |                  |               | window.exports[js_ident] is  |        |\n * |                  |               | called.                      |        |\n * |                  |               | The callback must be under   |        |\n * |                  |               | exports to reduce the risk   |        |\n * |                  |               | of XSS via query parameter   |        |\n * |                  |               | injection.                   |        |\n * +------------------+---------------+------------------------------+--------+\n *\n * Examples\n * .../run_prettify.js?lang=css&skin=sunburst\n *   1. Loads the CSS language handler which can be used to prettify CSS\n *      stylesheets, HTML <style> element bodies and style=\"...\" attributes\n *      values.\n *   2. Loads the sunburst.css stylesheet instead of the default prettify.css\n *      stylesheet.\n *      A gallery of stylesheets is available at\n *      https://raw.githack.com/google/code-prettify/master/styles/index.html\n *   3. Since autorun=false is not specified, calls prettyPrint() on page load.\n * </div>\n */\n\n/**\n * @typedef {!Array.<number|string>}\n * Alternating indices and the decorations that should be inserted there.\n * The indices are monotonically increasing.\n */\nvar DecorationsT;\n\n/**\n * @typedef {!{\n *   sourceNode: !Element,\n *   pre: !(number|boolean),\n *   langExtension: ?string,\n *   numberLines: ?(number|boolean),\n *   sourceCode: ?string,\n *   spans: ?(Array.<number|Node>),\n *   basePos: ?number,\n *   decorations: ?DecorationsT\n * }}\n * <dl>\n *  <dt>sourceNode<dd>the element containing the source\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>pre<dd>truthy if white-space in text nodes\n *     should be considered significant.\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n *  <dt>decorations<dd>an array of style classes preceded\n *     by the position at which they start in job.sourceCode in order\n *  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n *     source.\n * </dl>\n */\nvar JobT;\n\n/**\n * @typedef {!{\n *   sourceCode: string,\n *   spans: !(Array.<number|Node>)\n * }}\n * <dl>\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n * </dl>\n */\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = false;\n\n\n(function () {\n  \"use strict\";\n\n  var win = window;\n  var doc = document;\n  var root = doc.documentElement;\n  var head = doc['head'] || doc.getElementsByTagName(\"head\")[0] || root;\n\n  // From http://javascript.nwbox.com/ContentLoaded/contentloaded.js\n  // Author: Diego Perini (diego.perini at gmail.com)\n  // Summary: cross-browser wrapper for DOMContentLoaded\n  // Updated: 20101020\n  // License: MIT\n  // Version: 1.2\n  function contentLoaded(callback) {\n    var addEventListener = doc['addEventListener'];\n    var done = false, top = true,\n        add = addEventListener ? 'addEventListener' : 'attachEvent',\n        rem = addEventListener ? 'removeEventListener' : 'detachEvent',\n        pre = addEventListener ? '' : 'on',\n\n        init = function(e) {\n          if (e.type == 'readystatechange' && doc.readyState != 'complete') {\n            return;\n          }\n          (e.type == 'load' ? win : doc)[rem](pre + e.type, init, false);\n          if (!done && (done = true)) { callback.call(win, e.type || e); }\n        },\n\n        poll = function() {\n          try {\n            root.doScroll('left');\n          } catch(e) {\n            win.setTimeout(poll, 50);\n            return;\n          }\n          init('poll');\n        };\n\n    if (doc.readyState == 'complete') {\n      callback.call(win, 'lazy');\n    } else {\n      if (doc.createEventObject && root.doScroll) {\n        try { top = !win.frameElement; } catch(e) { }\n        if (top) { poll(); }\n      }\n      doc[add](pre + 'DOMContentLoaded', init, false);\n      doc[add](pre + 'readystatechange', init, false);\n      win[add](pre + 'load', init, false);\n    }\n  }\n\n  // Given a list of URLs to stylesheets, loads the first that loads without\n  // triggering an error event.\n  function loadStylesheetsFallingBack(stylesheets) {\n    var n = stylesheets.length;\n    function load(i) {\n      if (i === n) { return; }\n      var link = doc.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      if (i + 1 < n) {\n        // http://pieisgood.org/test/script-link-events/ indicates that many\n        // versions of IE do not support onerror on <link>s, though\n        // http://msdn.microsoft.com/en-us/library/ie/ms535848(v=vs.85).aspx\n        // indicates that recent IEs do support error.\n        link.error = link.onerror = function () { load(i + 1); };\n      }\n      link.href = stylesheets[i];\n      head.appendChild(link);\n    }\n    load(0);\n  }\n\n  var scriptQuery = '';\n  // Look for the <script> node that loads this script to get its parameters.\n  // This starts looking at the end instead of just considering the last\n  // because deferred and async scripts run out of order.\n  // If the script is loaded twice, then this will run in reverse order.\n  var scripts = doc.getElementsByTagName('script');\n  for (var i = scripts.length; --i >= 0;) {\n    var script = scripts[i];\n    var match = script.src.match(\n        /^[^?#]*\\/run_prettify\\.js(\\?[^#]*)?(?:#.*)?$/);\n    if (match) {\n      scriptQuery = match[1] || '';\n      // Remove the script from the DOM so that multiple runs at least run\n      // multiple times even if parameter sets are interpreted in reverse\n      // order.\n      script.parentNode.removeChild(script);\n      break;\n    }\n  }\n\n  // Pull parameters into local variables.\n  var autorun = true;\n  var langs = [];\n  var skins = [];\n  var callbacks = [];\n  scriptQuery.replace(\n      /[?&]([^&=]+)=([^&]+)/g,\n      function (_, name, value) {\n        value = decodeURIComponent(value);\n        name = decodeURIComponent(name);\n        if (name == 'autorun')   { autorun = !/^[0fn]/i.test(value); } else\n        if (name == 'lang')      { langs.push(value);                } else\n        if (name == 'skin')      { skins.push(value);                } else\n        if (name == 'callback')  { callbacks.push(value);            }\n      });\n\n  // Use https to avoid mixed content warnings in client pages and to\n  // prevent a MITM from rewrite prettify mid-flight.\n  // This only works if this script is loaded via https : something\n  // over which we exercise no control.\n  var LOADER_BASE_URL =\n     'https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader';\n\n  for (var i = 0, n = langs.length; i < n; ++i) (function (lang) {\n    var script = doc.createElement(\"script\");\n\n    // Excerpted from jQuery.ajaxTransport(\"script\") to fire events when\n    // a script is finished loading.\n    // Attach handlers for each script\n    script.onload = script.onerror = script.onreadystatechange = function () {\n      if (script && (\n            !script.readyState || /loaded|complete/.test(script.readyState))) {\n        // Handle memory leak in IE\n        script.onerror = script.onload = script.onreadystatechange = null;\n\n        --pendingLanguages;\n        checkPendingLanguages();\n\n        // Remove the script\n        if (script.parentNode) {\n          script.parentNode.removeChild(script);\n        }\n\n        script = null;\n      }\n    };\n\n    script.type = 'text/javascript';\n    script.src = LOADER_BASE_URL\n      + '/lang-' + encodeURIComponent(langs[i]) + '.js';\n\n    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n    head.insertBefore(script, head.firstChild);\n  })(langs[i]);\n\n  var pendingLanguages = langs.length;\n  function checkPendingLanguages() {\n    if (!pendingLanguages) {\n      win.setTimeout(onLangsLoaded, 0);\n    }\n  }\n\n  var skinUrls = [];\n  for (var i = 0, n = skins.length; i < n; ++i) {\n    skinUrls.push(LOADER_BASE_URL\n        + '/skins/' + encodeURIComponent(skins[i]) + '.css');\n  }\n  skinUrls.push(LOADER_BASE_URL + '/prettify.css');\n  loadStylesheetsFallingBack(skinUrls);\n\n  var prettyPrint = (function () {\n    /**\n     * @license\n     * Copyright (C) 2006 Google Inc.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n\n    /**\n     * @fileoverview\n     * some functions for browser-side pretty printing of code contained in html.\n     *\n     * <p>\n     * For a fairly comprehensive set of languages see the\n     * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n     * file that came with this source.  At a minimum, the lexer should work on a\n     * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n     * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n     * and a subset of Perl, but, because of commenting conventions, doesn't work on\n     * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n     * <p>\n     * Usage: <ol>\n     * <li> include this source file in an html page via\n     *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n     * <li> define style rules.  See the example page for examples.\n     * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n     *    {@code class=prettyprint.}\n     *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n     *    printer needs to do more substantial DOM manipulations to support that, so\n     *    some css styles may not be preserved.\n     * </ol>\n     * That's it.  I wanted to keep the API as simple as possible, so there's no\n     * need to specify which language the code is in, but if you wish, you can add\n     * another class to the {@code <pre>} or {@code <code>} element to specify the\n     * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n     * starts with \"lang-\" followed by a file extension, specifies the file type.\n     * See the \"lang-*.js\" files in this directory for code that implements\n     * per-language file handlers.\n     * <p>\n     * Change log:<br>\n     * cbeust, 2006/08/22\n     * <blockquote>\n     *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n     * </blockquote>\n     * @requires console\n     */\n\n    // JSLint declarations\n    /*global console, document, navigator, setTimeout, window, define */\n\n\n    /**\n     * {@type !{\n     *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n     *   'registerLangHandler': function (function (JobT), Array.<string>),\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_VALUE': string,\n     *   'PR_COMMENT': string,\n     *   'PR_DECLARATION': string,\n     *   'PR_KEYWORD': string,\n     *   'PR_LITERAL': string,\n     *   'PR_NOCODE': string,\n     *   'PR_PLAIN': string,\n     *   'PR_PUNCTUATION': string,\n     *   'PR_SOURCE': string,\n     *   'PR_STRING': string,\n     *   'PR_TAG': string,\n     *   'PR_TYPE': string,\n     *   'prettyPrintOne': function (string, string, number|boolean),\n     *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n     * }}\n     * @const\n     */\n    var PR;\n\n    /**\n     * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n     * UI events.\n     * If set to {@code false}, {@code prettyPrint()} is synchronous.\n     */\n    var PR_SHOULD_USE_CONTINUATION = true\n    if (typeof window !== 'undefined') {\n      window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n    }\n\n    /**\n     * Pretty print a chunk of code.\n     * @param {string} sourceCodeHtml The HTML to pretty print.\n     * @param {string} opt_langExtension The language name to use.\n     *     Typically, a filename extension like 'cpp' or 'java'.\n     * @param {number|boolean} opt_numberLines True to number lines,\n     *     or the 1-indexed number of the first line in sourceCodeHtml.\n     * @return {string} code as html, but prettier\n     */\n    var prettyPrintOne;\n    /**\n     * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n     * {@code class=prettyprint} and prettify them.\n     *\n     * @param {Function} opt_whenDone called when prettifying is done.\n     * @param {HTMLElement|HTMLDocument} opt_root an element or document\n     *   containing all the elements to pretty print.\n     *   Defaults to {@code document.body}.\n     */\n    var prettyPrint;\n\n\n    (function () {\n      var win = (typeof window !== 'undefined') ? window : {};\n      // Keyword lists for various languages.\n      // We use things that coerce to strings to make them compact when minified\n      // and to defeat aggressive optimizers that fold large string constants.\n      var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n      var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n          \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n          \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n      var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n          \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n      var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n          \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n          \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n          \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n          \"static_cast,template,typeid,typename,using,virtual,where\"];\n      var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n          \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n          \"throws,transient\"];\n      var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n          \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n          \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n          \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n          \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n      var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n          \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n          \"throw,true,try,unless,until,when,while,yes\";\n      var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,async,await,constructor,debugger,enum,eval,export,from,function,\" +\n          \"get,import,implements,instanceof,interface,let,null,of,set,undefined,\" +\n          \"var,with,yield,Infinity,NaN\"];\n      var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n          \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n          \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n      var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n          \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n          \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n          \"False,True,None\"];\n      var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n          \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n          \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n          \"BEGIN,END\"];\n      var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n          \"function,in,local,set,then,until\"];\n      var ALL_KEYWORDS = [\n          CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n          PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n      var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n      // token style names.  correspond to css classes\n      /**\n       * token style for a string literal\n       * @const\n       */\n      var PR_STRING = 'str';\n      /**\n       * token style for a keyword\n       * @const\n       */\n      var PR_KEYWORD = 'kwd';\n      /**\n       * token style for a comment\n       * @const\n       */\n      var PR_COMMENT = 'com';\n      /**\n       * token style for a type\n       * @const\n       */\n      var PR_TYPE = 'typ';\n      /**\n       * token style for a literal value.  e.g. 1, null, true.\n       * @const\n       */\n      var PR_LITERAL = 'lit';\n      /**\n       * token style for a punctuation string.\n       * @const\n       */\n      var PR_PUNCTUATION = 'pun';\n      /**\n       * token style for plain text.\n       * @const\n       */\n      var PR_PLAIN = 'pln';\n\n      /**\n       * token style for an sgml tag.\n       * @const\n       */\n      var PR_TAG = 'tag';\n      /**\n       * token style for a markup declaration such as a DOCTYPE.\n       * @const\n       */\n      var PR_DECLARATION = 'dec';\n      /**\n       * token style for embedded source.\n       * @const\n       */\n      var PR_SOURCE = 'src';\n      /**\n       * token style for an sgml attribute name.\n       * @const\n       */\n      var PR_ATTRIB_NAME = 'atn';\n      /**\n       * token style for an sgml attribute value.\n       * @const\n       */\n      var PR_ATTRIB_VALUE = 'atv';\n\n      /**\n       * A class that indicates a section of markup that is not code, e.g. to allow\n       * embedding of line numbers within code listings.\n       * @const\n       */\n      var PR_NOCODE = 'nocode';\n\n\n      // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n      // Do not modify, your changes will be erased.\n\n      // CAVEAT: this does not properly handle the case where a regular\n      // expression immediately follows another since a regular expression may\n      // have flags for case-sensitivity and the like.  Having regexp tokens\n      // adjacent is not valid in any language I'm aware of, so I'm punting.\n      // TODO: maybe style special characters inside a regexp as punctuation.\n\n      /**\n       * A set of tokens that can precede a regular expression literal in\n       * javascript\n       * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n       * has the full list, but I've removed ones that might be problematic when\n       * seen in languages that don't support regular expression literals.\n       *\n       * Specifically, I've removed any keywords that can't precede a regexp\n       * literal in a syntactically legal javascript program, and I've removed the\n       * \"in\" keyword since it's not a keyword in many languages, and might be used\n       * as a count of inches.\n       *\n       * The link above does not accurately describe EcmaScript rules since\n       * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n       * very well in practice.\n       *\n       * @private\n       * @const\n       */\n      var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n      /**\n       * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n       * matches the union of the sets of strings matched by the input RegExp.\n       * Since it matches globally, if the input strings have a start-of-input\n       * anchor (/^.../), it is ignored for the purposes of unioning.\n       * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n       * @return {RegExp} a global regex.\n       */\n      function combinePrefixPatterns(regexs) {\n        var capturedGroupIndex = 0;\n\n        var needToFoldCase = false;\n        var ignoreCase = false;\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.ignoreCase) {\n            ignoreCase = true;\n          } else if (/[a-z]/i.test(regex.source.replace(\n                         /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n            needToFoldCase = true;\n            ignoreCase = false;\n            break;\n          }\n        }\n\n        var escapeCharToCodeUnit = {\n          'b': 8,\n          't': 9,\n          'n': 0xa,\n          'v': 0xb,\n          'f': 0xc,\n          'r': 0xd\n        };\n\n        function decodeEscape(charsetPart) {\n          var cc0 = charsetPart.charCodeAt(0);\n          if (cc0 !== 92 /* \\\\ */) {\n            return cc0;\n          }\n          var c1 = charsetPart.charAt(1);\n          cc0 = escapeCharToCodeUnit[c1];\n          if (cc0) {\n            return cc0;\n          } else if ('0' <= c1 && c1 <= '7') {\n            return parseInt(charsetPart.substring(1), 8);\n          } else if (c1 === 'u' || c1 === 'x') {\n            return parseInt(charsetPart.substring(2), 16);\n          } else {\n            return charsetPart.charCodeAt(1);\n          }\n        }\n\n        function encodeEscape(charCode) {\n          if (charCode < 0x20) {\n            return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n          }\n          var ch = String.fromCharCode(charCode);\n          return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n              ? \"\\\\\" + ch : ch;\n        }\n\n        function caseFoldCharset(charSet) {\n          var charsetParts = charSet.substring(1, charSet.length - 1).match(\n              new RegExp(\n                  '\\\\\\\\u[0-9A-Fa-f]{4}'\n                  + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n                  + '|\\\\\\\\[0-3][0-7]{0,2}'\n                  + '|\\\\\\\\[0-7]{1,2}'\n                  + '|\\\\\\\\[\\\\s\\\\S]'\n                  + '|-'\n                  + '|[^-\\\\\\\\]',\n                  'g'));\n          var ranges = [];\n          var inverse = charsetParts[0] === '^';\n\n          var out = ['['];\n          if (inverse) { out.push('^'); }\n\n          for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n            var p = charsetParts[i];\n            if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n              out.push(p);\n            } else {\n              var start = decodeEscape(p);\n              var end;\n              if (i + 2 < n && '-' === charsetParts[i + 1]) {\n                end = decodeEscape(charsetParts[i + 2]);\n                i += 2;\n              } else {\n                end = start;\n              }\n              ranges.push([start, end]);\n              // If the range might intersect letters, then expand it.\n              // This case handling is too simplistic.\n              // It does not deal with non-latin case folding.\n              // It works for latin source code identifiers though.\n              if (!(end < 65 || start > 122)) {\n                if (!(end < 65 || start > 90)) {\n                  ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n                }\n                if (!(end < 97 || start > 122)) {\n                  ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n                }\n              }\n            }\n          }\n\n          // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n          // -> [[1, 12], [14, 14], [16, 17]]\n          ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n          var consolidatedRanges = [];\n          var lastRange = [];\n          for (var i = 0; i < ranges.length; ++i) {\n            var range = ranges[i];\n            if (range[0] <= lastRange[1] + 1) {\n              lastRange[1] = Math.max(lastRange[1], range[1]);\n            } else {\n              consolidatedRanges.push(lastRange = range);\n            }\n          }\n\n          for (var i = 0; i < consolidatedRanges.length; ++i) {\n            var range = consolidatedRanges[i];\n            out.push(encodeEscape(range[0]));\n            if (range[1] > range[0]) {\n              if (range[1] + 1 > range[0]) { out.push('-'); }\n              out.push(encodeEscape(range[1]));\n            }\n          }\n          out.push(']');\n          return out.join('');\n        }\n\n        function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n          // Split into character sets, escape sequences, punctuation strings\n          // like ('(', '(?:', ')', '^'), and runs of characters that do not\n          // include any of the above.\n          var parts = regex.source.match(\n              new RegExp(\n                  '(?:'\n                  + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n                  + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n                  + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n                  + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n                  + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n                  + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n                  + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n                  + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n                  + ')',\n                  'g'));\n          var n = parts.length;\n\n          // Maps captured group numbers to the number they will occupy in\n          // the output or to -1 if that has not been determined, or to\n          // undefined if they need not be capturing in the output.\n          var capturedGroups = [];\n\n          // Walk over and identify back references to build the capturedGroups\n          // mapping.\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              // groups are 1-indexed, so max group index is count of '('\n              ++groupIndex;\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue) {\n                if (decimalValue <= groupIndex) {\n                  capturedGroups[decimalValue] = -1;\n                } else {\n                  // Replace with an unambiguous escape sequence so that\n                  // an octal escape sequence does not turn into a backreference\n                  // to a capturing group from an earlier regex.\n                  parts[i] = encodeEscape(decimalValue);\n                }\n              }\n            }\n          }\n\n          // Renumber groups and reduce capturing groups to non-capturing groups\n          // where possible.\n          for (var i = 1; i < capturedGroups.length; ++i) {\n            if (-1 === capturedGroups[i]) {\n              capturedGroups[i] = ++capturedGroupIndex;\n            }\n          }\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              ++groupIndex;\n              if (!capturedGroups[groupIndex]) {\n                parts[i] = '(?:';\n              }\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue && decimalValue <= groupIndex) {\n                parts[i] = '\\\\' + capturedGroups[decimalValue];\n              }\n            }\n          }\n\n          // Remove any prefix anchors so that the output will match anywhere.\n          // ^^ really does mean an anchored match though.\n          for (var i = 0; i < n; ++i) {\n            if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n          }\n\n          // Expand letters to groups to handle mixing of case-sensitive and\n          // case-insensitive patterns if necessary.\n          if (regex.ignoreCase && needToFoldCase) {\n            for (var i = 0; i < n; ++i) {\n              var p = parts[i];\n              var ch0 = p.charAt(0);\n              if (p.length >= 2 && ch0 === '[') {\n                parts[i] = caseFoldCharset(p);\n              } else if (ch0 !== '\\\\') {\n                // TODO: handle letters in numeric escapes.\n                parts[i] = p.replace(\n                    /[a-zA-Z]/g,\n                    function (ch) {\n                      var cc = ch.charCodeAt(0);\n                      return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                    });\n              }\n            }\n          }\n\n          return parts.join('');\n        }\n\n        var rewritten = [];\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.global || regex.multiline) { throw new Error('' + regex); }\n          rewritten.push(\n              '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n        }\n\n        return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n      }\n\n\n      /**\n       * Split markup into a string of source code and an array mapping ranges in\n       * that string to the text nodes in which they appear.\n       *\n       * <p>\n       * The HTML DOM structure:</p>\n       * <pre>\n       * (Element   \"p\"\n       *   (Element \"b\"\n       *     (Text  \"print \"))       ; #1\n       *   (Text    \"'Hello '\")      ; #2\n       *   (Element \"br\")            ; #3\n       *   (Text    \"  + 'World';\")) ; #4\n       * </pre>\n       * <p>\n       * corresponds to the HTML\n       * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n       *\n       * <p>\n       * It will produce the output:</p>\n       * <pre>\n       * {\n       *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n       *   //                     1          2\n       *   //           012345678901234 5678901234567\n       *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n       * }\n       * </pre>\n       * <p>\n       * where #1 is a reference to the {@code \"print \"} text node above, and so\n       * on for the other text nodes.\n       * </p>\n       *\n       * <p>\n       * The {@code} spans array is an array of pairs.  Even elements are the start\n       * indices of substrings, and odd elements are the text nodes (or BR elements)\n       * that contain the text for those substrings.\n       * Substrings continue until the next index or the end of the source.\n       * </p>\n       *\n       * @param {Node} node an HTML DOM subtree containing source-code.\n       * @param {boolean|number} isPreformatted truthy if white-space in\n       *    text nodes should be considered significant.\n       * @return {SourceSpansT} source code and the nodes in which they occur.\n       */\n      function extractSourceSpans(node, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n        var chunks = [];\n        var length = 0;\n        var spans = [];\n        var k = 0;\n\n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1) {  // Element\n            if (nocode.test(node.className)) { return; }\n            for (var child = node.firstChild; child; child = child.nextSibling) {\n              walk(child);\n            }\n            var nodeName = node.nodeName.toLowerCase();\n            if ('br' === nodeName || 'li' === nodeName) {\n              chunks[k] = '\\n';\n              spans[k << 1] = length++;\n              spans[(k++ << 1) | 1] = node;\n            }\n          } else if (type == 3 || type == 4) {  // Text\n            var text = node.nodeValue;\n            if (text.length) {\n              if (!isPreformatted) {\n                text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n              } else {\n                text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n              }\n              // TODO: handle tabs here?\n              chunks[k] = text;\n              spans[k << 1] = length;\n              length += text.length;\n              spans[(k++ << 1) | 1] = node;\n            }\n          }\n        }\n\n        walk(node);\n\n        return {\n          sourceCode: chunks.join('').replace(/\\n$/, ''),\n          spans: spans\n        };\n      }\n\n\n      /**\n       * Apply the given language handler to sourceCode and add the resulting\n       * decorations to out.\n       * @param {!Element} sourceNode\n       * @param {number} basePos the index of sourceCode within the chunk of source\n       *    whose decorations are already present on out.\n       * @param {string} sourceCode\n       * @param {function(JobT)} langHandler\n       * @param {DecorationsT} out\n       */\n      function appendDecorations(\n          sourceNode, basePos, sourceCode, langHandler, out) {\n        if (!sourceCode) { return; }\n        /** @type {JobT} */\n        var job = {\n          sourceNode: sourceNode,\n          pre: 1,\n          langExtension: null,\n          numberLines: null,\n          sourceCode: sourceCode,\n          spans: null,\n          basePos: basePos,\n          decorations: null\n        };\n        langHandler(job);\n        out.push.apply(out, job.decorations);\n      }\n\n      var notWs = /\\S/;\n\n      /**\n       * Given an element, if it contains only one child element and any text nodes\n       * it contains contain only space characters, return the sole child element.\n       * Otherwise returns undefined.\n       * <p>\n       * This is meant to return the CODE element in {@code <pre><code ...>} when\n       * there is a single child element that contains all the non-space textual\n       * content, but not to return anything where there are multiple child elements\n       * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n       * is textual content.\n       */\n      function childContentWrapper(element) {\n        var wrapper = undefined;\n        for (var c = element.firstChild; c; c = c.nextSibling) {\n          var type = c.nodeType;\n          wrapper = (type === 1)  // Element Node\n              ? (wrapper ? element : c)\n              : (type === 3)  // Text Node\n              ? (notWs.test(c.nodeValue) ? element : wrapper)\n              : wrapper;\n        }\n        return wrapper === element ? undefined : wrapper;\n      }\n\n      /** Given triples of [style, pattern, context] returns a lexing function,\n        * The lexing function interprets the patterns to find token boundaries and\n        * returns a decoration list of the form\n        * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n        * where index_n is an index into the sourceCode, and style_n is a style\n        * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n        * all characters in sourceCode[index_n-1:index_n].\n        *\n        * The stylePatterns is a list whose elements have the form\n        * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n        *\n        * Style is a style constant like PR_PLAIN, or can be a string of the\n        * form 'lang-FOO', where FOO is a language extension describing the\n        * language of the portion of the token in $1 after pattern executes.\n        * E.g., if style is 'lang-lisp', and group 1 contains the text\n        * '(hello (world))', then that portion of the token will be passed to the\n        * registered lisp handler for formatting.\n        * The text before and after group 1 will be restyled using this decorator\n        * so decorators should take care that this doesn't result in infinite\n        * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n        * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n        * '<script>foo()<\\/script>', which would cause the current decorator to\n        * be called with '<script>' which would not match the same rule since\n        * group 1 must not be empty, so it would be instead styled as PR_TAG by\n        * the generic tag rule.  The handler registered for the 'js' extension would\n        * then be called with 'foo()', and finally, the current decorator would\n        * be called with '<\\/script>' which would not match the original rule and\n        * so the generic tag rule would identify it as a tag.\n        *\n        * Pattern must only match prefixes, and if it matches a prefix, then that\n        * match is considered a token with the same style.\n        *\n        * Context is applied to the last non-whitespace, non-comment token\n        * recognized.\n        *\n        * Shortcut is an optional string of characters, any of which, if the first\n        * character, gurantee that this pattern and only this pattern matches.\n        *\n        * @param {Array} shortcutStylePatterns patterns that always start with\n        *   a known character.  Must have a shortcut string.\n        * @param {Array} fallthroughStylePatterns patterns that will be tried in\n        *   order if the shortcut ones fail.  May have shortcuts.\n        *\n        * @return {function (JobT)} a function that takes an undecorated job and\n        *   attaches a list of decorations.\n        */\n      function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n        var shortcuts = {};\n        var tokenizer;\n        (function () {\n          var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n          var allRegexs = [];\n          var regexKeys = {};\n          for (var i = 0, n = allPatterns.length; i < n; ++i) {\n            var patternParts = allPatterns[i];\n            var shortcutChars = patternParts[3];\n            if (shortcutChars) {\n              for (var c = shortcutChars.length; --c >= 0;) {\n                shortcuts[shortcutChars.charAt(c)] = patternParts;\n              }\n            }\n            var regex = patternParts[1];\n            var k = '' + regex;\n            if (!regexKeys.hasOwnProperty(k)) {\n              allRegexs.push(regex);\n              regexKeys[k] = null;\n            }\n          }\n          allRegexs.push(/[\\0-\\uffff]/);\n          tokenizer = combinePrefixPatterns(allRegexs);\n        })();\n\n        var nPatterns = fallthroughStylePatterns.length;\n\n        /**\n         * Lexes job.sourceCode and attaches an output array job.decorations of\n         * style classes preceded by the position at which they start in\n         * job.sourceCode in order.\n         *\n         * @type{function (JobT)}\n         */\n        var decorate = function (job) {\n          var sourceCode = job.sourceCode, basePos = job.basePos;\n          var sourceNode = job.sourceNode;\n          /** Even entries are positions in source in ascending order.  Odd enties\n            * are style markers (e.g., PR_COMMENT) that run from that position until\n            * the end.\n            * @type {DecorationsT}\n            */\n          var decorations = [basePos, PR_PLAIN];\n          var pos = 0;  // index into sourceCode\n          var tokens = sourceCode.match(tokenizer) || [];\n          var styleCache = {};\n\n          for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n            var token = tokens[ti];\n            var style = styleCache[token];\n            var match = void 0;\n\n            var isEmbedded;\n            if (typeof style === 'string') {\n              isEmbedded = false;\n            } else {\n              var patternParts = shortcuts[token.charAt(0)];\n              if (patternParts) {\n                match = token.match(patternParts[1]);\n                style = patternParts[0];\n              } else {\n                for (var i = 0; i < nPatterns; ++i) {\n                  patternParts = fallthroughStylePatterns[i];\n                  match = token.match(patternParts[1]);\n                  if (match) {\n                    style = patternParts[0];\n                    break;\n                  }\n                }\n\n                if (!match) {  // make sure that we make progress\n                  style = PR_PLAIN;\n                }\n              }\n\n              isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n              if (isEmbedded && !(match && typeof match[1] === 'string')) {\n                isEmbedded = false;\n                style = PR_SOURCE;\n              }\n\n              if (!isEmbedded) { styleCache[token] = style; }\n            }\n\n            var tokenStart = pos;\n            pos += token.length;\n\n            if (!isEmbedded) {\n              decorations.push(basePos + tokenStart, style);\n            } else {  // Treat group 1 as an embedded block of source code.\n              var embeddedSource = match[1];\n              var embeddedSourceStart = token.indexOf(embeddedSource);\n              var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n              if (match[2]) {\n                // If embeddedSource can be blank, then it would match at the\n                // beginning which would cause us to infinitely recurse on the\n                // entire token, so we catch the right context in match[2].\n                embeddedSourceEnd = token.length - match[2].length;\n                embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n              }\n              var lang = style.substring(5);\n              // Decorate the left of the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart,\n                  token.substring(0, embeddedSourceStart),\n                  decorate, decorations);\n              // Decorate the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceStart,\n                  embeddedSource,\n                  langHandlerForExtension(lang, embeddedSource),\n                  decorations);\n              // Decorate the right of the embedded section\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceEnd,\n                  token.substring(embeddedSourceEnd),\n                  decorate, decorations);\n            }\n          }\n          job.decorations = decorations;\n        };\n        return decorate;\n      }\n\n      /** returns a function that produces a list of decorations from source text.\n        *\n        * This code treats \", ', and ` as string delimiters, and \\ as a string\n        * escape.  It does not recognize perl's qq() style strings.\n        * It has no special handling for double delimiter escapes as in basic, or\n        * the tripled delimiters used in python, but should work on those regardless\n        * although in those cases a single string literal may be broken up into\n        * multiple adjacent string literals.\n        *\n        * It recognizes C, C++, and shell style comments.\n        *\n        * @param {Object} options a set of optional parameters.\n        * @return {function (JobT)} a function that examines the source code\n        *     in the input job and builds a decoration list which it attaches to\n        *     the job.\n        */\n      function sourceDecorator(options) {\n        var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n        if (options['tripleQuotedStrings']) {\n          // '''multi-line-string''', 'single-line-string', and double-quoted\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n               null, '\\'\"']);\n        } else if (options['multiLineStrings']) {\n          // 'multi-line-string', \"multi-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n               null, '\\'\"`']);\n        } else {\n          // 'single-line-string', \"single-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,\n               /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n               null, '\"\\'']);\n        }\n        if (options['verbatimStrings']) {\n          // verbatim-string-literal production from the C# grammar.  See issue 93.\n          fallthroughStylePatterns.push(\n              [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n        }\n        var hc = options['hashComments'];\n        if (hc) {\n          if (options['cStyleComments']) {\n            if (hc > 1) {  // multiline hash comments\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n            } else {\n              // Stop C preprocessor declarations at an unclosed open comment\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n                   null, '#']);\n            }\n            // #include <stdio.h>\n            fallthroughStylePatterns.push(\n                [PR_STRING,\n                 /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n                 null]);\n          } else {\n            shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n          }\n        }\n        if (options['cStyleComments']) {\n          fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n          fallthroughStylePatterns.push(\n              [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n        }\n        var regexLiterals = options['regexLiterals'];\n        if (regexLiterals) {\n          /**\n           * @const\n           */\n          var regexExcls = regexLiterals > 1\n            ? ''  // Multiline regex literals\n            : '\\n\\r';\n          /**\n           * @const\n           */\n          var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n          /**\n           * @const\n           */\n          var REGEX_LITERAL = (\n              // A regular expression literal starts with a slash that is\n              // not followed by * or / so that it is not confused with\n              // comments.\n              '/(?=[^/*' + regexExcls + '])'\n              // and then contains any number of raw characters,\n              + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n              // escape sequences (\\x5C),\n              +    '|\\\\x5C' + regexAny\n              // or non-nesting character sets (\\x5B\\x5D);\n              +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n              +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n              // finally closed by a /.\n              + '/');\n          fallthroughStylePatterns.push(\n              ['lang-regex',\n               RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n               ]);\n        }\n\n        var types = options['types'];\n        if (types) {\n          fallthroughStylePatterns.push([PR_TYPE, types]);\n        }\n\n        var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n        if (keywords.length) {\n          fallthroughStylePatterns.push(\n              [PR_KEYWORD,\n               new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n               null]);\n        }\n\n        shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n        var punctuation =\n          // The Bash man page says\n\n          // A word is a sequence of characters considered as a single\n          // unit by GRUB. Words are separated by metacharacters,\n          // which are the following plus space, tab, and newline: { }\n          // | & $ ; < >\n          // ...\n\n          // A word beginning with # causes that word and all remaining\n          // characters on that line to be ignored.\n\n          // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n          // comment but empirically\n          // $ echo \n          // $ echo \\$#\n          // $#\n          // $ echo }#\n          // }#\n\n          // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n          // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n          // suggests that this definition is compatible with a\n          // default mode that tries to use a single token definition\n          // to recognize both bash/python style comments and C\n          // preprocessor directives.\n\n          // This definition of punctuation does not include # in the list of\n          // follow-on exclusions, so # will not be broken before if preceeded\n          // by a punctuation character.  We could try to exclude # after\n          // [|&;<>] but that doesn't seem to cause many major problems.\n          // If that does turn out to be a problem, we should change the below\n          // when hc is truthy to include # in the run of punctuation characters\n          // only when not followint [|&;<>].\n          '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n        if (options['regexLiterals']) {\n          punctuation += '(?!\\s*\\/)';\n        }\n\n        fallthroughStylePatterns.push(\n            // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n            [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n            [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_LITERAL,\n             new RegExp(\n                 '^(?:'\n                 // A hex number\n                 + '0x[a-f0-9]+'\n                 // or an octal or decimal number,\n                 + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n                 // possibly in scientific notation\n                 + '(?:e[+\\\\-]?\\\\d+)?'\n                 + ')'\n                 // with an optional modifier like UL for unsigned long\n                 + '[a-z]*', 'i'),\n             null, '0123456789'],\n            // Don't treat escaped quotes in bash as starting strings.\n            // See issue 144.\n            [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n            [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n        return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n      }\n\n      var decorateSource = sourceDecorator({\n            'keywords': ALL_KEYWORDS,\n            'hashComments': true,\n            'cStyleComments': true,\n            'multiLineStrings': true,\n            'regexLiterals': true\n          });\n\n      /**\n       * Given a DOM subtree, wraps it in a list, and puts each line into its own\n       * list item.\n       *\n       * @param {Node} node modified in place.  Its content is pulled into an\n       *     HTMLOListElement, and each line is moved into a separate list item.\n       *     This requires cloning elements, so the input might not have unique\n       *     IDs after numbering.\n       * @param {number|null|boolean} startLineNum\n       *     If truthy, coerced to an integer which is the 1-indexed line number\n       *     of the first line of code.  The number of the first line will be\n       *     attached to the list.\n       * @param {boolean} isPreformatted true iff white-space in text nodes should\n       *     be treated as significant.\n       */\n      function numberLines(node, startLineNum, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n        var lineBreak = /\\r\\n?|\\n/;\n\n        var document = node.ownerDocument;\n\n        var li = document.createElement('li');\n        while (node.firstChild) {\n          li.appendChild(node.firstChild);\n        }\n        // An array of lines.  We split below, so this is initialized to one\n        // un-split line.\n        var listItems = [li];\n\n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1 && !nocode.test(node.className)) {  // Element\n            if ('br' === node.nodeName.toLowerCase()) {\n              breakAfter(node);\n              // Discard the <BR> since it is now flush against a </LI>.\n              if (node.parentNode) {\n                node.parentNode.removeChild(node);\n              }\n            } else {\n              for (var child = node.firstChild; child; child = child.nextSibling) {\n                walk(child);\n              }\n            }\n          } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n            var text = node.nodeValue;\n            var match = text.match(lineBreak);\n            if (match) {\n              var firstLine = text.substring(0, match.index);\n              node.nodeValue = firstLine;\n              var tail = text.substring(match.index + match[0].length);\n              if (tail) {\n                var parent = node.parentNode;\n                parent.insertBefore(\n                  document.createTextNode(tail), node.nextSibling);\n              }\n              breakAfter(node);\n              if (!firstLine) {\n                // Don't leave blank text nodes in the DOM.\n                node.parentNode.removeChild(node);\n              }\n            }\n          }\n        }\n\n        // Split a line after the given node.\n        function breakAfter(lineEndNode) {\n          // If there's nothing to the right, then we can skip ending the line\n          // here, and move root-wards since splitting just before an end-tag\n          // would require us to create a bunch of empty copies.\n          while (!lineEndNode.nextSibling) {\n            lineEndNode = lineEndNode.parentNode;\n            if (!lineEndNode) { return; }\n          }\n\n          function breakLeftOf(limit, copy) {\n            // Clone shallowly if this node needs to be on both sides of the break.\n            var rightSide = copy ? limit.cloneNode(false) : limit;\n            var parent = limit.parentNode;\n            if (parent) {\n              // We clone the parent chain.\n              // This helps us resurrect important styling elements that cross lines.\n              // E.g. in <i>Foo<br>Bar</i>\n              // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n              var parentClone = breakLeftOf(parent, 1);\n              // Move the clone and everything to the right of the original\n              // onto the cloned parent.\n              var next = limit.nextSibling;\n              parentClone.appendChild(rightSide);\n              for (var sibling = next; sibling; sibling = next) {\n                next = sibling.nextSibling;\n                parentClone.appendChild(sibling);\n              }\n            }\n            return rightSide;\n          }\n\n          var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n          // Walk the parent chain until we reach an unattached LI.\n          for (var parent;\n               // Check nodeType since IE invents document fragments.\n               (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n            copiedListItem = parent;\n          }\n          // Put it on the list of lines for later processing.\n          listItems.push(copiedListItem);\n        }\n\n        // Split lines while there are lines left to split.\n        for (var i = 0;  // Number of lines that have been split so far.\n             i < listItems.length;  // length updated by breakAfter calls.\n             ++i) {\n          walk(listItems[i]);\n        }\n\n        // Make sure numeric indices show correctly.\n        if (startLineNum === (startLineNum|0)) {\n          listItems[0].setAttribute('value', startLineNum);\n        }\n\n        var ol = document.createElement('ol');\n        ol.className = 'linenums';\n        var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n        for (var i = 0, n = listItems.length; i < n; ++i) {\n          li = listItems[i];\n          // Stick a class on the LIs so that stylesheets can\n          // color odd/even rows, or any other row pattern that\n          // is co-prime with 10.\n          li.className = 'L' + ((i + offset) % 10);\n          if (!li.firstChild) {\n            li.appendChild(document.createTextNode('\\xA0'));\n          }\n          ol.appendChild(li);\n        }\n\n        node.appendChild(ol);\n      }\n\n\n      /**\n       * Breaks {@code job.sourceCode} around style boundaries in\n       * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n       * @param {JobT} job\n       * @private\n       */\n      function recombineTagsAndDecorations(job) {\n        var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n        isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n        var newlineRe = /\\n/g;\n\n        var source = job.sourceCode;\n        var sourceLength = source.length;\n        // Index into source after the last code-unit recombined.\n        var sourceIndex = 0;\n\n        var spans = job.spans;\n        var nSpans = spans.length;\n        // Index into spans after the last span which ends at or before sourceIndex.\n        var spanIndex = 0;\n\n        var decorations = job.decorations;\n        var nDecorations = decorations.length;\n        // Index into decorations after the last decoration which ends at or before\n        // sourceIndex.\n        var decorationIndex = 0;\n\n        // Remove all zero-length decorations.\n        decorations[nDecorations] = sourceLength;\n        var decPos, i;\n        for (i = decPos = 0; i < nDecorations;) {\n          if (decorations[i] !== decorations[i + 2]) {\n            decorations[decPos++] = decorations[i++];\n            decorations[decPos++] = decorations[i++];\n          } else {\n            i += 2;\n          }\n        }\n        nDecorations = decPos;\n\n        // Simplify decorations.\n        for (i = decPos = 0; i < nDecorations;) {\n          var startPos = decorations[i];\n          // Conflate all adjacent decorations that use the same style.\n          var startDec = decorations[i + 1];\n          var end = i + 2;\n          while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n            end += 2;\n          }\n          decorations[decPos++] = startPos;\n          decorations[decPos++] = startDec;\n          i = end;\n        }\n\n        nDecorations = decorations.length = decPos;\n\n        var sourceNode = job.sourceNode;\n        var oldDisplay = \"\";\n        if (sourceNode) {\n          oldDisplay = sourceNode.style.display;\n          sourceNode.style.display = 'none';\n        }\n        try {\n          var decoration = null;\n          while (spanIndex < nSpans) {\n            var spanStart = spans[spanIndex];\n            var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n                || sourceLength;\n\n            var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n            var end = Math.min(spanEnd, decEnd);\n\n            var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n            var styledText;\n            if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n                // Don't introduce spans around empty text nodes.\n                && (styledText = source.substring(sourceIndex, end))) {\n              // This may seem bizarre, and it is.  Emitting LF on IE causes the\n              // code to display with spaces instead of line breaks.\n              // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n              // space to appear at the beginning of every line but the first.\n              // Emitting an old Mac OS 9 line separator makes everything spiffy.\n              if (isIE8OrEarlier) {\n                styledText = styledText.replace(newlineRe, '\\r');\n              }\n              textNode.nodeValue = styledText;\n              var document = textNode.ownerDocument;\n              var span = document.createElement('span');\n              span.className = decorations[decorationIndex + 1];\n              var parentNode = textNode.parentNode;\n              parentNode.replaceChild(span, textNode);\n              span.appendChild(textNode);\n              if (sourceIndex < spanEnd) {  // Split off a text node.\n                spans[spanIndex + 1] = textNode\n                    // TODO: Possibly optimize by using '' if there's no flicker.\n                    = document.createTextNode(source.substring(end, spanEnd));\n                parentNode.insertBefore(textNode, span.nextSibling);\n              }\n            }\n\n            sourceIndex = end;\n\n            if (sourceIndex >= spanEnd) {\n              spanIndex += 2;\n            }\n            if (sourceIndex >= decEnd) {\n              decorationIndex += 2;\n            }\n          }\n        } finally {\n          if (sourceNode) {\n            sourceNode.style.display = oldDisplay;\n          }\n        }\n      }\n\n\n      /** Maps language-specific file extensions to handlers. */\n      var langHandlerRegistry = {};\n      /** Register a language handler for the given file extensions.\n        * @param {function (JobT)} handler a function from source code to a list\n        *      of decorations.  Takes a single argument job which describes the\n        *      state of the computation and attaches the decorations to it.\n        * @param {Array.<string>} fileExtensions\n        */\n      function registerLangHandler(handler, fileExtensions) {\n        for (var i = fileExtensions.length; --i >= 0;) {\n          var ext = fileExtensions[i];\n          if (!langHandlerRegistry.hasOwnProperty(ext)) {\n            langHandlerRegistry[ext] = handler;\n          } else if (win['console']) {\n            console['warn']('cannot override language handler %s', ext);\n          }\n        }\n      }\n      function langHandlerForExtension(extension, source) {\n        if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n          // Treat it as markup if the first non whitespace character is a < and\n          // the last non-whitespace character is a >.\n          extension = /^\\s*</.test(source)\n              ? 'default-markup'\n              : 'default-code';\n        }\n        return langHandlerRegistry[extension];\n      }\n      registerLangHandler(decorateSource, ['default-code']);\n      registerLangHandler(\n          createSimpleLexer(\n              [],\n              [\n               [PR_PLAIN,       /^[^<?]+/],\n               [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n               [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n               // Unescaped content in an unknown language\n               ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n               ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n               [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n               ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n               // Unescaped content in javascript.  (Or possibly vbscript).\n               ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n               // Contains unescaped stylesheet content\n               ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n               ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n              ]),\n          ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n      registerLangHandler(\n          createSimpleLexer(\n              [\n               [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n               [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n               ],\n              [\n               [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n               [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n               ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n               [PR_PUNCTUATION,  /^[=<>\\/]+/],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n               ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n               ]),\n          ['in.tag']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CPP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'types': C_TYPES\n            }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': 'null,true,false'\n            }), ['json']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CSHARP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'verbatimStrings': true,\n              'types': C_TYPES\n            }), ['cs']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JAVA_KEYWORDS,\n              'cStyleComments': true\n            }), ['java']);\n      registerLangHandler(sourceDecorator({\n              'keywords': SH_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true\n            }), ['bash', 'bsh', 'csh', 'sh']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PYTHON_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'tripleQuotedStrings': true\n            }), ['cv', 'py', 'python']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PERL_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': 2  // multiline regex literals\n            }), ['perl', 'pl', 'pm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': RUBY_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': true\n            }), ['rb', 'ruby']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JSCRIPT_KEYWORDS,\n              'cStyleComments': true,\n              'regexLiterals': true\n            }), ['javascript', 'js', 'ts', 'typescript']);\n      registerLangHandler(sourceDecorator({\n              'keywords': COFFEE_KEYWORDS,\n              'hashComments': 3,  // ### style block comments\n              'cStyleComments': true,\n              'multilineStrings': true,\n              'tripleQuotedStrings': true,\n              'regexLiterals': true\n            }), ['coffee']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n      /** @param {JobT} job */\n      function applyDecorator(job) {\n        var opt_langExtension = job.langExtension;\n\n        try {\n          // Extract tags, and convert the source code to plain text.\n          var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n          /** Plain text. @type {string} */\n          var source = sourceAndSpans.sourceCode;\n          job.sourceCode = source;\n          job.spans = sourceAndSpans.spans;\n          job.basePos = 0;\n\n          // Apply the appropriate language handler\n          langHandlerForExtension(opt_langExtension, source)(job);\n\n          // Integrate the decorations and tags back into the source code,\n          // modifying the sourceNode in place.\n          recombineTagsAndDecorations(job);\n        } catch (e) {\n          if (win['console']) {\n            console['log'](e && e['stack'] || e);\n          }\n        }\n      }\n\n      /**\n       * Pretty print a chunk of code.\n       * @param sourceCodeHtml {string} The HTML to pretty print.\n       * @param opt_langExtension {string} The language name to use.\n       *     Typically, a filename extension like 'cpp' or 'java'.\n       * @param opt_numberLines {number|boolean} True to number lines,\n       *     or the 1-indexed number of the first line in sourceCodeHtml.\n       */\n      function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n        /** @type{number|boolean} */\n        var nl = opt_numberLines || false;\n        /** @type{string|null} */\n        var langExtension = opt_langExtension || null;\n        /** @type{!Element} */\n        var container = document.createElement('div');\n        // This could cause images to load and onload listeners to fire.\n        // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n        // We assume that the inner HTML is from a trusted source.\n        // The pre-tag is required for IE8 which strips newlines from innerHTML\n        // when it is injected into a <pre> tag.\n        // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n        // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n        container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n        container = /** @type{!Element} */(container.firstChild);\n        if (nl) {\n          numberLines(container, nl, true);\n        }\n\n        /** @type{JobT} */\n        var job = {\n          langExtension: langExtension,\n          numberLines: nl,\n          sourceNode: container,\n          pre: 1,\n          sourceCode: null,\n          basePos: null,\n          spans: null,\n          decorations: null\n        };\n        applyDecorator(job);\n        return container.innerHTML;\n      }\n\n       /**\n        * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n        * {@code class=prettyprint} and prettify them.\n        *\n        * @param {Function} opt_whenDone called when prettifying is done.\n        * @param {HTMLElement|HTMLDocument} opt_root an element or document\n        *   containing all the elements to pretty print.\n        *   Defaults to {@code document.body}.\n        */\n      function $prettyPrint(opt_whenDone, opt_root) {\n        var root = opt_root || document.body;\n        var doc = root.ownerDocument || document;\n        function byTagName(tn) { return root.getElementsByTagName(tn); }\n        // fetch a list of nodes to rewrite\n        var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n        var elements = [];\n        for (var i = 0; i < codeSegments.length; ++i) {\n          for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n            elements.push(codeSegments[i][j]);\n          }\n        }\n        codeSegments = null;\n\n        var clock = Date;\n        if (!clock['now']) {\n          clock = { 'now': function () { return +(new Date); } };\n        }\n\n        // The loop is broken into a series of continuations to make sure that we\n        // don't make the browser unresponsive when rewriting a large page.\n        var k = 0;\n\n        var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n        var prettyPrintRe = /\\bprettyprint\\b/;\n        var prettyPrintedRe = /\\bprettyprinted\\b/;\n        var preformattedTagNameRe = /pre|xmp/i;\n        var codeRe = /^code$/i;\n        var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n        var EMPTY = {};\n\n        function doWork() {\n          var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                         clock['now']() + 250 /* ms */ :\n                         Infinity);\n          for (; k < elements.length && clock['now']() < endTime; k++) {\n            var cs = elements[k];\n\n            // Look for a preceding comment like\n            // <?prettify lang=\"...\" linenums=\"...\"?>\n            var attrs = EMPTY;\n            {\n              for (var preceder = cs; (preceder = preceder.previousSibling);) {\n                var nt = preceder.nodeType;\n                // <?foo?> is parsed by HTML 5 to a comment node (8)\n                // like <!--?foo?-->, but in XML is a processing instruction\n                var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n                if (value\n                    ? !/^\\??prettify\\b/.test(value)\n                    : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n                  // Skip over white-space text nodes but not others.\n                  break;\n                }\n                if (value) {\n                  attrs = {};\n                  value.replace(\n                      /\\b(\\w+)=([\\w:.%+-]+)/g,\n                    function (_, name, value) { attrs[name] = value; });\n                  break;\n                }\n              }\n            }\n\n            var className = cs.className;\n            if ((attrs !== EMPTY || prettyPrintRe.test(className))\n                // Don't redo this if we've already done it.\n                // This allows recalling pretty print to just prettyprint elements\n                // that have been added to the page since last call.\n                && !prettyPrintedRe.test(className)) {\n\n              // make sure this is not nested in an already prettified element\n              var nested = false;\n              for (var p = cs.parentNode; p; p = p.parentNode) {\n                var tn = p.tagName;\n                if (preCodeXmpRe.test(tn)\n                    && p.className && prettyPrintRe.test(p.className)) {\n                  nested = true;\n                  break;\n                }\n              }\n              if (!nested) {\n                // Mark done.  If we fail to prettyprint for whatever reason,\n                // we shouldn't try again.\n                cs.className += ' prettyprinted';\n\n                // If the classes includes a language extensions, use it.\n                // Language extensions can be specified like\n                //     <pre class=\"prettyprint lang-cpp\">\n                // the language extension \"cpp\" is used to find a language handler\n                // as passed to PR.registerLangHandler.\n                // HTML5 recommends that a language be specified using \"language-\"\n                // as the prefix instead.  Google Code Prettify supports both.\n                // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n                var langExtension = attrs['lang'];\n                if (!langExtension) {\n                  langExtension = className.match(langExtensionRe);\n                  // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n                  var wrapper;\n                  if (!langExtension && (wrapper = childContentWrapper(cs))\n                      && codeRe.test(wrapper.tagName)) {\n                    langExtension = wrapper.className.match(langExtensionRe);\n                  }\n\n                  if (langExtension) { langExtension = langExtension[1]; }\n                }\n\n                var preformatted;\n                if (preformattedTagNameRe.test(cs.tagName)) {\n                  preformatted = 1;\n                } else {\n                  var currentStyle = cs['currentStyle'];\n                  var defaultView = doc.defaultView;\n                  var whitespace = (\n                      currentStyle\n                      ? currentStyle['whiteSpace']\n                      : (defaultView\n                         && defaultView.getComputedStyle)\n                      ? defaultView.getComputedStyle(cs, null)\n                      .getPropertyValue('white-space')\n                      : 0);\n                  preformatted = whitespace\n                      && 'pre' === whitespace.substring(0, 3);\n                }\n\n                // Look for a class like linenums or linenums:<n> where <n> is the\n                // 1-indexed number of the first line.\n                var lineNums = attrs['linenums'];\n                if (!(lineNums = lineNums === 'true' || +lineNums)) {\n                  lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n                  lineNums =\n                    lineNums\n                    ? lineNums[1] && lineNums[1].length\n                      ? +lineNums[1] : true\n                    : false;\n                }\n                if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n                // do the pretty printing\n                var prettyPrintingJob = {\n                  langExtension: langExtension,\n                  sourceNode: cs,\n                  numberLines: lineNums,\n                  pre: preformatted,\n                  sourceCode: null,\n                  basePos: null,\n                  spans: null,\n                  decorations: null\n                };\n                applyDecorator(prettyPrintingJob);\n              }\n            }\n          }\n          if (k < elements.length) {\n            // finish up in a continuation\n            win.setTimeout(doWork, 250);\n          } else if ('function' === typeof opt_whenDone) {\n            opt_whenDone();\n          }\n        }\n\n        doWork();\n      }\n\n      /**\n       * Contains functions for creating and registering new language handlers.\n       * @type {Object}\n       */\n      var PR = win['PR'] = {\n            'createSimpleLexer': createSimpleLexer,\n            'registerLangHandler': registerLangHandler,\n            'sourceDecorator': sourceDecorator,\n            'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n            'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n            'PR_COMMENT': PR_COMMENT,\n            'PR_DECLARATION': PR_DECLARATION,\n            'PR_KEYWORD': PR_KEYWORD,\n            'PR_LITERAL': PR_LITERAL,\n            'PR_NOCODE': PR_NOCODE,\n            'PR_PLAIN': PR_PLAIN,\n            'PR_PUNCTUATION': PR_PUNCTUATION,\n            'PR_SOURCE': PR_SOURCE,\n            'PR_STRING': PR_STRING,\n            'PR_TAG': PR_TAG,\n            'PR_TYPE': PR_TYPE,\n            'prettyPrintOne':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrintOne'] = $prettyPrintOne)\n                 : (prettyPrintOne = $prettyPrintOne),\n            'prettyPrint':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrint'] = $prettyPrint)\n                 : (prettyPrint = $prettyPrint)\n          };\n\n      // Make PR available via the Asynchronous Module Definition (AMD) API.\n      // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n      // The Asynchronous Module Definition (AMD) API specifies a\n      // mechanism for defining modules such that the module and its\n      // dependencies can be asynchronously loaded.\n      // ...\n      // To allow a clear indicator that a global define function (as\n      // needed for script src browser loading) conforms to the AMD API,\n      // any global define function SHOULD have a property called \"amd\"\n      // whose value is an object. This helps avoid conflict with any\n      // other existing JavaScript code that could have defined a define()\n      // function that does not conform to the AMD API.\n      var define = win['define'];\n      if (typeof define === \"function\" && define['amd']) {\n        define(\"google-code-prettify\", [], function () {\n          return PR;\n        });\n      }\n    })();\n\n    return prettyPrint;\n  })();\n\n  // If this script is deferred or async and the document is already\n  // loaded we need to wait for language handlers to load before performing\n  // any autorun.\n  function onLangsLoaded() {\n    if (autorun) {\n      contentLoaded(\n        function () {\n          var n = callbacks.length;\n          var callback = n ? function () {\n            for (var i = 0; i < n; ++i) {\n              (function (i) {\n                win.setTimeout(\n                   function () {\n                     win['exports'][callbacks[i]].apply(win, arguments);\n                   }, 0);\n               })(i);\n            }\n          } : void 0;\n          prettyPrint(callback);\n        });\n    }\n  }\n  checkPendingLanguages();\n\n}());\n</style></name></name></div>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * <div style=\"white-space: pre\">\n * Looks at query parameters to decide which language handlers and style-sheets\n * to load.\n *\n * Query Parameter     Format           Effect                        Default\n * +------------------+---------------+------------------------------+--------+\n * | autorun=         | true | false  | If true then prettyPrint()   | \"true\" |\n * |                  |               | is called on page load.      |        |\n * +------------------+---------------+------------------------------+--------+\n * | lang=            | language name | Loads the language handler   | Can    |\n * |                  |               | named \"lang-<name>.js\".      | appear |\n * |                  |               | See available handlers at    | many   |\n * |                  |               | https://github.com/google/   | times. |\n * |                  |               | code-prettify/tree/master/   |        |\n * |                  |               | src                          |        |\n * +------------------+---------------+------------------------------+--------+\n * | skin=            | skin name     | Loads the skin stylesheet    | none.  |\n * |                  |               | named \"<name>.css\".          |        |\n * |                  |               | https://raw.githack.com/     |        |\n * |                  |               | google/code-prettify/master/ |        |\n * |                  |               | styles/index.html            |        |\n * +------------------+---------------+------------------------------+--------+\n * | callback=        | JS identifier | When \"prettyPrint\" finishes  | none   |\n * |                  |               | window.exports[js_ident] is  |        |\n * |                  |               | called.                      |        |\n * |                  |               | The callback must be under   |        |\n * |                  |               | exports to reduce the risk   |        |\n * |                  |               | of XSS via query parameter   |        |\n * |                  |               | injection.                   |        |\n * +------------------+---------------+------------------------------+--------+\n *\n * Examples\n * .../run_prettify.js?lang=css&skin=sunburst\n *   1. Loads the CSS language handler which can be used to prettify CSS\n *      stylesheets, HTML <style> element bodies and style=\"...\" attributes\n *      values.\n *   2. Loads the sunburst.css stylesheet instead of the default prettify.css\n *      stylesheet.\n *      A gallery of stylesheets is available at\n *      https://raw.githack.com/google/code-prettify/master/styles/index.html\n *   3. Since autorun=false is not specified, calls prettyPrint() on page load.\n * </div>\n */\n\n/**\n * @typedef {!Array.<number|string>}\n * Alternating indices and the decorations that should be inserted there.\n * The indices are monotonically increasing.\n */\nvar DecorationsT;\n\n/**\n * @typedef {!{\n *   sourceNode: !Element,\n *   pre: !(number|boolean),\n *   langExtension: ?string,\n *   numberLines: ?(number|boolean),\n *   sourceCode: ?string,\n *   spans: ?(Array.<number|Node>),\n *   basePos: ?number,\n *   decorations: ?DecorationsT\n * }}\n * <dl>\n *  <dt>sourceNode<dd>the element containing the source\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>pre<dd>truthy if white-space in text nodes\n *     should be considered significant.\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n *  <dt>decorations<dd>an array of style classes preceded\n *     by the position at which they start in job.sourceCode in order\n *  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n *     source.\n * </dl>\n */\nvar JobT;\n\n/**\n * @typedef {!{\n *   sourceCode: string,\n *   spans: !(Array.<number|Node>)\n * }}\n * <dl>\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n * </dl>\n */\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = false;\n\n\n(function () {\n  \"use strict\";\n\n  var win = window;\n  var doc = document;\n  var root = doc.documentElement;\n  var head = doc['head'] || doc.getElementsByTagName(\"head\")[0] || root;\n\n  // From http://javascript.nwbox.com/ContentLoaded/contentloaded.js\n  // Author: Diego Perini (diego.perini at gmail.com)\n  // Summary: cross-browser wrapper for DOMContentLoaded\n  // Updated: 20101020\n  // License: MIT\n  // Version: 1.2\n  function contentLoaded(callback) {\n    var addEventListener = doc['addEventListener'];\n    var done = false, top = true,\n        add = addEventListener ? 'addEventListener' : 'attachEvent',\n        rem = addEventListener ? 'removeEventListener' : 'detachEvent',\n        pre = addEventListener ? '' : 'on',\n\n        init = function(e) {\n          if (e.type == 'readystatechange' && doc.readyState != 'complete') {\n            return;\n          }\n          (e.type == 'load' ? win : doc)[rem](pre + e.type, init, false);\n          if (!done && (done = true)) { callback.call(win, e.type || e); }\n        },\n\n        poll = function() {\n          try {\n            root.doScroll('left');\n          } catch(e) {\n            win.setTimeout(poll, 50);\n            return;\n          }\n          init('poll');\n        };\n\n    if (doc.readyState == 'complete') {\n      callback.call(win, 'lazy');\n    } else {\n      if (doc.createEventObject && root.doScroll) {\n        try { top = !win.frameElement; } catch(e) { }\n        if (top) { poll(); }\n      }\n      doc[add](pre + 'DOMContentLoaded', init, false);\n      doc[add](pre + 'readystatechange', init, false);\n      win[add](pre + 'load', init, false);\n    }\n  }\n\n  // Given a list of URLs to stylesheets, loads the first that loads without\n  // triggering an error event.\n  function loadStylesheetsFallingBack(stylesheets) {\n    var n = stylesheets.length;\n    function load(i) {\n      if (i === n) { return; }\n      var link = doc.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      if (i + 1 < n) {\n        // http://pieisgood.org/test/script-link-events/ indicates that many\n        // versions of IE do not support onerror on <link>s, though\n        // http://msdn.microsoft.com/en-us/library/ie/ms535848(v=vs.85).aspx\n        // indicates that recent IEs do support error.\n        link.error = link.onerror = function () { load(i + 1); };\n      }\n      link.href = stylesheets[i];\n      head.appendChild(link);\n    }\n    load(0);\n  }\n\n  var scriptQuery = '';\n  // Look for the <script> node that loads this script to get its parameters.\n  // This starts looking at the end instead of just considering the last\n  // because deferred and async scripts run out of order.\n  // If the script is loaded twice, then this will run in reverse order.\n  var scripts = doc.getElementsByTagName('script');\n  for (var i = scripts.length; --i >= 0;) {\n    var script = scripts[i];\n    var match = script.src.match(\n        /^[^?#]*\\/run_prettify\\.js(\\?[^#]*)?(?:#.*)?$/);\n    if (match) {\n      scriptQuery = match[1] || '';\n      // Remove the script from the DOM so that multiple runs at least run\n      // multiple times even if parameter sets are interpreted in reverse\n      // order.\n      script.parentNode.removeChild(script);\n      break;\n    }\n  }\n\n  // Pull parameters into local variables.\n  var autorun = true;\n  var langs = [];\n  var skins = [];\n  var callbacks = [];\n  scriptQuery.replace(\n      /[?&]([^&=]+)=([^&]+)/g,\n      function (_, name, value) {\n        value = decodeURIComponent(value);\n        name = decodeURIComponent(name);\n        if (name == 'autorun')   { autorun = !/^[0fn]/i.test(value); } else\n        if (name == 'lang')      { langs.push(value);                } else\n        if (name == 'skin')      { skins.push(value);                } else\n        if (name == 'callback')  { callbacks.push(value);            }\n      });\n\n  // Use https to avoid mixed content warnings in client pages and to\n  // prevent a MITM from rewrite prettify mid-flight.\n  // This only works if this script is loaded via https : something\n  // over which we exercise no control.\n  var LOADER_BASE_URL =\n     'https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader';\n\n  for (var i = 0, n = langs.length; i < n; ++i) (function (lang) {\n    var script = doc.createElement(\"script\");\n\n    // Excerpted from jQuery.ajaxTransport(\"script\") to fire events when\n    // a script is finished loading.\n    // Attach handlers for each script\n    script.onload = script.onerror = script.onreadystatechange = function () {\n      if (script && (\n            !script.readyState || /loaded|complete/.test(script.readyState))) {\n        // Handle memory leak in IE\n        script.onerror = script.onload = script.onreadystatechange = null;\n\n        --pendingLanguages;\n        checkPendingLanguages();\n\n        // Remove the script\n        if (script.parentNode) {\n          script.parentNode.removeChild(script);\n        }\n\n        script = null;\n      }\n    };\n\n    script.type = 'text/javascript';\n    script.src = LOADER_BASE_URL\n      + '/lang-' + encodeURIComponent(langs[i]) + '.js';\n\n    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n    head.insertBefore(script, head.firstChild);\n  })(langs[i]);\n\n  var pendingLanguages = langs.length;\n  function checkPendingLanguages() {\n    if (!pendingLanguages) {\n      win.setTimeout(onLangsLoaded, 0);\n    }\n  }\n\n  var skinUrls = [];\n  for (var i = 0, n = skins.length; i < n; ++i) {\n    skinUrls.push(LOADER_BASE_URL\n        + '/skins/' + encodeURIComponent(skins[i]) + '.css');\n  }\n  skinUrls.push(LOADER_BASE_URL + '/prettify.css');\n  loadStylesheetsFallingBack(skinUrls);\n\n  var prettyPrint = (function () {\n    /**\n     * @license\n     * Copyright (C) 2006 Google Inc.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n\n    /**\n     * @fileoverview\n     * some functions for browser-side pretty printing of code contained in html.\n     *\n     * <p>\n     * For a fairly comprehensive set of languages see the\n     * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n     * file that came with this source.  At a minimum, the lexer should work on a\n     * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n     * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n     * and a subset of Perl, but, because of commenting conventions, doesn't work on\n     * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n     * <p>\n     * Usage: <ol>\n     * <li> include this source file in an html page via\n     *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n     * <li> define style rules.  See the example page for examples.\n     * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n     *    {@code class=prettyprint.}\n     *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n     *    printer needs to do more substantial DOM manipulations to support that, so\n     *    some css styles may not be preserved.\n     * </ol>\n     * That's it.  I wanted to keep the API as simple as possible, so there's no\n     * need to specify which language the code is in, but if you wish, you can add\n     * another class to the {@code <pre>} or {@code <code>} element to specify the\n     * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n     * starts with \"lang-\" followed by a file extension, specifies the file type.\n     * See the \"lang-*.js\" files in this directory for code that implements\n     * per-language file handlers.\n     * <p>\n     * Change log:<br>\n     * cbeust, 2006/08/22\n     * <blockquote>\n     *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n     * </blockquote>\n     * @requires console\n     */\n\n    // JSLint declarations\n    /*global console, document, navigator, setTimeout, window, define */\n\n\n    /**\n     * {@type !{\n     *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n     *   'registerLangHandler': function (function (JobT), Array.<string>),\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_VALUE': string,\n     *   'PR_COMMENT': string,\n     *   'PR_DECLARATION': string,\n     *   'PR_KEYWORD': string,\n     *   'PR_LITERAL': string,\n     *   'PR_NOCODE': string,\n     *   'PR_PLAIN': string,\n     *   'PR_PUNCTUATION': string,\n     *   'PR_SOURCE': string,\n     *   'PR_STRING': string,\n     *   'PR_TAG': string,\n     *   'PR_TYPE': string,\n     *   'prettyPrintOne': function (string, string, number|boolean),\n     *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n     * }}\n     * @const\n     */\n    var PR;\n\n    /**\n     * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n     * UI events.\n     * If set to {@code false}, {@code prettyPrint()} is synchronous.\n     */\n    var PR_SHOULD_USE_CONTINUATION = true\n    if (typeof window !== 'undefined') {\n      window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n    }\n\n    /**\n     * Pretty print a chunk of code.\n     * @param {string} sourceCodeHtml The HTML to pretty print.\n     * @param {string} opt_langExtension The language name to use.\n     *     Typically, a filename extension like 'cpp' or 'java'.\n     * @param {number|boolean} opt_numberLines True to number lines,\n     *     or the 1-indexed number of the first line in sourceCodeHtml.\n     * @return {string} code as html, but prettier\n     */\n    var prettyPrintOne;\n    /**\n     * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n     * {@code class=prettyprint} and prettify them.\n     *\n     * @param {Function} opt_whenDone called when prettifying is done.\n     * @param {HTMLElement|HTMLDocument} opt_root an element or document\n     *   containing all the elements to pretty print.\n     *   Defaults to {@code document.body}.\n     */\n    var prettyPrint;\n\n\n    (function () {\n      var win = (typeof window !== 'undefined') ? window : {};\n      // Keyword lists for various languages.\n      // We use things that coerce to strings to make them compact when minified\n      // and to defeat aggressive optimizers that fold large string constants.\n      var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n      var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n          \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n          \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n      var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n          \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n      var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n          \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n          \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n          \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n          \"static_cast,template,typeid,typename,using,virtual,where\"];\n      var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n          \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n          \"throws,transient\"];\n      var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n          \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n          \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n          \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n          \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n      var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n          \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n          \"throw,true,try,unless,until,when,while,yes\";\n      var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,async,await,constructor,debugger,enum,eval,export,from,function,\" +\n          \"get,import,implements,instanceof,interface,let,null,of,set,undefined,\" +\n          \"var,with,yield,Infinity,NaN\"];\n      var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n          \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n          \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n      var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n          \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n          \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n          \"False,True,None\"];\n      var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n          \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n          \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n          \"BEGIN,END\"];\n      var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n          \"function,in,local,set,then,until\"];\n      var ALL_KEYWORDS = [\n          CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n          PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n      var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n      // token style names.  correspond to css classes\n      /**\n       * token style for a string literal\n       * @const\n       */\n      var PR_STRING = 'str';\n      /**\n       * token style for a keyword\n       * @const\n       */\n      var PR_KEYWORD = 'kwd';\n      /**\n       * token style for a comment\n       * @const\n       */\n      var PR_COMMENT = 'com';\n      /**\n       * token style for a type\n       * @const\n       */\n      var PR_TYPE = 'typ';\n      /**\n       * token style for a literal value.  e.g. 1, null, true.\n       * @const\n       */\n      var PR_LITERAL = 'lit';\n      /**\n       * token style for a punctuation string.\n       * @const\n       */\n      var PR_PUNCTUATION = 'pun';\n      /**\n       * token style for plain text.\n       * @const\n       */\n      var PR_PLAIN = 'pln';\n\n      /**\n       * token style for an sgml tag.\n       * @const\n       */\n      var PR_TAG = 'tag';\n      /**\n       * token style for a markup declaration such as a DOCTYPE.\n       * @const\n       */\n      var PR_DECLARATION = 'dec';\n      /**\n       * token style for embedded source.\n       * @const\n       */\n      var PR_SOURCE = 'src';\n      /**\n       * token style for an sgml attribute name.\n       * @const\n       */\n      var PR_ATTRIB_NAME = 'atn';\n      /**\n       * token style for an sgml attribute value.\n       * @const\n       */\n      var PR_ATTRIB_VALUE = 'atv';\n\n      /**\n       * A class that indicates a section of markup that is not code, e.g. to allow\n       * embedding of line numbers within code listings.\n       * @const\n       */\n      var PR_NOCODE = 'nocode';\n\n\n      // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n      // Do not modify, your changes will be erased.\n\n      // CAVEAT: this does not properly handle the case where a regular\n      // expression immediately follows another since a regular expression may\n      // have flags for case-sensitivity and the like.  Having regexp tokens\n      // adjacent is not valid in any language I'm aware of, so I'm punting.\n      // TODO: maybe style special characters inside a regexp as punctuation.\n\n      /**\n       * A set of tokens that can precede a regular expression literal in\n       * javascript\n       * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n       * has the full list, but I've removed ones that might be problematic when\n       * seen in languages that don't support regular expression literals.\n       *\n       * Specifically, I've removed any keywords that can't precede a regexp\n       * literal in a syntactically legal javascript program, and I've removed the\n       * \"in\" keyword since it's not a keyword in many languages, and might be used\n       * as a count of inches.\n       *\n       * The link above does not accurately describe EcmaScript rules since\n       * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n       * very well in practice.\n       *\n       * @private\n       * @const\n       */\n      var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n      /**\n       * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n       * matches the union of the sets of strings matched by the input RegExp.\n       * Since it matches globally, if the input strings have a start-of-input\n       * anchor (/^.../), it is ignored for the purposes of unioning.\n       * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n       * @return {RegExp} a global regex.\n       */\n      function combinePrefixPatterns(regexs) {\n        var capturedGroupIndex = 0;\n\n        var needToFoldCase = false;\n        var ignoreCase = false;\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.ignoreCase) {\n            ignoreCase = true;\n          } else if (/[a-z]/i.test(regex.source.replace(\n                         /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n            needToFoldCase = true;\n            ignoreCase = false;\n            break;\n          }\n        }\n\n        var escapeCharToCodeUnit = {\n          'b': 8,\n          't': 9,\n          'n': 0xa,\n          'v': 0xb,\n          'f': 0xc,\n          'r': 0xd\n        };\n\n        function decodeEscape(charsetPart) {\n          var cc0 = charsetPart.charCodeAt(0);\n          if (cc0 !== 92 /* \\\\ */) {\n            return cc0;\n          }\n          var c1 = charsetPart.charAt(1);\n          cc0 = escapeCharToCodeUnit[c1];\n          if (cc0) {\n            return cc0;\n          } else if ('0' <= c1 && c1 <= '7') {\n            return parseInt(charsetPart.substring(1), 8);\n          } else if (c1 === 'u' || c1 === 'x') {\n            return parseInt(charsetPart.substring(2), 16);\n          } else {\n            return charsetPart.charCodeAt(1);\n          }\n        }\n\n        function encodeEscape(charCode) {\n          if (charCode < 0x20) {\n            return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n          }\n          var ch = String.fromCharCode(charCode);\n          return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n              ? \"\\\\\" + ch : ch;\n        }\n\n        function caseFoldCharset(charSet) {\n          var charsetParts = charSet.substring(1, charSet.length - 1).match(\n              new RegExp(\n                  '\\\\\\\\u[0-9A-Fa-f]{4}'\n                  + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n                  + '|\\\\\\\\[0-3][0-7]{0,2}'\n                  + '|\\\\\\\\[0-7]{1,2}'\n                  + '|\\\\\\\\[\\\\s\\\\S]'\n                  + '|-'\n                  + '|[^-\\\\\\\\]',\n                  'g'));\n          var ranges = [];\n          var inverse = charsetParts[0] === '^';\n\n          var out = ['['];\n          if (inverse) { out.push('^'); }\n\n          for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n            var p = charsetParts[i];\n            if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n              out.push(p);\n            } else {\n              var start = decodeEscape(p);\n              var end;\n              if (i + 2 < n && '-' === charsetParts[i + 1]) {\n                end = decodeEscape(charsetParts[i + 2]);\n                i += 2;\n              } else {\n                end = start;\n              }\n              ranges.push([start, end]);\n              // If the range might intersect letters, then expand it.\n              // This case handling is too simplistic.\n              // It does not deal with non-latin case folding.\n              // It works for latin source code identifiers though.\n              if (!(end < 65 || start > 122)) {\n                if (!(end < 65 || start > 90)) {\n                  ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n                }\n                if (!(end < 97 || start > 122)) {\n                  ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n                }\n              }\n            }\n          }\n\n          // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n          // -> [[1, 12], [14, 14], [16, 17]]\n          ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n          var consolidatedRanges = [];\n          var lastRange = [];\n          for (var i = 0; i < ranges.length; ++i) {\n            var range = ranges[i];\n            if (range[0] <= lastRange[1] + 1) {\n              lastRange[1] = Math.max(lastRange[1], range[1]);\n            } else {\n              consolidatedRanges.push(lastRange = range);\n            }\n          }\n\n          for (var i = 0; i < consolidatedRanges.length; ++i) {\n            var range = consolidatedRanges[i];\n            out.push(encodeEscape(range[0]));\n            if (range[1] > range[0]) {\n              if (range[1] + 1 > range[0]) { out.push('-'); }\n              out.push(encodeEscape(range[1]));\n            }\n          }\n          out.push(']');\n          return out.join('');\n        }\n\n        function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n          // Split into character sets, escape sequences, punctuation strings\n          // like ('(', '(?:', ')', '^'), and runs of characters that do not\n          // include any of the above.\n          var parts = regex.source.match(\n              new RegExp(\n                  '(?:'\n                  + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n                  + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n                  + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n                  + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n                  + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n                  + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n                  + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n                  + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n                  + ')',\n                  'g'));\n          var n = parts.length;\n\n          // Maps captured group numbers to the number they will occupy in\n          // the output or to -1 if that has not been determined, or to\n          // undefined if they need not be capturing in the output.\n          var capturedGroups = [];\n\n          // Walk over and identify back references to build the capturedGroups\n          // mapping.\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              // groups are 1-indexed, so max group index is count of '('\n              ++groupIndex;\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue) {\n                if (decimalValue <= groupIndex) {\n                  capturedGroups[decimalValue] = -1;\n                } else {\n                  // Replace with an unambiguous escape sequence so that\n                  // an octal escape sequence does not turn into a backreference\n                  // to a capturing group from an earlier regex.\n                  parts[i] = encodeEscape(decimalValue);\n                }\n              }\n            }\n          }\n\n          // Renumber groups and reduce capturing groups to non-capturing groups\n          // where possible.\n          for (var i = 1; i < capturedGroups.length; ++i) {\n            if (-1 === capturedGroups[i]) {\n              capturedGroups[i] = ++capturedGroupIndex;\n            }\n          }\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              ++groupIndex;\n              if (!capturedGroups[groupIndex]) {\n                parts[i] = '(?:';\n              }\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue && decimalValue <= groupIndex) {\n                parts[i] = '\\\\' + capturedGroups[decimalValue];\n              }\n            }\n          }\n\n          // Remove any prefix anchors so that the output will match anywhere.\n          // ^^ really does mean an anchored match though.\n          for (var i = 0; i < n; ++i) {\n            if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n          }\n\n          // Expand letters to groups to handle mixing of case-sensitive and\n          // case-insensitive patterns if necessary.\n          if (regex.ignoreCase && needToFoldCase) {\n            for (var i = 0; i < n; ++i) {\n              var p = parts[i];\n              var ch0 = p.charAt(0);\n              if (p.length >= 2 && ch0 === '[') {\n                parts[i] = caseFoldCharset(p);\n              } else if (ch0 !== '\\\\') {\n                // TODO: handle letters in numeric escapes.\n                parts[i] = p.replace(\n                    /[a-zA-Z]/g,\n                    function (ch) {\n                      var cc = ch.charCodeAt(0);\n                      return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                    });\n              }\n            }\n          }\n\n          return parts.join('');\n        }\n\n        var rewritten = [];\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.global || regex.multiline) { throw new Error('' + regex); }\n          rewritten.push(\n              '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n        }\n\n        return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n      }\n\n\n      /**\n       * Split markup into a string of source code and an array mapping ranges in\n       * that string to the text nodes in which they appear.\n       *\n       * <p>\n       * The HTML DOM structure:</p>\n       * <pre>\n       * (Element   \"p\"\n       *   (Element \"b\"\n       *     (Text  \"print \"))       ; #1\n       *   (Text    \"'Hello '\")      ; #2\n       *   (Element \"br\")            ; #3\n       *   (Text    \"  + 'World';\")) ; #4\n       * </pre>\n       * <p>\n       * corresponds to the HTML\n       * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n       *\n       * <p>\n       * It will produce the output:</p>\n       * <pre>\n       * {\n       *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n       *   //                     1          2\n       *   //           012345678901234 5678901234567\n       *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n       * }\n       * </pre>\n       * <p>\n       * where #1 is a reference to the {@code \"print \"} text node above, and so\n       * on for the other text nodes.\n       * </p>\n       *\n       * <p>\n       * The {@code} spans array is an array of pairs.  Even elements are the start\n       * indices of substrings, and odd elements are the text nodes (or BR elements)\n       * that contain the text for those substrings.\n       * Substrings continue until the next index or the end of the source.\n       * </p>\n       *\n       * @param {Node} node an HTML DOM subtree containing source-code.\n       * @param {boolean|number} isPreformatted truthy if white-space in\n       *    text nodes should be considered significant.\n       * @return {SourceSpansT} source code and the nodes in which they occur.\n       */\n      function extractSourceSpans(node, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n        var chunks = [];\n        var length = 0;\n        var spans = [];\n        var k = 0;\n\n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1) {  // Element\n            if (nocode.test(node.className)) { return; }\n            for (var child = node.firstChild; child; child = child.nextSibling) {\n              walk(child);\n            }\n            var nodeName = node.nodeName.toLowerCase();\n            if ('br' === nodeName || 'li' === nodeName) {\n              chunks[k] = '\\n';\n              spans[k << 1] = length++;\n              spans[(k++ << 1) | 1] = node;\n            }\n          } else if (type == 3 || type == 4) {  // Text\n            var text = node.nodeValue;\n            if (text.length) {\n              if (!isPreformatted) {\n                text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n              } else {\n                text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n              }\n              // TODO: handle tabs here?\n              chunks[k] = text;\n              spans[k << 1] = length;\n              length += text.length;\n              spans[(k++ << 1) | 1] = node;\n            }\n          }\n        }\n\n        walk(node);\n\n        return {\n          sourceCode: chunks.join('').replace(/\\n$/, ''),\n          spans: spans\n        };\n      }\n\n\n      /**\n       * Apply the given language handler to sourceCode and add the resulting\n       * decorations to out.\n       * @param {!Element} sourceNode\n       * @param {number} basePos the index of sourceCode within the chunk of source\n       *    whose decorations are already present on out.\n       * @param {string} sourceCode\n       * @param {function(JobT)} langHandler\n       * @param {DecorationsT} out\n       */\n      function appendDecorations(\n          sourceNode, basePos, sourceCode, langHandler, out) {\n        if (!sourceCode) { return; }\n        /** @type {JobT} */\n        var job = {\n          sourceNode: sourceNode,\n          pre: 1,\n          langExtension: null,\n          numberLines: null,\n          sourceCode: sourceCode,\n          spans: null,\n          basePos: basePos,\n          decorations: null\n        };\n        langHandler(job);\n        out.push.apply(out, job.decorations);\n      }\n\n      var notWs = /\\S/;\n\n      /**\n       * Given an element, if it contains only one child element and any text nodes\n       * it contains contain only space characters, return the sole child element.\n       * Otherwise returns undefined.\n       * <p>\n       * This is meant to return the CODE element in {@code <pre><code ...>} when\n       * there is a single child element that contains all the non-space textual\n       * content, but not to return anything where there are multiple child elements\n       * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n       * is textual content.\n       */\n      function childContentWrapper(element) {\n        var wrapper = undefined;\n        for (var c = element.firstChild; c; c = c.nextSibling) {\n          var type = c.nodeType;\n          wrapper = (type === 1)  // Element Node\n              ? (wrapper ? element : c)\n              : (type === 3)  // Text Node\n              ? (notWs.test(c.nodeValue) ? element : wrapper)\n              : wrapper;\n        }\n        return wrapper === element ? undefined : wrapper;\n      }\n\n      /** Given triples of [style, pattern, context] returns a lexing function,\n        * The lexing function interprets the patterns to find token boundaries and\n        * returns a decoration list of the form\n        * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n        * where index_n is an index into the sourceCode, and style_n is a style\n        * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n        * all characters in sourceCode[index_n-1:index_n].\n        *\n        * The stylePatterns is a list whose elements have the form\n        * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n        *\n        * Style is a style constant like PR_PLAIN, or can be a string of the\n        * form 'lang-FOO', where FOO is a language extension describing the\n        * language of the portion of the token in $1 after pattern executes.\n        * E.g., if style is 'lang-lisp', and group 1 contains the text\n        * '(hello (world))', then that portion of the token will be passed to the\n        * registered lisp handler for formatting.\n        * The text before and after group 1 will be restyled using this decorator\n        * so decorators should take care that this doesn't result in infinite\n        * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n        * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n        * '<script>foo()<\\/script>', which would cause the current decorator to\n        * be called with '<script>' which would not match the same rule since\n        * group 1 must not be empty, so it would be instead styled as PR_TAG by\n        * the generic tag rule.  The handler registered for the 'js' extension would\n        * then be called with 'foo()', and finally, the current decorator would\n        * be called with '<\\/script>' which would not match the original rule and\n        * so the generic tag rule would identify it as a tag.\n        *\n        * Pattern must only match prefixes, and if it matches a prefix, then that\n        * match is considered a token with the same style.\n        *\n        * Context is applied to the last non-whitespace, non-comment token\n        * recognized.\n        *\n        * Shortcut is an optional string of characters, any of which, if the first\n        * character, gurantee that this pattern and only this pattern matches.\n        *\n        * @param {Array} shortcutStylePatterns patterns that always start with\n        *   a known character.  Must have a shortcut string.\n        * @param {Array} fallthroughStylePatterns patterns that will be tried in\n        *   order if the shortcut ones fail.  May have shortcuts.\n        *\n        * @return {function (JobT)} a function that takes an undecorated job and\n        *   attaches a list of decorations.\n        */\n      function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n        var shortcuts = {};\n        var tokenizer;\n        (function () {\n          var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n          var allRegexs = [];\n          var regexKeys = {};\n          for (var i = 0, n = allPatterns.length; i < n; ++i) {\n            var patternParts = allPatterns[i];\n            var shortcutChars = patternParts[3];\n            if (shortcutChars) {\n              for (var c = shortcutChars.length; --c >= 0;) {\n                shortcuts[shortcutChars.charAt(c)] = patternParts;\n              }\n            }\n            var regex = patternParts[1];\n            var k = '' + regex;\n            if (!regexKeys.hasOwnProperty(k)) {\n              allRegexs.push(regex);\n              regexKeys[k] = null;\n            }\n          }\n          allRegexs.push(/[\\0-\\uffff]/);\n          tokenizer = combinePrefixPatterns(allRegexs);\n        })();\n\n        var nPatterns = fallthroughStylePatterns.length;\n\n        /**\n         * Lexes job.sourceCode and attaches an output array job.decorations of\n         * style classes preceded by the position at which they start in\n         * job.sourceCode in order.\n         *\n         * @type{function (JobT)}\n         */\n        var decorate = function (job) {\n          var sourceCode = job.sourceCode, basePos = job.basePos;\n          var sourceNode = job.sourceNode;\n          /** Even entries are positions in source in ascending order.  Odd enties\n            * are style markers (e.g., PR_COMMENT) that run from that position until\n            * the end.\n            * @type {DecorationsT}\n            */\n          var decorations = [basePos, PR_PLAIN];\n          var pos = 0;  // index into sourceCode\n          var tokens = sourceCode.match(tokenizer) || [];\n          var styleCache = {};\n\n          for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n            var token = tokens[ti];\n            var style = styleCache[token];\n            var match = void 0;\n\n            var isEmbedded;\n            if (typeof style === 'string') {\n              isEmbedded = false;\n            } else {\n              var patternParts = shortcuts[token.charAt(0)];\n              if (patternParts) {\n                match = token.match(patternParts[1]);\n                style = patternParts[0];\n              } else {\n                for (var i = 0; i < nPatterns; ++i) {\n                  patternParts = fallthroughStylePatterns[i];\n                  match = token.match(patternParts[1]);\n                  if (match) {\n                    style = patternParts[0];\n                    break;\n                  }\n                }\n\n                if (!match) {  // make sure that we make progress\n                  style = PR_PLAIN;\n                }\n              }\n\n              isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n              if (isEmbedded && !(match && typeof match[1] === 'string')) {\n                isEmbedded = false;\n                style = PR_SOURCE;\n              }\n\n              if (!isEmbedded) { styleCache[token] = style; }\n            }\n\n            var tokenStart = pos;\n            pos += token.length;\n\n            if (!isEmbedded) {\n              decorations.push(basePos + tokenStart, style);\n            } else {  // Treat group 1 as an embedded block of source code.\n              var embeddedSource = match[1];\n              var embeddedSourceStart = token.indexOf(embeddedSource);\n              var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n              if (match[2]) {\n                // If embeddedSource can be blank, then it would match at the\n                // beginning which would cause us to infinitely recurse on the\n                // entire token, so we catch the right context in match[2].\n                embeddedSourceEnd = token.length - match[2].length;\n                embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n              }\n              var lang = style.substring(5);\n              // Decorate the left of the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart,\n                  token.substring(0, embeddedSourceStart),\n                  decorate, decorations);\n              // Decorate the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceStart,\n                  embeddedSource,\n                  langHandlerForExtension(lang, embeddedSource),\n                  decorations);\n              // Decorate the right of the embedded section\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceEnd,\n                  token.substring(embeddedSourceEnd),\n                  decorate, decorations);\n            }\n          }\n          job.decorations = decorations;\n        };\n        return decorate;\n      }\n\n      /** returns a function that produces a list of decorations from source text.\n        *\n        * This code treats \", ', and ` as string delimiters, and \\ as a string\n        * escape.  It does not recognize perl's qq() style strings.\n        * It has no special handling for double delimiter escapes as in basic, or\n        * the tripled delimiters used in python, but should work on those regardless\n        * although in those cases a single string literal may be broken up into\n        * multiple adjacent string literals.\n        *\n        * It recognizes C, C++, and shell style comments.\n        *\n        * @param {Object} options a set of optional parameters.\n        * @return {function (JobT)} a function that examines the source code\n        *     in the input job and builds a decoration list which it attaches to\n        *     the job.\n        */\n      function sourceDecorator(options) {\n        var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n        if (options['tripleQuotedStrings']) {\n          // '''multi-line-string''', 'single-line-string', and double-quoted\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n               null, '\\'\"']);\n        } else if (options['multiLineStrings']) {\n          // 'multi-line-string', \"multi-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n               null, '\\'\"`']);\n        } else {\n          // 'single-line-string', \"single-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,\n               /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n               null, '\"\\'']);\n        }\n        if (options['verbatimStrings']) {\n          // verbatim-string-literal production from the C# grammar.  See issue 93.\n          fallthroughStylePatterns.push(\n              [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n        }\n        var hc = options['hashComments'];\n        if (hc) {\n          if (options['cStyleComments']) {\n            if (hc > 1) {  // multiline hash comments\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n            } else {\n              // Stop C preprocessor declarations at an unclosed open comment\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n                   null, '#']);\n            }\n            // #include <stdio.h>\n            fallthroughStylePatterns.push(\n                [PR_STRING,\n                 /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n                 null]);\n          } else {\n            shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n          }\n        }\n        if (options['cStyleComments']) {\n          fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n          fallthroughStylePatterns.push(\n              [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n        }\n        var regexLiterals = options['regexLiterals'];\n        if (regexLiterals) {\n          /**\n           * @const\n           */\n          var regexExcls = regexLiterals > 1\n            ? ''  // Multiline regex literals\n            : '\\n\\r';\n          /**\n           * @const\n           */\n          var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n          /**\n           * @const\n           */\n          var REGEX_LITERAL = (\n              // A regular expression literal starts with a slash that is\n              // not followed by * or / so that it is not confused with\n              // comments.\n              '/(?=[^/*' + regexExcls + '])'\n              // and then contains any number of raw characters,\n              + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n              // escape sequences (\\x5C),\n              +    '|\\\\x5C' + regexAny\n              // or non-nesting character sets (\\x5B\\x5D);\n              +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n              +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n              // finally closed by a /.\n              + '/');\n          fallthroughStylePatterns.push(\n              ['lang-regex',\n               RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n               ]);\n        }\n\n        var types = options['types'];\n        if (types) {\n          fallthroughStylePatterns.push([PR_TYPE, types]);\n        }\n\n        var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n        if (keywords.length) {\n          fallthroughStylePatterns.push(\n              [PR_KEYWORD,\n               new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n               null]);\n        }\n\n        shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n        var punctuation =\n          // The Bash man page says\n\n          // A word is a sequence of characters considered as a single\n          // unit by GRUB. Words are separated by metacharacters,\n          // which are the following plus space, tab, and newline: { }\n          // | & $ ; < >\n          // ...\n\n          // A word beginning with # causes that word and all remaining\n          // characters on that line to be ignored.\n\n          // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n          // comment but empirically\n          // $ echo \n          // $ echo \\$#\n          // $#\n          // $ echo }#\n          // }#\n\n          // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n          // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n          // suggests that this definition is compatible with a\n          // default mode that tries to use a single token definition\n          // to recognize both bash/python style comments and C\n          // preprocessor directives.\n\n          // This definition of punctuation does not include # in the list of\n          // follow-on exclusions, so # will not be broken before if preceeded\n          // by a punctuation character.  We could try to exclude # after\n          // [|&;<>] but that doesn't seem to cause many major problems.\n          // If that does turn out to be a problem, we should change the below\n          // when hc is truthy to include # in the run of punctuation characters\n          // only when not followint [|&;<>].\n          '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n        if (options['regexLiterals']) {\n          punctuation += '(?!\\s*\\/)';\n        }\n\n        fallthroughStylePatterns.push(\n            // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n            [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n            [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_LITERAL,\n             new RegExp(\n                 '^(?:'\n                 // A hex number\n                 + '0x[a-f0-9]+'\n                 // or an octal or decimal number,\n                 + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n                 // possibly in scientific notation\n                 + '(?:e[+\\\\-]?\\\\d+)?'\n                 + ')'\n                 // with an optional modifier like UL for unsigned long\n                 + '[a-z]*', 'i'),\n             null, '0123456789'],\n            // Don't treat escaped quotes in bash as starting strings.\n            // See issue 144.\n            [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n            [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n        return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n      }\n\n      var decorateSource = sourceDecorator({\n            'keywords': ALL_KEYWORDS,\n            'hashComments': true,\n            'cStyleComments': true,\n            'multiLineStrings': true,\n            'regexLiterals': true\n          });\n\n      /**\n       * Given a DOM subtree, wraps it in a list, and puts each line into its own\n       * list item.\n       *\n       * @param {Node} node modified in place.  Its content is pulled into an\n       *     HTMLOListElement, and each line is moved into a separate list item.\n       *     This requires cloning elements, so the input might not have unique\n       *     IDs after numbering.\n       * @param {number|null|boolean} startLineNum\n       *     If truthy, coerced to an integer which is the 1-indexed line number\n       *     of the first line of code.  The number of the first line will be\n       *     attached to the list.\n       * @param {boolean} isPreformatted true iff white-space in text nodes should\n       *     be treated as significant.\n       */\n      function numberLines(node, startLineNum, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n        var lineBreak = /\\r\\n?|\\n/;\n\n        var document = node.ownerDocument;\n\n        var li = document.createElement('li');\n        while (node.firstChild) {\n          li.appendChild(node.firstChild);\n        }\n        // An array of lines.  We split below, so this is initialized to one\n        // un-split line.\n        var listItems = [li];\n\n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1 && !nocode.test(node.className)) {  // Element\n            if ('br' === node.nodeName.toLowerCase()) {\n              breakAfter(node);\n              // Discard the <BR> since it is now flush against a </LI>.\n              if (node.parentNode) {\n                node.parentNode.removeChild(node);\n              }\n            } else {\n              for (var child = node.firstChild; child; child = child.nextSibling) {\n                walk(child);\n              }\n            }\n          } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n            var text = node.nodeValue;\n            var match = text.match(lineBreak);\n            if (match) {\n              var firstLine = text.substring(0, match.index);\n              node.nodeValue = firstLine;\n              var tail = text.substring(match.index + match[0].length);\n              if (tail) {\n                var parent = node.parentNode;\n                parent.insertBefore(\n                  document.createTextNode(tail), node.nextSibling);\n              }\n              breakAfter(node);\n              if (!firstLine) {\n                // Don't leave blank text nodes in the DOM.\n                node.parentNode.removeChild(node);\n              }\n            }\n          }\n        }\n\n        // Split a line after the given node.\n        function breakAfter(lineEndNode) {\n          // If there's nothing to the right, then we can skip ending the line\n          // here, and move root-wards since splitting just before an end-tag\n          // would require us to create a bunch of empty copies.\n          while (!lineEndNode.nextSibling) {\n            lineEndNode = lineEndNode.parentNode;\n            if (!lineEndNode) { return; }\n          }\n\n          function breakLeftOf(limit, copy) {\n            // Clone shallowly if this node needs to be on both sides of the break.\n            var rightSide = copy ? limit.cloneNode(false) : limit;\n            var parent = limit.parentNode;\n            if (parent) {\n              // We clone the parent chain.\n              // This helps us resurrect important styling elements that cross lines.\n              // E.g. in <i>Foo<br>Bar</i>\n              // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n              var parentClone = breakLeftOf(parent, 1);\n              // Move the clone and everything to the right of the original\n              // onto the cloned parent.\n              var next = limit.nextSibling;\n              parentClone.appendChild(rightSide);\n              for (var sibling = next; sibling; sibling = next) {\n                next = sibling.nextSibling;\n                parentClone.appendChild(sibling);\n              }\n            }\n            return rightSide;\n          }\n\n          var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n          // Walk the parent chain until we reach an unattached LI.\n          for (var parent;\n               // Check nodeType since IE invents document fragments.\n               (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n            copiedListItem = parent;\n          }\n          // Put it on the list of lines for later processing.\n          listItems.push(copiedListItem);\n        }\n\n        // Split lines while there are lines left to split.\n        for (var i = 0;  // Number of lines that have been split so far.\n             i < listItems.length;  // length updated by breakAfter calls.\n             ++i) {\n          walk(listItems[i]);\n        }\n\n        // Make sure numeric indices show correctly.\n        if (startLineNum === (startLineNum|0)) {\n          listItems[0].setAttribute('value', startLineNum);\n        }\n\n        var ol = document.createElement('ol');\n        ol.className = 'linenums';\n        var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n        for (var i = 0, n = listItems.length; i < n; ++i) {\n          li = listItems[i];\n          // Stick a class on the LIs so that stylesheets can\n          // color odd/even rows, or any other row pattern that\n          // is co-prime with 10.\n          li.className = 'L' + ((i + offset) % 10);\n          if (!li.firstChild) {\n            li.appendChild(document.createTextNode('\\xA0'));\n          }\n          ol.appendChild(li);\n        }\n\n        node.appendChild(ol);\n      }\n\n\n      /**\n       * Breaks {@code job.sourceCode} around style boundaries in\n       * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n       * @param {JobT} job\n       * @private\n       */\n      function recombineTagsAndDecorations(job) {\n        var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n        isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n        var newlineRe = /\\n/g;\n\n        var source = job.sourceCode;\n        var sourceLength = source.length;\n        // Index into source after the last code-unit recombined.\n        var sourceIndex = 0;\n\n        var spans = job.spans;\n        var nSpans = spans.length;\n        // Index into spans after the last span which ends at or before sourceIndex.\n        var spanIndex = 0;\n\n        var decorations = job.decorations;\n        var nDecorations = decorations.length;\n        // Index into decorations after the last decoration which ends at or before\n        // sourceIndex.\n        var decorationIndex = 0;\n\n        // Remove all zero-length decorations.\n        decorations[nDecorations] = sourceLength;\n        var decPos, i;\n        for (i = decPos = 0; i < nDecorations;) {\n          if (decorations[i] !== decorations[i + 2]) {\n            decorations[decPos++] = decorations[i++];\n            decorations[decPos++] = decorations[i++];\n          } else {\n            i += 2;\n          }\n        }\n        nDecorations = decPos;\n\n        // Simplify decorations.\n        for (i = decPos = 0; i < nDecorations;) {\n          var startPos = decorations[i];\n          // Conflate all adjacent decorations that use the same style.\n          var startDec = decorations[i + 1];\n          var end = i + 2;\n          while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n            end += 2;\n          }\n          decorations[decPos++] = startPos;\n          decorations[decPos++] = startDec;\n          i = end;\n        }\n\n        nDecorations = decorations.length = decPos;\n\n        var sourceNode = job.sourceNode;\n        var oldDisplay = \"\";\n        if (sourceNode) {\n          oldDisplay = sourceNode.style.display;\n          sourceNode.style.display = 'none';\n        }\n        try {\n          var decoration = null;\n          while (spanIndex < nSpans) {\n            var spanStart = spans[spanIndex];\n            var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n                || sourceLength;\n\n            var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n            var end = Math.min(spanEnd, decEnd);\n\n            var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n            var styledText;\n            if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n                // Don't introduce spans around empty text nodes.\n                && (styledText = source.substring(sourceIndex, end))) {\n              // This may seem bizarre, and it is.  Emitting LF on IE causes the\n              // code to display with spaces instead of line breaks.\n              // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n              // space to appear at the beginning of every line but the first.\n              // Emitting an old Mac OS 9 line separator makes everything spiffy.\n              if (isIE8OrEarlier) {\n                styledText = styledText.replace(newlineRe, '\\r');\n              }\n              textNode.nodeValue = styledText;\n              var document = textNode.ownerDocument;\n              var span = document.createElement('span');\n              span.className = decorations[decorationIndex + 1];\n              var parentNode = textNode.parentNode;\n              parentNode.replaceChild(span, textNode);\n              span.appendChild(textNode);\n              if (sourceIndex < spanEnd) {  // Split off a text node.\n                spans[spanIndex + 1] = textNode\n                    // TODO: Possibly optimize by using '' if there's no flicker.\n                    = document.createTextNode(source.substring(end, spanEnd));\n                parentNode.insertBefore(textNode, span.nextSibling);\n              }\n            }\n\n            sourceIndex = end;\n\n            if (sourceIndex >= spanEnd) {\n              spanIndex += 2;\n            }\n            if (sourceIndex >= decEnd) {\n              decorationIndex += 2;\n            }\n          }\n        } finally {\n          if (sourceNode) {\n            sourceNode.style.display = oldDisplay;\n          }\n        }\n      }\n\n\n      /** Maps language-specific file extensions to handlers. */\n      var langHandlerRegistry = {};\n      /** Register a language handler for the given file extensions.\n        * @param {function (JobT)} handler a function from source code to a list\n        *      of decorations.  Takes a single argument job which describes the\n        *      state of the computation and attaches the decorations to it.\n        * @param {Array.<string>} fileExtensions\n        */\n      function registerLangHandler(handler, fileExtensions) {\n        for (var i = fileExtensions.length; --i >= 0;) {\n          var ext = fileExtensions[i];\n          if (!langHandlerRegistry.hasOwnProperty(ext)) {\n            langHandlerRegistry[ext] = handler;\n          } else if (win['console']) {\n            console['warn']('cannot override language handler %s', ext);\n          }\n        }\n      }\n      function langHandlerForExtension(extension, source) {\n        if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n          // Treat it as markup if the first non whitespace character is a < and\n          // the last non-whitespace character is a >.\n          extension = /^\\s*</.test(source)\n              ? 'default-markup'\n              : 'default-code';\n        }\n        return langHandlerRegistry[extension];\n      }\n      registerLangHandler(decorateSource, ['default-code']);\n      registerLangHandler(\n          createSimpleLexer(\n              [],\n              [\n               [PR_PLAIN,       /^[^<?]+/],\n               [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n               [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n               // Unescaped content in an unknown language\n               ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n               ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n               [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n               ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n               // Unescaped content in javascript.  (Or possibly vbscript).\n               ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n               // Contains unescaped stylesheet content\n               ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n               ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n              ]),\n          ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n      registerLangHandler(\n          createSimpleLexer(\n              [\n               [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n               [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n               ],\n              [\n               [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n               [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n               ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n               [PR_PUNCTUATION,  /^[=<>\\/]+/],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n               ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n               ]),\n          ['in.tag']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CPP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'types': C_TYPES\n            }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': 'null,true,false'\n            }), ['json']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CSHARP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'verbatimStrings': true,\n              'types': C_TYPES\n            }), ['cs']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JAVA_KEYWORDS,\n              'cStyleComments': true\n            }), ['java']);\n      registerLangHandler(sourceDecorator({\n              'keywords': SH_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true\n            }), ['bash', 'bsh', 'csh', 'sh']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PYTHON_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'tripleQuotedStrings': true\n            }), ['cv', 'py', 'python']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PERL_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': 2  // multiline regex literals\n            }), ['perl', 'pl', 'pm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': RUBY_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': true\n            }), ['rb', 'ruby']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JSCRIPT_KEYWORDS,\n              'cStyleComments': true,\n              'regexLiterals': true\n            }), ['javascript', 'js', 'ts', 'typescript']);\n      registerLangHandler(sourceDecorator({\n              'keywords': COFFEE_KEYWORDS,\n              'hashComments': 3,  // ### style block comments\n              'cStyleComments': true,\n              'multilineStrings': true,\n              'tripleQuotedStrings': true,\n              'regexLiterals': true\n            }), ['coffee']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n      /** @param {JobT} job */\n      function applyDecorator(job) {\n        var opt_langExtension = job.langExtension;\n\n        try {\n          // Extract tags, and convert the source code to plain text.\n          var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n          /** Plain text. @type {string} */\n          var source = sourceAndSpans.sourceCode;\n          job.sourceCode = source;\n          job.spans = sourceAndSpans.spans;\n          job.basePos = 0;\n\n          // Apply the appropriate language handler\n          langHandlerForExtension(opt_langExtension, source)(job);\n\n          // Integrate the decorations and tags back into the source code,\n          // modifying the sourceNode in place.\n          recombineTagsAndDecorations(job);\n        } catch (e) {\n          if (win['console']) {\n            console['log'](e && e['stack'] || e);\n          }\n        }\n      }\n\n      /**\n       * Pretty print a chunk of code.\n       * @param sourceCodeHtml {string} The HTML to pretty print.\n       * @param opt_langExtension {string} The language name to use.\n       *     Typically, a filename extension like 'cpp' or 'java'.\n       * @param opt_numberLines {number|boolean} True to number lines,\n       *     or the 1-indexed number of the first line in sourceCodeHtml.\n       */\n      function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n        /** @type{number|boolean} */\n        var nl = opt_numberLines || false;\n        /** @type{string|null} */\n        var langExtension = opt_langExtension || null;\n        /** @type{!Element} */\n        var container = document.createElement('div');\n        // This could cause images to load and onload listeners to fire.\n        // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n        // We assume that the inner HTML is from a trusted source.\n        // The pre-tag is required for IE8 which strips newlines from innerHTML\n        // when it is injected into a <pre> tag.\n        // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n        // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n        container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n        container = /** @type{!Element} */(container.firstChild);\n        if (nl) {\n          numberLines(container, nl, true);\n        }\n\n        /** @type{JobT} */\n        var job = {\n          langExtension: langExtension,\n          numberLines: nl,\n          sourceNode: container,\n          pre: 1,\n          sourceCode: null,\n          basePos: null,\n          spans: null,\n          decorations: null\n        };\n        applyDecorator(job);\n        return container.innerHTML;\n      }\n\n       /**\n        * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n        * {@code class=prettyprint} and prettify them.\n        *\n        * @param {Function} opt_whenDone called when prettifying is done.\n        * @param {HTMLElement|HTMLDocument} opt_root an element or document\n        *   containing all the elements to pretty print.\n        *   Defaults to {@code document.body}.\n        */\n      function $prettyPrint(opt_whenDone, opt_root) {\n        var root = opt_root || document.body;\n        var doc = root.ownerDocument || document;\n        function byTagName(tn) { return root.getElementsByTagName(tn); }\n        // fetch a list of nodes to rewrite\n        var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n        var elements = [];\n        for (var i = 0; i < codeSegments.length; ++i) {\n          for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n            elements.push(codeSegments[i][j]);\n          }\n        }\n        codeSegments = null;\n\n        var clock = Date;\n        if (!clock['now']) {\n          clock = { 'now': function () { return +(new Date); } };\n        }\n\n        // The loop is broken into a series of continuations to make sure that we\n        // don't make the browser unresponsive when rewriting a large page.\n        var k = 0;\n\n        var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n        var prettyPrintRe = /\\bprettyprint\\b/;\n        var prettyPrintedRe = /\\bprettyprinted\\b/;\n        var preformattedTagNameRe = /pre|xmp/i;\n        var codeRe = /^code$/i;\n        var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n        var EMPTY = {};\n\n        function doWork() {\n          var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                         clock['now']() + 250 /* ms */ :\n                         Infinity);\n          for (; k < elements.length && clock['now']() < endTime; k++) {\n            var cs = elements[k];\n\n            // Look for a preceding comment like\n            // <?prettify lang=\"...\" linenums=\"...\"?>\n            var attrs = EMPTY;\n            {\n              for (var preceder = cs; (preceder = preceder.previousSibling);) {\n                var nt = preceder.nodeType;\n                // <?foo?> is parsed by HTML 5 to a comment node (8)\n                // like <!--?foo?-->, but in XML is a processing instruction\n                var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n                if (value\n                    ? !/^\\??prettify\\b/.test(value)\n                    : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n                  // Skip over white-space text nodes but not others.\n                  break;\n                }\n                if (value) {\n                  attrs = {};\n                  value.replace(\n                      /\\b(\\w+)=([\\w:.%+-]+)/g,\n                    function (_, name, value) { attrs[name] = value; });\n                  break;\n                }\n              }\n            }\n\n            var className = cs.className;\n            if ((attrs !== EMPTY || prettyPrintRe.test(className))\n                // Don't redo this if we've already done it.\n                // This allows recalling pretty print to just prettyprint elements\n                // that have been added to the page since last call.\n                && !prettyPrintedRe.test(className)) {\n\n              // make sure this is not nested in an already prettified element\n              var nested = false;\n              for (var p = cs.parentNode; p; p = p.parentNode) {\n                var tn = p.tagName;\n                if (preCodeXmpRe.test(tn)\n                    && p.className && prettyPrintRe.test(p.className)) {\n                  nested = true;\n                  break;\n                }\n              }\n              if (!nested) {\n                // Mark done.  If we fail to prettyprint for whatever reason,\n                // we shouldn't try again.\n                cs.className += ' prettyprinted';\n\n                // If the classes includes a language extensions, use it.\n                // Language extensions can be specified like\n                //     <pre class=\"prettyprint lang-cpp\">\n                // the language extension \"cpp\" is used to find a language handler\n                // as passed to PR.registerLangHandler.\n                // HTML5 recommends that a language be specified using \"language-\"\n                // as the prefix instead.  Google Code Prettify supports both.\n                // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n                var langExtension = attrs['lang'];\n                if (!langExtension) {\n                  langExtension = className.match(langExtensionRe);\n                  // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n                  var wrapper;\n                  if (!langExtension && (wrapper = childContentWrapper(cs))\n                      && codeRe.test(wrapper.tagName)) {\n                    langExtension = wrapper.className.match(langExtensionRe);\n                  }\n\n                  if (langExtension) { langExtension = langExtension[1]; }\n                }\n\n                var preformatted;\n                if (preformattedTagNameRe.test(cs.tagName)) {\n                  preformatted = 1;\n                } else {\n                  var currentStyle = cs['currentStyle'];\n                  var defaultView = doc.defaultView;\n                  var whitespace = (\n                      currentStyle\n                      ? currentStyle['whiteSpace']\n                      : (defaultView\n                         && defaultView.getComputedStyle)\n                      ? defaultView.getComputedStyle(cs, null)\n                      .getPropertyValue('white-space')\n                      : 0);\n                  preformatted = whitespace\n                      && 'pre' === whitespace.substring(0, 3);\n                }\n\n                // Look for a class like linenums or linenums:<n> where <n> is the\n                // 1-indexed number of the first line.\n                var lineNums = attrs['linenums'];\n                if (!(lineNums = lineNums === 'true' || +lineNums)) {\n                  lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n                  lineNums =\n                    lineNums\n                    ? lineNums[1] && lineNums[1].length\n                      ? +lineNums[1] : true\n                    : false;\n                }\n                if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n                // do the pretty printing\n                var prettyPrintingJob = {\n                  langExtension: langExtension,\n                  sourceNode: cs,\n                  numberLines: lineNums,\n                  pre: preformatted,\n                  sourceCode: null,\n                  basePos: null,\n                  spans: null,\n                  decorations: null\n                };\n                applyDecorator(prettyPrintingJob);\n              }\n            }\n          }\n          if (k < elements.length) {\n            // finish up in a continuation\n            win.setTimeout(doWork, 250);\n          } else if ('function' === typeof opt_whenDone) {\n            opt_whenDone();\n          }\n        }\n\n        doWork();\n      }\n\n      /**\n       * Contains functions for creating and registering new language handlers.\n       * @type {Object}\n       */\n      var PR = win['PR'] = {\n            'createSimpleLexer': createSimpleLexer,\n            'registerLangHandler': registerLangHandler,\n            'sourceDecorator': sourceDecorator,\n            'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n            'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n            'PR_COMMENT': PR_COMMENT,\n            'PR_DECLARATION': PR_DECLARATION,\n            'PR_KEYWORD': PR_KEYWORD,\n            'PR_LITERAL': PR_LITERAL,\n            'PR_NOCODE': PR_NOCODE,\n            'PR_PLAIN': PR_PLAIN,\n            'PR_PUNCTUATION': PR_PUNCTUATION,\n            'PR_SOURCE': PR_SOURCE,\n            'PR_STRING': PR_STRING,\n            'PR_TAG': PR_TAG,\n            'PR_TYPE': PR_TYPE,\n            'prettyPrintOne':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrintOne'] = $prettyPrintOne)\n                 : (prettyPrintOne = $prettyPrintOne),\n            'prettyPrint':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrint'] = $prettyPrint)\n                 : (prettyPrint = $prettyPrint)\n          };\n\n      // Make PR available via the Asynchronous Module Definition (AMD) API.\n      // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n      // The Asynchronous Module Definition (AMD) API specifies a\n      // mechanism for defining modules such that the module and its\n      // dependencies can be asynchronously loaded.\n      // ...\n      // To allow a clear indicator that a global define function (as\n      // needed for script src browser loading) conforms to the AMD API,\n      // any global define function SHOULD have a property called \"amd\"\n      // whose value is an object. This helps avoid conflict with any\n      // other existing JavaScript code that could have defined a define()\n      // function that does not conform to the AMD API.\n      var define = win['define'];\n      if (typeof define === \"function\" && define['amd']) {\n        define(\"google-code-prettify\", [], function () {\n          return PR;\n        });\n      }\n    })();\n\n    return prettyPrint;\n  })();\n\n  // If this script is deferred or async and the document is already\n  // loaded we need to wait for language handlers to load before performing\n  // any autorun.\n  function onLangsLoaded() {\n    if (autorun) {\n      contentLoaded(\n        function () {\n          var n = callbacks.length;\n          var callback = n ? function () {\n            for (var i = 0; i < n; ++i) {\n              (function (i) {\n                win.setTimeout(\n                   function () {\n                     win['exports'][callbacks[i]].apply(win, arguments);\n                   }, 0);\n               })(i);\n            }\n          } : void 0;\n          prettyPrint(callback);\n        });\n    }\n  }\n  checkPendingLanguages();\n\n}());\n</style></name></name></div>"}],"Post":[{"title":"怎么写 Commit Message？","date":"2019-06-12T12:21:44.000Z","toc":true,"_content":"\nCommit Message 是告诉其他人你在提交中完成了哪些操作的最简单方法。通过阅读 Commit Message，您应该能够在不查看提交的情况下说出更改的范围和更改背后的一般思想。\n\n## Commit Message\n\n一条好的 Commit Message 应该包含以下部分。\n\n### 标题\n\n这是一个单行摘要，它应该帮助其他人快速浏览列表并找到他们想要的 commit。\n\n这一行不应该超过 80 个字符，因为这是 Commit Message 中惟一保证在所有工具中都能看到的部分，而 Commit Message 的其余部分很可能是隐藏的。例如，“git log”、“git blame” 和 BitBucket commit 视图只显示这一行。\n\n<!-- more -->\n\n### 为什么进行这些更改?\n\n本节应详细说明正在进行的更改。它至少应该包括变更的范围、要解决的问题和变更的期望。\n\nIn practice,\n\n- bullet\n- points\n- are\n- preferred\n\n### Metadata\n\nMetadata 意味着被自动化系统读取(例如：Bitbucket、Bamboo 等)。虽然它们不打算被人们使用，但它们应该是可读的，并且易于输入。\n\n例如，我们使用 `LABEL=value[，value]*` 来组织这些元数据。\n\n最常用的标签是 `BUG= BUG-id`。\n\n#### BUG\n\n将这个 commit 和 JIRA 或者其他 BUG 追踪平台的 Issue 联系起来。\n\n## 示例\n\n```plain\nxxxxxx: Implement PrintHelloWorld method\n\n- add output for method `PrintHelloWorld`\n- rename `hiWorld` to `helloWord`\n\nBUG=XXXX-45\n```\n","source":"_posts/commit_message.md","raw":"---\ntitle: 怎么写 Commit Message？\ndate: 2019-06-12 20:21:44\ntoc: true\ntags:\n- 技术名词\n---\n\nCommit Message 是告诉其他人你在提交中完成了哪些操作的最简单方法。通过阅读 Commit Message，您应该能够在不查看提交的情况下说出更改的范围和更改背后的一般思想。\n\n## Commit Message\n\n一条好的 Commit Message 应该包含以下部分。\n\n### 标题\n\n这是一个单行摘要，它应该帮助其他人快速浏览列表并找到他们想要的 commit。\n\n这一行不应该超过 80 个字符，因为这是 Commit Message 中惟一保证在所有工具中都能看到的部分，而 Commit Message 的其余部分很可能是隐藏的。例如，“git log”、“git blame” 和 BitBucket commit 视图只显示这一行。\n\n<!-- more -->\n\n### 为什么进行这些更改?\n\n本节应详细说明正在进行的更改。它至少应该包括变更的范围、要解决的问题和变更的期望。\n\nIn practice,\n\n- bullet\n- points\n- are\n- preferred\n\n### Metadata\n\nMetadata 意味着被自动化系统读取(例如：Bitbucket、Bamboo 等)。虽然它们不打算被人们使用，但它们应该是可读的，并且易于输入。\n\n例如，我们使用 `LABEL=value[，value]*` 来组织这些元数据。\n\n最常用的标签是 `BUG= BUG-id`。\n\n#### BUG\n\n将这个 commit 和 JIRA 或者其他 BUG 追踪平台的 Issue 联系起来。\n\n## 示例\n\n```plain\nxxxxxx: Implement PrintHelloWorld method\n\n- add output for method `PrintHelloWorld`\n- rename `hiWorld` to `helloWord`\n\nBUG=XXXX-45\n```\n","slug":"commit_message","published":1,"updated":"2019-06-12T07:38:20.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxh80ekk00006c9v5bd3xf4y","content":"<p>Commit Message 是告诉其他人你在提交中完成了哪些操作的最简单方法。通过阅读 Commit Message，您应该能够在不查看提交的情况下说出更改的范围和更改背后的一般思想。</p>\n<h2 id=\"Commit-Message\"><a href=\"#Commit-Message\" class=\"headerlink\" title=\"Commit Message\"></a>Commit Message</h2><p>一条好的 Commit Message 应该包含以下部分。</p>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>这是一个单行摘要，它应该帮助其他人快速浏览列表并找到他们想要的 commit。</p>\n<p>这一行不应该超过 80 个字符，因为这是 Commit Message 中惟一保证在所有工具中都能看到的部分，而 Commit Message 的其余部分很可能是隐藏的。例如，“git log”、“git blame” 和 BitBucket commit 视图只显示这一行。</p>\n<a id=\"more\"></a>\n<h3 id=\"为什么进行这些更改\"><a href=\"#为什么进行这些更改\" class=\"headerlink\" title=\"为什么进行这些更改?\"></a>为什么进行这些更改?</h3><p>本节应详细说明正在进行的更改。它至少应该包括变更的范围、要解决的问题和变更的期望。</p>\n<p>In practice,</p>\n<ul>\n<li>bullet</li>\n<li>points</li>\n<li>are</li>\n<li>preferred</li>\n</ul>\n<h3 id=\"Metadata\"><a href=\"#Metadata\" class=\"headerlink\" title=\"Metadata\"></a>Metadata</h3><p>Metadata 意味着被自动化系统读取(例如：Bitbucket、Bamboo 等)。虽然它们不打算被人们使用，但它们应该是可读的，并且易于输入。</p>\n<p>例如，我们使用 <code>LABEL=value[，value]*</code> 来组织这些元数据。</p>\n<p>最常用的标签是 <code>BUG= BUG-id</code>。</p>\n<h4 id=\"BUG\"><a href=\"#BUG\" class=\"headerlink\" title=\"BUG\"></a>BUG</h4><p>将这个 commit 和 JIRA 或者其他 BUG 追踪平台的 Issue 联系起来。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxxxxx: Implement PrintHelloWorld method</span><br><span class=\"line\"></span><br><span class=\"line\">- add output for method `PrintHelloWorld`</span><br><span class=\"line\">- rename `hiWorld` to `helloWord`</span><br><span class=\"line\"></span><br><span class=\"line\">BUG=XXXX-45</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Commit Message 是告诉其他人你在提交中完成了哪些操作的最简单方法。通过阅读 Commit Message，您应该能够在不查看提交的情况下说出更改的范围和更改背后的一般思想。</p>\n<h2 id=\"Commit-Message\"><a href=\"#Commit-Message\" class=\"headerlink\" title=\"Commit Message\"></a>Commit Message</h2><p>一条好的 Commit Message 应该包含以下部分。</p>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>这是一个单行摘要，它应该帮助其他人快速浏览列表并找到他们想要的 commit。</p>\n<p>这一行不应该超过 80 个字符，因为这是 Commit Message 中惟一保证在所有工具中都能看到的部分，而 Commit Message 的其余部分很可能是隐藏的。例如，“git log”、“git blame” 和 BitBucket commit 视图只显示这一行。</p>","more":"<h3 id=\"为什么进行这些更改\"><a href=\"#为什么进行这些更改\" class=\"headerlink\" title=\"为什么进行这些更改?\"></a>为什么进行这些更改?</h3><p>本节应详细说明正在进行的更改。它至少应该包括变更的范围、要解决的问题和变更的期望。</p>\n<p>In practice,</p>\n<ul>\n<li>bullet</li>\n<li>points</li>\n<li>are</li>\n<li>preferred</li>\n</ul>\n<h3 id=\"Metadata\"><a href=\"#Metadata\" class=\"headerlink\" title=\"Metadata\"></a>Metadata</h3><p>Metadata 意味着被自动化系统读取(例如：Bitbucket、Bamboo 等)。虽然它们不打算被人们使用，但它们应该是可读的，并且易于输入。</p>\n<p>例如，我们使用 <code>LABEL=value[，value]*</code> 来组织这些元数据。</p>\n<p>最常用的标签是 <code>BUG= BUG-id</code>。</p>\n<h4 id=\"BUG\"><a href=\"#BUG\" class=\"headerlink\" title=\"BUG\"></a>BUG</h4><p>将这个 commit 和 JIRA 或者其他 BUG 追踪平台的 Issue 联系起来。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxxxxx: Implement PrintHelloWorld method</span><br><span class=\"line\"></span><br><span class=\"line\">- add output for method `PrintHelloWorld`</span><br><span class=\"line\">- rename `hiWorld` to `helloWord`</span><br><span class=\"line\"></span><br><span class=\"line\">BUG=XXXX-45</span><br></pre></td></tr></table></figure>"},{"title":"什么是闭包 ？","date":"2019-04-24T10:21:44.000Z","toc":true,"_content":"\n闭包（closure）是 Javascript 语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。\n\n## 变量作用域\n\n要理解闭包，首先要理解 Javascript 特殊的变量作用域。\n\n变量的作用域无非就是两种：全局变量和局部变量。\n\nJavascript 语言的特殊之处，就在于函数内部可以直接读取全局变量。\n\n```Javascript\nvar n = 999;\nfunction f1(){\n    alert(n);\n}\nf1(); // 999\n```\n\n<!-- more -->\n\n另一方面，在函数外部自然无法读取函数内的局部变量。\n\n```Javascript\nfunction f1(){\n    var n=999;\n}\nalert(n); // error\n```\n\n这里有一个地方需要注意，函数内部声明变量的时候，一定要使用 var 命令。如果不用的话，你实际上声明了一个全局变量！\n\n```Javascript\nfunction f1(){\n　　n=999;\n}\nf1();\nalert(n); // 999\n```\n\n## 如何从外部读取局部变量？\n\n出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。\n\n那就是在函数的内部，再定义一个函数。\n\n```Javascript\nfunction f1(){\n　　var n=999;\n　　function f2(){\n　　　　alert(n); // 999\n　　}\n}\n```\n\n在上面的代码中，函数 f2 就被包括在函数 f1 内部，这时 f1 内部的所有局部变量，对 f2 都是可见的。但是反过来就不行，f2 内部的局部变量，对 f1 就是不可见的。这就是 Javascript 语言特有的\"链式作用域\"结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。\n\n既然 f2 可以读取 f1 中的局部变量，那么只要把 f2 作为返回值，我们不就可以在 f1 外部读取它的内部变量了吗！\n\n```Javascript\nfunction f1(){\n　　var n=999;\n　　function f2(){\n　　　　alert(n);\n　　}\n　　return f2;\n}\nvar result=f1();\nresult(); // 999\n```\n\n## 闭包的概念\n\n上一节代码中的 f2 函数，就是闭包。\n\n各种专业文献上的\"闭包\"（closure）定义非常抽象，很难看懂。我的理解是，`闭包就是能够读取其他函数内部变量的函数`。\n\n由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成\"定义在一个函数内部的函数\"。\n\n所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n## 闭包的用途\n\n`闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中`。\n\n```Javascript\nfunction f1(){\n　　var n=999;\n　　nAdd=function(){n+=1} // 没有用 var 声明，所以是全局函数\n\n　　function f2(){\n　　　　alert(n);\n　　}\n　　return f2;\n}\nvar result=f1();\nresult(); // 999\nnAdd();\nresult(); // 1000\n```\n\n在这段代码中，result 实际上就是闭包 f2 函数。它一共运行了两次，第一次的值是 999，第二次的值是 1000。这证明了，函数 f1 中的局部变量 n 一直保存在内存中，并没有在 f1 调用后被自动清除。\n\n为什么会这样呢？原因就在于 f1 是 f2 的父函数，而 f2 被赋给了一个全局变量，这导致 f2 始终在内存中，而 f2 的存在依赖于 f1，因此 f1 也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。`什么时候回收？只有当 f2 销毁的时候才会回收 f1 及 f1 中 定义的各种变量`\n\n这段代码中另一个值得注意的地方，就是\"nAdd=function(){n+=1}\"这一行，首先在 nAdd 前面没有使用 var 关键字，因此 nAdd 是一个全局变量，而不是局部变量。其次，nAdd 的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以 nAdd 相当于是一个 setter，可以在函数外部对函数内部的局部变量进行操作。\n\n## 使用闭包的注意点\n\n- 由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。\n\n- 闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。\n\n## Golang 并发中的闭包\n\nGo语言的并发时，一定要处理好循环中的闭包引用的外部变量。如下代码：\n\n```go\nfunc main() {\n    runtime.GOMAXPROCS(runtime.NumCPU())\n    var wg sync.WaitGroup\n    for i := 0; i < 5; i++ {\n        wg.Add(1)\n        go func() {\n            fmt.Print(i)\n            wg.Done()\n        }()\n    }\n    wg.Wait()\n}\n// 输出结果 5 5 5 5 5\n```\n\n这种现象的原因在于闭包共享外部的变量 i，注意到，每次调用 go 就会启动一个 goroutine，这需要一定时间；但是，启动的 goroutine 与循环变量递增不是在同一个 goroutine，可以把 i 认为处于主 goroutine 中。启动一个 goroutine 的速度远小于循环执行的速度，所以即使是第一个 goroutine 刚起启动时，外层的循环也执行到了最后一步了。由于所有的 goroutine 共享 i，而且这个 i 会在最后一个使用它的 goroutine 结束后被销毁，所以最后的输出结果都是最后一步的 i==5。\n\n我们可以使用循环的延时在验证上述说法：\n\n```go\nfunc main() {\n    runtime.GOMAXPROCS(runtime.NumCPU())\n    var wg sync.WaitGroup\n    for i := 0; i < 5; i++ {\n        wg.Add(1)\n        go func() {\n            fmt.Print(i)\n            wg.Done()\n        }()\n        time.Sleep(1 * time.Second)   // 设置时间延时1秒\n    }\n    wg.Wait()\n}\n// 输出结果 4 0 1 2 3\n```\n\n每一步循环至少间隔一秒，而这一秒的时间足够启动一个 goroutine 了，因此这样可以输出正确的结果。\n\n在实际的工程中，不可能进行延时，这样就没有并发的优势，一般采取下面两种方法：\n\n### 共享的环境变量作为函数参数传递\n\n```go\nfunc main() {\n    runtime.GOMAXPROCS(runtime.NumCPU())\n\n    var wg sync.WaitGroup\n    for i := 0; i < 5; i++ {\n        wg.Add(1)\n        go func(i int) {\n            fmt.Println(i)\n            wg.Done()\n        }(i)\n    }\n    wg.Wait()\n}\n// 输出结果 4 0 1 2 3\n```\n\n输出结果不一定按照顺序，这取决于每个 goroutine 的实际情况，但是最后的结果是不变的。可以理解为，函数参数的传递是瞬时的，而且是在一个 goroutine 执行之前就完成，所以此时执行的闭包存储了当前i的状态。\n\n### 使用同名的变量保留当前的状态\n\n```go\nfunc main() {\n    runtime.GOMAXPROCS(runtime.NumCPU())\n\n    var wg sync.WaitGroup\n    for i := 0; i < 5; i++ {\n        wg.Add(1)\n        i := i\n        go func() {\n            fmt.Println(i)\n            wg.Done()\n        }()\n    }\n    wg.Wait()\n}\n// 输出结果 4 0 1 2 3 (结果不一定与传参的方式一致)\n```\n\n同名的变量 i 作为内部的局部变量，覆盖了原来循环中的 i，此时闭包中的变量不再是共享外循环的 i，而是都有各自的内部同名变量 i，赋值过程发生于循环 goroutine，因此保证了独立。\n\n## 相关链接\n\n- [阮一峰：学习Javascript闭包（Closure）](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html?20120612141317)\n- [Golang 中闭包的理解](https://blog.csdn.net/qq_35976351/article/details/81986496)","source":"_posts/closure.md","raw":"---\ntitle: 什么是闭包 ？\ndate: 2019-04-24 18:21:44\ntoc: true\ntags:\n- Go\n- Javascript\n- 技术名词\n---\n\n闭包（closure）是 Javascript 语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。\n\n## 变量作用域\n\n要理解闭包，首先要理解 Javascript 特殊的变量作用域。\n\n变量的作用域无非就是两种：全局变量和局部变量。\n\nJavascript 语言的特殊之处，就在于函数内部可以直接读取全局变量。\n\n```Javascript\nvar n = 999;\nfunction f1(){\n    alert(n);\n}\nf1(); // 999\n```\n\n<!-- more -->\n\n另一方面，在函数外部自然无法读取函数内的局部变量。\n\n```Javascript\nfunction f1(){\n    var n=999;\n}\nalert(n); // error\n```\n\n这里有一个地方需要注意，函数内部声明变量的时候，一定要使用 var 命令。如果不用的话，你实际上声明了一个全局变量！\n\n```Javascript\nfunction f1(){\n　　n=999;\n}\nf1();\nalert(n); // 999\n```\n\n## 如何从外部读取局部变量？\n\n出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。\n\n那就是在函数的内部，再定义一个函数。\n\n```Javascript\nfunction f1(){\n　　var n=999;\n　　function f2(){\n　　　　alert(n); // 999\n　　}\n}\n```\n\n在上面的代码中，函数 f2 就被包括在函数 f1 内部，这时 f1 内部的所有局部变量，对 f2 都是可见的。但是反过来就不行，f2 内部的局部变量，对 f1 就是不可见的。这就是 Javascript 语言特有的\"链式作用域\"结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。\n\n既然 f2 可以读取 f1 中的局部变量，那么只要把 f2 作为返回值，我们不就可以在 f1 外部读取它的内部变量了吗！\n\n```Javascript\nfunction f1(){\n　　var n=999;\n　　function f2(){\n　　　　alert(n);\n　　}\n　　return f2;\n}\nvar result=f1();\nresult(); // 999\n```\n\n## 闭包的概念\n\n上一节代码中的 f2 函数，就是闭包。\n\n各种专业文献上的\"闭包\"（closure）定义非常抽象，很难看懂。我的理解是，`闭包就是能够读取其他函数内部变量的函数`。\n\n由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成\"定义在一个函数内部的函数\"。\n\n所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n## 闭包的用途\n\n`闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中`。\n\n```Javascript\nfunction f1(){\n　　var n=999;\n　　nAdd=function(){n+=1} // 没有用 var 声明，所以是全局函数\n\n　　function f2(){\n　　　　alert(n);\n　　}\n　　return f2;\n}\nvar result=f1();\nresult(); // 999\nnAdd();\nresult(); // 1000\n```\n\n在这段代码中，result 实际上就是闭包 f2 函数。它一共运行了两次，第一次的值是 999，第二次的值是 1000。这证明了，函数 f1 中的局部变量 n 一直保存在内存中，并没有在 f1 调用后被自动清除。\n\n为什么会这样呢？原因就在于 f1 是 f2 的父函数，而 f2 被赋给了一个全局变量，这导致 f2 始终在内存中，而 f2 的存在依赖于 f1，因此 f1 也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。`什么时候回收？只有当 f2 销毁的时候才会回收 f1 及 f1 中 定义的各种变量`\n\n这段代码中另一个值得注意的地方，就是\"nAdd=function(){n+=1}\"这一行，首先在 nAdd 前面没有使用 var 关键字，因此 nAdd 是一个全局变量，而不是局部变量。其次，nAdd 的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以 nAdd 相当于是一个 setter，可以在函数外部对函数内部的局部变量进行操作。\n\n## 使用闭包的注意点\n\n- 由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。\n\n- 闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。\n\n## Golang 并发中的闭包\n\nGo语言的并发时，一定要处理好循环中的闭包引用的外部变量。如下代码：\n\n```go\nfunc main() {\n    runtime.GOMAXPROCS(runtime.NumCPU())\n    var wg sync.WaitGroup\n    for i := 0; i < 5; i++ {\n        wg.Add(1)\n        go func() {\n            fmt.Print(i)\n            wg.Done()\n        }()\n    }\n    wg.Wait()\n}\n// 输出结果 5 5 5 5 5\n```\n\n这种现象的原因在于闭包共享外部的变量 i，注意到，每次调用 go 就会启动一个 goroutine，这需要一定时间；但是，启动的 goroutine 与循环变量递增不是在同一个 goroutine，可以把 i 认为处于主 goroutine 中。启动一个 goroutine 的速度远小于循环执行的速度，所以即使是第一个 goroutine 刚起启动时，外层的循环也执行到了最后一步了。由于所有的 goroutine 共享 i，而且这个 i 会在最后一个使用它的 goroutine 结束后被销毁，所以最后的输出结果都是最后一步的 i==5。\n\n我们可以使用循环的延时在验证上述说法：\n\n```go\nfunc main() {\n    runtime.GOMAXPROCS(runtime.NumCPU())\n    var wg sync.WaitGroup\n    for i := 0; i < 5; i++ {\n        wg.Add(1)\n        go func() {\n            fmt.Print(i)\n            wg.Done()\n        }()\n        time.Sleep(1 * time.Second)   // 设置时间延时1秒\n    }\n    wg.Wait()\n}\n// 输出结果 4 0 1 2 3\n```\n\n每一步循环至少间隔一秒，而这一秒的时间足够启动一个 goroutine 了，因此这样可以输出正确的结果。\n\n在实际的工程中，不可能进行延时，这样就没有并发的优势，一般采取下面两种方法：\n\n### 共享的环境变量作为函数参数传递\n\n```go\nfunc main() {\n    runtime.GOMAXPROCS(runtime.NumCPU())\n\n    var wg sync.WaitGroup\n    for i := 0; i < 5; i++ {\n        wg.Add(1)\n        go func(i int) {\n            fmt.Println(i)\n            wg.Done()\n        }(i)\n    }\n    wg.Wait()\n}\n// 输出结果 4 0 1 2 3\n```\n\n输出结果不一定按照顺序，这取决于每个 goroutine 的实际情况，但是最后的结果是不变的。可以理解为，函数参数的传递是瞬时的，而且是在一个 goroutine 执行之前就完成，所以此时执行的闭包存储了当前i的状态。\n\n### 使用同名的变量保留当前的状态\n\n```go\nfunc main() {\n    runtime.GOMAXPROCS(runtime.NumCPU())\n\n    var wg sync.WaitGroup\n    for i := 0; i < 5; i++ {\n        wg.Add(1)\n        i := i\n        go func() {\n            fmt.Println(i)\n            wg.Done()\n        }()\n    }\n    wg.Wait()\n}\n// 输出结果 4 0 1 2 3 (结果不一定与传参的方式一致)\n```\n\n同名的变量 i 作为内部的局部变量，覆盖了原来循环中的 i，此时闭包中的变量不再是共享外循环的 i，而是都有各自的内部同名变量 i，赋值过程发生于循环 goroutine，因此保证了独立。\n\n## 相关链接\n\n- [阮一峰：学习Javascript闭包（Closure）](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html?20120612141317)\n- [Golang 中闭包的理解](https://blog.csdn.net/qq_35976351/article/details/81986496)","slug":"closure","published":1,"updated":"2019-04-24T11:53:46.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxh80eko00016c9vypej3wux","content":"<p>闭包（closure）是 Javascript 语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。</p>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p>要理解闭包，首先要理解 Javascript 特殊的变量作用域。</p>\n<p>变量的作用域无非就是两种：全局变量和局部变量。</p>\n<p>Javascript 语言的特殊之处，就在于函数内部可以直接读取全局变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">999</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1(); <span class=\"comment\">// 999</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>另一方面，在函数外部自然无法读取函数内的局部变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(n); <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure>\n<p>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用 var 命令。如果不用的话，你实际上声明了一个全局变量！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　n=<span class=\"number\">999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1();</span><br><span class=\"line\">alert(n); <span class=\"comment\">// 999</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"如何从外部读取局部变量？\"><a href=\"#如何从外部读取局部变量？\" class=\"headerlink\" title=\"如何从外部读取局部变量？\"></a>如何从外部读取局部变量？</h2><p>出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。</p>\n<p>那就是在函数的内部，再定义一个函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　　　alert(n); <span class=\"comment\">// 999</span></span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，函数 f2 就被包括在函数 f1 内部，这时 f1 内部的所有局部变量，对 f2 都是可见的。但是反过来就不行，f2 内部的局部变量，对 f1 就是不可见的。这就是 Javascript 语言特有的”链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>\n<p>既然 f2 可以读取 f1 中的局部变量，那么只要把 f2 作为返回值，我们不就可以在 f1 外部读取它的内部变量了吗！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　　　alert(n);</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　<span class=\"keyword\">return</span> f2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result=f1();</span><br><span class=\"line\">result(); <span class=\"comment\">// 999</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"闭包的概念\"><a href=\"#闭包的概念\" class=\"headerlink\" title=\"闭包的概念\"></a>闭包的概念</h2><p>上一节代码中的 f2 函数，就是闭包。</p>\n<p>各种专业文献上的”闭包”（closure）定义非常抽象，很难看懂。我的理解是，<code>闭包就是能够读取其他函数内部变量的函数</code>。</p>\n<p>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。</p>\n<p>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<h2 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h2><p><code>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</span><br><span class=\"line\">　　nAdd=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;n+=<span class=\"number\">1</span>&#125; <span class=\"comment\">// 没有用 var 声明，所以是全局函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　　　alert(n);</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　<span class=\"keyword\">return</span> f2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result=f1();</span><br><span class=\"line\">result(); <span class=\"comment\">// 999</span></span><br><span class=\"line\">nAdd();</span><br><span class=\"line\">result(); <span class=\"comment\">// 1000</span></span><br></pre></td></tr></table></figure>\n<p>在这段代码中，result 实际上就是闭包 f2 函数。它一共运行了两次，第一次的值是 999，第二次的值是 1000。这证明了，函数 f1 中的局部变量 n 一直保存在内存中，并没有在 f1 调用后被自动清除。</p>\n<p>为什么会这样呢？原因就在于 f1 是 f2 的父函数，而 f2 被赋给了一个全局变量，这导致 f2 始终在内存中，而 f2 的存在依赖于 f1，因此 f1 也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。<code>什么时候回收？只有当 f2 销毁的时候才会回收 f1 及 f1 中 定义的各种变量</code></p>\n<p>这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在 nAdd 前面没有使用 var 关键字，因此 nAdd 是一个全局变量，而不是局部变量。其次，nAdd 的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以 nAdd 相当于是一个 setter，可以在函数外部对函数内部的局部变量进行操作。</p>\n<h2 id=\"使用闭包的注意点\"><a href=\"#使用闭包的注意点\" class=\"headerlink\" title=\"使用闭包的注意点\"></a>使用闭包的注意点</h2><ul>\n<li><p>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p>\n</li>\n<li><p>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>\n</li>\n</ul>\n<h2 id=\"Golang-并发中的闭包\"><a href=\"#Golang-并发中的闭包\" class=\"headerlink\" title=\"Golang 并发中的闭包\"></a>Golang 并发中的闭包</h2><p>Go语言的并发时，一定要处理好循环中的闭包引用的外部变量。如下代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    runtime.GOMAXPROCS(runtime.NumCPU())</span><br><span class=\"line\">    <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">        wg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">            fmt.Print(i)</span><br><span class=\"line\">            wg.Done()</span><br><span class=\"line\">        &#125;()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    wg.Wait()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出结果 5 5 5 5 5</span></span><br></pre></td></tr></table></figure>\n<p>这种现象的原因在于闭包共享外部的变量 i，注意到，每次调用 go 就会启动一个 goroutine，这需要一定时间；但是，启动的 goroutine 与循环变量递增不是在同一个 goroutine，可以把 i 认为处于主 goroutine 中。启动一个 goroutine 的速度远小于循环执行的速度，所以即使是第一个 goroutine 刚起启动时，外层的循环也执行到了最后一步了。由于所有的 goroutine 共享 i，而且这个 i 会在最后一个使用它的 goroutine 结束后被销毁，所以最后的输出结果都是最后一步的 i==5。</p>\n<p>我们可以使用循环的延时在验证上述说法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    runtime.GOMAXPROCS(runtime.NumCPU())</span><br><span class=\"line\">    <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">        wg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">            fmt.Print(i)</span><br><span class=\"line\">            wg.Done()</span><br><span class=\"line\">        &#125;()</span><br><span class=\"line\">        time.Sleep(<span class=\"number\">1</span> * time.Second)   <span class=\"comment\">// 设置时间延时1秒</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    wg.Wait()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出结果 4 0 1 2 3</span></span><br></pre></td></tr></table></figure>\n<p>每一步循环至少间隔一秒，而这一秒的时间足够启动一个 goroutine 了，因此这样可以输出正确的结果。</p>\n<p>在实际的工程中，不可能进行延时，这样就没有并发的优势，一般采取下面两种方法：</p>\n<h3 id=\"共享的环境变量作为函数参数传递\"><a href=\"#共享的环境变量作为函数参数传递\" class=\"headerlink\" title=\"共享的环境变量作为函数参数传递\"></a>共享的环境变量作为函数参数传递</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    runtime.GOMAXPROCS(runtime.NumCPU())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">        wg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">            fmt.Println(i)</span><br><span class=\"line\">            wg.Done()</span><br><span class=\"line\">        &#125;(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    wg.Wait()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出结果 4 0 1 2 3</span></span><br></pre></td></tr></table></figure>\n<p>输出结果不一定按照顺序，这取决于每个 goroutine 的实际情况，但是最后的结果是不变的。可以理解为，函数参数的传递是瞬时的，而且是在一个 goroutine 执行之前就完成，所以此时执行的闭包存储了当前i的状态。</p>\n<h3 id=\"使用同名的变量保留当前的状态\"><a href=\"#使用同名的变量保留当前的状态\" class=\"headerlink\" title=\"使用同名的变量保留当前的状态\"></a>使用同名的变量保留当前的状态</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    runtime.GOMAXPROCS(runtime.NumCPU())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">        wg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">        i := i</span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">            fmt.Println(i)</span><br><span class=\"line\">            wg.Done()</span><br><span class=\"line\">        &#125;()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    wg.Wait()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出结果 4 0 1 2 3 (结果不一定与传参的方式一致)</span></span><br></pre></td></tr></table></figure>\n<p>同名的变量 i 作为内部的局部变量，覆盖了原来循环中的 i，此时闭包中的变量不再是共享外循环的 i，而是都有各自的内部同名变量 i，赋值过程发生于循环 goroutine，因此保证了独立。</p>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html?20120612141317\" target=\"_blank\" rel=\"noopener\">阮一峰：学习Javascript闭包（Closure）</a></li>\n<li><a href=\"https://blog.csdn.net/qq_35976351/article/details/81986496\" target=\"_blank\" rel=\"noopener\">Golang 中闭包的理解</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>闭包（closure）是 Javascript 语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。</p>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p>要理解闭包，首先要理解 Javascript 特殊的变量作用域。</p>\n<p>变量的作用域无非就是两种：全局变量和局部变量。</p>\n<p>Javascript 语言的特殊之处，就在于函数内部可以直接读取全局变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">999</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1(); <span class=\"comment\">// 999</span></span><br></pre></td></tr></table></figure>","more":"<p>另一方面，在函数外部自然无法读取函数内的局部变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(n); <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure>\n<p>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用 var 命令。如果不用的话，你实际上声明了一个全局变量！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　n=<span class=\"number\">999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1();</span><br><span class=\"line\">alert(n); <span class=\"comment\">// 999</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"如何从外部读取局部变量？\"><a href=\"#如何从外部读取局部变量？\" class=\"headerlink\" title=\"如何从外部读取局部变量？\"></a>如何从外部读取局部变量？</h2><p>出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。</p>\n<p>那就是在函数的内部，再定义一个函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　　　alert(n); <span class=\"comment\">// 999</span></span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，函数 f2 就被包括在函数 f1 内部，这时 f1 内部的所有局部变量，对 f2 都是可见的。但是反过来就不行，f2 内部的局部变量，对 f1 就是不可见的。这就是 Javascript 语言特有的”链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>\n<p>既然 f2 可以读取 f1 中的局部变量，那么只要把 f2 作为返回值，我们不就可以在 f1 外部读取它的内部变量了吗！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　　　alert(n);</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　<span class=\"keyword\">return</span> f2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result=f1();</span><br><span class=\"line\">result(); <span class=\"comment\">// 999</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"闭包的概念\"><a href=\"#闭包的概念\" class=\"headerlink\" title=\"闭包的概念\"></a>闭包的概念</h2><p>上一节代码中的 f2 函数，就是闭包。</p>\n<p>各种专业文献上的”闭包”（closure）定义非常抽象，很难看懂。我的理解是，<code>闭包就是能够读取其他函数内部变量的函数</code>。</p>\n<p>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。</p>\n<p>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<h2 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h2><p><code>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</span><br><span class=\"line\">　　nAdd=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;n+=<span class=\"number\">1</span>&#125; <span class=\"comment\">// 没有用 var 声明，所以是全局函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">　　　　alert(n);</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　<span class=\"keyword\">return</span> f2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result=f1();</span><br><span class=\"line\">result(); <span class=\"comment\">// 999</span></span><br><span class=\"line\">nAdd();</span><br><span class=\"line\">result(); <span class=\"comment\">// 1000</span></span><br></pre></td></tr></table></figure>\n<p>在这段代码中，result 实际上就是闭包 f2 函数。它一共运行了两次，第一次的值是 999，第二次的值是 1000。这证明了，函数 f1 中的局部变量 n 一直保存在内存中，并没有在 f1 调用后被自动清除。</p>\n<p>为什么会这样呢？原因就在于 f1 是 f2 的父函数，而 f2 被赋给了一个全局变量，这导致 f2 始终在内存中，而 f2 的存在依赖于 f1，因此 f1 也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。<code>什么时候回收？只有当 f2 销毁的时候才会回收 f1 及 f1 中 定义的各种变量</code></p>\n<p>这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在 nAdd 前面没有使用 var 关键字，因此 nAdd 是一个全局变量，而不是局部变量。其次，nAdd 的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以 nAdd 相当于是一个 setter，可以在函数外部对函数内部的局部变量进行操作。</p>\n<h2 id=\"使用闭包的注意点\"><a href=\"#使用闭包的注意点\" class=\"headerlink\" title=\"使用闭包的注意点\"></a>使用闭包的注意点</h2><ul>\n<li><p>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p>\n</li>\n<li><p>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>\n</li>\n</ul>\n<h2 id=\"Golang-并发中的闭包\"><a href=\"#Golang-并发中的闭包\" class=\"headerlink\" title=\"Golang 并发中的闭包\"></a>Golang 并发中的闭包</h2><p>Go语言的并发时，一定要处理好循环中的闭包引用的外部变量。如下代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    runtime.GOMAXPROCS(runtime.NumCPU())</span><br><span class=\"line\">    <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">        wg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">            fmt.Print(i)</span><br><span class=\"line\">            wg.Done()</span><br><span class=\"line\">        &#125;()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    wg.Wait()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出结果 5 5 5 5 5</span></span><br></pre></td></tr></table></figure>\n<p>这种现象的原因在于闭包共享外部的变量 i，注意到，每次调用 go 就会启动一个 goroutine，这需要一定时间；但是，启动的 goroutine 与循环变量递增不是在同一个 goroutine，可以把 i 认为处于主 goroutine 中。启动一个 goroutine 的速度远小于循环执行的速度，所以即使是第一个 goroutine 刚起启动时，外层的循环也执行到了最后一步了。由于所有的 goroutine 共享 i，而且这个 i 会在最后一个使用它的 goroutine 结束后被销毁，所以最后的输出结果都是最后一步的 i==5。</p>\n<p>我们可以使用循环的延时在验证上述说法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    runtime.GOMAXPROCS(runtime.NumCPU())</span><br><span class=\"line\">    <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">        wg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">            fmt.Print(i)</span><br><span class=\"line\">            wg.Done()</span><br><span class=\"line\">        &#125;()</span><br><span class=\"line\">        time.Sleep(<span class=\"number\">1</span> * time.Second)   <span class=\"comment\">// 设置时间延时1秒</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    wg.Wait()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出结果 4 0 1 2 3</span></span><br></pre></td></tr></table></figure>\n<p>每一步循环至少间隔一秒，而这一秒的时间足够启动一个 goroutine 了，因此这样可以输出正确的结果。</p>\n<p>在实际的工程中，不可能进行延时，这样就没有并发的优势，一般采取下面两种方法：</p>\n<h3 id=\"共享的环境变量作为函数参数传递\"><a href=\"#共享的环境变量作为函数参数传递\" class=\"headerlink\" title=\"共享的环境变量作为函数参数传递\"></a>共享的环境变量作为函数参数传递</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    runtime.GOMAXPROCS(runtime.NumCPU())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">        wg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">            fmt.Println(i)</span><br><span class=\"line\">            wg.Done()</span><br><span class=\"line\">        &#125;(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    wg.Wait()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出结果 4 0 1 2 3</span></span><br></pre></td></tr></table></figure>\n<p>输出结果不一定按照顺序，这取决于每个 goroutine 的实际情况，但是最后的结果是不变的。可以理解为，函数参数的传递是瞬时的，而且是在一个 goroutine 执行之前就完成，所以此时执行的闭包存储了当前i的状态。</p>\n<h3 id=\"使用同名的变量保留当前的状态\"><a href=\"#使用同名的变量保留当前的状态\" class=\"headerlink\" title=\"使用同名的变量保留当前的状态\"></a>使用同名的变量保留当前的状态</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    runtime.GOMAXPROCS(runtime.NumCPU())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">        wg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">        i := i</span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">            fmt.Println(i)</span><br><span class=\"line\">            wg.Done()</span><br><span class=\"line\">        &#125;()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    wg.Wait()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出结果 4 0 1 2 3 (结果不一定与传参的方式一致)</span></span><br></pre></td></tr></table></figure>\n<p>同名的变量 i 作为内部的局部变量，覆盖了原来循环中的 i，此时闭包中的变量不再是共享外循环的 i，而是都有各自的内部同名变量 i，赋值过程发生于循环 goroutine，因此保证了独立。</p>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html?20120612141317\" target=\"_blank\" rel=\"noopener\">阮一峰：学习Javascript闭包（Closure）</a></li>\n<li><a href=\"https://blog.csdn.net/qq_35976351/article/details/81986496\" target=\"_blank\" rel=\"noopener\">Golang 中闭包的理解</a></li>\n</ul>"},{"title":"Golang slice 之 append 时原数组发生变化","date":"2019-05-28T11:22:34.000Z","toc":true,"_content":"\n## 背景\n\n使用 append 可以在 slice 之后追加元素，例如\n\n```go\na := []int{1,2,3}\nresult := append(a,4)\nfmt.Println(result) // output: [1 2 3 4]\n```\n\n问题在于，进行这种操作时，原来的 slice（即 a）所基于的数组值会不会发生变化？在 Golang 中，如果有多个 slice 基于同一个数组，则这些 slice 的数据是共享的（而不是每个 slice 复制一份，复制的是指针）。也就说，如果改变了数组的内容，则基于它的所有 slice 的值都会发生变化。这段代码中 a 的值没有发生变化，是有原因的。\n\n<!-- more -->\n\n## 分析\n\n回答这个问题，首先需要了解 append 函数的实现原理：\n\n- 如果 a 的 cap 够用，则会直接在 a 指向的数组后面追加元素，返回的 slice 和原来的 slice 是同一个对象。显然，这种情况下原来的 slice 值发生了变化！\n- 如果 a 的 cap 不够用（上述代码就是这种情况），则会重新分配一个数组空间来存储数据，并且返回指向新数组的 slice。这时候原来的 a 指向的数组并没有发生任何变化！（后面讲给出例子）\n- 当然，在任何情况下，append 返回的结果都是追加后的 slice，这一点没有问题。\n\n以下代码用来验证这个问题：\n\n1. 在函数 `test1` 中 a 的值发生变化了，因为 a[:2] 的 len=2，cap=3，所以追加一个元素时，cap 依然够用\n2. 在函数 `test2` 中 a 的值没有发生变化，因为 a[:2] 的 cap 不够用，因此会重新分配一个数组用来存储新的数据，而 a 存储的仍然是老数组\n\n```go\nfunc test1() {\n    a := []int{1, 2, 3}\n    fmt.Printf(\"&a:[%p], a:[%p], &a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\", &a, a, &a[0], a, len(a), cap(a))\n    // &a:[0xc0000be0e0], a:[0xc0000a0140], &a[0]:[0xc0000a0140], a:[1 2 3], len(a): 3, cap(a): 3\n    a = append(a[:2], 4)\n    fmt.Printf(\"&a:[%p], a:[%p], &a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\", &a, a, &a[0], a, len(a), cap(a))\n    // &a:[0xc0000be0e0], a:[0xc0000a0140], &a[0]:[0xc0000a0140], a:[1 2 4], len(a): 3, cap(a): 3\n\n    // 指向 a 的指针没有发生变化，数组 a 的地址没有发生变化，是因为 cap 够用，不需要扩容\n}\n```\n\n```go\nfunc test2() {\n    a := []int{1, 2, 3}\n    fmt.Printf(\"&a:[%p], a:[%p], &a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\", &a, a, &a[0], a, len(a), cap(a))\n    // &a:[0xc0000b80e0], a:[0xc00009a140], &a[0]:[0xc00009a140], a:[1 2 3], len(a): 3, cap(a): 3\n    c := append(a[:2], []int{4, 5, 6}...)\n    fmt.Printf(\"&a:[%p], a:[%p], &a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\", &a, a, &a[0], a, len(a), cap(a))\n    // &a:[0xc0000b80e0], a:[0xc00009a140], &a[0]:[0xc00009a140], a:[1 2 3], len(a): 3, cap(a): 3\n    fmt.Printf(\"&c:[%p], c:[%p], &c[0]:[%p], c:%v, len(c): %d, cap(c): %d \\n\", &c, c, &c[0], c, len(c), cap(c))\n    // &c:[0xc0000b8140], c:[0xc0000f8000], &c[0]:[0xc0000f8000], c:[1 2 4 5 6], len(c): 5, cap(c): 6\n\n    // a 没有发生改变，因为 cap 不够用，发生了扩容，重新分配了一个数组来 append 元素，原有的 a 仍然执行原数组，而 append 返回了新分配的数组\n}\n```\n\n- 为了避开这个“坑“，推荐在截取 slice 时使用三参数的方式：\n\n```go\nfunc main() {\n    a := []int{1, 2, 3, 4, 5}\n    fmt.Printf(\"len(a): %d, cap(a): %d \\n\", len(a), cap(a)) // len(a): 5, cap(a): 5\n\n    b := a[:3]\n    fmt.Printf(\"len(b): %d, cap(b): %d \\n\", len(b), cap(b)) // len(b): 3, cap(b): 5\n\n    c := a[:3:3]\n    fmt.Printf(\"len(c): %d, cap(c): %d \\n\", len(c), cap(c)) // len(c): 3, cap(c): 3\n}\n```\n\n从输出结果可以看出，使用三参数方式时，截取后的 slice 的 cap 将会重新设置。如果第二个参数和第三个参数相同，那么截取后的 slice 的 len == cap，这样在执行 append 的时候一定会重新分配数组，从而保证原始的数组 a 不会发生改变。\n\nPS: 三参数表达式：b := a[start : end : capEnd]，len(b) = end - start, cap(b) = capEnd - start\n\n- 同样的分析一下数组作为参数传递所发生的事情：\n\n```go\nfunc main() {\n    var s = []string{\"1\", \"2\", \"3\"}\n\n    fmt.Printf(\"&s:[%p], s:[%p], &s[0]:[%p], s:%v, len(a): %d, cap(a): %d \\n\", &s, s, &s[0], s, len(s), cap(s))\n    // &s:[0xc0000ba0e0], s:[0xc00008e450], &s[0]:[0xc00008e450], s:[1 2 3], len(a): 3, cap(a): 3\n    // here we call t as s[:2]\n    fmt.Printf(\"&s:[%p], t:[%p], &t[0]:[%p], t:%v, len(s): %d, cap(s): %d \\n\", &s, s[:2], &s[:2][0], s[:2], len(s[:2]), cap(s[:2]))\n    // &s:[0xc0000ba0e0], t:[0xc00008e450], &t[0]:[0xc00008e450], t:[1 2], len(s): 2, cap(s): 3\n    test(s[:2]...)\n    fmt.Printf(\"&s:[%p], s:[%p], &s[0]:[%p], s:%v, len(a): %d, cap(a): %d \\n\", &s, s, &s[0], s, len(s), cap(s))\n    // &s:[0xc0000ba0e0], s:[0xc00008e450], &s[0]:[0xc00008e450], s:[1 2 3], len(a): 3, cap(a): 3\n}\n\nfunc test(a ...string) {\n    fmt.Printf(\"&a:[%p], a:[%p], &a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\", &a, a, &a[0], a, len(a), cap(a)) // 说明复制了一个指针，指向了数组\n    // &a:[0xc0000fa000], a:[0xc00008e450], &a[0]:[0xc00008e450], a:[1 2], len(a): 2, cap(a): 3\n    // here we call t as a[:len(a):len(a)]\n    fmt.Printf(\"&a:[%p], t:[%p], &t[0]:[%p], t:%v, len(a): %d, cap(a): %d \\n\", &a, a[:len(a):len(a)], &a[:len(a):len(a)][0], a[:len(a):len(a)], len(a[:len(a):len(a)]), cap(a[:len(a):len(a)]))\n    // &a:[0xc0000fa000], t:[0xc00008e450], &t[0]:[0xc00008e450], t:[1 2], len(a): 2, cap(a): 2\n    a = append(a[:len(a):len(a)], \"4\")\n    fmt.Printf(\"&a:[%p], a:[%p], &a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\", &a, a, &a[0], a, len(a), cap(a))\n    // 数组第一个元素的指针发生了改变，指向数组的指针没有改变，说明数组扩容重新分配了数组地址\n    // &a:[0xc0000fa000], a:[0xc000100000], &a[0]:[0xc000100000], a:[1 2 4], len(a): 3, cap(a): 4\n}\n```\n","source":"_posts/go_slice.md","raw":"---\ntitle: Golang slice 之 append 时原数组发生变化\ndate: 2019-05-28 19:22:34\ntoc: true\ntags:\n- Go\n---\n\n## 背景\n\n使用 append 可以在 slice 之后追加元素，例如\n\n```go\na := []int{1,2,3}\nresult := append(a,4)\nfmt.Println(result) // output: [1 2 3 4]\n```\n\n问题在于，进行这种操作时，原来的 slice（即 a）所基于的数组值会不会发生变化？在 Golang 中，如果有多个 slice 基于同一个数组，则这些 slice 的数据是共享的（而不是每个 slice 复制一份，复制的是指针）。也就说，如果改变了数组的内容，则基于它的所有 slice 的值都会发生变化。这段代码中 a 的值没有发生变化，是有原因的。\n\n<!-- more -->\n\n## 分析\n\n回答这个问题，首先需要了解 append 函数的实现原理：\n\n- 如果 a 的 cap 够用，则会直接在 a 指向的数组后面追加元素，返回的 slice 和原来的 slice 是同一个对象。显然，这种情况下原来的 slice 值发生了变化！\n- 如果 a 的 cap 不够用（上述代码就是这种情况），则会重新分配一个数组空间来存储数据，并且返回指向新数组的 slice。这时候原来的 a 指向的数组并没有发生任何变化！（后面讲给出例子）\n- 当然，在任何情况下，append 返回的结果都是追加后的 slice，这一点没有问题。\n\n以下代码用来验证这个问题：\n\n1. 在函数 `test1` 中 a 的值发生变化了，因为 a[:2] 的 len=2，cap=3，所以追加一个元素时，cap 依然够用\n2. 在函数 `test2` 中 a 的值没有发生变化，因为 a[:2] 的 cap 不够用，因此会重新分配一个数组用来存储新的数据，而 a 存储的仍然是老数组\n\n```go\nfunc test1() {\n    a := []int{1, 2, 3}\n    fmt.Printf(\"&a:[%p], a:[%p], &a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\", &a, a, &a[0], a, len(a), cap(a))\n    // &a:[0xc0000be0e0], a:[0xc0000a0140], &a[0]:[0xc0000a0140], a:[1 2 3], len(a): 3, cap(a): 3\n    a = append(a[:2], 4)\n    fmt.Printf(\"&a:[%p], a:[%p], &a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\", &a, a, &a[0], a, len(a), cap(a))\n    // &a:[0xc0000be0e0], a:[0xc0000a0140], &a[0]:[0xc0000a0140], a:[1 2 4], len(a): 3, cap(a): 3\n\n    // 指向 a 的指针没有发生变化，数组 a 的地址没有发生变化，是因为 cap 够用，不需要扩容\n}\n```\n\n```go\nfunc test2() {\n    a := []int{1, 2, 3}\n    fmt.Printf(\"&a:[%p], a:[%p], &a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\", &a, a, &a[0], a, len(a), cap(a))\n    // &a:[0xc0000b80e0], a:[0xc00009a140], &a[0]:[0xc00009a140], a:[1 2 3], len(a): 3, cap(a): 3\n    c := append(a[:2], []int{4, 5, 6}...)\n    fmt.Printf(\"&a:[%p], a:[%p], &a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\", &a, a, &a[0], a, len(a), cap(a))\n    // &a:[0xc0000b80e0], a:[0xc00009a140], &a[0]:[0xc00009a140], a:[1 2 3], len(a): 3, cap(a): 3\n    fmt.Printf(\"&c:[%p], c:[%p], &c[0]:[%p], c:%v, len(c): %d, cap(c): %d \\n\", &c, c, &c[0], c, len(c), cap(c))\n    // &c:[0xc0000b8140], c:[0xc0000f8000], &c[0]:[0xc0000f8000], c:[1 2 4 5 6], len(c): 5, cap(c): 6\n\n    // a 没有发生改变，因为 cap 不够用，发生了扩容，重新分配了一个数组来 append 元素，原有的 a 仍然执行原数组，而 append 返回了新分配的数组\n}\n```\n\n- 为了避开这个“坑“，推荐在截取 slice 时使用三参数的方式：\n\n```go\nfunc main() {\n    a := []int{1, 2, 3, 4, 5}\n    fmt.Printf(\"len(a): %d, cap(a): %d \\n\", len(a), cap(a)) // len(a): 5, cap(a): 5\n\n    b := a[:3]\n    fmt.Printf(\"len(b): %d, cap(b): %d \\n\", len(b), cap(b)) // len(b): 3, cap(b): 5\n\n    c := a[:3:3]\n    fmt.Printf(\"len(c): %d, cap(c): %d \\n\", len(c), cap(c)) // len(c): 3, cap(c): 3\n}\n```\n\n从输出结果可以看出，使用三参数方式时，截取后的 slice 的 cap 将会重新设置。如果第二个参数和第三个参数相同，那么截取后的 slice 的 len == cap，这样在执行 append 的时候一定会重新分配数组，从而保证原始的数组 a 不会发生改变。\n\nPS: 三参数表达式：b := a[start : end : capEnd]，len(b) = end - start, cap(b) = capEnd - start\n\n- 同样的分析一下数组作为参数传递所发生的事情：\n\n```go\nfunc main() {\n    var s = []string{\"1\", \"2\", \"3\"}\n\n    fmt.Printf(\"&s:[%p], s:[%p], &s[0]:[%p], s:%v, len(a): %d, cap(a): %d \\n\", &s, s, &s[0], s, len(s), cap(s))\n    // &s:[0xc0000ba0e0], s:[0xc00008e450], &s[0]:[0xc00008e450], s:[1 2 3], len(a): 3, cap(a): 3\n    // here we call t as s[:2]\n    fmt.Printf(\"&s:[%p], t:[%p], &t[0]:[%p], t:%v, len(s): %d, cap(s): %d \\n\", &s, s[:2], &s[:2][0], s[:2], len(s[:2]), cap(s[:2]))\n    // &s:[0xc0000ba0e0], t:[0xc00008e450], &t[0]:[0xc00008e450], t:[1 2], len(s): 2, cap(s): 3\n    test(s[:2]...)\n    fmt.Printf(\"&s:[%p], s:[%p], &s[0]:[%p], s:%v, len(a): %d, cap(a): %d \\n\", &s, s, &s[0], s, len(s), cap(s))\n    // &s:[0xc0000ba0e0], s:[0xc00008e450], &s[0]:[0xc00008e450], s:[1 2 3], len(a): 3, cap(a): 3\n}\n\nfunc test(a ...string) {\n    fmt.Printf(\"&a:[%p], a:[%p], &a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\", &a, a, &a[0], a, len(a), cap(a)) // 说明复制了一个指针，指向了数组\n    // &a:[0xc0000fa000], a:[0xc00008e450], &a[0]:[0xc00008e450], a:[1 2], len(a): 2, cap(a): 3\n    // here we call t as a[:len(a):len(a)]\n    fmt.Printf(\"&a:[%p], t:[%p], &t[0]:[%p], t:%v, len(a): %d, cap(a): %d \\n\", &a, a[:len(a):len(a)], &a[:len(a):len(a)][0], a[:len(a):len(a)], len(a[:len(a):len(a)]), cap(a[:len(a):len(a)]))\n    // &a:[0xc0000fa000], t:[0xc00008e450], &t[0]:[0xc00008e450], t:[1 2], len(a): 2, cap(a): 2\n    a = append(a[:len(a):len(a)], \"4\")\n    fmt.Printf(\"&a:[%p], a:[%p], &a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\", &a, a, &a[0], a, len(a), cap(a))\n    // 数组第一个元素的指针发生了改变，指向数组的指针没有改变，说明数组扩容重新分配了数组地址\n    // &a:[0xc0000fa000], a:[0xc000100000], &a[0]:[0xc000100000], a:[1 2 4], len(a): 3, cap(a): 4\n}\n```\n","slug":"go_slice","published":1,"updated":"2019-05-29T08:30:48.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxh80ekr00036c9vm1w08jco","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>使用 append 可以在 slice 之后追加元素，例如</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">result := <span class=\"built_in\">append</span>(a,<span class=\"number\">4</span>)</span><br><span class=\"line\">fmt.Println(result) <span class=\"comment\">// output: [1 2 3 4]</span></span><br></pre></td></tr></table></figure>\n<p>问题在于，进行这种操作时，原来的 slice（即 a）所基于的数组值会不会发生变化？在 Golang 中，如果有多个 slice 基于同一个数组，则这些 slice 的数据是共享的（而不是每个 slice 复制一份，复制的是指针）。也就说，如果改变了数组的内容，则基于它的所有 slice 的值都会发生变化。这段代码中 a 的值没有发生变化，是有原因的。</p>\n<a id=\"more\"></a>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>回答这个问题，首先需要了解 append 函数的实现原理：</p>\n<ul>\n<li>如果 a 的 cap 够用，则会直接在 a 指向的数组后面追加元素，返回的 slice 和原来的 slice 是同一个对象。显然，这种情况下原来的 slice 值发生了变化！</li>\n<li>如果 a 的 cap 不够用（上述代码就是这种情况），则会重新分配一个数组空间来存储数据，并且返回指向新数组的 slice。这时候原来的 a 指向的数组并没有发生任何变化！（后面讲给出例子）</li>\n<li>当然，在任何情况下，append 返回的结果都是追加后的 slice，这一点没有问题。</li>\n</ul>\n<p>以下代码用来验证这个问题：</p>\n<ol>\n<li>在函数 <code>test1</code> 中 a 的值发生变化了，因为 a[:2] 的 len=2，cap=3，所以追加一个元素时，cap 依然够用</li>\n<li>在函数 <code>test2</code> 中 a 的值没有发生变化，因为 a[:2] 的 cap 不够用，因此会重新分配一个数组用来存储新的数据，而 a 存储的仍然是老数组</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    a := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;a:[%p], a:[%p], &amp;a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;a, a, &amp;a[<span class=\"number\">0</span>], a, <span class=\"built_in\">len</span>(a), <span class=\"built_in\">cap</span>(a))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;a:[0xc0000be0e0], a:[0xc0000a0140], &amp;a[0]:[0xc0000a0140], a:[1 2 3], len(a): 3, cap(a): 3</span></span><br><span class=\"line\">    a = <span class=\"built_in\">append</span>(a[:<span class=\"number\">2</span>], <span class=\"number\">4</span>)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;a:[%p], a:[%p], &amp;a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;a, a, &amp;a[<span class=\"number\">0</span>], a, <span class=\"built_in\">len</span>(a), <span class=\"built_in\">cap</span>(a))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;a:[0xc0000be0e0], a:[0xc0000a0140], &amp;a[0]:[0xc0000a0140], a:[1 2 4], len(a): 3, cap(a): 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指向 a 的指针没有发生变化，数组 a 的地址没有发生变化，是因为 cap 够用，不需要扩容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    a := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;a:[%p], a:[%p], &amp;a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;a, a, &amp;a[<span class=\"number\">0</span>], a, <span class=\"built_in\">len</span>(a), <span class=\"built_in\">cap</span>(a))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;a:[0xc0000b80e0], a:[0xc00009a140], &amp;a[0]:[0xc00009a140], a:[1 2 3], len(a): 3, cap(a): 3</span></span><br><span class=\"line\">    c := <span class=\"built_in\">append</span>(a[:<span class=\"number\">2</span>], []<span class=\"keyword\">int</span>&#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;...)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;a:[%p], a:[%p], &amp;a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;a, a, &amp;a[<span class=\"number\">0</span>], a, <span class=\"built_in\">len</span>(a), <span class=\"built_in\">cap</span>(a))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;a:[0xc0000b80e0], a:[0xc00009a140], &amp;a[0]:[0xc00009a140], a:[1 2 3], len(a): 3, cap(a): 3</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;c:[%p], c:[%p], &amp;c[0]:[%p], c:%v, len(c): %d, cap(c): %d \\n\"</span>, &amp;c, c, &amp;c[<span class=\"number\">0</span>], c, <span class=\"built_in\">len</span>(c), <span class=\"built_in\">cap</span>(c))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;c:[0xc0000b8140], c:[0xc0000f8000], &amp;c[0]:[0xc0000f8000], c:[1 2 4 5 6], len(c): 5, cap(c): 6</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// a 没有发生改变，因为 cap 不够用，发生了扩容，重新分配了一个数组来 append 元素，原有的 a 仍然执行原数组，而 append 返回了新分配的数组</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为了避开这个“坑“，推荐在截取 slice 时使用三参数的方式：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    a := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"len(a): %d, cap(a): %d \\n\"</span>, <span class=\"built_in\">len</span>(a), <span class=\"built_in\">cap</span>(a)) <span class=\"comment\">// len(a): 5, cap(a): 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    b := a[:<span class=\"number\">3</span>]</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"len(b): %d, cap(b): %d \\n\"</span>, <span class=\"built_in\">len</span>(b), <span class=\"built_in\">cap</span>(b)) <span class=\"comment\">// len(b): 3, cap(b): 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    c := a[:<span class=\"number\">3</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"len(c): %d, cap(c): %d \\n\"</span>, <span class=\"built_in\">len</span>(c), <span class=\"built_in\">cap</span>(c)) <span class=\"comment\">// len(c): 3, cap(c): 3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从输出结果可以看出，使用三参数方式时，截取后的 slice 的 cap 将会重新设置。如果第二个参数和第三个参数相同，那么截取后的 slice 的 len == cap，这样在执行 append 的时候一定会重新分配数组，从而保证原始的数组 a 不会发生改变。</p>\n<p>PS: 三参数表达式：b := a[start : end : capEnd]，len(b) = end - start, cap(b) = capEnd - start</p>\n<ul>\n<li>同样的分析一下数组作为参数传递所发生的事情：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;s:[%p], s:[%p], &amp;s[0]:[%p], s:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;s, s, &amp;s[<span class=\"number\">0</span>], s, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;s:[0xc0000ba0e0], s:[0xc00008e450], &amp;s[0]:[0xc00008e450], s:[1 2 3], len(a): 3, cap(a): 3</span></span><br><span class=\"line\">    <span class=\"comment\">// here we call t as s[:2]</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;s:[%p], t:[%p], &amp;t[0]:[%p], t:%v, len(s): %d, cap(s): %d \\n\"</span>, &amp;s, s[:<span class=\"number\">2</span>], &amp;s[:<span class=\"number\">2</span>][<span class=\"number\">0</span>], s[:<span class=\"number\">2</span>], <span class=\"built_in\">len</span>(s[:<span class=\"number\">2</span>]), <span class=\"built_in\">cap</span>(s[:<span class=\"number\">2</span>]))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;s:[0xc0000ba0e0], t:[0xc00008e450], &amp;t[0]:[0xc00008e450], t:[1 2], len(s): 2, cap(s): 3</span></span><br><span class=\"line\">    test(s[:<span class=\"number\">2</span>]...)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;s:[%p], s:[%p], &amp;s[0]:[%p], s:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;s, s, &amp;s[<span class=\"number\">0</span>], s, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;s:[0xc0000ba0e0], s:[0xc00008e450], &amp;s[0]:[0xc00008e450], s:[1 2 3], len(a): 3, cap(a): 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(a ...<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;a:[%p], a:[%p], &amp;a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;a, a, &amp;a[<span class=\"number\">0</span>], a, <span class=\"built_in\">len</span>(a), <span class=\"built_in\">cap</span>(a)) <span class=\"comment\">// 说明复制了一个指针，指向了数组</span></span><br><span class=\"line\">    <span class=\"comment\">// &amp;a:[0xc0000fa000], a:[0xc00008e450], &amp;a[0]:[0xc00008e450], a:[1 2], len(a): 2, cap(a): 3</span></span><br><span class=\"line\">    <span class=\"comment\">// here we call t as a[:len(a):len(a)]</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;a:[%p], t:[%p], &amp;t[0]:[%p], t:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;a, a[:<span class=\"built_in\">len</span>(a):<span class=\"built_in\">len</span>(a)], &amp;a[:<span class=\"built_in\">len</span>(a):<span class=\"built_in\">len</span>(a)][<span class=\"number\">0</span>], a[:<span class=\"built_in\">len</span>(a):<span class=\"built_in\">len</span>(a)], <span class=\"built_in\">len</span>(a[:<span class=\"built_in\">len</span>(a):<span class=\"built_in\">len</span>(a)]), <span class=\"built_in\">cap</span>(a[:<span class=\"built_in\">len</span>(a):<span class=\"built_in\">len</span>(a)]))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;a:[0xc0000fa000], t:[0xc00008e450], &amp;t[0]:[0xc00008e450], t:[1 2], len(a): 2, cap(a): 2</span></span><br><span class=\"line\">    a = <span class=\"built_in\">append</span>(a[:<span class=\"built_in\">len</span>(a):<span class=\"built_in\">len</span>(a)], <span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;a:[%p], a:[%p], &amp;a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;a, a, &amp;a[<span class=\"number\">0</span>], a, <span class=\"built_in\">len</span>(a), <span class=\"built_in\">cap</span>(a))</span><br><span class=\"line\">    <span class=\"comment\">// 数组第一个元素的指针发生了改变，指向数组的指针没有改变，说明数组扩容重新分配了数组地址</span></span><br><span class=\"line\">    <span class=\"comment\">// &amp;a:[0xc0000fa000], a:[0xc000100000], &amp;a[0]:[0xc000100000], a:[1 2 4], len(a): 3, cap(a): 4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>使用 append 可以在 slice 之后追加元素，例如</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">result := <span class=\"built_in\">append</span>(a,<span class=\"number\">4</span>)</span><br><span class=\"line\">fmt.Println(result) <span class=\"comment\">// output: [1 2 3 4]</span></span><br></pre></td></tr></table></figure>\n<p>问题在于，进行这种操作时，原来的 slice（即 a）所基于的数组值会不会发生变化？在 Golang 中，如果有多个 slice 基于同一个数组，则这些 slice 的数据是共享的（而不是每个 slice 复制一份，复制的是指针）。也就说，如果改变了数组的内容，则基于它的所有 slice 的值都会发生变化。这段代码中 a 的值没有发生变化，是有原因的。</p>","more":"<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>回答这个问题，首先需要了解 append 函数的实现原理：</p>\n<ul>\n<li>如果 a 的 cap 够用，则会直接在 a 指向的数组后面追加元素，返回的 slice 和原来的 slice 是同一个对象。显然，这种情况下原来的 slice 值发生了变化！</li>\n<li>如果 a 的 cap 不够用（上述代码就是这种情况），则会重新分配一个数组空间来存储数据，并且返回指向新数组的 slice。这时候原来的 a 指向的数组并没有发生任何变化！（后面讲给出例子）</li>\n<li>当然，在任何情况下，append 返回的结果都是追加后的 slice，这一点没有问题。</li>\n</ul>\n<p>以下代码用来验证这个问题：</p>\n<ol>\n<li>在函数 <code>test1</code> 中 a 的值发生变化了，因为 a[:2] 的 len=2，cap=3，所以追加一个元素时，cap 依然够用</li>\n<li>在函数 <code>test2</code> 中 a 的值没有发生变化，因为 a[:2] 的 cap 不够用，因此会重新分配一个数组用来存储新的数据，而 a 存储的仍然是老数组</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    a := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;a:[%p], a:[%p], &amp;a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;a, a, &amp;a[<span class=\"number\">0</span>], a, <span class=\"built_in\">len</span>(a), <span class=\"built_in\">cap</span>(a))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;a:[0xc0000be0e0], a:[0xc0000a0140], &amp;a[0]:[0xc0000a0140], a:[1 2 3], len(a): 3, cap(a): 3</span></span><br><span class=\"line\">    a = <span class=\"built_in\">append</span>(a[:<span class=\"number\">2</span>], <span class=\"number\">4</span>)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;a:[%p], a:[%p], &amp;a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;a, a, &amp;a[<span class=\"number\">0</span>], a, <span class=\"built_in\">len</span>(a), <span class=\"built_in\">cap</span>(a))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;a:[0xc0000be0e0], a:[0xc0000a0140], &amp;a[0]:[0xc0000a0140], a:[1 2 4], len(a): 3, cap(a): 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指向 a 的指针没有发生变化，数组 a 的地址没有发生变化，是因为 cap 够用，不需要扩容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    a := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;a:[%p], a:[%p], &amp;a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;a, a, &amp;a[<span class=\"number\">0</span>], a, <span class=\"built_in\">len</span>(a), <span class=\"built_in\">cap</span>(a))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;a:[0xc0000b80e0], a:[0xc00009a140], &amp;a[0]:[0xc00009a140], a:[1 2 3], len(a): 3, cap(a): 3</span></span><br><span class=\"line\">    c := <span class=\"built_in\">append</span>(a[:<span class=\"number\">2</span>], []<span class=\"keyword\">int</span>&#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;...)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;a:[%p], a:[%p], &amp;a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;a, a, &amp;a[<span class=\"number\">0</span>], a, <span class=\"built_in\">len</span>(a), <span class=\"built_in\">cap</span>(a))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;a:[0xc0000b80e0], a:[0xc00009a140], &amp;a[0]:[0xc00009a140], a:[1 2 3], len(a): 3, cap(a): 3</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;c:[%p], c:[%p], &amp;c[0]:[%p], c:%v, len(c): %d, cap(c): %d \\n\"</span>, &amp;c, c, &amp;c[<span class=\"number\">0</span>], c, <span class=\"built_in\">len</span>(c), <span class=\"built_in\">cap</span>(c))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;c:[0xc0000b8140], c:[0xc0000f8000], &amp;c[0]:[0xc0000f8000], c:[1 2 4 5 6], len(c): 5, cap(c): 6</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// a 没有发生改变，因为 cap 不够用，发生了扩容，重新分配了一个数组来 append 元素，原有的 a 仍然执行原数组，而 append 返回了新分配的数组</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为了避开这个“坑“，推荐在截取 slice 时使用三参数的方式：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    a := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"len(a): %d, cap(a): %d \\n\"</span>, <span class=\"built_in\">len</span>(a), <span class=\"built_in\">cap</span>(a)) <span class=\"comment\">// len(a): 5, cap(a): 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    b := a[:<span class=\"number\">3</span>]</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"len(b): %d, cap(b): %d \\n\"</span>, <span class=\"built_in\">len</span>(b), <span class=\"built_in\">cap</span>(b)) <span class=\"comment\">// len(b): 3, cap(b): 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    c := a[:<span class=\"number\">3</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"len(c): %d, cap(c): %d \\n\"</span>, <span class=\"built_in\">len</span>(c), <span class=\"built_in\">cap</span>(c)) <span class=\"comment\">// len(c): 3, cap(c): 3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从输出结果可以看出，使用三参数方式时，截取后的 slice 的 cap 将会重新设置。如果第二个参数和第三个参数相同，那么截取后的 slice 的 len == cap，这样在执行 append 的时候一定会重新分配数组，从而保证原始的数组 a 不会发生改变。</p>\n<p>PS: 三参数表达式：b := a[start : end : capEnd]，len(b) = end - start, cap(b) = capEnd - start</p>\n<ul>\n<li>同样的分析一下数组作为参数传递所发生的事情：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;s:[%p], s:[%p], &amp;s[0]:[%p], s:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;s, s, &amp;s[<span class=\"number\">0</span>], s, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;s:[0xc0000ba0e0], s:[0xc00008e450], &amp;s[0]:[0xc00008e450], s:[1 2 3], len(a): 3, cap(a): 3</span></span><br><span class=\"line\">    <span class=\"comment\">// here we call t as s[:2]</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;s:[%p], t:[%p], &amp;t[0]:[%p], t:%v, len(s): %d, cap(s): %d \\n\"</span>, &amp;s, s[:<span class=\"number\">2</span>], &amp;s[:<span class=\"number\">2</span>][<span class=\"number\">0</span>], s[:<span class=\"number\">2</span>], <span class=\"built_in\">len</span>(s[:<span class=\"number\">2</span>]), <span class=\"built_in\">cap</span>(s[:<span class=\"number\">2</span>]))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;s:[0xc0000ba0e0], t:[0xc00008e450], &amp;t[0]:[0xc00008e450], t:[1 2], len(s): 2, cap(s): 3</span></span><br><span class=\"line\">    test(s[:<span class=\"number\">2</span>]...)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;s:[%p], s:[%p], &amp;s[0]:[%p], s:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;s, s, &amp;s[<span class=\"number\">0</span>], s, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;s:[0xc0000ba0e0], s:[0xc00008e450], &amp;s[0]:[0xc00008e450], s:[1 2 3], len(a): 3, cap(a): 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(a ...<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;a:[%p], a:[%p], &amp;a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;a, a, &amp;a[<span class=\"number\">0</span>], a, <span class=\"built_in\">len</span>(a), <span class=\"built_in\">cap</span>(a)) <span class=\"comment\">// 说明复制了一个指针，指向了数组</span></span><br><span class=\"line\">    <span class=\"comment\">// &amp;a:[0xc0000fa000], a:[0xc00008e450], &amp;a[0]:[0xc00008e450], a:[1 2], len(a): 2, cap(a): 3</span></span><br><span class=\"line\">    <span class=\"comment\">// here we call t as a[:len(a):len(a)]</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;a:[%p], t:[%p], &amp;t[0]:[%p], t:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;a, a[:<span class=\"built_in\">len</span>(a):<span class=\"built_in\">len</span>(a)], &amp;a[:<span class=\"built_in\">len</span>(a):<span class=\"built_in\">len</span>(a)][<span class=\"number\">0</span>], a[:<span class=\"built_in\">len</span>(a):<span class=\"built_in\">len</span>(a)], <span class=\"built_in\">len</span>(a[:<span class=\"built_in\">len</span>(a):<span class=\"built_in\">len</span>(a)]), <span class=\"built_in\">cap</span>(a[:<span class=\"built_in\">len</span>(a):<span class=\"built_in\">len</span>(a)]))</span><br><span class=\"line\">    <span class=\"comment\">// &amp;a:[0xc0000fa000], t:[0xc00008e450], &amp;t[0]:[0xc00008e450], t:[1 2], len(a): 2, cap(a): 2</span></span><br><span class=\"line\">    a = <span class=\"built_in\">append</span>(a[:<span class=\"built_in\">len</span>(a):<span class=\"built_in\">len</span>(a)], <span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"&amp;a:[%p], a:[%p], &amp;a[0]:[%p], a:%v, len(a): %d, cap(a): %d \\n\"</span>, &amp;a, a, &amp;a[<span class=\"number\">0</span>], a, <span class=\"built_in\">len</span>(a), <span class=\"built_in\">cap</span>(a))</span><br><span class=\"line\">    <span class=\"comment\">// 数组第一个元素的指针发生了改变，指向数组的指针没有改变，说明数组扩容重新分配了数组地址</span></span><br><span class=\"line\">    <span class=\"comment\">// &amp;a:[0xc0000fa000], a:[0xc000100000], &amp;a[0]:[0xc000100000], a:[1 2 4], len(a): 3, cap(a): 4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"gRPC 详解","date":"2019-04-30T10:21:44.000Z","toc":true,"_content":"\n## 什么是 gRPC？\n\n### 指南\n\n这篇文档向你介绍了什么是 gRPC 和 protocol buffers。gRPC 可以使用 protocol buffers 作为其接口定义语言（IDL）和底层消息交换格式。如果你是 gRPC 和 protocol buffers 新手，那么读这篇文档可以帮助到你，如果你只是想看看 gRPC 是怎么运作的，直接看[快速开始](https://grpc.io/docs/quickstart/)。\n\n<!-- more -->\n\n### 概述\n\n在 gRPC 中，Client 应用程序可以直接调用不同机器上的 Server 应用程序上的方法，就像它是一个本地对象一样，这使您更容易创建分布式应用程序和服务。与许多 RPC 系统一样，gRPC 基于定义服务的思想，指定可以使用参数和返回类型远程调用的方法。在 Server 端， Server 实现此接口并运行 gRPC 服务器来处理Client 调用。在Client 端，Client 有一个 Stub (在某些语言中称为 Client)，它提供与 Server 相同的方法。\n\n{% asset_img overview.png This is an image %}\n\ngRPC clients 和 servers 可以在各种环境中运行并相互通信 - 从 Google 中的服务器到你自己的桌面 - 并且可以用 gPRC 支持的任何语言编写。因此，例如，你可以使用 Java 轻松地创建一个 gRPC server，clints 端使用 GO、Python 或者 Ruby。除此之外，最新的 Google APIs 将具有接口的 gRPC 版本，让你可以轻松地将 Google 功能构建到应用程序中去。\n\n### 使用 Protocol Buffers\n\ngRPC 默认使用 [protocol buffers](https://developers.google.com/protocol-buffers/docs/overview)，用于序列化结构化数据的成熟开源机制（尽管它可以与其他数据格式，如：JSON 一起使用）。这是一个如何工作的快速介绍。如果你已经熟悉 protocol buffers，可以随时跳到下一部分。\n\n使用 protocol buffers 的第一步是定义要在 proto 文件中序列化的数据的结构：这是一个带 .proto 扩展名的普通文本文件。 protocol buffers 数据被构造为消息，其中每个消息是包含一系列称为字段的 name-value 对的信息的小逻辑记录。这是一个简单的例子：\n\n```go\nmessage Person {\n  string name = 1;\n  int32 id = 2;\n  bool has_ponycopter = 3;\n}\n```\n\n然后，一旦指定了数据结构，就可以使用 protocol buffers 编译器 `protoc` 从原型定义生成首选语言的数据访问类。这些为每个字段（如 `name()` 和 `set_name()`）提供了简单的访问器，以及将整个结构序列化/解析为原始字节的方法 - 例如，如果您选择的语言是 C++，则在上面的示例中运行编译器将生成上课了 `Person`。然后，您可以在应用程序中使用此类来填充，序列化和检索 Person protocol buffers 消息。\n\n正如您将在我们的示例中更详细地看到的那样，您可以在普通的 proto 文件中定义 gRPC 服务，并将 RPC 方法参数和返回类型指定为 protocol buffers 消息：\n\n```go\n// The greeter service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\ngRPC 还使用 protoc 特殊的 gRPC 插件从 proto 文件生成代码。但是，使用 gRPC 插件，您将获得生成的 gRPC 客户端和服务器代码，以及用于填充，序列化和检索消息类型的常规 protocol buffers 代码。我们将在下面更详细地看一下这个例子。\n\n你可以在 [Protocol Buffers 文档中](https://developers.google.com/protocol-buffers/docs/overview) 找到有关 protocol buffers 的更多信息，并了解如何使用 gRPC 插件快速获取和安装 protoc。\n\n### Protocol Buffers 版本\n\n虽然 protocol buffers 已经供开源用户使用了一段时间，但我们的实例使用了一种新的 protocol buffers 协议，称作 proto3，它具有略微简化的语法，一些有用的新功能并支持更多的语言。目前支持 Java、C++、Python、Object-C、C#、a little-runtime（Android Java）、Ruby、和 JavaScript，这些来自 [protocol buffers GitHub Repo](https://github.com/protocolbuffers/protobuf/releases)。也支持来自 [golang/protobuf GitHub repo](https://github.com/golang/protobuf) 的 Go 语言生成器，还有更多的语言正在开发中。你可以在 [proto3 语言指南](https://developers.google.com/protocol-buffers/docs/proto3)和每种语言的[参考文档](https://developers.google.com/protocol-buffers/docs/reference/overview)中找到更多信息。参考文档还包括 .proto 文件格式的[正式的规范](https://developers.google.com/protocol-buffers/docs/reference/proto3-spec)。\n\n通常情况下，虽然你可以使用 proto2（当前的默认版本），但我们建议你将 proto3 和 gRPC 一起使用，因为它允许你使用全系列的 gRPC 支持的语言，以避免与 proto2 client 与 proto3 server 通信的兼容性问题，反之亦然。\n\n## gRPC 概念\n\n本文档介绍了一些关键的 gRPC 概念，概述了 gRPC 的体系结构和 RPC 生命周期。\n\n### 概览\n\n#### 服务定义\n\n与许多 RPC 系统一样，gRPC 基于定义服务的思想，指定可以使用其参数和返回类型远程调用的方法。默认情况下，gRPC 使用 protocol buffers 作为接口定义语言（IDL）来描述服务接口和有效负载消息的结构。如果需要，可以使用其他替代方案。\n\n```go\nservice HelloService {\n  rpc SayHello (HelloRequest) returns (HelloResponse);\n}\n\nmessage HelloRequest {\n  string greeting = 1;\n}\n\nmessage HelloResponse {\n  string reply = 1;\n}\n```\n\ngRPC 允许你定义四种服务方法：\n\n- 一元 RPCs（Unary RPCs），客户端向服务器发送单个请求并返回单个响应，就像正常的函数调用一样。\n\n```go\nrpc SayHello(HelloRequest) returns (HelloResponse){\n}\n```\n\n服务器流式 RPC（Server streaming RPCs），客户端向服务器发送请求并获取流以读取消息序列。客户端从返回的流中读取，直到没有更多消息。gRPC 保证单个 RPC 调用中的消息排序。\n\n```go\nrpc LotsOfReplies(HelloRequest) returns (stream HelloResponse){\n}\n```\n\n客户端流式 RPC（Client streaming RPCs），客户端再次使用提供的流写入一系列消息并将其发送到服务器。一旦客户端写完消息，它就等待服务器读取它们并返回它的响应。gRPC 再次保证在单个 RPC 调用中的消息排序。\n\n```go\nrpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse) {\n}\n```\n\n双向流式 RPC（Bidirectional streaming RPCs），双方使用读写流发送一系列消息。这两个流独立运行，因此客户端和服务器可以按照自己喜欢的顺序进行读写：例如，服务器可以在写入响应之前等待接收所有客户端消息，或者它可以交替地读取消息然后写入消息，或者其他一些读写组合。保留每个流中的消息顺序。\n\n```go\nrpc BidiHello(stream HelloRequest) returns (stream HelloResponse){\n}\n```\n\n我们将在下面的 RPC 生命周期部分中更详细地介绍不同类型的RPC。\n\n#### 使用 API\n\n从 .proto 文件中的服务定义开始，gRPC 提供了生成客户端和服务器端代码的 protocol buffer 编译器插件。gRPC 用户通常在客户端调用这些 API，并在服务器端实现相应的 API。\n\n- 在服务器端，服务器实现服务声明的方法，并运行 gRPC 服务器来处理客户端调用。gRPC 基础结构解码传入请求，执行服务方法并对服务响应进行编码\n- 在客户端，客户端有一个称为存根的本地对象（stub）（对于某些语言，首选术语是 client），它实现与服务相同的方法。然后，客户端可以在本地对象上调用这些方法，将调用的参数包装在适当的 protocol buffer 消息类型中 - gRPC在将请求发送到服务器并返回服务器的 protocol buffer 响应之后查看。\n\n#### 同步 vs 异步\n\n在响应从服务器到达之前阻塞的同步 RPC 调用最接近 RPC 所期望的过程调用的抽象。另一方面，网络本质上是异步的，在许多情况下，能够在不阻塞当前线程的情况下启动 RPC 非常有用。\n\n大多数语言的 gRPC 编程表面都有同步和异步两种版本。您可以在每种语言的教程和参考文档中找到更多信息（完整的参考文档即将推出）。\n\n### PRC 生命周期\n\n现在让我们仔细看看当 gRPC 客户端调用 gRPC 服务器方法时会发生什么。我们不会查看实现细节，您可以在我们特定语言的页面中找到有关这些内容的更多信息。\n\n#### Unary RPC\n\n首先让我们看一下最简单的 RPC 类型，客户端发送单个请求并返回单个响应。\n\n- 客户端在 stub/client 对象上调用方法后，将通知服务器已使用客户端带着metedata （metadata）调用了产生了一次调用，方法名称和指定的截止时间（如果适用）调用RPC 。\n\n- 然后，服务器可以立即发送回自己的初始metedata （必须在任何响应之前发送），或者等待客户端的请求消息 - 首先发生的是特定于应用程序的消息。\n\n- 一旦服务器具有客户端的请求消息，它就会执行创建和填充其响应所需的任何工作。然后将响应与状态详细信息（状态代码和可选状态消息）以及可选的尾随metedata 一起返回（如果成功）到客户端。\n\n- 如果状态为 OK，则客户端获取响应，从而完成客户端的调用。\n\n#### Server streaming RPC\n\n服务器流 RPC 类似于我们的简单示例，除了服务器在获取客户端的请求消息后发回响应流。在发回所有响应之后，服务器的状态详细信息（状态代码和可选状态消息）和可选的尾随metedata 将被发送回服务器端完成。一旦客户端拥有所有服务器的响应，客户端就会完成。\n\n#### Client streaming RPC\n\n客户端流式 RPC 也类似于我们的简单示例，除了客户端向服务器发送请求流而不是单个请求。服务器发送回单个响应，通常但不一定在收到所有客户端请求后，以及其状态详细信息和可选的尾随metedata 。\n\n#### Bidirectional streaming RPC\n\n在双向流式 RPC 中，再次调用由客户端发起的调用并且服务器端接收客户端的metedata 、方法名称和截止日期。服务器再次可以选择发回其初始metedata 或等待客户端开始发送请求。\n\n接下来会发生什么取决于应用程序，因为客户端和服务器可以按任何顺序读写 - 流完全独立地运行。因此，例如，服务器可以等到它收到所有客户端的消息之后再写入其响应，或者服务器和客户端可以“乒乓”：服务器获取请求，然后发回响应，然后客户端发送另一个基于响应的请求，等等。\n\n#### 截止日期/超时\n\ngRPC 允许客户端指定在 RPC 因错误而终止之前，他们愿意等待 RPC 完成的时间 DEADLINE_EXCEEDED。在服务器端，服务器可以查询特定 RPC 是否已超时，或者剩余多少时间来完成 RPC。\n\n指定截止日期或超时的方式因语言而异 - 例如，并非所有语言都有默认截止日期，某些语言 API 在截止日期（固定时间点）工作，某些语言 API 在超时方面工作（持续时间）。\n\n#### RPC 终止\n\n在 gRPC 中，客户端和服务器都对呼叫的成功进行独立和本地的确定，并且它们的结论可能不匹配。这意味着，例如，您可以在服务器端成功完成 RPC（“我已经发送了所有响应！”），但在客户端失败（“我的截止日期后响应已到达！”）。在客户端发送所有请求之前，服务器也可以决定完成。\n\n#### 取消 RPC\n\n客户端或服务器可以随时取消 RPC。取消立即终止 RPC，以便不再进行进一步的工作。它不是 “撤消”：取消之前所做的更改将不会被回滚。\n\n#### metedata\n\nmetedata 是以键值对列表形式的特定 RPC 调用（例如[身份验证详细信息](#身份验证)）的信息，其中键是字符串，值通常是字符串（但可以是二进制数据）。metedata 对 gRPC 本身是不透明的 - 它允许客户端提供与服务器调用相关的信息，反之亦然。\n\n对 metedata 的访问取决于语言。\n\n#### 通道（channels）\n\ngRPC channel 提供与指定主机和端口上的 gRPC 服务器的连接，并在创建客户端 stub（或某些语言中的 “client”）时使用。客户端可以指定 channel 参数来修改gRPC 的默认行为，例如打开和关闭消息压缩。一个 channel 是有状态的，包括 `connected` 和 `idle`。\n\ngRPC 如何处理关闭 channels 与语言有关。某些语言还允许查询 channels 状态。\n\n## 身份验证\n\n### 认证\n\n本文档概述了 gRPC 身份验证，包括我们内置的支持身份验证机制，如何插入您自己的身份验证系统，以及如何在我们支持的语言中使用 gRPC 身份验证的示例。\n\n### 总览\n\ngRPC 旨在与各种身份验证机制配合使用，可以轻松安全地使用 gRPC 与其他系统进行通信。您可以使用我们支持的机制 - 带或不带基于 Google 令牌的身份验证的 SSL / TLS - 或者您可以通过扩展我们提供的代码来插入您自己的身份验证系统。\n\ngRPC 还提供了一个简单的身份验证 API，可让您 `Credentials` 在创建 channel 或调用时提供所有必要的身份验证信息。\n\n### 支持的身份验证机制\n\ngRPC 内置了以下身份验证机制：\n\n- SSL / TLS：gRPC具有SSL / TLS集成，并促进使用SSL / TLS对服务器进行身份验证，并加密客户端和服务器之间交换的所有数据。可选机制可供客户端提供相互身份验证的证书。\n\n- 使用 Google 进行基于令牌的身份验证：gRPC 提供了一种通用机制如（下所述），用于将基于 metedata 的凭据附加到请求和响应。某些身份验证流程提供了在通过 gRPC 访问 Google API 时获取访问令牌（通常是 OAuth2 令牌）的额外支持：您可以在下面的代码示例中看到它的工作原理。通常，必须使用此机制以及通道上的 SSL / TLS - Google 不允许没有 SSL / TLS 的连接，并且大多数 gRPC 语言实现都不允许您在未加密的通道上发送凭据。\n\n警告：Google 凭据只能用于连接 Google 服务。将 Google 发布的 OAuth2 令牌发送到非 Google 服务可能会导致此令牌被盗并用于冒充客户端到 Google 服务。\n\n### 身份验证 API\n\ngRPC 提供了一个基于 Credentials 对象统一概念的简单身份验证 API，可以在创建整个 gRPC channel 或单个 call 时使用。\n\n#### 凭证类型\n\n凭证可以有两种类型：\n\n- Channel credentials，附加到 `Channel`，例如 SSL 凭据。\n- Call credentials，附加到 call（或者 C++ 中的 `ClientContext`）。\n\n您还可以将这些组合在一起成为 `CompositeChannelCredentials`，例如，您可以指定 channel 的 SSL 详细信息以及在 channel 上进行的每个 call 的凭据。一个 `CompositeChannelCredentials` 将 `ChannelCredentials` 和 `CallCredentials` 连接到一起，创建一个新的 `ChannelCredentials`。结果将 `CallCredentials` 通过在 channel 上进行的每次调用发送与组合相关的认证数据。\n\n例如，从 `SslCredentials` 和`AccessTokenCredentials` 你可以创建一个 `ChannelCredentials`。应用于 a 的结果 `Channel` 将为此通道上的每个调用发送相应的访问令牌。\n\n单独的 `CallCredentials` 也可以使用 `CompositeCallCredentials`。`CallCredentials` 在调用中使用时产生的结果将触发发送与两者相关联的认证数据。\n\n#### 使用客户端 SSL/TLS\n\n现在让我们看一下如何 Credentials 使用我们支持的 auth 机制之一。这是最简单的身份验证方案，客户端只想验证服务器并加密所有数据。该示例使用的是 C ++，但所有语言的 API 都类似：您可以在下面的示例部分中看到如何在更多语言中启用SSL / TLS。\n\n```c++\n// Create a default SSL ChannelCredentials object.\nauto channel_creds = grpc::SslCredentials(grpc::SslCredentialsOptions());\n// Create a channel using the credentials created in the previous step.\nauto channel = grpc::CreateChannel(server_name, channel_creds);\n// Create a stub on the channel.\nstd::unique_ptr<Greeter::Stub> stub(Greeter::NewStub(channel));\n// Make actual RPC calls on the stub.\ngrpc::Status s = stub->sayHello(&context, *request, response);\n```\n\n对于高级用例，例如修改根 CA 或者使用客户端证书，可以在 `SslCredentialsOptions` 传递给工厂方法的参数中设置相应的选项。\n\n使用基于 Google 令牌的身份验证\n\ngRPC 应用程序可以使用简单的 API 创建凭据，该凭据可用于在各种部署方案中与 Google 进行身份验证。同样，我们的示例是在 C++ 中，但你可以在我们的示例部分找到其他语言的示例。\n\n```c++\nauto creds = grpc::GoogleDefaultCredentials();\n// Create a channel, stub and make RPC calls (same as in the previous example)\nauto channel = grpc::CreateChannel(server_name, creds);\nstd::unique_ptr<Greeter::Stub> stub(Greeter::NewStub(channel));\ngrpc::Status s = stub->sayHello(&context, *request, response);\n```\n\n这个通道凭据对象适用于服务账户里的应用程序以及在 [Google Compute Engine（GCE）中](https://cloud.google.com/compute/)运行的应用程序。在前一种情况下，服务账户的私钥是从环境变量中指定的文件加载的 `GOOGLE_APPLICATION_CREDENTIALS`。秘钥用于生成附加到相应信道上的每个传出 RPC 的承载令牌。\n\n对于在 GCE 中运行的应用程序，可以在 VM 设置期间配置默认服务账户和相应的 OAuth2 范围。在运行时，此凭据处理与身份验证系统的通信以获取 OAuth2 访问令牌，并将它们附加到相应通道上每个传出 RPC。\n\n#### 扩展 gRPC 以支持其他身份验证机制\n\nCredentials 插件 API 允许开发人员插入它们自己的凭据类型。这包括：\n\n- `MetadataCredentialsPlugin` 抽象类，其中包含纯虚 `GetMetadata` 需要由开发者创建的子类来实现的方法。\n\n- `MetadataCredentialsFromPlugin` 函数，它从 `MetadataCredentialsPlugin` 创建了一个 `CallCredentials`。\n\n下面是一个简单的凭证插件的例子，它在自定义头中设置了一个身份验证票据。\n\n```c++\nclass MyCustomAuthenticator : public grpc::MetadataCredentialsPlugin {\n public:\n  MyCustomAuthenticator(const grpc::string& ticket) : ticket_(ticket) {}\n\n  grpc::Status GetMetadata(\n      grpc::string_ref service_url, grpc::string_ref method_name,\n      const grpc::AuthContext& channel_auth_context,\n      std::multimap<grpc::string, grpc::string>* metadata) override {\n    metadata->insert(std::make_pair(\"x-custom-auth-ticket\", ticket_));\n    return grpc::Status::OK;\n  }\n\n private:\n  grpc::string ticket_;\n};\n\nauto call_creds = grpc::MetadataCredentialsFromPlugin(\n    std::unique_ptr<grpc::MetadataCredentialsPlugin>(\n        new MyCustomAuthenticator(\"super-secret-ticket\")));\n```\n\n通过在核心级插入 gRPC 凭证实现，可以实现更深入的集成。gRPC 内部还允许使用其他加密机制切换 SSL/TLS。\n\n### 例子\n\n这些认证机制将在所有 gRPC 支持的语言中可用。下面几节将演示上述身份验证和授权特性如何出现在每种语言中:很快就会有更多的语言出现。\n\n#### Go\n\n基本情况 - 没有加密或者身份验证\n\nClient:\n\n```go\nconn, _ := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n// error handling omitted\nclient := pb.NewGreeterClient(conn)\n// ...\n```\n\nServer:\n\n```go\ns := grpc.NewServer()\nlis, _ := net.Listen(\"tcp\", \"localhost:50051\")\n// error handling omitted\ns.Serve(lis)\n```\n\n使用服务器身份验证 SSL/TLS\n\nClient:\n\n```go\ncreds, _ := credentials.NewClientTLSFromFile(certFile, \"\")\nconn, _ := grpc.Dial(\"localhost:50051\", grpc.WithTransportCredentials(creds))\n// error handling omitted\nclient := pb.NewGreeterClient(conn)\n// ...\n```\n\nServer:\n\n```go\ncreds, _ := credentials.NewServerTLSFromFile(certFile, keyFile)\ns := grpc.NewServer(grpc.Creds(creds))\nlis, _ := net.Listen(\"tcp\", \"localhost:50051\")\n// error handling omitted\ns.Serve(lis)\n```\n\n通过 Google 验证\n\n```go\npool, _ := x509.SystemCertPool()\n// error handling omitted\ncreds := credentials.NewClientTLSFromCert(pool, \"\")\nperRPC, _ := oauth.NewServiceAccountFromFile(\"service-account.json\", scope)\nconn, _ := grpc.Dial(\n\t\"greeter.googleapis.com\",\n\tgrpc.WithTransportCredentials(creds),\n\tgrpc.WithPerRPCCredentials(perRPC),\n)\n// error handling omitted\nclient := pb.NewGreeterClient(conn)\n// ...\n```\n\n#### Ruby\n\n基本情况 - 没有加密或者身份验证\n\n```ruby\nstub = Helloworld::Greeter::Stub.new('localhost:50051', :this_channel_is_insecure)\n...\n```\n\n使用服务器身份验证 SSL/TLS\n\n```ruby\ncreds = GRPC::Core::Credentials.new(load_certs)  # load_certs typically loads a CA roots file\nstub = Helloworld::Greeter::Stub.new('myservice.example.com', creds)\n```\n\n通过 Google 验证\n\n```ruby\nrequire 'googleauth'  # from http://www.rubydoc.info/gems/googleauth/0.1.0\n...\nssl_creds = GRPC::Core::ChannelCredentials.new(load_certs)  # load_certs typically loads a CA roots file\nauthentication = Google::Auth.get_application_default()\ncall_creds = GRPC::Core::CallCredentials.new(authentication.updater_proc)\ncombined_creds = ssl_creds.compose(call_creds)\nstub = Helloworld::Greeter::Stub.new('greeter.googleapis.com', combined_creds)\n```\n\n#### C++\n\n基本情况 - 没有加密或者身份验证\n\n```c++\nauto channel = grpc::CreateChannel(\"localhost:50051\", InsecureChannelCredentials());\nstd::unique_ptr<Greeter::Stub> stub(Greeter::NewStub(channel));\n...\n```\n\n使用服务器身份验证 SSL/TLS\n\n```c++\nauto channel_creds = grpc::SslCredentials(grpc::SslCredentialsOptions());\nauto channel = grpc::CreateChannel(\"myservice.example.com\", channel_creds);\nstd::unique_ptr<Greeter::Stub> stub(Greeter::NewStub(channel));\n...\n```\n\n通过 Google 验证\n\n```c++\nauto creds = grpc::GoogleDefaultCredentials();\nauto channel = grpc::CreateChannel(\"greeter.googleapis.com\", creds);\nstd::unique_ptr<Greeter::Stub> stub(Greeter::NewStub(channel));\n...\n```\n\n#### C#\n\n基本情况 - 没有加密或者身份验证\n\n```c#\nvar channel = new Channel(\"localhost:50051\", ChannelCredentials.Insecure);\nvar client = new Greeter.GreeterClient(channel);\n...\n```\n\n使用服务器身份验证 SSL/TLS\n\n```c#\nvar channelCredentials = new SslCredentials(File.ReadAllText(\"roots.pem\"));  // Load a custom roots file.\nvar channel = new Channel(\"myservice.example.com\", channelCredentials);\nvar client = new Greeter.GreeterClient(channel);\n\n```\n\n通过 Google 验证\n\n```c#\nusing Grpc.Auth;  // from Grpc.Auth NuGet package\n...\n// Loads Google Application Default Credentials with publicly trusted roots.\nvar channelCredentials = await GoogleGrpcCredentials.GetApplicationDefaultAsync();\n\nvar channel = new Channel(\"greeter.googleapis.com\", channelCredentials);\nvar client = new Greeter.GreeterClient(channel);\n...\n```\n\n验证单个 RPC 调用\n\n```c#\nvar channel = new Channel(\"greeter.googleapis.com\", new SslCredentials());  // Use publicly trusted roots.\nvar client = new Greeter.GreeterClient(channel);\n...\nvar googleCredential = await GoogleCredential.GetApplicationDefaultAsync();\nvar result = client.SayHello(request, new CallOptions(credentials: googleCredential.ToCallCredentials()));\n...\n```\n\n#### Python\n\n基本情况 - 没有加密或者身份验证\n\n```python\nimport grpc\nimport helloworld_pb2\n\nchannel = grpc.insecure_channel('localhost:50051')\nstub = helloworld_pb2.GreeterStub(channel)\n```\n\n使用服务器身份验证 SSL/TLS\n\nClient:\n\n```python\nimport grpc\nimport helloworld_pb2\n\nwith open('roots.pem', 'rb') as f:\n    creds = grpc.ssl_channel_credentials(f.read())\nchannel = grpc.secure_channel('myservice.example.com:443', creds)\nstub = helloworld_pb2.GreeterStub(channel)\n```\n\nServer:\n\n```python\nimport grpc\nimport helloworld_pb2\nfrom concurrent import futures\n\nserver = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\nwith open('key.pem', 'rb') as f:\n    private_key = f.read()\nwith open('chain.pem', 'rb') as f:\n    certificate_chain = f.read()\nserver_credentials = grpc.ssl_server_credentials( ( (private_key, certificate_chain), ) )\n# Adding GreeterServicer to server omitted\nserver.add_secure_port('myservice.example.com:443', server_credentials)\nserver.start()\n# Server sleep omitted\n```\n\n使用 JWT 与 Google 进行身份验证\n\n```python\nimport grpc\nimport helloworld_pb2\n\nfrom google import auth as google_auth\nfrom google.auth import jwt as google_auth_jwt\nfrom google.auth.transport import grpc as google_auth_transport_grpc\n\ncredentials, _ = google_auth.default()\njwt_creds = google_auth_jwt.OnDemandCredentials.from_signing_credentials(\n    credentials)\nchannel = google_auth_transport_grpc.secure_authorized_channel(\n    jwt_creds, None, 'greeter.googleapis.com:443')\nstub = helloworld_pb2.GreeterStub(channel)\n```\n\n使用 Oauth2 令牌通过 Google 进行身份验证\n\n```python\nimport grpc\nimport helloworld_pb2\n\nfrom google import auth as google_auth\nfrom google.auth.transport import grpc as google_auth_transport_grpc\nfrom google.auth.transport import requests as google_auth_transport_requests\n\ncredentials, _ = google_auth.default(scopes=(scope,))\nrequest = google_auth_transport_requests.Request()\nchannel = google_auth_transport_grpc.secure_authorized_channel(\n    credentials, request, 'greeter.googleapis.com:443')\nstub = helloworld_pb2.GreeterStub(channel)\n```\n\n#### Java\n\n基本情况 - 没有加密或者身份验证\n\n```java\nManagedChannel channel = ManagedChannelBuilder.forAddress(\"localhost\", 50051)\n    .usePlaintext(true)\n    .build();\nGreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel);\n```\n\n使用服务器身份验证 SSL/TLS\n\n在 Java 中，我们建议你在 TLS 上使用 gRPC 时使用 OpenSSL。您可以在 gRPC Java [安全文档](https://github.com/grpc/grpc-java/blob/master/SECURITY.md#transport-security-tls)中找到关于安装和使用 OpenSSL 以及 Android 和非 Android Java 所需的其他库的详细信息。\n\n要在服务器上启用 TLS，需要以 PEM 格式指定证书链和私钥。这样的私钥不应该使用密码。链中的证书顺序很重要：更具体地说，顶部的证书必须是主机 CA，而最底部的证书必须是根 CA. 标准 TLS 端口是 443，但我们使用下面的8443 以避免需要操作系统的额外权限。\n\n```java\nServer server = ServerBuilder.forPort(8443)\n    // Enable TLS\n    .useTransportSecurity(certChainFile, privateKeyFile)\n    .addService(TestServiceGrpc.bindService(serviceImplementation))\n    .build();\nserver.start();\n```\n\n如果客户端不知道颁发证书的权限，则应分别正确配置 `SslContext` 或 `SSLSocketFactory` 提供给  `NettyChannelBuilder` 或 `OkHttpChannelBuilder`。\n\n在客户端，使用 SSL/TLS 的服务器身份验证如下所示：\n\n```java\n// With server authentication SSL/TLS\nManagedChannel channel = ManagedChannelBuilder.forAddress(\"myservice.example.com\", 443)\n    .build();\nGreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel);\n\n// With server authentication SSL/TLS; custom CA root certificates; not on Android\nManagedChannel channel = NettyChannelBuilder.forAddress(\"myservice.example.com\", 443)\n    .sslContext(GrpcSslContexts.forClient().trustManager(new File(\"roots.pem\")).build())\n    .build();\nGreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel);\n```\n\n通过 Google 验证\n\n以下代码段显示了如何使用带有服务帐户的 gRPC 调用 [Google Cloud PubSub API](https://cloud.google.com/pubsub/docs/overview)。凭据从存储在众所周知的位置的密钥加载，或者通过检测应用程序在可以自动提供应用程序的环境中运行，例如 Google Compute Engine。虽然此示例特定于 Google 及其服务，但其他服务提供商可以遵循类似的模式。\n\n```java\nGoogleCredentials creds = GoogleCredentials.getApplicationDefault();\nManagedChannel channel = ManagedChannelBuilder.forTarget(\"greeter.googleapis.com\")\n    .build();\nGreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel)\n    .withCallCredentials(MoreCallCredentials.from(creds));\n```\n\n#### Node.js\n\n基本情况 - 没有加密或者身份验证\n\n```javascript\nvar stub = new helloworld.Greeter('localhost:50051', grpc.credentials.createInsecure());\n```\n\n使用服务器身份验证 SSL/TLS\n\n```javascript\nvar ssl_creds = grpc.credentials.createSsl(root_certs);\nvar stub = new helloworld.Greeter('myservice.example.com', ssl_creds);\n```\n\n通过 Google 验证\n\n```javascript\n// Authenticating with Google\nvar GoogleAuth = require('google-auth-library'); // from https://www.npmjs.com/package/google-auth-library\n...\nvar ssl_creds = grpc.credentials.createSsl(root_certs);\n(new GoogleAuth()).getApplicationDefault(function(err, auth) {\n  var call_creds = grpc.credentials.createFromGoogleCredential(auth);\n  var combined_creds = grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);\n  var stub = new helloworld.Greeter('greeter.googleapis.com', combined_credentials);\n});\n```\n\n使用 Oauth2 令牌使用 Google 进行身份验证（传统方法）\n\n```javascript\nvar GoogleAuth = require('google-auth-library'); // from https://www.npmjs.com/package/google-auth-library\n...\nvar ssl_creds = grpc.Credentials.createSsl(root_certs); // load_certs typically loads a CA roots file\nvar scope = 'https://www.googleapis.com/auth/grpc-testing';\n(new GoogleAuth()).getApplicationDefault(function(err, auth) {\n  if (auth.createScopeRequired()) {\n    auth = auth.createScoped(scope);\n  }\n  var call_creds = grpc.credentials.createFromGoogleCredential(auth);\n  var combined_creds = grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);\n  var stub = new helloworld.Greeter('greeter.googleapis.com', combined_credentials);\n});\n\n```\n\n#### PHP\n\n基本情况 - 没有加密或者身份验证\n\n```php\n$client = new helloworld\\GreeterClient('localhost:50051', [\n    'credentials' => Grpc\\ChannelCredentials::createInsecure(),\n]);\n...\n```\n\n通过 Google 验证\n\n```php\nfunction updateAuthMetadataCallback($context)\n{\n    $auth_credentials = ApplicationDefaultCredentials::getCredentials();\n    return $auth_credentials->updateMetadata($metadata = [], $context->service_url);\n}\n$channel_credentials = Grpc\\ChannelCredentials::createComposite(\n    Grpc\\ChannelCredentials::createSsl(file_get_contents('roots.pem')),\n    Grpc\\CallCredentials::createFromPlugin('updateAuthMetadataCallback')\n);\n$opts = [\n  'credentials' => $channel_credentials\n];\n$client = new helloworld\\GreeterClient('greeter.googleapis.com', $opts);\n```\n\n使用 Oauth2 令牌使用 Google 进行身份验证（传统方法）\n\n```php\n// the environment variable \"GOOGLE_APPLICATION_CREDENTIALS\" needs to be set\n$scope = \"https://www.googleapis.com/auth/grpc-testing\";\n$auth = Google\\Auth\\ApplicationDefaultCredentials::getCredentials($scope);\n$opts = [\n  'credentials' => Grpc\\Credentials::createSsl(file_get_contents('roots.pem'));\n  'update_metadata' => $auth->getUpdateMetadataFunc(),\n];\n$client = new helloworld\\GreeterClient('greeter.googleapis.com', $opts);\n```\n\n#### Dart\n\n基本情况 - 没有加密或者身份验证\n\n```dart\nfinal channel = new ClientChannel('localhost',\n      port: 50051,\n      options: const ChannelOptions(\n          credentials: const ChannelCredentials.insecure()));\nfinal stub = new GreeterClient(channel);\n```\n\n使用服务器身份验证 SSL/TLS\n\n```dart\n// Load a custom roots file.\nfinal trustedRoot = new File('roots.pem').readAsBytesSync();\nfinal channelCredentials =\n    new ChannelCredentials.secure(certificates: trustedRoot);\nfinal channelOptions = new ChannelOptions(credentials: channelCredentials);\nfinal channel = new ClientChannel('myservice.example.com',\n    options: channelOptions);\nfinal client = new GreeterClient(channel);\n```\n\n通过 Google 验证\n\n```dart\n// Uses publicly trusted roots by default.\nfinal channel = new ClientChannel('greeter.googleapis.com');\nfinal serviceAccountJson =\n     new File('service-account.json').readAsStringSync();\nfinal credentials = new JwtServiceAccountAuthenticator(serviceAccountJson);\nfinal client =\n    new GreeterClient(channel, options: credentials.toCallOptions);\n```\n\n验证单个 RPC 调用\n\n```dart\n// Uses publicly trusted roots by default.\nfinal channel = new ClientChannel('greeter.googleapis.com');\nfinal client = new GreeterClient(channel);\n...\nfinal serviceAccountJson =\n     new File('service-account.json').readAsStringSync();\nfinal credentials = new JwtServiceAccountAuthenticator(serviceAccountJson);\nfinal response =\n    await client.sayHello(request, options: credentials.toCallOptions);\n```\n\n## 错误处理和调试\n\n### 错误处理\n\n此页面描述了gRPC如何处理错误，包括gRPC的内置错误代码。可以在[此处](https://github.com/avinassh/grpc-errors)找到不同语言的示例代码。\n\n### 标准错误模型\n\n正如您在我们的概念文档和示例中所看到的，当 gRPC 调用成功完成时，服务器会向客户端返回一个 OK 状态（取决于语言，OK 可能会或可能不会直接在您的代码中使用）。但如果调用不成功会怎样？\n\n如果发生错误，gRPC 会返回其错误状态代码之一，并带有可选的字符串错误消息，该消息提供有关所发生情况的更多详细信息。所有支持的语言中的 gRPC 客户端都可以使用错误信息。\n\n### 更丰富的错误模型\n\n上述错误模型是官方 gRPC 错误模型，受所有 gRPC 客户端/服务器库支持，并且独立于 gRPC 数据格式（无论是 protocol buffers 或者其他内容）。你可能已经注意到它非常有限，并且不包括传达错误详细信息的能力。\n\n如果你在使用 protoco buffers 的数据格式，你不妨考虑使用开发和这里所描述的由谷歌所使用的更丰富的[错误模型](https://cloud.google.com/apis/design/errors#error_model)。这个模型使服务器返回并且客户端能够使用表示为一个或多个 protobuf 消息的错误详细信息。它进一步制定了一组[标准的错误消息类型](https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto)，以满足最常见的需求（例如无效参数，配额违规和堆栈跟踪）。此额外错误信息的 protobuf 二进制编码在响应中作为尾随元数据提供。\n\n这个更丰富的错误模型已经在 C++，Go，Java，Python 和 Ruby 库中得到支持，并且至少 grpc-web 和 Nodes.js 库存在请求支持它的 issue。如果有需求，其他语言库可能会在将来添加支持，因此如果感兴趣，请检查他们的 github 存储库。但请注意，用 C 语言编写的 grpc-core 库不太可能支持它，因为它是有目的的数据格式不可知的。\n\n如果你没有使用 protocol buffers，你可以使用类似的方法（在尾随相应元数据中放置错误详细信息），但你可能需要查找或开发用于访问此数据的库支持，以便在你的实际 API 中使用它。\n\n在决定是否使用这种扩展错误模型时，需要注意一些重要的注意事项，包括：\n\n- 在错误细节有效载荷的要求和期望方面，扩展错误模型的库实现可能在语言之间不一致\n- 现有代理，记录器和其他标准 HTTP 请求处理器无法查看错误详细信息，因此无法将其用于监视或其他目的\n- 追踪者中的其他错误详细信息会干扰线头阻塞，并且由于更频繁的缓存未命中而会降低 HTTP/2 报头压缩效率\n- 较大的错误细节有效负载可能会遇到协议限制（如最大 header 大小），从而有效失去原始错误\n\n### 错误状态代码\n\ngRPC 在各种情况下引发错误，从网络故障到未经认证的连接，每个连接都与特定的状态代码相关联。所有 gRPC 语言都支持以下错误状态代码。\n\n#### 一般错误\n\n| 案件 | 状态代码|\n| :--- | :-----|\n|客户端应用程序取消请求|GRPC_STATUS_CANCELLED|\n|截止日期在服务器返回状态之前到期|GRPC_STATUS_DEADLINE_EXCEEDED|\n|在服务器上找不到的方法|GRPC_STATUS_UNIMPLEMENTED|\n|服务器关闭|GRPC_STATUS_UNAVAILABLE|\n|服务器抛出异常（或者做了除了返回状态代码以终止RPC之外的其他操作）|GRPC_STATUS_UNKNOWN|\n\n#### 网络故障\n\n| 案件 | 状态代码|\n| :--- | :-----|\n|在截止日期到期之前没有传输数据。也适用于在截止日期到期之前传输某些数据且未检测到其他故障的情况|GRPC_STATUS_DEADLINE_EXCEEDED|\n|在连接中断之前传输了一些数据（例如，请求元数据已写入TCP连接）|GRPC_STATUS_UNAVAILABLE|\n\n#### 协议错误\n\n| 案件 | 状态代码|\n| :--- | :-----|\n|无法解压缩但支持压缩算法|GRPC_STATUS_INTERNAL|\n|客户端使用的压缩机制不受服务器支持|GRPC_STATUS_UNIMPLEMENTED|\n|达到流量控制资源限制|GRPC_STATUS_RESOURCE_EXHAUSTED|\n|流量控制协议违规|GRPC_STATUS_INTERNAL|\n|解析返回状态时出错|GRPC_STATUS_UNKNOWN|\n|未经身份验证：凭据无法获取元数据|GRPC_STATUS_UNAUTHENTICATED|\n|权限元数据中的主机集无效|GRPC_STATUS_UNAUTHENTICATED|\n|解析响应协议缓冲区时出错|GRPC_STATUS_INTERNAL|\n|解析请求协议缓冲区时出错|GRPC_STATUS_INTERNAL|\n\n## 性能\n\ngRPC 旨在支持多种语言的高性能开源RPC。本文档介绍了性能基准测试工具，测试所考虑的方案以及测试基础架构。\n\n### 概览\n\ngRPC 专为分布式应用的高性能和高生产率设计而设计。持续性能基准测试是 gRPC 开发工作流程的关键部分。针对主分支每小时运行多语言性能测试，并将这些数字报告给仪表板以进行可视化。\n\n- [多语言性能仪表板 @latest_release（最新可能用稳定版）](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5636470266134528)\n- [多语言性能仪表板@master（最新开发版）](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5652536396611584)\n- [C ++详细性能仪表板@master（最新开发版）](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5685265389584384)\n\n额外的性能测试可以提供有关 CPU 使用情况的细粒度洞察。\n\n- [C ++全栈微基准测试](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5684961520648192)\n- [C核心过滤器基准测试](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5740240702537728)\n- [C Core共享组件基准测试](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5641826627223552&container=789696829&widget=512792852)\n- [C Core HTTP / 2微基准测试](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5732910535540736)\n\n### 性能测试设计\n\n每种语言都实现了一个实现 gRPC [WorkerService](https://github.com/grpc/grpc/blob/master/src/proto/grpc/testing/worker_service.proto) 的性能测试工作者 。此服务指示工作人员充当实际基准测试的客户端或服务器，表示为 [BenchmarkService](https://github.com/grpc/grpc/blob/master/src/proto/grpc/testing/benchmark_service.proto)。该服务有两种方法：\n\n- UnaryCall - 一个简单请求的一元RPC，它指定在响应中返回的字节数\n- StreamingCall - 一种流式RPC，允许重复的 ping-pongs 请求和响应消息类似于 UnaryCall\n\n![image](https://grpc.io/img/testing_framework.png)\n\n这些工作程序由[驱动程序](https://github.com/grpc/grpc/blob/master/test/cpp/qps/qps_json_driver.cc)控制，该驱动程序将该方案描述（采用 JSON 格式）和指定每个工作进程的 hots:port 的环境变量作为输入。\n\n### 正在测试的语言\n\n以下语言作为 master 上的客户端和服务器进行连续性能测试：\n\n- C++\n- Java\n- Go\n- C#\n- node.js\n- Python\n- Ruby\n\n此外，从 C core 派生的所有语言都在每次拉取请求时进行了有限的性能测试（冒烟测试）。\n\n除了作为性能测试的客户端和服务器端运行之外，所有语言都作为针对 C++ 服务器的客户端进行测试，并作为针对 C++ 客户端的服务器进行测试。此测试旨在为给定语言的客户端或服务器实现提供当前的性能上限，而无需测试另一方。\n\n虽然 PHP 或移动环境不支持 gRPC 服务器（我们的性能测试需要），但可以使用另一种语言编写的代理 WorkerService 对其客户端性能进行基准测试。此代码是为 PHP 实现的，但尚未处于连续测试模式。\n\n### 正在测试的场景\n\n有几个重要的方案正在测试中并显示在上面的仪表板中，包括以下内容：\n\n- 无争用延迟 - 只有 1 个客户端使用 StreamingCall 一次发送一条消息时看到的中位数和尾部​​响应延迟\n- QPS - 当有 2 个客户端和总共 64 个通道时的消息/秒速率，每个通道使用 StreamingCall 一次发送 100 个未完成的消息\n- 可伸缩性（适用于所选语言） - 每个服务器核心的消息数/秒\n\n大多数性能测试都使用安全通信和 protobufs。一些 C++ 测试还使用不安全的通信和通用（非 protobuf）API 来显示峰值性能。将来可能会添加其他方案。\n\n### 测试基础架构\n\n所有性能基准测试都通过我们的 Jenkins 测试基础架构作为 GCE 中的实例运行。除了上面描述的 gRPC 性能方案之外，我们还运行基线 [netperf TCP_RR](http://www.netperf.org/) 延迟数，以便了解底层网络特征。这些数字出现在我们的仪表板上，有时会根据我们的实例在 GCE 中的分配位置而有所不同。\n\n大多数测试实例都是 8 核系统，这些系统用于延迟和 QPS 测量。对于 C++ 和 Java，我们还支持在 32 核系统上进行 QPS 测试。所有 QPS 测试都为每台服务器使用 2 台相同的客户端计算机，以确保 QPS 测量不受客户端限制。","source":"_posts/grpc.md","raw":"---\ntitle: gRPC 详解\ndate: 2019-04-30 18:21:44\ntoc: true\ntags:\n- 技术名词\n---\n\n## 什么是 gRPC？\n\n### 指南\n\n这篇文档向你介绍了什么是 gRPC 和 protocol buffers。gRPC 可以使用 protocol buffers 作为其接口定义语言（IDL）和底层消息交换格式。如果你是 gRPC 和 protocol buffers 新手，那么读这篇文档可以帮助到你，如果你只是想看看 gRPC 是怎么运作的，直接看[快速开始](https://grpc.io/docs/quickstart/)。\n\n<!-- more -->\n\n### 概述\n\n在 gRPC 中，Client 应用程序可以直接调用不同机器上的 Server 应用程序上的方法，就像它是一个本地对象一样，这使您更容易创建分布式应用程序和服务。与许多 RPC 系统一样，gRPC 基于定义服务的思想，指定可以使用参数和返回类型远程调用的方法。在 Server 端， Server 实现此接口并运行 gRPC 服务器来处理Client 调用。在Client 端，Client 有一个 Stub (在某些语言中称为 Client)，它提供与 Server 相同的方法。\n\n{% asset_img overview.png This is an image %}\n\ngRPC clients 和 servers 可以在各种环境中运行并相互通信 - 从 Google 中的服务器到你自己的桌面 - 并且可以用 gPRC 支持的任何语言编写。因此，例如，你可以使用 Java 轻松地创建一个 gRPC server，clints 端使用 GO、Python 或者 Ruby。除此之外，最新的 Google APIs 将具有接口的 gRPC 版本，让你可以轻松地将 Google 功能构建到应用程序中去。\n\n### 使用 Protocol Buffers\n\ngRPC 默认使用 [protocol buffers](https://developers.google.com/protocol-buffers/docs/overview)，用于序列化结构化数据的成熟开源机制（尽管它可以与其他数据格式，如：JSON 一起使用）。这是一个如何工作的快速介绍。如果你已经熟悉 protocol buffers，可以随时跳到下一部分。\n\n使用 protocol buffers 的第一步是定义要在 proto 文件中序列化的数据的结构：这是一个带 .proto 扩展名的普通文本文件。 protocol buffers 数据被构造为消息，其中每个消息是包含一系列称为字段的 name-value 对的信息的小逻辑记录。这是一个简单的例子：\n\n```go\nmessage Person {\n  string name = 1;\n  int32 id = 2;\n  bool has_ponycopter = 3;\n}\n```\n\n然后，一旦指定了数据结构，就可以使用 protocol buffers 编译器 `protoc` 从原型定义生成首选语言的数据访问类。这些为每个字段（如 `name()` 和 `set_name()`）提供了简单的访问器，以及将整个结构序列化/解析为原始字节的方法 - 例如，如果您选择的语言是 C++，则在上面的示例中运行编译器将生成上课了 `Person`。然后，您可以在应用程序中使用此类来填充，序列化和检索 Person protocol buffers 消息。\n\n正如您将在我们的示例中更详细地看到的那样，您可以在普通的 proto 文件中定义 gRPC 服务，并将 RPC 方法参数和返回类型指定为 protocol buffers 消息：\n\n```go\n// The greeter service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\ngRPC 还使用 protoc 特殊的 gRPC 插件从 proto 文件生成代码。但是，使用 gRPC 插件，您将获得生成的 gRPC 客户端和服务器代码，以及用于填充，序列化和检索消息类型的常规 protocol buffers 代码。我们将在下面更详细地看一下这个例子。\n\n你可以在 [Protocol Buffers 文档中](https://developers.google.com/protocol-buffers/docs/overview) 找到有关 protocol buffers 的更多信息，并了解如何使用 gRPC 插件快速获取和安装 protoc。\n\n### Protocol Buffers 版本\n\n虽然 protocol buffers 已经供开源用户使用了一段时间，但我们的实例使用了一种新的 protocol buffers 协议，称作 proto3，它具有略微简化的语法，一些有用的新功能并支持更多的语言。目前支持 Java、C++、Python、Object-C、C#、a little-runtime（Android Java）、Ruby、和 JavaScript，这些来自 [protocol buffers GitHub Repo](https://github.com/protocolbuffers/protobuf/releases)。也支持来自 [golang/protobuf GitHub repo](https://github.com/golang/protobuf) 的 Go 语言生成器，还有更多的语言正在开发中。你可以在 [proto3 语言指南](https://developers.google.com/protocol-buffers/docs/proto3)和每种语言的[参考文档](https://developers.google.com/protocol-buffers/docs/reference/overview)中找到更多信息。参考文档还包括 .proto 文件格式的[正式的规范](https://developers.google.com/protocol-buffers/docs/reference/proto3-spec)。\n\n通常情况下，虽然你可以使用 proto2（当前的默认版本），但我们建议你将 proto3 和 gRPC 一起使用，因为它允许你使用全系列的 gRPC 支持的语言，以避免与 proto2 client 与 proto3 server 通信的兼容性问题，反之亦然。\n\n## gRPC 概念\n\n本文档介绍了一些关键的 gRPC 概念，概述了 gRPC 的体系结构和 RPC 生命周期。\n\n### 概览\n\n#### 服务定义\n\n与许多 RPC 系统一样，gRPC 基于定义服务的思想，指定可以使用其参数和返回类型远程调用的方法。默认情况下，gRPC 使用 protocol buffers 作为接口定义语言（IDL）来描述服务接口和有效负载消息的结构。如果需要，可以使用其他替代方案。\n\n```go\nservice HelloService {\n  rpc SayHello (HelloRequest) returns (HelloResponse);\n}\n\nmessage HelloRequest {\n  string greeting = 1;\n}\n\nmessage HelloResponse {\n  string reply = 1;\n}\n```\n\ngRPC 允许你定义四种服务方法：\n\n- 一元 RPCs（Unary RPCs），客户端向服务器发送单个请求并返回单个响应，就像正常的函数调用一样。\n\n```go\nrpc SayHello(HelloRequest) returns (HelloResponse){\n}\n```\n\n服务器流式 RPC（Server streaming RPCs），客户端向服务器发送请求并获取流以读取消息序列。客户端从返回的流中读取，直到没有更多消息。gRPC 保证单个 RPC 调用中的消息排序。\n\n```go\nrpc LotsOfReplies(HelloRequest) returns (stream HelloResponse){\n}\n```\n\n客户端流式 RPC（Client streaming RPCs），客户端再次使用提供的流写入一系列消息并将其发送到服务器。一旦客户端写完消息，它就等待服务器读取它们并返回它的响应。gRPC 再次保证在单个 RPC 调用中的消息排序。\n\n```go\nrpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse) {\n}\n```\n\n双向流式 RPC（Bidirectional streaming RPCs），双方使用读写流发送一系列消息。这两个流独立运行，因此客户端和服务器可以按照自己喜欢的顺序进行读写：例如，服务器可以在写入响应之前等待接收所有客户端消息，或者它可以交替地读取消息然后写入消息，或者其他一些读写组合。保留每个流中的消息顺序。\n\n```go\nrpc BidiHello(stream HelloRequest) returns (stream HelloResponse){\n}\n```\n\n我们将在下面的 RPC 生命周期部分中更详细地介绍不同类型的RPC。\n\n#### 使用 API\n\n从 .proto 文件中的服务定义开始，gRPC 提供了生成客户端和服务器端代码的 protocol buffer 编译器插件。gRPC 用户通常在客户端调用这些 API，并在服务器端实现相应的 API。\n\n- 在服务器端，服务器实现服务声明的方法，并运行 gRPC 服务器来处理客户端调用。gRPC 基础结构解码传入请求，执行服务方法并对服务响应进行编码\n- 在客户端，客户端有一个称为存根的本地对象（stub）（对于某些语言，首选术语是 client），它实现与服务相同的方法。然后，客户端可以在本地对象上调用这些方法，将调用的参数包装在适当的 protocol buffer 消息类型中 - gRPC在将请求发送到服务器并返回服务器的 protocol buffer 响应之后查看。\n\n#### 同步 vs 异步\n\n在响应从服务器到达之前阻塞的同步 RPC 调用最接近 RPC 所期望的过程调用的抽象。另一方面，网络本质上是异步的，在许多情况下，能够在不阻塞当前线程的情况下启动 RPC 非常有用。\n\n大多数语言的 gRPC 编程表面都有同步和异步两种版本。您可以在每种语言的教程和参考文档中找到更多信息（完整的参考文档即将推出）。\n\n### PRC 生命周期\n\n现在让我们仔细看看当 gRPC 客户端调用 gRPC 服务器方法时会发生什么。我们不会查看实现细节，您可以在我们特定语言的页面中找到有关这些内容的更多信息。\n\n#### Unary RPC\n\n首先让我们看一下最简单的 RPC 类型，客户端发送单个请求并返回单个响应。\n\n- 客户端在 stub/client 对象上调用方法后，将通知服务器已使用客户端带着metedata （metadata）调用了产生了一次调用，方法名称和指定的截止时间（如果适用）调用RPC 。\n\n- 然后，服务器可以立即发送回自己的初始metedata （必须在任何响应之前发送），或者等待客户端的请求消息 - 首先发生的是特定于应用程序的消息。\n\n- 一旦服务器具有客户端的请求消息，它就会执行创建和填充其响应所需的任何工作。然后将响应与状态详细信息（状态代码和可选状态消息）以及可选的尾随metedata 一起返回（如果成功）到客户端。\n\n- 如果状态为 OK，则客户端获取响应，从而完成客户端的调用。\n\n#### Server streaming RPC\n\n服务器流 RPC 类似于我们的简单示例，除了服务器在获取客户端的请求消息后发回响应流。在发回所有响应之后，服务器的状态详细信息（状态代码和可选状态消息）和可选的尾随metedata 将被发送回服务器端完成。一旦客户端拥有所有服务器的响应，客户端就会完成。\n\n#### Client streaming RPC\n\n客户端流式 RPC 也类似于我们的简单示例，除了客户端向服务器发送请求流而不是单个请求。服务器发送回单个响应，通常但不一定在收到所有客户端请求后，以及其状态详细信息和可选的尾随metedata 。\n\n#### Bidirectional streaming RPC\n\n在双向流式 RPC 中，再次调用由客户端发起的调用并且服务器端接收客户端的metedata 、方法名称和截止日期。服务器再次可以选择发回其初始metedata 或等待客户端开始发送请求。\n\n接下来会发生什么取决于应用程序，因为客户端和服务器可以按任何顺序读写 - 流完全独立地运行。因此，例如，服务器可以等到它收到所有客户端的消息之后再写入其响应，或者服务器和客户端可以“乒乓”：服务器获取请求，然后发回响应，然后客户端发送另一个基于响应的请求，等等。\n\n#### 截止日期/超时\n\ngRPC 允许客户端指定在 RPC 因错误而终止之前，他们愿意等待 RPC 完成的时间 DEADLINE_EXCEEDED。在服务器端，服务器可以查询特定 RPC 是否已超时，或者剩余多少时间来完成 RPC。\n\n指定截止日期或超时的方式因语言而异 - 例如，并非所有语言都有默认截止日期，某些语言 API 在截止日期（固定时间点）工作，某些语言 API 在超时方面工作（持续时间）。\n\n#### RPC 终止\n\n在 gRPC 中，客户端和服务器都对呼叫的成功进行独立和本地的确定，并且它们的结论可能不匹配。这意味着，例如，您可以在服务器端成功完成 RPC（“我已经发送了所有响应！”），但在客户端失败（“我的截止日期后响应已到达！”）。在客户端发送所有请求之前，服务器也可以决定完成。\n\n#### 取消 RPC\n\n客户端或服务器可以随时取消 RPC。取消立即终止 RPC，以便不再进行进一步的工作。它不是 “撤消”：取消之前所做的更改将不会被回滚。\n\n#### metedata\n\nmetedata 是以键值对列表形式的特定 RPC 调用（例如[身份验证详细信息](#身份验证)）的信息，其中键是字符串，值通常是字符串（但可以是二进制数据）。metedata 对 gRPC 本身是不透明的 - 它允许客户端提供与服务器调用相关的信息，反之亦然。\n\n对 metedata 的访问取决于语言。\n\n#### 通道（channels）\n\ngRPC channel 提供与指定主机和端口上的 gRPC 服务器的连接，并在创建客户端 stub（或某些语言中的 “client”）时使用。客户端可以指定 channel 参数来修改gRPC 的默认行为，例如打开和关闭消息压缩。一个 channel 是有状态的，包括 `connected` 和 `idle`。\n\ngRPC 如何处理关闭 channels 与语言有关。某些语言还允许查询 channels 状态。\n\n## 身份验证\n\n### 认证\n\n本文档概述了 gRPC 身份验证，包括我们内置的支持身份验证机制，如何插入您自己的身份验证系统，以及如何在我们支持的语言中使用 gRPC 身份验证的示例。\n\n### 总览\n\ngRPC 旨在与各种身份验证机制配合使用，可以轻松安全地使用 gRPC 与其他系统进行通信。您可以使用我们支持的机制 - 带或不带基于 Google 令牌的身份验证的 SSL / TLS - 或者您可以通过扩展我们提供的代码来插入您自己的身份验证系统。\n\ngRPC 还提供了一个简单的身份验证 API，可让您 `Credentials` 在创建 channel 或调用时提供所有必要的身份验证信息。\n\n### 支持的身份验证机制\n\ngRPC 内置了以下身份验证机制：\n\n- SSL / TLS：gRPC具有SSL / TLS集成，并促进使用SSL / TLS对服务器进行身份验证，并加密客户端和服务器之间交换的所有数据。可选机制可供客户端提供相互身份验证的证书。\n\n- 使用 Google 进行基于令牌的身份验证：gRPC 提供了一种通用机制如（下所述），用于将基于 metedata 的凭据附加到请求和响应。某些身份验证流程提供了在通过 gRPC 访问 Google API 时获取访问令牌（通常是 OAuth2 令牌）的额外支持：您可以在下面的代码示例中看到它的工作原理。通常，必须使用此机制以及通道上的 SSL / TLS - Google 不允许没有 SSL / TLS 的连接，并且大多数 gRPC 语言实现都不允许您在未加密的通道上发送凭据。\n\n警告：Google 凭据只能用于连接 Google 服务。将 Google 发布的 OAuth2 令牌发送到非 Google 服务可能会导致此令牌被盗并用于冒充客户端到 Google 服务。\n\n### 身份验证 API\n\ngRPC 提供了一个基于 Credentials 对象统一概念的简单身份验证 API，可以在创建整个 gRPC channel 或单个 call 时使用。\n\n#### 凭证类型\n\n凭证可以有两种类型：\n\n- Channel credentials，附加到 `Channel`，例如 SSL 凭据。\n- Call credentials，附加到 call（或者 C++ 中的 `ClientContext`）。\n\n您还可以将这些组合在一起成为 `CompositeChannelCredentials`，例如，您可以指定 channel 的 SSL 详细信息以及在 channel 上进行的每个 call 的凭据。一个 `CompositeChannelCredentials` 将 `ChannelCredentials` 和 `CallCredentials` 连接到一起，创建一个新的 `ChannelCredentials`。结果将 `CallCredentials` 通过在 channel 上进行的每次调用发送与组合相关的认证数据。\n\n例如，从 `SslCredentials` 和`AccessTokenCredentials` 你可以创建一个 `ChannelCredentials`。应用于 a 的结果 `Channel` 将为此通道上的每个调用发送相应的访问令牌。\n\n单独的 `CallCredentials` 也可以使用 `CompositeCallCredentials`。`CallCredentials` 在调用中使用时产生的结果将触发发送与两者相关联的认证数据。\n\n#### 使用客户端 SSL/TLS\n\n现在让我们看一下如何 Credentials 使用我们支持的 auth 机制之一。这是最简单的身份验证方案，客户端只想验证服务器并加密所有数据。该示例使用的是 C ++，但所有语言的 API 都类似：您可以在下面的示例部分中看到如何在更多语言中启用SSL / TLS。\n\n```c++\n// Create a default SSL ChannelCredentials object.\nauto channel_creds = grpc::SslCredentials(grpc::SslCredentialsOptions());\n// Create a channel using the credentials created in the previous step.\nauto channel = grpc::CreateChannel(server_name, channel_creds);\n// Create a stub on the channel.\nstd::unique_ptr<Greeter::Stub> stub(Greeter::NewStub(channel));\n// Make actual RPC calls on the stub.\ngrpc::Status s = stub->sayHello(&context, *request, response);\n```\n\n对于高级用例，例如修改根 CA 或者使用客户端证书，可以在 `SslCredentialsOptions` 传递给工厂方法的参数中设置相应的选项。\n\n使用基于 Google 令牌的身份验证\n\ngRPC 应用程序可以使用简单的 API 创建凭据，该凭据可用于在各种部署方案中与 Google 进行身份验证。同样，我们的示例是在 C++ 中，但你可以在我们的示例部分找到其他语言的示例。\n\n```c++\nauto creds = grpc::GoogleDefaultCredentials();\n// Create a channel, stub and make RPC calls (same as in the previous example)\nauto channel = grpc::CreateChannel(server_name, creds);\nstd::unique_ptr<Greeter::Stub> stub(Greeter::NewStub(channel));\ngrpc::Status s = stub->sayHello(&context, *request, response);\n```\n\n这个通道凭据对象适用于服务账户里的应用程序以及在 [Google Compute Engine（GCE）中](https://cloud.google.com/compute/)运行的应用程序。在前一种情况下，服务账户的私钥是从环境变量中指定的文件加载的 `GOOGLE_APPLICATION_CREDENTIALS`。秘钥用于生成附加到相应信道上的每个传出 RPC 的承载令牌。\n\n对于在 GCE 中运行的应用程序，可以在 VM 设置期间配置默认服务账户和相应的 OAuth2 范围。在运行时，此凭据处理与身份验证系统的通信以获取 OAuth2 访问令牌，并将它们附加到相应通道上每个传出 RPC。\n\n#### 扩展 gRPC 以支持其他身份验证机制\n\nCredentials 插件 API 允许开发人员插入它们自己的凭据类型。这包括：\n\n- `MetadataCredentialsPlugin` 抽象类，其中包含纯虚 `GetMetadata` 需要由开发者创建的子类来实现的方法。\n\n- `MetadataCredentialsFromPlugin` 函数，它从 `MetadataCredentialsPlugin` 创建了一个 `CallCredentials`。\n\n下面是一个简单的凭证插件的例子，它在自定义头中设置了一个身份验证票据。\n\n```c++\nclass MyCustomAuthenticator : public grpc::MetadataCredentialsPlugin {\n public:\n  MyCustomAuthenticator(const grpc::string& ticket) : ticket_(ticket) {}\n\n  grpc::Status GetMetadata(\n      grpc::string_ref service_url, grpc::string_ref method_name,\n      const grpc::AuthContext& channel_auth_context,\n      std::multimap<grpc::string, grpc::string>* metadata) override {\n    metadata->insert(std::make_pair(\"x-custom-auth-ticket\", ticket_));\n    return grpc::Status::OK;\n  }\n\n private:\n  grpc::string ticket_;\n};\n\nauto call_creds = grpc::MetadataCredentialsFromPlugin(\n    std::unique_ptr<grpc::MetadataCredentialsPlugin>(\n        new MyCustomAuthenticator(\"super-secret-ticket\")));\n```\n\n通过在核心级插入 gRPC 凭证实现，可以实现更深入的集成。gRPC 内部还允许使用其他加密机制切换 SSL/TLS。\n\n### 例子\n\n这些认证机制将在所有 gRPC 支持的语言中可用。下面几节将演示上述身份验证和授权特性如何出现在每种语言中:很快就会有更多的语言出现。\n\n#### Go\n\n基本情况 - 没有加密或者身份验证\n\nClient:\n\n```go\nconn, _ := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n// error handling omitted\nclient := pb.NewGreeterClient(conn)\n// ...\n```\n\nServer:\n\n```go\ns := grpc.NewServer()\nlis, _ := net.Listen(\"tcp\", \"localhost:50051\")\n// error handling omitted\ns.Serve(lis)\n```\n\n使用服务器身份验证 SSL/TLS\n\nClient:\n\n```go\ncreds, _ := credentials.NewClientTLSFromFile(certFile, \"\")\nconn, _ := grpc.Dial(\"localhost:50051\", grpc.WithTransportCredentials(creds))\n// error handling omitted\nclient := pb.NewGreeterClient(conn)\n// ...\n```\n\nServer:\n\n```go\ncreds, _ := credentials.NewServerTLSFromFile(certFile, keyFile)\ns := grpc.NewServer(grpc.Creds(creds))\nlis, _ := net.Listen(\"tcp\", \"localhost:50051\")\n// error handling omitted\ns.Serve(lis)\n```\n\n通过 Google 验证\n\n```go\npool, _ := x509.SystemCertPool()\n// error handling omitted\ncreds := credentials.NewClientTLSFromCert(pool, \"\")\nperRPC, _ := oauth.NewServiceAccountFromFile(\"service-account.json\", scope)\nconn, _ := grpc.Dial(\n\t\"greeter.googleapis.com\",\n\tgrpc.WithTransportCredentials(creds),\n\tgrpc.WithPerRPCCredentials(perRPC),\n)\n// error handling omitted\nclient := pb.NewGreeterClient(conn)\n// ...\n```\n\n#### Ruby\n\n基本情况 - 没有加密或者身份验证\n\n```ruby\nstub = Helloworld::Greeter::Stub.new('localhost:50051', :this_channel_is_insecure)\n...\n```\n\n使用服务器身份验证 SSL/TLS\n\n```ruby\ncreds = GRPC::Core::Credentials.new(load_certs)  # load_certs typically loads a CA roots file\nstub = Helloworld::Greeter::Stub.new('myservice.example.com', creds)\n```\n\n通过 Google 验证\n\n```ruby\nrequire 'googleauth'  # from http://www.rubydoc.info/gems/googleauth/0.1.0\n...\nssl_creds = GRPC::Core::ChannelCredentials.new(load_certs)  # load_certs typically loads a CA roots file\nauthentication = Google::Auth.get_application_default()\ncall_creds = GRPC::Core::CallCredentials.new(authentication.updater_proc)\ncombined_creds = ssl_creds.compose(call_creds)\nstub = Helloworld::Greeter::Stub.new('greeter.googleapis.com', combined_creds)\n```\n\n#### C++\n\n基本情况 - 没有加密或者身份验证\n\n```c++\nauto channel = grpc::CreateChannel(\"localhost:50051\", InsecureChannelCredentials());\nstd::unique_ptr<Greeter::Stub> stub(Greeter::NewStub(channel));\n...\n```\n\n使用服务器身份验证 SSL/TLS\n\n```c++\nauto channel_creds = grpc::SslCredentials(grpc::SslCredentialsOptions());\nauto channel = grpc::CreateChannel(\"myservice.example.com\", channel_creds);\nstd::unique_ptr<Greeter::Stub> stub(Greeter::NewStub(channel));\n...\n```\n\n通过 Google 验证\n\n```c++\nauto creds = grpc::GoogleDefaultCredentials();\nauto channel = grpc::CreateChannel(\"greeter.googleapis.com\", creds);\nstd::unique_ptr<Greeter::Stub> stub(Greeter::NewStub(channel));\n...\n```\n\n#### C#\n\n基本情况 - 没有加密或者身份验证\n\n```c#\nvar channel = new Channel(\"localhost:50051\", ChannelCredentials.Insecure);\nvar client = new Greeter.GreeterClient(channel);\n...\n```\n\n使用服务器身份验证 SSL/TLS\n\n```c#\nvar channelCredentials = new SslCredentials(File.ReadAllText(\"roots.pem\"));  // Load a custom roots file.\nvar channel = new Channel(\"myservice.example.com\", channelCredentials);\nvar client = new Greeter.GreeterClient(channel);\n\n```\n\n通过 Google 验证\n\n```c#\nusing Grpc.Auth;  // from Grpc.Auth NuGet package\n...\n// Loads Google Application Default Credentials with publicly trusted roots.\nvar channelCredentials = await GoogleGrpcCredentials.GetApplicationDefaultAsync();\n\nvar channel = new Channel(\"greeter.googleapis.com\", channelCredentials);\nvar client = new Greeter.GreeterClient(channel);\n...\n```\n\n验证单个 RPC 调用\n\n```c#\nvar channel = new Channel(\"greeter.googleapis.com\", new SslCredentials());  // Use publicly trusted roots.\nvar client = new Greeter.GreeterClient(channel);\n...\nvar googleCredential = await GoogleCredential.GetApplicationDefaultAsync();\nvar result = client.SayHello(request, new CallOptions(credentials: googleCredential.ToCallCredentials()));\n...\n```\n\n#### Python\n\n基本情况 - 没有加密或者身份验证\n\n```python\nimport grpc\nimport helloworld_pb2\n\nchannel = grpc.insecure_channel('localhost:50051')\nstub = helloworld_pb2.GreeterStub(channel)\n```\n\n使用服务器身份验证 SSL/TLS\n\nClient:\n\n```python\nimport grpc\nimport helloworld_pb2\n\nwith open('roots.pem', 'rb') as f:\n    creds = grpc.ssl_channel_credentials(f.read())\nchannel = grpc.secure_channel('myservice.example.com:443', creds)\nstub = helloworld_pb2.GreeterStub(channel)\n```\n\nServer:\n\n```python\nimport grpc\nimport helloworld_pb2\nfrom concurrent import futures\n\nserver = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\nwith open('key.pem', 'rb') as f:\n    private_key = f.read()\nwith open('chain.pem', 'rb') as f:\n    certificate_chain = f.read()\nserver_credentials = grpc.ssl_server_credentials( ( (private_key, certificate_chain), ) )\n# Adding GreeterServicer to server omitted\nserver.add_secure_port('myservice.example.com:443', server_credentials)\nserver.start()\n# Server sleep omitted\n```\n\n使用 JWT 与 Google 进行身份验证\n\n```python\nimport grpc\nimport helloworld_pb2\n\nfrom google import auth as google_auth\nfrom google.auth import jwt as google_auth_jwt\nfrom google.auth.transport import grpc as google_auth_transport_grpc\n\ncredentials, _ = google_auth.default()\njwt_creds = google_auth_jwt.OnDemandCredentials.from_signing_credentials(\n    credentials)\nchannel = google_auth_transport_grpc.secure_authorized_channel(\n    jwt_creds, None, 'greeter.googleapis.com:443')\nstub = helloworld_pb2.GreeterStub(channel)\n```\n\n使用 Oauth2 令牌通过 Google 进行身份验证\n\n```python\nimport grpc\nimport helloworld_pb2\n\nfrom google import auth as google_auth\nfrom google.auth.transport import grpc as google_auth_transport_grpc\nfrom google.auth.transport import requests as google_auth_transport_requests\n\ncredentials, _ = google_auth.default(scopes=(scope,))\nrequest = google_auth_transport_requests.Request()\nchannel = google_auth_transport_grpc.secure_authorized_channel(\n    credentials, request, 'greeter.googleapis.com:443')\nstub = helloworld_pb2.GreeterStub(channel)\n```\n\n#### Java\n\n基本情况 - 没有加密或者身份验证\n\n```java\nManagedChannel channel = ManagedChannelBuilder.forAddress(\"localhost\", 50051)\n    .usePlaintext(true)\n    .build();\nGreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel);\n```\n\n使用服务器身份验证 SSL/TLS\n\n在 Java 中，我们建议你在 TLS 上使用 gRPC 时使用 OpenSSL。您可以在 gRPC Java [安全文档](https://github.com/grpc/grpc-java/blob/master/SECURITY.md#transport-security-tls)中找到关于安装和使用 OpenSSL 以及 Android 和非 Android Java 所需的其他库的详细信息。\n\n要在服务器上启用 TLS，需要以 PEM 格式指定证书链和私钥。这样的私钥不应该使用密码。链中的证书顺序很重要：更具体地说，顶部的证书必须是主机 CA，而最底部的证书必须是根 CA. 标准 TLS 端口是 443，但我们使用下面的8443 以避免需要操作系统的额外权限。\n\n```java\nServer server = ServerBuilder.forPort(8443)\n    // Enable TLS\n    .useTransportSecurity(certChainFile, privateKeyFile)\n    .addService(TestServiceGrpc.bindService(serviceImplementation))\n    .build();\nserver.start();\n```\n\n如果客户端不知道颁发证书的权限，则应分别正确配置 `SslContext` 或 `SSLSocketFactory` 提供给  `NettyChannelBuilder` 或 `OkHttpChannelBuilder`。\n\n在客户端，使用 SSL/TLS 的服务器身份验证如下所示：\n\n```java\n// With server authentication SSL/TLS\nManagedChannel channel = ManagedChannelBuilder.forAddress(\"myservice.example.com\", 443)\n    .build();\nGreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel);\n\n// With server authentication SSL/TLS; custom CA root certificates; not on Android\nManagedChannel channel = NettyChannelBuilder.forAddress(\"myservice.example.com\", 443)\n    .sslContext(GrpcSslContexts.forClient().trustManager(new File(\"roots.pem\")).build())\n    .build();\nGreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel);\n```\n\n通过 Google 验证\n\n以下代码段显示了如何使用带有服务帐户的 gRPC 调用 [Google Cloud PubSub API](https://cloud.google.com/pubsub/docs/overview)。凭据从存储在众所周知的位置的密钥加载，或者通过检测应用程序在可以自动提供应用程序的环境中运行，例如 Google Compute Engine。虽然此示例特定于 Google 及其服务，但其他服务提供商可以遵循类似的模式。\n\n```java\nGoogleCredentials creds = GoogleCredentials.getApplicationDefault();\nManagedChannel channel = ManagedChannelBuilder.forTarget(\"greeter.googleapis.com\")\n    .build();\nGreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel)\n    .withCallCredentials(MoreCallCredentials.from(creds));\n```\n\n#### Node.js\n\n基本情况 - 没有加密或者身份验证\n\n```javascript\nvar stub = new helloworld.Greeter('localhost:50051', grpc.credentials.createInsecure());\n```\n\n使用服务器身份验证 SSL/TLS\n\n```javascript\nvar ssl_creds = grpc.credentials.createSsl(root_certs);\nvar stub = new helloworld.Greeter('myservice.example.com', ssl_creds);\n```\n\n通过 Google 验证\n\n```javascript\n// Authenticating with Google\nvar GoogleAuth = require('google-auth-library'); // from https://www.npmjs.com/package/google-auth-library\n...\nvar ssl_creds = grpc.credentials.createSsl(root_certs);\n(new GoogleAuth()).getApplicationDefault(function(err, auth) {\n  var call_creds = grpc.credentials.createFromGoogleCredential(auth);\n  var combined_creds = grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);\n  var stub = new helloworld.Greeter('greeter.googleapis.com', combined_credentials);\n});\n```\n\n使用 Oauth2 令牌使用 Google 进行身份验证（传统方法）\n\n```javascript\nvar GoogleAuth = require('google-auth-library'); // from https://www.npmjs.com/package/google-auth-library\n...\nvar ssl_creds = grpc.Credentials.createSsl(root_certs); // load_certs typically loads a CA roots file\nvar scope = 'https://www.googleapis.com/auth/grpc-testing';\n(new GoogleAuth()).getApplicationDefault(function(err, auth) {\n  if (auth.createScopeRequired()) {\n    auth = auth.createScoped(scope);\n  }\n  var call_creds = grpc.credentials.createFromGoogleCredential(auth);\n  var combined_creds = grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);\n  var stub = new helloworld.Greeter('greeter.googleapis.com', combined_credentials);\n});\n\n```\n\n#### PHP\n\n基本情况 - 没有加密或者身份验证\n\n```php\n$client = new helloworld\\GreeterClient('localhost:50051', [\n    'credentials' => Grpc\\ChannelCredentials::createInsecure(),\n]);\n...\n```\n\n通过 Google 验证\n\n```php\nfunction updateAuthMetadataCallback($context)\n{\n    $auth_credentials = ApplicationDefaultCredentials::getCredentials();\n    return $auth_credentials->updateMetadata($metadata = [], $context->service_url);\n}\n$channel_credentials = Grpc\\ChannelCredentials::createComposite(\n    Grpc\\ChannelCredentials::createSsl(file_get_contents('roots.pem')),\n    Grpc\\CallCredentials::createFromPlugin('updateAuthMetadataCallback')\n);\n$opts = [\n  'credentials' => $channel_credentials\n];\n$client = new helloworld\\GreeterClient('greeter.googleapis.com', $opts);\n```\n\n使用 Oauth2 令牌使用 Google 进行身份验证（传统方法）\n\n```php\n// the environment variable \"GOOGLE_APPLICATION_CREDENTIALS\" needs to be set\n$scope = \"https://www.googleapis.com/auth/grpc-testing\";\n$auth = Google\\Auth\\ApplicationDefaultCredentials::getCredentials($scope);\n$opts = [\n  'credentials' => Grpc\\Credentials::createSsl(file_get_contents('roots.pem'));\n  'update_metadata' => $auth->getUpdateMetadataFunc(),\n];\n$client = new helloworld\\GreeterClient('greeter.googleapis.com', $opts);\n```\n\n#### Dart\n\n基本情况 - 没有加密或者身份验证\n\n```dart\nfinal channel = new ClientChannel('localhost',\n      port: 50051,\n      options: const ChannelOptions(\n          credentials: const ChannelCredentials.insecure()));\nfinal stub = new GreeterClient(channel);\n```\n\n使用服务器身份验证 SSL/TLS\n\n```dart\n// Load a custom roots file.\nfinal trustedRoot = new File('roots.pem').readAsBytesSync();\nfinal channelCredentials =\n    new ChannelCredentials.secure(certificates: trustedRoot);\nfinal channelOptions = new ChannelOptions(credentials: channelCredentials);\nfinal channel = new ClientChannel('myservice.example.com',\n    options: channelOptions);\nfinal client = new GreeterClient(channel);\n```\n\n通过 Google 验证\n\n```dart\n// Uses publicly trusted roots by default.\nfinal channel = new ClientChannel('greeter.googleapis.com');\nfinal serviceAccountJson =\n     new File('service-account.json').readAsStringSync();\nfinal credentials = new JwtServiceAccountAuthenticator(serviceAccountJson);\nfinal client =\n    new GreeterClient(channel, options: credentials.toCallOptions);\n```\n\n验证单个 RPC 调用\n\n```dart\n// Uses publicly trusted roots by default.\nfinal channel = new ClientChannel('greeter.googleapis.com');\nfinal client = new GreeterClient(channel);\n...\nfinal serviceAccountJson =\n     new File('service-account.json').readAsStringSync();\nfinal credentials = new JwtServiceAccountAuthenticator(serviceAccountJson);\nfinal response =\n    await client.sayHello(request, options: credentials.toCallOptions);\n```\n\n## 错误处理和调试\n\n### 错误处理\n\n此页面描述了gRPC如何处理错误，包括gRPC的内置错误代码。可以在[此处](https://github.com/avinassh/grpc-errors)找到不同语言的示例代码。\n\n### 标准错误模型\n\n正如您在我们的概念文档和示例中所看到的，当 gRPC 调用成功完成时，服务器会向客户端返回一个 OK 状态（取决于语言，OK 可能会或可能不会直接在您的代码中使用）。但如果调用不成功会怎样？\n\n如果发生错误，gRPC 会返回其错误状态代码之一，并带有可选的字符串错误消息，该消息提供有关所发生情况的更多详细信息。所有支持的语言中的 gRPC 客户端都可以使用错误信息。\n\n### 更丰富的错误模型\n\n上述错误模型是官方 gRPC 错误模型，受所有 gRPC 客户端/服务器库支持，并且独立于 gRPC 数据格式（无论是 protocol buffers 或者其他内容）。你可能已经注意到它非常有限，并且不包括传达错误详细信息的能力。\n\n如果你在使用 protoco buffers 的数据格式，你不妨考虑使用开发和这里所描述的由谷歌所使用的更丰富的[错误模型](https://cloud.google.com/apis/design/errors#error_model)。这个模型使服务器返回并且客户端能够使用表示为一个或多个 protobuf 消息的错误详细信息。它进一步制定了一组[标准的错误消息类型](https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto)，以满足最常见的需求（例如无效参数，配额违规和堆栈跟踪）。此额外错误信息的 protobuf 二进制编码在响应中作为尾随元数据提供。\n\n这个更丰富的错误模型已经在 C++，Go，Java，Python 和 Ruby 库中得到支持，并且至少 grpc-web 和 Nodes.js 库存在请求支持它的 issue。如果有需求，其他语言库可能会在将来添加支持，因此如果感兴趣，请检查他们的 github 存储库。但请注意，用 C 语言编写的 grpc-core 库不太可能支持它，因为它是有目的的数据格式不可知的。\n\n如果你没有使用 protocol buffers，你可以使用类似的方法（在尾随相应元数据中放置错误详细信息），但你可能需要查找或开发用于访问此数据的库支持，以便在你的实际 API 中使用它。\n\n在决定是否使用这种扩展错误模型时，需要注意一些重要的注意事项，包括：\n\n- 在错误细节有效载荷的要求和期望方面，扩展错误模型的库实现可能在语言之间不一致\n- 现有代理，记录器和其他标准 HTTP 请求处理器无法查看错误详细信息，因此无法将其用于监视或其他目的\n- 追踪者中的其他错误详细信息会干扰线头阻塞，并且由于更频繁的缓存未命中而会降低 HTTP/2 报头压缩效率\n- 较大的错误细节有效负载可能会遇到协议限制（如最大 header 大小），从而有效失去原始错误\n\n### 错误状态代码\n\ngRPC 在各种情况下引发错误，从网络故障到未经认证的连接，每个连接都与特定的状态代码相关联。所有 gRPC 语言都支持以下错误状态代码。\n\n#### 一般错误\n\n| 案件 | 状态代码|\n| :--- | :-----|\n|客户端应用程序取消请求|GRPC_STATUS_CANCELLED|\n|截止日期在服务器返回状态之前到期|GRPC_STATUS_DEADLINE_EXCEEDED|\n|在服务器上找不到的方法|GRPC_STATUS_UNIMPLEMENTED|\n|服务器关闭|GRPC_STATUS_UNAVAILABLE|\n|服务器抛出异常（或者做了除了返回状态代码以终止RPC之外的其他操作）|GRPC_STATUS_UNKNOWN|\n\n#### 网络故障\n\n| 案件 | 状态代码|\n| :--- | :-----|\n|在截止日期到期之前没有传输数据。也适用于在截止日期到期之前传输某些数据且未检测到其他故障的情况|GRPC_STATUS_DEADLINE_EXCEEDED|\n|在连接中断之前传输了一些数据（例如，请求元数据已写入TCP连接）|GRPC_STATUS_UNAVAILABLE|\n\n#### 协议错误\n\n| 案件 | 状态代码|\n| :--- | :-----|\n|无法解压缩但支持压缩算法|GRPC_STATUS_INTERNAL|\n|客户端使用的压缩机制不受服务器支持|GRPC_STATUS_UNIMPLEMENTED|\n|达到流量控制资源限制|GRPC_STATUS_RESOURCE_EXHAUSTED|\n|流量控制协议违规|GRPC_STATUS_INTERNAL|\n|解析返回状态时出错|GRPC_STATUS_UNKNOWN|\n|未经身份验证：凭据无法获取元数据|GRPC_STATUS_UNAUTHENTICATED|\n|权限元数据中的主机集无效|GRPC_STATUS_UNAUTHENTICATED|\n|解析响应协议缓冲区时出错|GRPC_STATUS_INTERNAL|\n|解析请求协议缓冲区时出错|GRPC_STATUS_INTERNAL|\n\n## 性能\n\ngRPC 旨在支持多种语言的高性能开源RPC。本文档介绍了性能基准测试工具，测试所考虑的方案以及测试基础架构。\n\n### 概览\n\ngRPC 专为分布式应用的高性能和高生产率设计而设计。持续性能基准测试是 gRPC 开发工作流程的关键部分。针对主分支每小时运行多语言性能测试，并将这些数字报告给仪表板以进行可视化。\n\n- [多语言性能仪表板 @latest_release（最新可能用稳定版）](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5636470266134528)\n- [多语言性能仪表板@master（最新开发版）](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5652536396611584)\n- [C ++详细性能仪表板@master（最新开发版）](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5685265389584384)\n\n额外的性能测试可以提供有关 CPU 使用情况的细粒度洞察。\n\n- [C ++全栈微基准测试](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5684961520648192)\n- [C核心过滤器基准测试](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5740240702537728)\n- [C Core共享组件基准测试](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5641826627223552&container=789696829&widget=512792852)\n- [C Core HTTP / 2微基准测试](https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5732910535540736)\n\n### 性能测试设计\n\n每种语言都实现了一个实现 gRPC [WorkerService](https://github.com/grpc/grpc/blob/master/src/proto/grpc/testing/worker_service.proto) 的性能测试工作者 。此服务指示工作人员充当实际基准测试的客户端或服务器，表示为 [BenchmarkService](https://github.com/grpc/grpc/blob/master/src/proto/grpc/testing/benchmark_service.proto)。该服务有两种方法：\n\n- UnaryCall - 一个简单请求的一元RPC，它指定在响应中返回的字节数\n- StreamingCall - 一种流式RPC，允许重复的 ping-pongs 请求和响应消息类似于 UnaryCall\n\n![image](https://grpc.io/img/testing_framework.png)\n\n这些工作程序由[驱动程序](https://github.com/grpc/grpc/blob/master/test/cpp/qps/qps_json_driver.cc)控制，该驱动程序将该方案描述（采用 JSON 格式）和指定每个工作进程的 hots:port 的环境变量作为输入。\n\n### 正在测试的语言\n\n以下语言作为 master 上的客户端和服务器进行连续性能测试：\n\n- C++\n- Java\n- Go\n- C#\n- node.js\n- Python\n- Ruby\n\n此外，从 C core 派生的所有语言都在每次拉取请求时进行了有限的性能测试（冒烟测试）。\n\n除了作为性能测试的客户端和服务器端运行之外，所有语言都作为针对 C++ 服务器的客户端进行测试，并作为针对 C++ 客户端的服务器进行测试。此测试旨在为给定语言的客户端或服务器实现提供当前的性能上限，而无需测试另一方。\n\n虽然 PHP 或移动环境不支持 gRPC 服务器（我们的性能测试需要），但可以使用另一种语言编写的代理 WorkerService 对其客户端性能进行基准测试。此代码是为 PHP 实现的，但尚未处于连续测试模式。\n\n### 正在测试的场景\n\n有几个重要的方案正在测试中并显示在上面的仪表板中，包括以下内容：\n\n- 无争用延迟 - 只有 1 个客户端使用 StreamingCall 一次发送一条消息时看到的中位数和尾部​​响应延迟\n- QPS - 当有 2 个客户端和总共 64 个通道时的消息/秒速率，每个通道使用 StreamingCall 一次发送 100 个未完成的消息\n- 可伸缩性（适用于所选语言） - 每个服务器核心的消息数/秒\n\n大多数性能测试都使用安全通信和 protobufs。一些 C++ 测试还使用不安全的通信和通用（非 protobuf）API 来显示峰值性能。将来可能会添加其他方案。\n\n### 测试基础架构\n\n所有性能基准测试都通过我们的 Jenkins 测试基础架构作为 GCE 中的实例运行。除了上面描述的 gRPC 性能方案之外，我们还运行基线 [netperf TCP_RR](http://www.netperf.org/) 延迟数，以便了解底层网络特征。这些数字出现在我们的仪表板上，有时会根据我们的实例在 GCE 中的分配位置而有所不同。\n\n大多数测试实例都是 8 核系统，这些系统用于延迟和 QPS 测量。对于 C++ 和 Java，我们还支持在 32 核系统上进行 QPS 测试。所有 QPS 测试都为每台服务器使用 2 台相同的客户端计算机，以确保 QPS 测量不受客户端限制。","slug":"grpc","published":1,"updated":"2019-06-29T06:26:36.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxh80ekt00046c9vpmvv9oj2","content":"<h2 id=\"什么是-gRPC？\"><a href=\"#什么是-gRPC？\" class=\"headerlink\" title=\"什么是 gRPC？\"></a>什么是 gRPC？</h2><h3 id=\"指南\"><a href=\"#指南\" class=\"headerlink\" title=\"指南\"></a>指南</h3><p>这篇文档向你介绍了什么是 gRPC 和 protocol buffers。gRPC 可以使用 protocol buffers 作为其接口定义语言（IDL）和底层消息交换格式。如果你是 gRPC 和 protocol buffers 新手，那么读这篇文档可以帮助到你，如果你只是想看看 gRPC 是怎么运作的，直接看<a href=\"https://grpc.io/docs/quickstart/\" target=\"_blank\" rel=\"noopener\">快速开始</a>。</p>\n<a id=\"more\"></a>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>在 gRPC 中，Client 应用程序可以直接调用不同机器上的 Server 应用程序上的方法，就像它是一个本地对象一样，这使您更容易创建分布式应用程序和服务。与许多 RPC 系统一样，gRPC 基于定义服务的思想，指定可以使用参数和返回类型远程调用的方法。在 Server 端， Server 实现此接口并运行 gRPC 服务器来处理Client 调用。在Client 端，Client 有一个 Stub (在某些语言中称为 Client)，它提供与 Server 相同的方法。</p>\n\n<p>gRPC clients 和 servers 可以在各种环境中运行并相互通信 - 从 Google 中的服务器到你自己的桌面 - 并且可以用 gPRC 支持的任何语言编写。因此，例如，你可以使用 Java 轻松地创建一个 gRPC server，clints 端使用 GO、Python 或者 Ruby。除此之外，最新的 Google APIs 将具有接口的 gRPC 版本，让你可以轻松地将 Google 功能构建到应用程序中去。</p>\n<h3 id=\"使用-Protocol-Buffers\"><a href=\"#使用-Protocol-Buffers\" class=\"headerlink\" title=\"使用 Protocol Buffers\"></a>使用 Protocol Buffers</h3><p>gRPC 默认使用 <a href=\"https://developers.google.com/protocol-buffers/docs/overview\" target=\"_blank\" rel=\"noopener\">protocol buffers</a>，用于序列化结构化数据的成熟开源机制（尽管它可以与其他数据格式，如：JSON 一起使用）。这是一个如何工作的快速介绍。如果你已经熟悉 protocol buffers，可以随时跳到下一部分。</p>\n<p>使用 protocol buffers 的第一步是定义要在 proto 文件中序列化的数据的结构：这是一个带 .proto 扩展名的普通文本文件。 protocol buffers 数据被构造为消息，其中每个消息是包含一系列称为字段的 name-value 对的信息的小逻辑记录。这是一个简单的例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message Person &#123;</span><br><span class=\"line\">  <span class=\"keyword\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int32</span> id = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> has_ponycopter = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，一旦指定了数据结构，就可以使用 protocol buffers 编译器 <code>protoc</code> 从原型定义生成首选语言的数据访问类。这些为每个字段（如 <code>name()</code> 和 <code>set_name()</code>）提供了简单的访问器，以及将整个结构序列化/解析为原始字节的方法 - 例如，如果您选择的语言是 C++，则在上面的示例中运行编译器将生成上课了 <code>Person</code>。然后，您可以在应用程序中使用此类来填充，序列化和检索 Person protocol buffers 消息。</p>\n<p>正如您将在我们的示例中更详细地看到的那样，您可以在普通的 proto 文件中定义 gRPC 服务，并将 RPC 方法参数和返回类型指定为 protocol buffers 消息：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The greeter service definition.</span></span><br><span class=\"line\">service Greeter &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Sends a greeting</span></span><br><span class=\"line\">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The request message containing the user's name.</span></span><br><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\">  <span class=\"keyword\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The response message containing the greetings</span></span><br><span class=\"line\">message HelloReply &#123;</span><br><span class=\"line\">  <span class=\"keyword\">string</span> message = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gRPC 还使用 protoc 特殊的 gRPC 插件从 proto 文件生成代码。但是，使用 gRPC 插件，您将获得生成的 gRPC 客户端和服务器代码，以及用于填充，序列化和检索消息类型的常规 protocol buffers 代码。我们将在下面更详细地看一下这个例子。</p>\n<p>你可以在 <a href=\"https://developers.google.com/protocol-buffers/docs/overview\" target=\"_blank\" rel=\"noopener\">Protocol Buffers 文档中</a> 找到有关 protocol buffers 的更多信息，并了解如何使用 gRPC 插件快速获取和安装 protoc。</p>\n<h3 id=\"Protocol-Buffers-版本\"><a href=\"#Protocol-Buffers-版本\" class=\"headerlink\" title=\"Protocol Buffers 版本\"></a>Protocol Buffers 版本</h3><p>虽然 protocol buffers 已经供开源用户使用了一段时间，但我们的实例使用了一种新的 protocol buffers 协议，称作 proto3，它具有略微简化的语法，一些有用的新功能并支持更多的语言。目前支持 Java、C++、Python、Object-C、C#、a little-runtime（Android Java）、Ruby、和 JavaScript，这些来自 <a href=\"https://github.com/protocolbuffers/protobuf/releases\" target=\"_blank\" rel=\"noopener\">protocol buffers GitHub Repo</a>。也支持来自 <a href=\"https://github.com/golang/protobuf\" target=\"_blank\" rel=\"noopener\">golang/protobuf GitHub repo</a> 的 Go 语言生成器，还有更多的语言正在开发中。你可以在 <a href=\"https://developers.google.com/protocol-buffers/docs/proto3\" target=\"_blank\" rel=\"noopener\">proto3 语言指南</a>和每种语言的<a href=\"https://developers.google.com/protocol-buffers/docs/reference/overview\" target=\"_blank\" rel=\"noopener\">参考文档</a>中找到更多信息。参考文档还包括 .proto 文件格式的<a href=\"https://developers.google.com/protocol-buffers/docs/reference/proto3-spec\" target=\"_blank\" rel=\"noopener\">正式的规范</a>。</p>\n<p>通常情况下，虽然你可以使用 proto2（当前的默认版本），但我们建议你将 proto3 和 gRPC 一起使用，因为它允许你使用全系列的 gRPC 支持的语言，以避免与 proto2 client 与 proto3 server 通信的兼容性问题，反之亦然。</p>\n<h2 id=\"gRPC-概念\"><a href=\"#gRPC-概念\" class=\"headerlink\" title=\"gRPC 概念\"></a>gRPC 概念</h2><p>本文档介绍了一些关键的 gRPC 概念，概述了 gRPC 的体系结构和 RPC 生命周期。</p>\n<h3 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h3><h4 id=\"服务定义\"><a href=\"#服务定义\" class=\"headerlink\" title=\"服务定义\"></a>服务定义</h4><p>与许多 RPC 系统一样，gRPC 基于定义服务的思想，指定可以使用其参数和返回类型远程调用的方法。默认情况下，gRPC 使用 protocol buffers 作为接口定义语言（IDL）来描述服务接口和有效负载消息的结构。如果需要，可以使用其他替代方案。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service HelloService &#123;</span><br><span class=\"line\">  rpc SayHello (HelloRequest) returns (HelloResponse);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\">  <span class=\"keyword\">string</span> greeting = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message HelloResponse &#123;</span><br><span class=\"line\">  <span class=\"keyword\">string</span> reply = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gRPC 允许你定义四种服务方法：</p>\n<ul>\n<li>一元 RPCs（Unary RPCs），客户端向服务器发送单个请求并返回单个响应，就像正常的函数调用一样。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc SayHello(HelloRequest) returns (HelloResponse)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>服务器流式 RPC（Server streaming RPCs），客户端向服务器发送请求并获取流以读取消息序列。客户端从返回的流中读取，直到没有更多消息。gRPC 保证单个 RPC 调用中的消息排序。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端流式 RPC（Client streaming RPCs），客户端再次使用提供的流写入一系列消息并将其发送到服务器。一旦客户端写完消息，它就等待服务器读取它们并返回它的响应。gRPC 再次保证在单个 RPC 调用中的消息排序。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>双向流式 RPC（Bidirectional streaming RPCs），双方使用读写流发送一系列消息。这两个流独立运行，因此客户端和服务器可以按照自己喜欢的顺序进行读写：例如，服务器可以在写入响应之前等待接收所有客户端消息，或者它可以交替地读取消息然后写入消息，或者其他一些读写组合。保留每个流中的消息顺序。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc BidiHello(stream HelloRequest) returns (stream HelloResponse)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们将在下面的 RPC 生命周期部分中更详细地介绍不同类型的RPC。</p>\n<h4 id=\"使用-API\"><a href=\"#使用-API\" class=\"headerlink\" title=\"使用 API\"></a>使用 API</h4><p>从 .proto 文件中的服务定义开始，gRPC 提供了生成客户端和服务器端代码的 protocol buffer 编译器插件。gRPC 用户通常在客户端调用这些 API，并在服务器端实现相应的 API。</p>\n<ul>\n<li>在服务器端，服务器实现服务声明的方法，并运行 gRPC 服务器来处理客户端调用。gRPC 基础结构解码传入请求，执行服务方法并对服务响应进行编码</li>\n<li>在客户端，客户端有一个称为存根的本地对象（stub）（对于某些语言，首选术语是 client），它实现与服务相同的方法。然后，客户端可以在本地对象上调用这些方法，将调用的参数包装在适当的 protocol buffer 消息类型中 - gRPC在将请求发送到服务器并返回服务器的 protocol buffer 响应之后查看。</li>\n</ul>\n<h4 id=\"同步-vs-异步\"><a href=\"#同步-vs-异步\" class=\"headerlink\" title=\"同步 vs 异步\"></a>同步 vs 异步</h4><p>在响应从服务器到达之前阻塞的同步 RPC 调用最接近 RPC 所期望的过程调用的抽象。另一方面，网络本质上是异步的，在许多情况下，能够在不阻塞当前线程的情况下启动 RPC 非常有用。</p>\n<p>大多数语言的 gRPC 编程表面都有同步和异步两种版本。您可以在每种语言的教程和参考文档中找到更多信息（完整的参考文档即将推出）。</p>\n<h3 id=\"PRC-生命周期\"><a href=\"#PRC-生命周期\" class=\"headerlink\" title=\"PRC 生命周期\"></a>PRC 生命周期</h3><p>现在让我们仔细看看当 gRPC 客户端调用 gRPC 服务器方法时会发生什么。我们不会查看实现细节，您可以在我们特定语言的页面中找到有关这些内容的更多信息。</p>\n<h4 id=\"Unary-RPC\"><a href=\"#Unary-RPC\" class=\"headerlink\" title=\"Unary RPC\"></a>Unary RPC</h4><p>首先让我们看一下最简单的 RPC 类型，客户端发送单个请求并返回单个响应。</p>\n<ul>\n<li><p>客户端在 stub/client 对象上调用方法后，将通知服务器已使用客户端带着metedata （metadata）调用了产生了一次调用，方法名称和指定的截止时间（如果适用）调用RPC 。</p>\n</li>\n<li><p>然后，服务器可以立即发送回自己的初始metedata （必须在任何响应之前发送），或者等待客户端的请求消息 - 首先发生的是特定于应用程序的消息。</p>\n</li>\n<li><p>一旦服务器具有客户端的请求消息，它就会执行创建和填充其响应所需的任何工作。然后将响应与状态详细信息（状态代码和可选状态消息）以及可选的尾随metedata 一起返回（如果成功）到客户端。</p>\n</li>\n<li><p>如果状态为 OK，则客户端获取响应，从而完成客户端的调用。</p>\n</li>\n</ul>\n<h4 id=\"Server-streaming-RPC\"><a href=\"#Server-streaming-RPC\" class=\"headerlink\" title=\"Server streaming RPC\"></a>Server streaming RPC</h4><p>服务器流 RPC 类似于我们的简单示例，除了服务器在获取客户端的请求消息后发回响应流。在发回所有响应之后，服务器的状态详细信息（状态代码和可选状态消息）和可选的尾随metedata 将被发送回服务器端完成。一旦客户端拥有所有服务器的响应，客户端就会完成。</p>\n<h4 id=\"Client-streaming-RPC\"><a href=\"#Client-streaming-RPC\" class=\"headerlink\" title=\"Client streaming RPC\"></a>Client streaming RPC</h4><p>客户端流式 RPC 也类似于我们的简单示例，除了客户端向服务器发送请求流而不是单个请求。服务器发送回单个响应，通常但不一定在收到所有客户端请求后，以及其状态详细信息和可选的尾随metedata 。</p>\n<h4 id=\"Bidirectional-streaming-RPC\"><a href=\"#Bidirectional-streaming-RPC\" class=\"headerlink\" title=\"Bidirectional streaming RPC\"></a>Bidirectional streaming RPC</h4><p>在双向流式 RPC 中，再次调用由客户端发起的调用并且服务器端接收客户端的metedata 、方法名称和截止日期。服务器再次可以选择发回其初始metedata 或等待客户端开始发送请求。</p>\n<p>接下来会发生什么取决于应用程序，因为客户端和服务器可以按任何顺序读写 - 流完全独立地运行。因此，例如，服务器可以等到它收到所有客户端的消息之后再写入其响应，或者服务器和客户端可以“乒乓”：服务器获取请求，然后发回响应，然后客户端发送另一个基于响应的请求，等等。</p>\n<h4 id=\"截止日期-超时\"><a href=\"#截止日期-超时\" class=\"headerlink\" title=\"截止日期/超时\"></a>截止日期/超时</h4><p>gRPC 允许客户端指定在 RPC 因错误而终止之前，他们愿意等待 RPC 完成的时间 DEADLINE_EXCEEDED。在服务器端，服务器可以查询特定 RPC 是否已超时，或者剩余多少时间来完成 RPC。</p>\n<p>指定截止日期或超时的方式因语言而异 - 例如，并非所有语言都有默认截止日期，某些语言 API 在截止日期（固定时间点）工作，某些语言 API 在超时方面工作（持续时间）。</p>\n<h4 id=\"RPC-终止\"><a href=\"#RPC-终止\" class=\"headerlink\" title=\"RPC 终止\"></a>RPC 终止</h4><p>在 gRPC 中，客户端和服务器都对呼叫的成功进行独立和本地的确定，并且它们的结论可能不匹配。这意味着，例如，您可以在服务器端成功完成 RPC（“我已经发送了所有响应！”），但在客户端失败（“我的截止日期后响应已到达！”）。在客户端发送所有请求之前，服务器也可以决定完成。</p>\n<h4 id=\"取消-RPC\"><a href=\"#取消-RPC\" class=\"headerlink\" title=\"取消 RPC\"></a>取消 RPC</h4><p>客户端或服务器可以随时取消 RPC。取消立即终止 RPC，以便不再进行进一步的工作。它不是 “撤消”：取消之前所做的更改将不会被回滚。</p>\n<h4 id=\"metedata\"><a href=\"#metedata\" class=\"headerlink\" title=\"metedata\"></a>metedata</h4><p>metedata 是以键值对列表形式的特定 RPC 调用（例如<a href=\"#身份验证\">身份验证详细信息</a>）的信息，其中键是字符串，值通常是字符串（但可以是二进制数据）。metedata 对 gRPC 本身是不透明的 - 它允许客户端提供与服务器调用相关的信息，反之亦然。</p>\n<p>对 metedata 的访问取决于语言。</p>\n<h4 id=\"通道（channels）\"><a href=\"#通道（channels）\" class=\"headerlink\" title=\"通道（channels）\"></a>通道（channels）</h4><p>gRPC channel 提供与指定主机和端口上的 gRPC 服务器的连接，并在创建客户端 stub（或某些语言中的 “client”）时使用。客户端可以指定 channel 参数来修改gRPC 的默认行为，例如打开和关闭消息压缩。一个 channel 是有状态的，包括 <code>connected</code> 和 <code>idle</code>。</p>\n<p>gRPC 如何处理关闭 channels 与语言有关。某些语言还允许查询 channels 状态。</p>\n<h2 id=\"身份验证\"><a href=\"#身份验证\" class=\"headerlink\" title=\"身份验证\"></a>身份验证</h2><h3 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h3><p>本文档概述了 gRPC 身份验证，包括我们内置的支持身份验证机制，如何插入您自己的身份验证系统，以及如何在我们支持的语言中使用 gRPC 身份验证的示例。</p>\n<h3 id=\"总览\"><a href=\"#总览\" class=\"headerlink\" title=\"总览\"></a>总览</h3><p>gRPC 旨在与各种身份验证机制配合使用，可以轻松安全地使用 gRPC 与其他系统进行通信。您可以使用我们支持的机制 - 带或不带基于 Google 令牌的身份验证的 SSL / TLS - 或者您可以通过扩展我们提供的代码来插入您自己的身份验证系统。</p>\n<p>gRPC 还提供了一个简单的身份验证 API，可让您 <code>Credentials</code> 在创建 channel 或调用时提供所有必要的身份验证信息。</p>\n<h3 id=\"支持的身份验证机制\"><a href=\"#支持的身份验证机制\" class=\"headerlink\" title=\"支持的身份验证机制\"></a>支持的身份验证机制</h3><p>gRPC 内置了以下身份验证机制：</p>\n<ul>\n<li><p>SSL / TLS：gRPC具有SSL / TLS集成，并促进使用SSL / TLS对服务器进行身份验证，并加密客户端和服务器之间交换的所有数据。可选机制可供客户端提供相互身份验证的证书。</p>\n</li>\n<li><p>使用 Google 进行基于令牌的身份验证：gRPC 提供了一种通用机制如（下所述），用于将基于 metedata 的凭据附加到请求和响应。某些身份验证流程提供了在通过 gRPC 访问 Google API 时获取访问令牌（通常是 OAuth2 令牌）的额外支持：您可以在下面的代码示例中看到它的工作原理。通常，必须使用此机制以及通道上的 SSL / TLS - Google 不允许没有 SSL / TLS 的连接，并且大多数 gRPC 语言实现都不允许您在未加密的通道上发送凭据。</p>\n</li>\n</ul>\n<p>警告：Google 凭据只能用于连接 Google 服务。将 Google 发布的 OAuth2 令牌发送到非 Google 服务可能会导致此令牌被盗并用于冒充客户端到 Google 服务。</p>\n<h3 id=\"身份验证-API\"><a href=\"#身份验证-API\" class=\"headerlink\" title=\"身份验证 API\"></a>身份验证 API</h3><p>gRPC 提供了一个基于 Credentials 对象统一概念的简单身份验证 API，可以在创建整个 gRPC channel 或单个 call 时使用。</p>\n<h4 id=\"凭证类型\"><a href=\"#凭证类型\" class=\"headerlink\" title=\"凭证类型\"></a>凭证类型</h4><p>凭证可以有两种类型：</p>\n<ul>\n<li>Channel credentials，附加到 <code>Channel</code>，例如 SSL 凭据。</li>\n<li>Call credentials，附加到 call（或者 C++ 中的 <code>ClientContext</code>）。</li>\n</ul>\n<p>您还可以将这些组合在一起成为 <code>CompositeChannelCredentials</code>，例如，您可以指定 channel 的 SSL 详细信息以及在 channel 上进行的每个 call 的凭据。一个 <code>CompositeChannelCredentials</code> 将 <code>ChannelCredentials</code> 和 <code>CallCredentials</code> 连接到一起，创建一个新的 <code>ChannelCredentials</code>。结果将 <code>CallCredentials</code> 通过在 channel 上进行的每次调用发送与组合相关的认证数据。</p>\n<p>例如，从 <code>SslCredentials</code> 和<code>AccessTokenCredentials</code> 你可以创建一个 <code>ChannelCredentials</code>。应用于 a 的结果 <code>Channel</code> 将为此通道上的每个调用发送相应的访问令牌。</p>\n<p>单独的 <code>CallCredentials</code> 也可以使用 <code>CompositeCallCredentials</code>。<code>CallCredentials</code> 在调用中使用时产生的结果将触发发送与两者相关联的认证数据。</p>\n<h4 id=\"使用客户端-SSL-TLS\"><a href=\"#使用客户端-SSL-TLS\" class=\"headerlink\" title=\"使用客户端 SSL/TLS\"></a>使用客户端 SSL/TLS</h4><p>现在让我们看一下如何 Credentials 使用我们支持的 auth 机制之一。这是最简单的身份验证方案，客户端只想验证服务器并加密所有数据。该示例使用的是 C ++，但所有语言的 API 都类似：您可以在下面的示例部分中看到如何在更多语言中启用SSL / TLS。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a default SSL ChannelCredentials object.</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> channel_creds = grpc::SslCredentials(grpc::SslCredentialsOptions());</span><br><span class=\"line\"><span class=\"comment\">// Create a channel using the credentials created in the previous step.</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> channel = grpc::CreateChannel(server_name, channel_creds);</span><br><span class=\"line\"><span class=\"comment\">// Create a stub on the channel.</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Greeter::Stub&gt; stub(Greeter::NewStub(channel));</span><br><span class=\"line\"><span class=\"comment\">// Make actual RPC calls on the stub.</span></span><br><span class=\"line\">grpc::Status s = stub-&gt;sayHello(&amp;context, *request, response);</span><br></pre></td></tr></table></figure>\n<p>对于高级用例，例如修改根 CA 或者使用客户端证书，可以在 <code>SslCredentialsOptions</code> 传递给工厂方法的参数中设置相应的选项。</p>\n<p>使用基于 Google 令牌的身份验证</p>\n<p>gRPC 应用程序可以使用简单的 API 创建凭据，该凭据可用于在各种部署方案中与 Google 进行身份验证。同样，我们的示例是在 C++ 中，但你可以在我们的示例部分找到其他语言的示例。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> creds = grpc::GoogleDefaultCredentials();</span><br><span class=\"line\"><span class=\"comment\">// Create a channel, stub and make RPC calls (same as in the previous example)</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> channel = grpc::CreateChannel(server_name, creds);</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Greeter::Stub&gt; stub(Greeter::NewStub(channel));</span><br><span class=\"line\">grpc::Status s = stub-&gt;sayHello(&amp;context, *request, response);</span><br></pre></td></tr></table></figure>\n<p>这个通道凭据对象适用于服务账户里的应用程序以及在 <a href=\"https://cloud.google.com/compute/\" target=\"_blank\" rel=\"noopener\">Google Compute Engine（GCE）中</a>运行的应用程序。在前一种情况下，服务账户的私钥是从环境变量中指定的文件加载的 <code>GOOGLE_APPLICATION_CREDENTIALS</code>。秘钥用于生成附加到相应信道上的每个传出 RPC 的承载令牌。</p>\n<p>对于在 GCE 中运行的应用程序，可以在 VM 设置期间配置默认服务账户和相应的 OAuth2 范围。在运行时，此凭据处理与身份验证系统的通信以获取 OAuth2 访问令牌，并将它们附加到相应通道上每个传出 RPC。</p>\n<h4 id=\"扩展-gRPC-以支持其他身份验证机制\"><a href=\"#扩展-gRPC-以支持其他身份验证机制\" class=\"headerlink\" title=\"扩展 gRPC 以支持其他身份验证机制\"></a>扩展 gRPC 以支持其他身份验证机制</h4><p>Credentials 插件 API 允许开发人员插入它们自己的凭据类型。这包括：</p>\n<ul>\n<li><p><code>MetadataCredentialsPlugin</code> 抽象类，其中包含纯虚 <code>GetMetadata</code> 需要由开发者创建的子类来实现的方法。</p>\n</li>\n<li><p><code>MetadataCredentialsFromPlugin</code> 函数，它从 <code>MetadataCredentialsPlugin</code> 创建了一个 <code>CallCredentials</code>。</p>\n</li>\n</ul>\n<p>下面是一个简单的凭证插件的例子，它在自定义头中设置了一个身份验证票据。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCustomAuthenticator</span> :</span> <span class=\"keyword\">public</span> grpc::MetadataCredentialsPlugin &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  MyCustomAuthenticator(<span class=\"keyword\">const</span> grpc::<span class=\"built_in\">string</span>&amp; ticket) : ticket_(ticket) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  grpc::<span class=\"function\">Status <span class=\"title\">GetMetadata</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      grpc::string_ref service_url, grpc::string_ref method_name,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      <span class=\"keyword\">const</span> grpc::AuthContext&amp; channel_auth_context,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      <span class=\"built_in\">std</span>::<span class=\"built_in\">multimap</span>&lt;grpc::<span class=\"built_in\">string</span>, grpc::<span class=\"built_in\">string</span>&gt;* metadata)</span> override </span>&#123;</span><br><span class=\"line\">    metadata-&gt;insert(<span class=\"built_in\">std</span>::make_pair(<span class=\"string\">\"x-custom-auth-ticket\"</span>, ticket_));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> grpc::Status::OK;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  grpc::<span class=\"built_in\">string</span> ticket_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">auto</span> call_creds = grpc::MetadataCredentialsFromPlugin(</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;grpc::MetadataCredentialsPlugin&gt;(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MyCustomAuthenticator(<span class=\"string\">\"super-secret-ticket\"</span>)));</span><br></pre></td></tr></table></figure>\n<p>通过在核心级插入 gRPC 凭证实现，可以实现更深入的集成。gRPC 内部还允许使用其他加密机制切换 SSL/TLS。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>这些认证机制将在所有 gRPC 支持的语言中可用。下面几节将演示上述身份验证和授权特性如何出现在每种语言中:很快就会有更多的语言出现。</p>\n<h4 id=\"Go\"><a href=\"#Go\" class=\"headerlink\" title=\"Go\"></a>Go</h4><p>基本情况 - 没有加密或者身份验证</p>\n<p>Client:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn, _ := grpc.Dial(<span class=\"string\">\"localhost:50051\"</span>, grpc.WithInsecure())</span><br><span class=\"line\"><span class=\"comment\">// error handling omitted</span></span><br><span class=\"line\">client := pb.NewGreeterClient(conn)</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>Server:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := grpc.NewServer()</span><br><span class=\"line\">lis, _ := net.Listen(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"localhost:50051\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// error handling omitted</span></span><br><span class=\"line\">s.Serve(lis)</span><br></pre></td></tr></table></figure>\n<p>使用服务器身份验证 SSL/TLS</p>\n<p>Client:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">creds, _ := credentials.NewClientTLSFromFile(certFile, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">conn, _ := grpc.Dial(<span class=\"string\">\"localhost:50051\"</span>, grpc.WithTransportCredentials(creds))</span><br><span class=\"line\"><span class=\"comment\">// error handling omitted</span></span><br><span class=\"line\">client := pb.NewGreeterClient(conn)</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>Server:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">creds, _ := credentials.NewServerTLSFromFile(certFile, keyFile)</span><br><span class=\"line\">s := grpc.NewServer(grpc.Creds(creds))</span><br><span class=\"line\">lis, _ := net.Listen(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"localhost:50051\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// error handling omitted</span></span><br><span class=\"line\">s.Serve(lis)</span><br></pre></td></tr></table></figure>\n<p>通过 Google 验证</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool, _ := x509.SystemCertPool()</span><br><span class=\"line\"><span class=\"comment\">// error handling omitted</span></span><br><span class=\"line\">creds := credentials.NewClientTLSFromCert(pool, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">perRPC, _ := oauth.NewServiceAccountFromFile(<span class=\"string\">\"service-account.json\"</span>, scope)</span><br><span class=\"line\">conn, _ := grpc.Dial(</span><br><span class=\"line\">\t<span class=\"string\">\"greeter.googleapis.com\"</span>,</span><br><span class=\"line\">\tgrpc.WithTransportCredentials(creds),</span><br><span class=\"line\">\tgrpc.WithPerRPCCredentials(perRPC),</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// error handling omitted</span></span><br><span class=\"line\">client := pb.NewGreeterClient(conn)</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h4><p>基本情况 - 没有加密或者身份验证</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stub = Helloworld::Greeter::Stub.new(<span class=\"string\">'localhost:50051'</span>, <span class=\"symbol\">:this_channel_is_insecure</span>)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>使用服务器身份验证 SSL/TLS</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">creds = GRPC::Core::Credentials.new(load_certs)  <span class=\"comment\"># load_certs typically loads a CA roots file</span></span><br><span class=\"line\">stub = Helloworld::Greeter::Stub.new(<span class=\"string\">'myservice.example.com'</span>, creds)</span><br></pre></td></tr></table></figure>\n<p>通过 Google 验证</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'googleauth'</span>  <span class=\"comment\"># from http://www.rubydoc.info/gems/googleauth/0.1.0</span></span><br><span class=\"line\">...</span><br><span class=\"line\">ssl_creds = GRPC::Core::ChannelCredentials.new(load_certs)  <span class=\"comment\"># load_certs typically loads a CA roots file</span></span><br><span class=\"line\">authentication = Google::Auth.get_application_default()</span><br><span class=\"line\">call_creds = GRPC::Core::CallCredentials.new(authentication.updater_proc)</span><br><span class=\"line\">combined_creds = ssl_creds.compose(call_creds)</span><br><span class=\"line\">stub = Helloworld::Greeter::Stub.new(<span class=\"string\">'greeter.googleapis.com'</span>, combined_creds)</span><br></pre></td></tr></table></figure>\n<h4 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h4><p>基本情况 - 没有加密或者身份验证</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> channel = grpc::CreateChannel(<span class=\"string\">\"localhost:50051\"</span>, InsecureChannelCredentials());</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Greeter::Stub&gt; stub(Greeter::NewStub(channel));</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>使用服务器身份验证 SSL/TLS</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> channel_creds = grpc::SslCredentials(grpc::SslCredentialsOptions());</span><br><span class=\"line\"><span class=\"keyword\">auto</span> channel = grpc::CreateChannel(<span class=\"string\">\"myservice.example.com\"</span>, channel_creds);</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Greeter::Stub&gt; stub(Greeter::NewStub(channel));</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>通过 Google 验证</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> creds = grpc::GoogleDefaultCredentials();</span><br><span class=\"line\"><span class=\"keyword\">auto</span> channel = grpc::CreateChannel(<span class=\"string\">\"greeter.googleapis.com\"</span>, creds);</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Greeter::Stub&gt; stub(Greeter::NewStub(channel));</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-1\"><a href=\"#C-1\" class=\"headerlink\" title=\"C\"></a>C</h4><p>基本情况 - 没有加密或者身份验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var channel = new Channel(&quot;localhost:50051&quot;, ChannelCredentials.Insecure);</span><br><span class=\"line\">var client = new Greeter.GreeterClient(channel);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>使用服务器身份验证 SSL/TLS</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var channelCredentials = new SslCredentials(File.ReadAllText(&quot;roots.pem&quot;));  // Load a custom roots file.</span><br><span class=\"line\">var channel = new Channel(&quot;myservice.example.com&quot;, channelCredentials);</span><br><span class=\"line\">var client = new Greeter.GreeterClient(channel);</span><br></pre></td></tr></table></figure>\n<p>通过 Google 验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using Grpc.Auth;  // from Grpc.Auth NuGet package</span><br><span class=\"line\">...</span><br><span class=\"line\">// Loads Google Application Default Credentials with publicly trusted roots.</span><br><span class=\"line\">var channelCredentials = await GoogleGrpcCredentials.GetApplicationDefaultAsync();</span><br><span class=\"line\"></span><br><span class=\"line\">var channel = new Channel(&quot;greeter.googleapis.com&quot;, channelCredentials);</span><br><span class=\"line\">var client = new Greeter.GreeterClient(channel);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>验证单个 RPC 调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var channel = new Channel(&quot;greeter.googleapis.com&quot;, new SslCredentials());  // Use publicly trusted roots.</span><br><span class=\"line\">var client = new Greeter.GreeterClient(channel);</span><br><span class=\"line\">...</span><br><span class=\"line\">var googleCredential = await GoogleCredential.GetApplicationDefaultAsync();</span><br><span class=\"line\">var result = client.SayHello(request, new CallOptions(credentials: googleCredential.ToCallCredentials()));</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h4><p>基本情况 - 没有加密或者身份验证</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> grpc</span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2</span><br><span class=\"line\"></span><br><span class=\"line\">channel = grpc.insecure_channel(<span class=\"string\">'localhost:50051'</span>)</span><br><span class=\"line\">stub = helloworld_pb2.GreeterStub(channel)</span><br></pre></td></tr></table></figure>\n<p>使用服务器身份验证 SSL/TLS</p>\n<p>Client:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> grpc</span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'roots.pem'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    creds = grpc.ssl_channel_credentials(f.read())</span><br><span class=\"line\">channel = grpc.secure_channel(<span class=\"string\">'myservice.example.com:443'</span>, creds)</span><br><span class=\"line\">stub = helloworld_pb2.GreeterStub(channel)</span><br></pre></td></tr></table></figure>\n<p>Server:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> grpc</span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent <span class=\"keyword\">import</span> futures</span><br><span class=\"line\"></span><br><span class=\"line\">server = grpc.server(futures.ThreadPoolExecutor(max_workers=<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'key.pem'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    private_key = f.read()</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'chain.pem'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    certificate_chain = f.read()</span><br><span class=\"line\">server_credentials = grpc.ssl_server_credentials( ( (private_key, certificate_chain), ) )</span><br><span class=\"line\"><span class=\"comment\"># Adding GreeterServicer to server omitted</span></span><br><span class=\"line\">server.add_secure_port(<span class=\"string\">'myservice.example.com:443'</span>, server_credentials)</span><br><span class=\"line\">server.start()</span><br><span class=\"line\"><span class=\"comment\"># Server sleep omitted</span></span><br></pre></td></tr></table></figure>\n<p>使用 JWT 与 Google 进行身份验证</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> grpc</span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> google <span class=\"keyword\">import</span> auth <span class=\"keyword\">as</span> google_auth</span><br><span class=\"line\"><span class=\"keyword\">from</span> google.auth <span class=\"keyword\">import</span> jwt <span class=\"keyword\">as</span> google_auth_jwt</span><br><span class=\"line\"><span class=\"keyword\">from</span> google.auth.transport <span class=\"keyword\">import</span> grpc <span class=\"keyword\">as</span> google_auth_transport_grpc</span><br><span class=\"line\"></span><br><span class=\"line\">credentials, _ = google_auth.default()</span><br><span class=\"line\">jwt_creds = google_auth_jwt.OnDemandCredentials.from_signing_credentials(</span><br><span class=\"line\">    credentials)</span><br><span class=\"line\">channel = google_auth_transport_grpc.secure_authorized_channel(</span><br><span class=\"line\">    jwt_creds, <span class=\"literal\">None</span>, <span class=\"string\">'greeter.googleapis.com:443'</span>)</span><br><span class=\"line\">stub = helloworld_pb2.GreeterStub(channel)</span><br></pre></td></tr></table></figure>\n<p>使用 Oauth2 令牌通过 Google 进行身份验证</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> grpc</span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> google <span class=\"keyword\">import</span> auth <span class=\"keyword\">as</span> google_auth</span><br><span class=\"line\"><span class=\"keyword\">from</span> google.auth.transport <span class=\"keyword\">import</span> grpc <span class=\"keyword\">as</span> google_auth_transport_grpc</span><br><span class=\"line\"><span class=\"keyword\">from</span> google.auth.transport <span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> google_auth_transport_requests</span><br><span class=\"line\"></span><br><span class=\"line\">credentials, _ = google_auth.default(scopes=(scope,))</span><br><span class=\"line\">request = google_auth_transport_requests.Request()</span><br><span class=\"line\">channel = google_auth_transport_grpc.secure_authorized_channel(</span><br><span class=\"line\">    credentials, request, <span class=\"string\">'greeter.googleapis.com:443'</span>)</span><br><span class=\"line\">stub = helloworld_pb2.GreeterStub(channel)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h4><p>基本情况 - 没有加密或者身份验证</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ManagedChannel channel = ManagedChannelBuilder.forAddress(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">50051</span>)</span><br><span class=\"line\">    .usePlaintext(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">GreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel);</span><br></pre></td></tr></table></figure>\n<p>使用服务器身份验证 SSL/TLS</p>\n<p>在 Java 中，我们建议你在 TLS 上使用 gRPC 时使用 OpenSSL。您可以在 gRPC Java <a href=\"https://github.com/grpc/grpc-java/blob/master/SECURITY.md#transport-security-tls\" target=\"_blank\" rel=\"noopener\">安全文档</a>中找到关于安装和使用 OpenSSL 以及 Android 和非 Android Java 所需的其他库的详细信息。</p>\n<p>要在服务器上启用 TLS，需要以 PEM 格式指定证书链和私钥。这样的私钥不应该使用密码。链中的证书顺序很重要：更具体地说，顶部的证书必须是主机 CA，而最底部的证书必须是根 CA. 标准 TLS 端口是 443，但我们使用下面的8443 以避免需要操作系统的额外权限。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server server = ServerBuilder.forPort(<span class=\"number\">8443</span>)</span><br><span class=\"line\">    <span class=\"comment\">// Enable TLS</span></span><br><span class=\"line\">    .useTransportSecurity(certChainFile, privateKeyFile)</span><br><span class=\"line\">    .addService(TestServiceGrpc.bindService(serviceImplementation))</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">server.start();</span><br></pre></td></tr></table></figure>\n<p>如果客户端不知道颁发证书的权限，则应分别正确配置 <code>SslContext</code> 或 <code>SSLSocketFactory</code> 提供给  <code>NettyChannelBuilder</code> 或 <code>OkHttpChannelBuilder</code>。</p>\n<p>在客户端，使用 SSL/TLS 的服务器身份验证如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// With server authentication SSL/TLS</span></span><br><span class=\"line\">ManagedChannel channel = ManagedChannelBuilder.forAddress(<span class=\"string\">\"myservice.example.com\"</span>, <span class=\"number\">443</span>)</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">GreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// With server authentication SSL/TLS; custom CA root certificates; not on Android</span></span><br><span class=\"line\">ManagedChannel channel = NettyChannelBuilder.forAddress(<span class=\"string\">\"myservice.example.com\"</span>, <span class=\"number\">443</span>)</span><br><span class=\"line\">    .sslContext(GrpcSslContexts.forClient().trustManager(<span class=\"keyword\">new</span> File(<span class=\"string\">\"roots.pem\"</span>)).build())</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">GreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel);</span><br></pre></td></tr></table></figure>\n<p>通过 Google 验证</p>\n<p>以下代码段显示了如何使用带有服务帐户的 gRPC 调用 <a href=\"https://cloud.google.com/pubsub/docs/overview\" target=\"_blank\" rel=\"noopener\">Google Cloud PubSub API</a>。凭据从存储在众所周知的位置的密钥加载，或者通过检测应用程序在可以自动提供应用程序的环境中运行，例如 Google Compute Engine。虽然此示例特定于 Google 及其服务，但其他服务提供商可以遵循类似的模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GoogleCredentials creds = GoogleCredentials.getApplicationDefault();</span><br><span class=\"line\">ManagedChannel channel = ManagedChannelBuilder.forTarget(<span class=\"string\">\"greeter.googleapis.com\"</span>)</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">GreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel)</span><br><span class=\"line\">    .withCallCredentials(MoreCallCredentials.from(creds));</span><br></pre></td></tr></table></figure>\n<h4 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h4><p>基本情况 - 没有加密或者身份验证</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stub = <span class=\"keyword\">new</span> helloworld.Greeter(<span class=\"string\">'localhost:50051'</span>, grpc.credentials.createInsecure());</span><br></pre></td></tr></table></figure>\n<p>使用服务器身份验证 SSL/TLS</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ssl_creds = grpc.credentials.createSsl(root_certs);</span><br><span class=\"line\"><span class=\"keyword\">var</span> stub = <span class=\"keyword\">new</span> helloworld.Greeter(<span class=\"string\">'myservice.example.com'</span>, ssl_creds);</span><br></pre></td></tr></table></figure>\n<p>通过 Google 验证</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Authenticating with Google</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> GoogleAuth = <span class=\"built_in\">require</span>(<span class=\"string\">'google-auth-library'</span>); <span class=\"comment\">// from https://www.npmjs.com/package/google-auth-library</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> ssl_creds = grpc.credentials.createSsl(root_certs);</span><br><span class=\"line\">(<span class=\"keyword\">new</span> GoogleAuth()).getApplicationDefault(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, auth</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> call_creds = grpc.credentials.createFromGoogleCredential(auth);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> combined_creds = grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> stub = <span class=\"keyword\">new</span> helloworld.Greeter(<span class=\"string\">'greeter.googleapis.com'</span>, combined_credentials);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用 Oauth2 令牌使用 Google 进行身份验证（传统方法）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> GoogleAuth = <span class=\"built_in\">require</span>(<span class=\"string\">'google-auth-library'</span>); <span class=\"comment\">// from https://www.npmjs.com/package/google-auth-library</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> ssl_creds = grpc.Credentials.createSsl(root_certs); <span class=\"comment\">// load_certs typically loads a CA roots file</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">'https://www.googleapis.com/auth/grpc-testing'</span>;</span><br><span class=\"line\">(<span class=\"keyword\">new</span> GoogleAuth()).getApplicationDefault(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, auth</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (auth.createScopeRequired()) &#123;</span><br><span class=\"line\">    auth = auth.createScoped(scope);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> call_creds = grpc.credentials.createFromGoogleCredential(auth);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> combined_creds = grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> stub = <span class=\"keyword\">new</span> helloworld.Greeter(<span class=\"string\">'greeter.googleapis.com'</span>, combined_credentials);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h4><p>基本情况 - 没有加密或者身份验证</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$client = <span class=\"keyword\">new</span> helloworld\\GreeterClient(<span class=\"string\">'localhost:50051'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'credentials'</span> =&gt; Grpc\\ChannelCredentials::createInsecure(),</span><br><span class=\"line\">]);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>通过 Google 验证</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateAuthMetadataCallback</span><span class=\"params\">($context)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $auth_credentials = ApplicationDefaultCredentials::getCredentials();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $auth_credentials-&gt;updateMetadata($metadata = [], $context-&gt;service_url);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$channel_credentials = Grpc\\ChannelCredentials::createComposite(</span><br><span class=\"line\">    Grpc\\ChannelCredentials::createSsl(file_get_contents(<span class=\"string\">'roots.pem'</span>)),</span><br><span class=\"line\">    Grpc\\CallCredentials::createFromPlugin(<span class=\"string\">'updateAuthMetadataCallback'</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">$opts = [</span><br><span class=\"line\">  <span class=\"string\">'credentials'</span> =&gt; $channel_credentials</span><br><span class=\"line\">];</span><br><span class=\"line\">$client = <span class=\"keyword\">new</span> helloworld\\GreeterClient(<span class=\"string\">'greeter.googleapis.com'</span>, $opts);</span><br></pre></td></tr></table></figure>\n<p>使用 Oauth2 令牌使用 Google 进行身份验证（传统方法）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the environment variable \"GOOGLE_APPLICATION_CREDENTIALS\" needs to be set</span></span><br><span class=\"line\">$scope = <span class=\"string\">\"https://www.googleapis.com/auth/grpc-testing\"</span>;</span><br><span class=\"line\">$auth = Google\\Auth\\ApplicationDefaultCredentials::getCredentials($scope);</span><br><span class=\"line\">$opts = [</span><br><span class=\"line\">  <span class=\"string\">'credentials'</span> =&gt; Grpc\\Credentials::createSsl(file_get_contents(<span class=\"string\">'roots.pem'</span>));</span><br><span class=\"line\">  <span class=\"string\">'update_metadata'</span> =&gt; $auth-&gt;getUpdateMetadataFunc(),</span><br><span class=\"line\">];</span><br><span class=\"line\">$client = <span class=\"keyword\">new</span> helloworld\\GreeterClient(<span class=\"string\">'greeter.googleapis.com'</span>, $opts);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Dart\"><a href=\"#Dart\" class=\"headerlink\" title=\"Dart\"></a>Dart</h4><p>基本情况 - 没有加密或者身份验证</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> channel = <span class=\"keyword\">new</span> ClientChannel(<span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">      port: <span class=\"number\">50051</span>,</span><br><span class=\"line\">      options: <span class=\"keyword\">const</span> ChannelOptions(</span><br><span class=\"line\">          credentials: <span class=\"keyword\">const</span> ChannelCredentials.insecure()));</span><br><span class=\"line\"><span class=\"keyword\">final</span> stub = <span class=\"keyword\">new</span> GreeterClient(channel);</span><br></pre></td></tr></table></figure>\n<p>使用服务器身份验证 SSL/TLS</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Load a custom roots file.</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> trustedRoot = <span class=\"keyword\">new</span> File(<span class=\"string\">'roots.pem'</span>).readAsBytesSync();</span><br><span class=\"line\"><span class=\"keyword\">final</span> channelCredentials =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ChannelCredentials.secure(certificates: trustedRoot);</span><br><span class=\"line\"><span class=\"keyword\">final</span> channelOptions = <span class=\"keyword\">new</span> ChannelOptions(credentials: channelCredentials);</span><br><span class=\"line\"><span class=\"keyword\">final</span> channel = <span class=\"keyword\">new</span> ClientChannel(<span class=\"string\">'myservice.example.com'</span>,</span><br><span class=\"line\">    options: channelOptions);</span><br><span class=\"line\"><span class=\"keyword\">final</span> client = <span class=\"keyword\">new</span> GreeterClient(channel);</span><br></pre></td></tr></table></figure>\n<p>通过 Google 验证</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Uses publicly trusted roots by default.</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> channel = <span class=\"keyword\">new</span> ClientChannel(<span class=\"string\">'greeter.googleapis.com'</span>);</span><br><span class=\"line\"><span class=\"keyword\">final</span> serviceAccountJson =</span><br><span class=\"line\">     <span class=\"keyword\">new</span> File(<span class=\"string\">'service-account.json'</span>).readAsStringSync();</span><br><span class=\"line\"><span class=\"keyword\">final</span> credentials = <span class=\"keyword\">new</span> JwtServiceAccountAuthenticator(serviceAccountJson);</span><br><span class=\"line\"><span class=\"keyword\">final</span> client =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> GreeterClient(channel, options: credentials.toCallOptions);</span><br></pre></td></tr></table></figure>\n<p>验证单个 RPC 调用</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Uses publicly trusted roots by default.</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> channel = <span class=\"keyword\">new</span> ClientChannel(<span class=\"string\">'greeter.googleapis.com'</span>);</span><br><span class=\"line\"><span class=\"keyword\">final</span> client = <span class=\"keyword\">new</span> GreeterClient(channel);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">final</span> serviceAccountJson =</span><br><span class=\"line\">     <span class=\"keyword\">new</span> File(<span class=\"string\">'service-account.json'</span>).readAsStringSync();</span><br><span class=\"line\"><span class=\"keyword\">final</span> credentials = <span class=\"keyword\">new</span> JwtServiceAccountAuthenticator(serviceAccountJson);</span><br><span class=\"line\"><span class=\"keyword\">final</span> response =</span><br><span class=\"line\">    <span class=\"keyword\">await</span> client.sayHello(request, options: credentials.toCallOptions);</span><br></pre></td></tr></table></figure>\n<h2 id=\"错误处理和调试\"><a href=\"#错误处理和调试\" class=\"headerlink\" title=\"错误处理和调试\"></a>错误处理和调试</h2><h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>此页面描述了gRPC如何处理错误，包括gRPC的内置错误代码。可以在<a href=\"https://github.com/avinassh/grpc-errors\" target=\"_blank\" rel=\"noopener\">此处</a>找到不同语言的示例代码。</p>\n<h3 id=\"标准错误模型\"><a href=\"#标准错误模型\" class=\"headerlink\" title=\"标准错误模型\"></a>标准错误模型</h3><p>正如您在我们的概念文档和示例中所看到的，当 gRPC 调用成功完成时，服务器会向客户端返回一个 OK 状态（取决于语言，OK 可能会或可能不会直接在您的代码中使用）。但如果调用不成功会怎样？</p>\n<p>如果发生错误，gRPC 会返回其错误状态代码之一，并带有可选的字符串错误消息，该消息提供有关所发生情况的更多详细信息。所有支持的语言中的 gRPC 客户端都可以使用错误信息。</p>\n<h3 id=\"更丰富的错误模型\"><a href=\"#更丰富的错误模型\" class=\"headerlink\" title=\"更丰富的错误模型\"></a>更丰富的错误模型</h3><p>上述错误模型是官方 gRPC 错误模型，受所有 gRPC 客户端/服务器库支持，并且独立于 gRPC 数据格式（无论是 protocol buffers 或者其他内容）。你可能已经注意到它非常有限，并且不包括传达错误详细信息的能力。</p>\n<p>如果你在使用 protoco buffers 的数据格式，你不妨考虑使用开发和这里所描述的由谷歌所使用的更丰富的<a href=\"https://cloud.google.com/apis/design/errors#error_model\" target=\"_blank\" rel=\"noopener\">错误模型</a>。这个模型使服务器返回并且客户端能够使用表示为一个或多个 protobuf 消息的错误详细信息。它进一步制定了一组<a href=\"https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto\" target=\"_blank\" rel=\"noopener\">标准的错误消息类型</a>，以满足最常见的需求（例如无效参数，配额违规和堆栈跟踪）。此额外错误信息的 protobuf 二进制编码在响应中作为尾随元数据提供。</p>\n<p>这个更丰富的错误模型已经在 C++，Go，Java，Python 和 Ruby 库中得到支持，并且至少 grpc-web 和 Nodes.js 库存在请求支持它的 issue。如果有需求，其他语言库可能会在将来添加支持，因此如果感兴趣，请检查他们的 github 存储库。但请注意，用 C 语言编写的 grpc-core 库不太可能支持它，因为它是有目的的数据格式不可知的。</p>\n<p>如果你没有使用 protocol buffers，你可以使用类似的方法（在尾随相应元数据中放置错误详细信息），但你可能需要查找或开发用于访问此数据的库支持，以便在你的实际 API 中使用它。</p>\n<p>在决定是否使用这种扩展错误模型时，需要注意一些重要的注意事项，包括：</p>\n<ul>\n<li>在错误细节有效载荷的要求和期望方面，扩展错误模型的库实现可能在语言之间不一致</li>\n<li>现有代理，记录器和其他标准 HTTP 请求处理器无法查看错误详细信息，因此无法将其用于监视或其他目的</li>\n<li>追踪者中的其他错误详细信息会干扰线头阻塞，并且由于更频繁的缓存未命中而会降低 HTTP/2 报头压缩效率</li>\n<li>较大的错误细节有效负载可能会遇到协议限制（如最大 header 大小），从而有效失去原始错误</li>\n</ul>\n<h3 id=\"错误状态代码\"><a href=\"#错误状态代码\" class=\"headerlink\" title=\"错误状态代码\"></a>错误状态代码</h3><p>gRPC 在各种情况下引发错误，从网络故障到未经认证的连接，每个连接都与特定的状态代码相关联。所有 gRPC 语言都支持以下错误状态代码。</p>\n<h4 id=\"一般错误\"><a href=\"#一般错误\" class=\"headerlink\" title=\"一般错误\"></a>一般错误</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">案件</th>\n<th style=\"text-align:left\">状态代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">客户端应用程序取消请求</td>\n<td style=\"text-align:left\">GRPC_STATUS_CANCELLED</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">截止日期在服务器返回状态之前到期</td>\n<td style=\"text-align:left\">GRPC_STATUS_DEADLINE_EXCEEDED</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">在服务器上找不到的方法</td>\n<td style=\"text-align:left\">GRPC_STATUS_UNIMPLEMENTED</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务器关闭</td>\n<td style=\"text-align:left\">GRPC_STATUS_UNAVAILABLE</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务器抛出异常（或者做了除了返回状态代码以终止RPC之外的其他操作）</td>\n<td style=\"text-align:left\">GRPC_STATUS_UNKNOWN</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"网络故障\"><a href=\"#网络故障\" class=\"headerlink\" title=\"网络故障\"></a>网络故障</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">案件</th>\n<th style=\"text-align:left\">状态代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">在截止日期到期之前没有传输数据。也适用于在截止日期到期之前传输某些数据且未检测到其他故障的情况</td>\n<td style=\"text-align:left\">GRPC_STATUS_DEADLINE_EXCEEDED</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">在连接中断之前传输了一些数据（例如，请求元数据已写入TCP连接）</td>\n<td style=\"text-align:left\">GRPC_STATUS_UNAVAILABLE</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"协议错误\"><a href=\"#协议错误\" class=\"headerlink\" title=\"协议错误\"></a>协议错误</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">案件</th>\n<th style=\"text-align:left\">状态代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">无法解压缩但支持压缩算法</td>\n<td style=\"text-align:left\">GRPC_STATUS_INTERNAL</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">客户端使用的压缩机制不受服务器支持</td>\n<td style=\"text-align:left\">GRPC_STATUS_UNIMPLEMENTED</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">达到流量控制资源限制</td>\n<td style=\"text-align:left\">GRPC_STATUS_RESOURCE_EXHAUSTED</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">流量控制协议违规</td>\n<td style=\"text-align:left\">GRPC_STATUS_INTERNAL</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">解析返回状态时出错</td>\n<td style=\"text-align:left\">GRPC_STATUS_UNKNOWN</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">未经身份验证：凭据无法获取元数据</td>\n<td style=\"text-align:left\">GRPC_STATUS_UNAUTHENTICATED</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">权限元数据中的主机集无效</td>\n<td style=\"text-align:left\">GRPC_STATUS_UNAUTHENTICATED</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">解析响应协议缓冲区时出错</td>\n<td style=\"text-align:left\">GRPC_STATUS_INTERNAL</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">解析请求协议缓冲区时出错</td>\n<td style=\"text-align:left\">GRPC_STATUS_INTERNAL</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><p>gRPC 旨在支持多种语言的高性能开源RPC。本文档介绍了性能基准测试工具，测试所考虑的方案以及测试基础架构。</p>\n<h3 id=\"概览-1\"><a href=\"#概览-1\" class=\"headerlink\" title=\"概览\"></a>概览</h3><p>gRPC 专为分布式应用的高性能和高生产率设计而设计。持续性能基准测试是 gRPC 开发工作流程的关键部分。针对主分支每小时运行多语言性能测试，并将这些数字报告给仪表板以进行可视化。</p>\n<ul>\n<li><a href=\"https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5636470266134528\" target=\"_blank\" rel=\"noopener\">多语言性能仪表板 @latest_release（最新可能用稳定版）</a></li>\n<li><a href=\"https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5652536396611584\" target=\"_blank\" rel=\"noopener\">多语言性能仪表板@master（最新开发版）</a></li>\n<li><a href=\"https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5685265389584384\" target=\"_blank\" rel=\"noopener\">C ++详细性能仪表板@master（最新开发版）</a></li>\n</ul>\n<p>额外的性能测试可以提供有关 CPU 使用情况的细粒度洞察。</p>\n<ul>\n<li><a href=\"https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5684961520648192\" target=\"_blank\" rel=\"noopener\">C ++全栈微基准测试</a></li>\n<li><a href=\"https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5740240702537728\" target=\"_blank\" rel=\"noopener\">C核心过滤器基准测试</a></li>\n<li><a href=\"https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5641826627223552&amp;container=789696829&amp;widget=512792852\" target=\"_blank\" rel=\"noopener\">C Core共享组件基准测试</a></li>\n<li><a href=\"https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5732910535540736\" target=\"_blank\" rel=\"noopener\">C Core HTTP / 2微基准测试</a></li>\n</ul>\n<h3 id=\"性能测试设计\"><a href=\"#性能测试设计\" class=\"headerlink\" title=\"性能测试设计\"></a>性能测试设计</h3><p>每种语言都实现了一个实现 gRPC <a href=\"https://github.com/grpc/grpc/blob/master/src/proto/grpc/testing/worker_service.proto\" target=\"_blank\" rel=\"noopener\">WorkerService</a> 的性能测试工作者 。此服务指示工作人员充当实际基准测试的客户端或服务器，表示为 <a href=\"https://github.com/grpc/grpc/blob/master/src/proto/grpc/testing/benchmark_service.proto\" target=\"_blank\" rel=\"noopener\">BenchmarkService</a>。该服务有两种方法：</p>\n<ul>\n<li>UnaryCall - 一个简单请求的一元RPC，它指定在响应中返回的字节数</li>\n<li>StreamingCall - 一种流式RPC，允许重复的 ping-pongs 请求和响应消息类似于 UnaryCall</li>\n</ul>\n<p><img src=\"https://grpc.io/img/testing_framework.png\" alt=\"image\"></p>\n<p>这些工作程序由<a href=\"https://github.com/grpc/grpc/blob/master/test/cpp/qps/qps_json_driver.cc\" target=\"_blank\" rel=\"noopener\">驱动程序</a>控制，该驱动程序将该方案描述（采用 JSON 格式）和指定每个工作进程的 hots:port 的环境变量作为输入。</p>\n<h3 id=\"正在测试的语言\"><a href=\"#正在测试的语言\" class=\"headerlink\" title=\"正在测试的语言\"></a>正在测试的语言</h3><p>以下语言作为 master 上的客户端和服务器进行连续性能测试：</p>\n<ul>\n<li>C++</li>\n<li>Java</li>\n<li>Go</li>\n<li>C#</li>\n<li>node.js</li>\n<li>Python</li>\n<li>Ruby</li>\n</ul>\n<p>此外，从 C core 派生的所有语言都在每次拉取请求时进行了有限的性能测试（冒烟测试）。</p>\n<p>除了作为性能测试的客户端和服务器端运行之外，所有语言都作为针对 C++ 服务器的客户端进行测试，并作为针对 C++ 客户端的服务器进行测试。此测试旨在为给定语言的客户端或服务器实现提供当前的性能上限，而无需测试另一方。</p>\n<p>虽然 PHP 或移动环境不支持 gRPC 服务器（我们的性能测试需要），但可以使用另一种语言编写的代理 WorkerService 对其客户端性能进行基准测试。此代码是为 PHP 实现的，但尚未处于连续测试模式。</p>\n<h3 id=\"正在测试的场景\"><a href=\"#正在测试的场景\" class=\"headerlink\" title=\"正在测试的场景\"></a>正在测试的场景</h3><p>有几个重要的方案正在测试中并显示在上面的仪表板中，包括以下内容：</p>\n<ul>\n<li>无争用延迟 - 只有 1 个客户端使用 StreamingCall 一次发送一条消息时看到的中位数和尾部​​响应延迟</li>\n<li>QPS - 当有 2 个客户端和总共 64 个通道时的消息/秒速率，每个通道使用 StreamingCall 一次发送 100 个未完成的消息</li>\n<li>可伸缩性（适用于所选语言） - 每个服务器核心的消息数/秒</li>\n</ul>\n<p>大多数性能测试都使用安全通信和 protobufs。一些 C++ 测试还使用不安全的通信和通用（非 protobuf）API 来显示峰值性能。将来可能会添加其他方案。</p>\n<h3 id=\"测试基础架构\"><a href=\"#测试基础架构\" class=\"headerlink\" title=\"测试基础架构\"></a>测试基础架构</h3><p>所有性能基准测试都通过我们的 Jenkins 测试基础架构作为 GCE 中的实例运行。除了上面描述的 gRPC 性能方案之外，我们还运行基线 <a href=\"http://www.netperf.org/\" target=\"_blank\" rel=\"noopener\">netperf TCP_RR</a> 延迟数，以便了解底层网络特征。这些数字出现在我们的仪表板上，有时会根据我们的实例在 GCE 中的分配位置而有所不同。</p>\n<p>大多数测试实例都是 8 核系统，这些系统用于延迟和 QPS 测量。对于 C++ 和 Java，我们还支持在 32 核系统上进行 QPS 测试。所有 QPS 测试都为每台服务器使用 2 台相同的客户端计算机，以确保 QPS 测量不受客户端限制。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是-gRPC？\"><a href=\"#什么是-gRPC？\" class=\"headerlink\" title=\"什么是 gRPC？\"></a>什么是 gRPC？</h2><h3 id=\"指南\"><a href=\"#指南\" class=\"headerlink\" title=\"指南\"></a>指南</h3><p>这篇文档向你介绍了什么是 gRPC 和 protocol buffers。gRPC 可以使用 protocol buffers 作为其接口定义语言（IDL）和底层消息交换格式。如果你是 gRPC 和 protocol buffers 新手，那么读这篇文档可以帮助到你，如果你只是想看看 gRPC 是怎么运作的，直接看<a href=\"https://grpc.io/docs/quickstart/\" target=\"_blank\" rel=\"noopener\">快速开始</a>。</p>","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>在 gRPC 中，Client 应用程序可以直接调用不同机器上的 Server 应用程序上的方法，就像它是一个本地对象一样，这使您更容易创建分布式应用程序和服务。与许多 RPC 系统一样，gRPC 基于定义服务的思想，指定可以使用参数和返回类型远程调用的方法。在 Server 端， Server 实现此接口并运行 gRPC 服务器来处理Client 调用。在Client 端，Client 有一个 Stub (在某些语言中称为 Client)，它提供与 Server 相同的方法。</p>\n\n<p>gRPC clients 和 servers 可以在各种环境中运行并相互通信 - 从 Google 中的服务器到你自己的桌面 - 并且可以用 gPRC 支持的任何语言编写。因此，例如，你可以使用 Java 轻松地创建一个 gRPC server，clints 端使用 GO、Python 或者 Ruby。除此之外，最新的 Google APIs 将具有接口的 gRPC 版本，让你可以轻松地将 Google 功能构建到应用程序中去。</p>\n<h3 id=\"使用-Protocol-Buffers\"><a href=\"#使用-Protocol-Buffers\" class=\"headerlink\" title=\"使用 Protocol Buffers\"></a>使用 Protocol Buffers</h3><p>gRPC 默认使用 <a href=\"https://developers.google.com/protocol-buffers/docs/overview\" target=\"_blank\" rel=\"noopener\">protocol buffers</a>，用于序列化结构化数据的成熟开源机制（尽管它可以与其他数据格式，如：JSON 一起使用）。这是一个如何工作的快速介绍。如果你已经熟悉 protocol buffers，可以随时跳到下一部分。</p>\n<p>使用 protocol buffers 的第一步是定义要在 proto 文件中序列化的数据的结构：这是一个带 .proto 扩展名的普通文本文件。 protocol buffers 数据被构造为消息，其中每个消息是包含一系列称为字段的 name-value 对的信息的小逻辑记录。这是一个简单的例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message Person &#123;</span><br><span class=\"line\">  <span class=\"keyword\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int32</span> id = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> has_ponycopter = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，一旦指定了数据结构，就可以使用 protocol buffers 编译器 <code>protoc</code> 从原型定义生成首选语言的数据访问类。这些为每个字段（如 <code>name()</code> 和 <code>set_name()</code>）提供了简单的访问器，以及将整个结构序列化/解析为原始字节的方法 - 例如，如果您选择的语言是 C++，则在上面的示例中运行编译器将生成上课了 <code>Person</code>。然后，您可以在应用程序中使用此类来填充，序列化和检索 Person protocol buffers 消息。</p>\n<p>正如您将在我们的示例中更详细地看到的那样，您可以在普通的 proto 文件中定义 gRPC 服务，并将 RPC 方法参数和返回类型指定为 protocol buffers 消息：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The greeter service definition.</span></span><br><span class=\"line\">service Greeter &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Sends a greeting</span></span><br><span class=\"line\">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The request message containing the user's name.</span></span><br><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\">  <span class=\"keyword\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The response message containing the greetings</span></span><br><span class=\"line\">message HelloReply &#123;</span><br><span class=\"line\">  <span class=\"keyword\">string</span> message = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gRPC 还使用 protoc 特殊的 gRPC 插件从 proto 文件生成代码。但是，使用 gRPC 插件，您将获得生成的 gRPC 客户端和服务器代码，以及用于填充，序列化和检索消息类型的常规 protocol buffers 代码。我们将在下面更详细地看一下这个例子。</p>\n<p>你可以在 <a href=\"https://developers.google.com/protocol-buffers/docs/overview\" target=\"_blank\" rel=\"noopener\">Protocol Buffers 文档中</a> 找到有关 protocol buffers 的更多信息，并了解如何使用 gRPC 插件快速获取和安装 protoc。</p>\n<h3 id=\"Protocol-Buffers-版本\"><a href=\"#Protocol-Buffers-版本\" class=\"headerlink\" title=\"Protocol Buffers 版本\"></a>Protocol Buffers 版本</h3><p>虽然 protocol buffers 已经供开源用户使用了一段时间，但我们的实例使用了一种新的 protocol buffers 协议，称作 proto3，它具有略微简化的语法，一些有用的新功能并支持更多的语言。目前支持 Java、C++、Python、Object-C、C#、a little-runtime（Android Java）、Ruby、和 JavaScript，这些来自 <a href=\"https://github.com/protocolbuffers/protobuf/releases\" target=\"_blank\" rel=\"noopener\">protocol buffers GitHub Repo</a>。也支持来自 <a href=\"https://github.com/golang/protobuf\" target=\"_blank\" rel=\"noopener\">golang/protobuf GitHub repo</a> 的 Go 语言生成器，还有更多的语言正在开发中。你可以在 <a href=\"https://developers.google.com/protocol-buffers/docs/proto3\" target=\"_blank\" rel=\"noopener\">proto3 语言指南</a>和每种语言的<a href=\"https://developers.google.com/protocol-buffers/docs/reference/overview\" target=\"_blank\" rel=\"noopener\">参考文档</a>中找到更多信息。参考文档还包括 .proto 文件格式的<a href=\"https://developers.google.com/protocol-buffers/docs/reference/proto3-spec\" target=\"_blank\" rel=\"noopener\">正式的规范</a>。</p>\n<p>通常情况下，虽然你可以使用 proto2（当前的默认版本），但我们建议你将 proto3 和 gRPC 一起使用，因为它允许你使用全系列的 gRPC 支持的语言，以避免与 proto2 client 与 proto3 server 通信的兼容性问题，反之亦然。</p>\n<h2 id=\"gRPC-概念\"><a href=\"#gRPC-概念\" class=\"headerlink\" title=\"gRPC 概念\"></a>gRPC 概念</h2><p>本文档介绍了一些关键的 gRPC 概念，概述了 gRPC 的体系结构和 RPC 生命周期。</p>\n<h3 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h3><h4 id=\"服务定义\"><a href=\"#服务定义\" class=\"headerlink\" title=\"服务定义\"></a>服务定义</h4><p>与许多 RPC 系统一样，gRPC 基于定义服务的思想，指定可以使用其参数和返回类型远程调用的方法。默认情况下，gRPC 使用 protocol buffers 作为接口定义语言（IDL）来描述服务接口和有效负载消息的结构。如果需要，可以使用其他替代方案。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service HelloService &#123;</span><br><span class=\"line\">  rpc SayHello (HelloRequest) returns (HelloResponse);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\">  <span class=\"keyword\">string</span> greeting = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message HelloResponse &#123;</span><br><span class=\"line\">  <span class=\"keyword\">string</span> reply = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>gRPC 允许你定义四种服务方法：</p>\n<ul>\n<li>一元 RPCs（Unary RPCs），客户端向服务器发送单个请求并返回单个响应，就像正常的函数调用一样。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc SayHello(HelloRequest) returns (HelloResponse)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>服务器流式 RPC（Server streaming RPCs），客户端向服务器发送请求并获取流以读取消息序列。客户端从返回的流中读取，直到没有更多消息。gRPC 保证单个 RPC 调用中的消息排序。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端流式 RPC（Client streaming RPCs），客户端再次使用提供的流写入一系列消息并将其发送到服务器。一旦客户端写完消息，它就等待服务器读取它们并返回它的响应。gRPC 再次保证在单个 RPC 调用中的消息排序。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>双向流式 RPC（Bidirectional streaming RPCs），双方使用读写流发送一系列消息。这两个流独立运行，因此客户端和服务器可以按照自己喜欢的顺序进行读写：例如，服务器可以在写入响应之前等待接收所有客户端消息，或者它可以交替地读取消息然后写入消息，或者其他一些读写组合。保留每个流中的消息顺序。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpc BidiHello(stream HelloRequest) returns (stream HelloResponse)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们将在下面的 RPC 生命周期部分中更详细地介绍不同类型的RPC。</p>\n<h4 id=\"使用-API\"><a href=\"#使用-API\" class=\"headerlink\" title=\"使用 API\"></a>使用 API</h4><p>从 .proto 文件中的服务定义开始，gRPC 提供了生成客户端和服务器端代码的 protocol buffer 编译器插件。gRPC 用户通常在客户端调用这些 API，并在服务器端实现相应的 API。</p>\n<ul>\n<li>在服务器端，服务器实现服务声明的方法，并运行 gRPC 服务器来处理客户端调用。gRPC 基础结构解码传入请求，执行服务方法并对服务响应进行编码</li>\n<li>在客户端，客户端有一个称为存根的本地对象（stub）（对于某些语言，首选术语是 client），它实现与服务相同的方法。然后，客户端可以在本地对象上调用这些方法，将调用的参数包装在适当的 protocol buffer 消息类型中 - gRPC在将请求发送到服务器并返回服务器的 protocol buffer 响应之后查看。</li>\n</ul>\n<h4 id=\"同步-vs-异步\"><a href=\"#同步-vs-异步\" class=\"headerlink\" title=\"同步 vs 异步\"></a>同步 vs 异步</h4><p>在响应从服务器到达之前阻塞的同步 RPC 调用最接近 RPC 所期望的过程调用的抽象。另一方面，网络本质上是异步的，在许多情况下，能够在不阻塞当前线程的情况下启动 RPC 非常有用。</p>\n<p>大多数语言的 gRPC 编程表面都有同步和异步两种版本。您可以在每种语言的教程和参考文档中找到更多信息（完整的参考文档即将推出）。</p>\n<h3 id=\"PRC-生命周期\"><a href=\"#PRC-生命周期\" class=\"headerlink\" title=\"PRC 生命周期\"></a>PRC 生命周期</h3><p>现在让我们仔细看看当 gRPC 客户端调用 gRPC 服务器方法时会发生什么。我们不会查看实现细节，您可以在我们特定语言的页面中找到有关这些内容的更多信息。</p>\n<h4 id=\"Unary-RPC\"><a href=\"#Unary-RPC\" class=\"headerlink\" title=\"Unary RPC\"></a>Unary RPC</h4><p>首先让我们看一下最简单的 RPC 类型，客户端发送单个请求并返回单个响应。</p>\n<ul>\n<li><p>客户端在 stub/client 对象上调用方法后，将通知服务器已使用客户端带着metedata （metadata）调用了产生了一次调用，方法名称和指定的截止时间（如果适用）调用RPC 。</p>\n</li>\n<li><p>然后，服务器可以立即发送回自己的初始metedata （必须在任何响应之前发送），或者等待客户端的请求消息 - 首先发生的是特定于应用程序的消息。</p>\n</li>\n<li><p>一旦服务器具有客户端的请求消息，它就会执行创建和填充其响应所需的任何工作。然后将响应与状态详细信息（状态代码和可选状态消息）以及可选的尾随metedata 一起返回（如果成功）到客户端。</p>\n</li>\n<li><p>如果状态为 OK，则客户端获取响应，从而完成客户端的调用。</p>\n</li>\n</ul>\n<h4 id=\"Server-streaming-RPC\"><a href=\"#Server-streaming-RPC\" class=\"headerlink\" title=\"Server streaming RPC\"></a>Server streaming RPC</h4><p>服务器流 RPC 类似于我们的简单示例，除了服务器在获取客户端的请求消息后发回响应流。在发回所有响应之后，服务器的状态详细信息（状态代码和可选状态消息）和可选的尾随metedata 将被发送回服务器端完成。一旦客户端拥有所有服务器的响应，客户端就会完成。</p>\n<h4 id=\"Client-streaming-RPC\"><a href=\"#Client-streaming-RPC\" class=\"headerlink\" title=\"Client streaming RPC\"></a>Client streaming RPC</h4><p>客户端流式 RPC 也类似于我们的简单示例，除了客户端向服务器发送请求流而不是单个请求。服务器发送回单个响应，通常但不一定在收到所有客户端请求后，以及其状态详细信息和可选的尾随metedata 。</p>\n<h4 id=\"Bidirectional-streaming-RPC\"><a href=\"#Bidirectional-streaming-RPC\" class=\"headerlink\" title=\"Bidirectional streaming RPC\"></a>Bidirectional streaming RPC</h4><p>在双向流式 RPC 中，再次调用由客户端发起的调用并且服务器端接收客户端的metedata 、方法名称和截止日期。服务器再次可以选择发回其初始metedata 或等待客户端开始发送请求。</p>\n<p>接下来会发生什么取决于应用程序，因为客户端和服务器可以按任何顺序读写 - 流完全独立地运行。因此，例如，服务器可以等到它收到所有客户端的消息之后再写入其响应，或者服务器和客户端可以“乒乓”：服务器获取请求，然后发回响应，然后客户端发送另一个基于响应的请求，等等。</p>\n<h4 id=\"截止日期-超时\"><a href=\"#截止日期-超时\" class=\"headerlink\" title=\"截止日期/超时\"></a>截止日期/超时</h4><p>gRPC 允许客户端指定在 RPC 因错误而终止之前，他们愿意等待 RPC 完成的时间 DEADLINE_EXCEEDED。在服务器端，服务器可以查询特定 RPC 是否已超时，或者剩余多少时间来完成 RPC。</p>\n<p>指定截止日期或超时的方式因语言而异 - 例如，并非所有语言都有默认截止日期，某些语言 API 在截止日期（固定时间点）工作，某些语言 API 在超时方面工作（持续时间）。</p>\n<h4 id=\"RPC-终止\"><a href=\"#RPC-终止\" class=\"headerlink\" title=\"RPC 终止\"></a>RPC 终止</h4><p>在 gRPC 中，客户端和服务器都对呼叫的成功进行独立和本地的确定，并且它们的结论可能不匹配。这意味着，例如，您可以在服务器端成功完成 RPC（“我已经发送了所有响应！”），但在客户端失败（“我的截止日期后响应已到达！”）。在客户端发送所有请求之前，服务器也可以决定完成。</p>\n<h4 id=\"取消-RPC\"><a href=\"#取消-RPC\" class=\"headerlink\" title=\"取消 RPC\"></a>取消 RPC</h4><p>客户端或服务器可以随时取消 RPC。取消立即终止 RPC，以便不再进行进一步的工作。它不是 “撤消”：取消之前所做的更改将不会被回滚。</p>\n<h4 id=\"metedata\"><a href=\"#metedata\" class=\"headerlink\" title=\"metedata\"></a>metedata</h4><p>metedata 是以键值对列表形式的特定 RPC 调用（例如<a href=\"#身份验证\">身份验证详细信息</a>）的信息，其中键是字符串，值通常是字符串（但可以是二进制数据）。metedata 对 gRPC 本身是不透明的 - 它允许客户端提供与服务器调用相关的信息，反之亦然。</p>\n<p>对 metedata 的访问取决于语言。</p>\n<h4 id=\"通道（channels）\"><a href=\"#通道（channels）\" class=\"headerlink\" title=\"通道（channels）\"></a>通道（channels）</h4><p>gRPC channel 提供与指定主机和端口上的 gRPC 服务器的连接，并在创建客户端 stub（或某些语言中的 “client”）时使用。客户端可以指定 channel 参数来修改gRPC 的默认行为，例如打开和关闭消息压缩。一个 channel 是有状态的，包括 <code>connected</code> 和 <code>idle</code>。</p>\n<p>gRPC 如何处理关闭 channels 与语言有关。某些语言还允许查询 channels 状态。</p>\n<h2 id=\"身份验证\"><a href=\"#身份验证\" class=\"headerlink\" title=\"身份验证\"></a>身份验证</h2><h3 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h3><p>本文档概述了 gRPC 身份验证，包括我们内置的支持身份验证机制，如何插入您自己的身份验证系统，以及如何在我们支持的语言中使用 gRPC 身份验证的示例。</p>\n<h3 id=\"总览\"><a href=\"#总览\" class=\"headerlink\" title=\"总览\"></a>总览</h3><p>gRPC 旨在与各种身份验证机制配合使用，可以轻松安全地使用 gRPC 与其他系统进行通信。您可以使用我们支持的机制 - 带或不带基于 Google 令牌的身份验证的 SSL / TLS - 或者您可以通过扩展我们提供的代码来插入您自己的身份验证系统。</p>\n<p>gRPC 还提供了一个简单的身份验证 API，可让您 <code>Credentials</code> 在创建 channel 或调用时提供所有必要的身份验证信息。</p>\n<h3 id=\"支持的身份验证机制\"><a href=\"#支持的身份验证机制\" class=\"headerlink\" title=\"支持的身份验证机制\"></a>支持的身份验证机制</h3><p>gRPC 内置了以下身份验证机制：</p>\n<ul>\n<li><p>SSL / TLS：gRPC具有SSL / TLS集成，并促进使用SSL / TLS对服务器进行身份验证，并加密客户端和服务器之间交换的所有数据。可选机制可供客户端提供相互身份验证的证书。</p>\n</li>\n<li><p>使用 Google 进行基于令牌的身份验证：gRPC 提供了一种通用机制如（下所述），用于将基于 metedata 的凭据附加到请求和响应。某些身份验证流程提供了在通过 gRPC 访问 Google API 时获取访问令牌（通常是 OAuth2 令牌）的额外支持：您可以在下面的代码示例中看到它的工作原理。通常，必须使用此机制以及通道上的 SSL / TLS - Google 不允许没有 SSL / TLS 的连接，并且大多数 gRPC 语言实现都不允许您在未加密的通道上发送凭据。</p>\n</li>\n</ul>\n<p>警告：Google 凭据只能用于连接 Google 服务。将 Google 发布的 OAuth2 令牌发送到非 Google 服务可能会导致此令牌被盗并用于冒充客户端到 Google 服务。</p>\n<h3 id=\"身份验证-API\"><a href=\"#身份验证-API\" class=\"headerlink\" title=\"身份验证 API\"></a>身份验证 API</h3><p>gRPC 提供了一个基于 Credentials 对象统一概念的简单身份验证 API，可以在创建整个 gRPC channel 或单个 call 时使用。</p>\n<h4 id=\"凭证类型\"><a href=\"#凭证类型\" class=\"headerlink\" title=\"凭证类型\"></a>凭证类型</h4><p>凭证可以有两种类型：</p>\n<ul>\n<li>Channel credentials，附加到 <code>Channel</code>，例如 SSL 凭据。</li>\n<li>Call credentials，附加到 call（或者 C++ 中的 <code>ClientContext</code>）。</li>\n</ul>\n<p>您还可以将这些组合在一起成为 <code>CompositeChannelCredentials</code>，例如，您可以指定 channel 的 SSL 详细信息以及在 channel 上进行的每个 call 的凭据。一个 <code>CompositeChannelCredentials</code> 将 <code>ChannelCredentials</code> 和 <code>CallCredentials</code> 连接到一起，创建一个新的 <code>ChannelCredentials</code>。结果将 <code>CallCredentials</code> 通过在 channel 上进行的每次调用发送与组合相关的认证数据。</p>\n<p>例如，从 <code>SslCredentials</code> 和<code>AccessTokenCredentials</code> 你可以创建一个 <code>ChannelCredentials</code>。应用于 a 的结果 <code>Channel</code> 将为此通道上的每个调用发送相应的访问令牌。</p>\n<p>单独的 <code>CallCredentials</code> 也可以使用 <code>CompositeCallCredentials</code>。<code>CallCredentials</code> 在调用中使用时产生的结果将触发发送与两者相关联的认证数据。</p>\n<h4 id=\"使用客户端-SSL-TLS\"><a href=\"#使用客户端-SSL-TLS\" class=\"headerlink\" title=\"使用客户端 SSL/TLS\"></a>使用客户端 SSL/TLS</h4><p>现在让我们看一下如何 Credentials 使用我们支持的 auth 机制之一。这是最简单的身份验证方案，客户端只想验证服务器并加密所有数据。该示例使用的是 C ++，但所有语言的 API 都类似：您可以在下面的示例部分中看到如何在更多语言中启用SSL / TLS。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a default SSL ChannelCredentials object.</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> channel_creds = grpc::SslCredentials(grpc::SslCredentialsOptions());</span><br><span class=\"line\"><span class=\"comment\">// Create a channel using the credentials created in the previous step.</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> channel = grpc::CreateChannel(server_name, channel_creds);</span><br><span class=\"line\"><span class=\"comment\">// Create a stub on the channel.</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Greeter::Stub&gt; stub(Greeter::NewStub(channel));</span><br><span class=\"line\"><span class=\"comment\">// Make actual RPC calls on the stub.</span></span><br><span class=\"line\">grpc::Status s = stub-&gt;sayHello(&amp;context, *request, response);</span><br></pre></td></tr></table></figure>\n<p>对于高级用例，例如修改根 CA 或者使用客户端证书，可以在 <code>SslCredentialsOptions</code> 传递给工厂方法的参数中设置相应的选项。</p>\n<p>使用基于 Google 令牌的身份验证</p>\n<p>gRPC 应用程序可以使用简单的 API 创建凭据，该凭据可用于在各种部署方案中与 Google 进行身份验证。同样，我们的示例是在 C++ 中，但你可以在我们的示例部分找到其他语言的示例。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> creds = grpc::GoogleDefaultCredentials();</span><br><span class=\"line\"><span class=\"comment\">// Create a channel, stub and make RPC calls (same as in the previous example)</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> channel = grpc::CreateChannel(server_name, creds);</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Greeter::Stub&gt; stub(Greeter::NewStub(channel));</span><br><span class=\"line\">grpc::Status s = stub-&gt;sayHello(&amp;context, *request, response);</span><br></pre></td></tr></table></figure>\n<p>这个通道凭据对象适用于服务账户里的应用程序以及在 <a href=\"https://cloud.google.com/compute/\" target=\"_blank\" rel=\"noopener\">Google Compute Engine（GCE）中</a>运行的应用程序。在前一种情况下，服务账户的私钥是从环境变量中指定的文件加载的 <code>GOOGLE_APPLICATION_CREDENTIALS</code>。秘钥用于生成附加到相应信道上的每个传出 RPC 的承载令牌。</p>\n<p>对于在 GCE 中运行的应用程序，可以在 VM 设置期间配置默认服务账户和相应的 OAuth2 范围。在运行时，此凭据处理与身份验证系统的通信以获取 OAuth2 访问令牌，并将它们附加到相应通道上每个传出 RPC。</p>\n<h4 id=\"扩展-gRPC-以支持其他身份验证机制\"><a href=\"#扩展-gRPC-以支持其他身份验证机制\" class=\"headerlink\" title=\"扩展 gRPC 以支持其他身份验证机制\"></a>扩展 gRPC 以支持其他身份验证机制</h4><p>Credentials 插件 API 允许开发人员插入它们自己的凭据类型。这包括：</p>\n<ul>\n<li><p><code>MetadataCredentialsPlugin</code> 抽象类，其中包含纯虚 <code>GetMetadata</code> 需要由开发者创建的子类来实现的方法。</p>\n</li>\n<li><p><code>MetadataCredentialsFromPlugin</code> 函数，它从 <code>MetadataCredentialsPlugin</code> 创建了一个 <code>CallCredentials</code>。</p>\n</li>\n</ul>\n<p>下面是一个简单的凭证插件的例子，它在自定义头中设置了一个身份验证票据。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCustomAuthenticator</span> :</span> <span class=\"keyword\">public</span> grpc::MetadataCredentialsPlugin &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  MyCustomAuthenticator(<span class=\"keyword\">const</span> grpc::<span class=\"built_in\">string</span>&amp; ticket) : ticket_(ticket) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  grpc::<span class=\"function\">Status <span class=\"title\">GetMetadata</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      grpc::string_ref service_url, grpc::string_ref method_name,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      <span class=\"keyword\">const</span> grpc::AuthContext&amp; channel_auth_context,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      <span class=\"built_in\">std</span>::<span class=\"built_in\">multimap</span>&lt;grpc::<span class=\"built_in\">string</span>, grpc::<span class=\"built_in\">string</span>&gt;* metadata)</span> override </span>&#123;</span><br><span class=\"line\">    metadata-&gt;insert(<span class=\"built_in\">std</span>::make_pair(<span class=\"string\">\"x-custom-auth-ticket\"</span>, ticket_));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> grpc::Status::OK;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  grpc::<span class=\"built_in\">string</span> ticket_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">auto</span> call_creds = grpc::MetadataCredentialsFromPlugin(</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;grpc::MetadataCredentialsPlugin&gt;(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MyCustomAuthenticator(<span class=\"string\">\"super-secret-ticket\"</span>)));</span><br></pre></td></tr></table></figure>\n<p>通过在核心级插入 gRPC 凭证实现，可以实现更深入的集成。gRPC 内部还允许使用其他加密机制切换 SSL/TLS。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>这些认证机制将在所有 gRPC 支持的语言中可用。下面几节将演示上述身份验证和授权特性如何出现在每种语言中:很快就会有更多的语言出现。</p>\n<h4 id=\"Go\"><a href=\"#Go\" class=\"headerlink\" title=\"Go\"></a>Go</h4><p>基本情况 - 没有加密或者身份验证</p>\n<p>Client:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn, _ := grpc.Dial(<span class=\"string\">\"localhost:50051\"</span>, grpc.WithInsecure())</span><br><span class=\"line\"><span class=\"comment\">// error handling omitted</span></span><br><span class=\"line\">client := pb.NewGreeterClient(conn)</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>Server:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := grpc.NewServer()</span><br><span class=\"line\">lis, _ := net.Listen(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"localhost:50051\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// error handling omitted</span></span><br><span class=\"line\">s.Serve(lis)</span><br></pre></td></tr></table></figure>\n<p>使用服务器身份验证 SSL/TLS</p>\n<p>Client:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">creds, _ := credentials.NewClientTLSFromFile(certFile, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">conn, _ := grpc.Dial(<span class=\"string\">\"localhost:50051\"</span>, grpc.WithTransportCredentials(creds))</span><br><span class=\"line\"><span class=\"comment\">// error handling omitted</span></span><br><span class=\"line\">client := pb.NewGreeterClient(conn)</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>Server:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">creds, _ := credentials.NewServerTLSFromFile(certFile, keyFile)</span><br><span class=\"line\">s := grpc.NewServer(grpc.Creds(creds))</span><br><span class=\"line\">lis, _ := net.Listen(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"localhost:50051\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// error handling omitted</span></span><br><span class=\"line\">s.Serve(lis)</span><br></pre></td></tr></table></figure>\n<p>通过 Google 验证</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool, _ := x509.SystemCertPool()</span><br><span class=\"line\"><span class=\"comment\">// error handling omitted</span></span><br><span class=\"line\">creds := credentials.NewClientTLSFromCert(pool, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">perRPC, _ := oauth.NewServiceAccountFromFile(<span class=\"string\">\"service-account.json\"</span>, scope)</span><br><span class=\"line\">conn, _ := grpc.Dial(</span><br><span class=\"line\">\t<span class=\"string\">\"greeter.googleapis.com\"</span>,</span><br><span class=\"line\">\tgrpc.WithTransportCredentials(creds),</span><br><span class=\"line\">\tgrpc.WithPerRPCCredentials(perRPC),</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// error handling omitted</span></span><br><span class=\"line\">client := pb.NewGreeterClient(conn)</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h4><p>基本情况 - 没有加密或者身份验证</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stub = Helloworld::Greeter::Stub.new(<span class=\"string\">'localhost:50051'</span>, <span class=\"symbol\">:this_channel_is_insecure</span>)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>使用服务器身份验证 SSL/TLS</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">creds = GRPC::Core::Credentials.new(load_certs)  <span class=\"comment\"># load_certs typically loads a CA roots file</span></span><br><span class=\"line\">stub = Helloworld::Greeter::Stub.new(<span class=\"string\">'myservice.example.com'</span>, creds)</span><br></pre></td></tr></table></figure>\n<p>通过 Google 验证</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'googleauth'</span>  <span class=\"comment\"># from http://www.rubydoc.info/gems/googleauth/0.1.0</span></span><br><span class=\"line\">...</span><br><span class=\"line\">ssl_creds = GRPC::Core::ChannelCredentials.new(load_certs)  <span class=\"comment\"># load_certs typically loads a CA roots file</span></span><br><span class=\"line\">authentication = Google::Auth.get_application_default()</span><br><span class=\"line\">call_creds = GRPC::Core::CallCredentials.new(authentication.updater_proc)</span><br><span class=\"line\">combined_creds = ssl_creds.compose(call_creds)</span><br><span class=\"line\">stub = Helloworld::Greeter::Stub.new(<span class=\"string\">'greeter.googleapis.com'</span>, combined_creds)</span><br></pre></td></tr></table></figure>\n<h4 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h4><p>基本情况 - 没有加密或者身份验证</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> channel = grpc::CreateChannel(<span class=\"string\">\"localhost:50051\"</span>, InsecureChannelCredentials());</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Greeter::Stub&gt; stub(Greeter::NewStub(channel));</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>使用服务器身份验证 SSL/TLS</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> channel_creds = grpc::SslCredentials(grpc::SslCredentialsOptions());</span><br><span class=\"line\"><span class=\"keyword\">auto</span> channel = grpc::CreateChannel(<span class=\"string\">\"myservice.example.com\"</span>, channel_creds);</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Greeter::Stub&gt; stub(Greeter::NewStub(channel));</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>通过 Google 验证</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> creds = grpc::GoogleDefaultCredentials();</span><br><span class=\"line\"><span class=\"keyword\">auto</span> channel = grpc::CreateChannel(<span class=\"string\">\"greeter.googleapis.com\"</span>, creds);</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Greeter::Stub&gt; stub(Greeter::NewStub(channel));</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"C-1\"><a href=\"#C-1\" class=\"headerlink\" title=\"C\"></a>C</h4><p>基本情况 - 没有加密或者身份验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var channel = new Channel(&quot;localhost:50051&quot;, ChannelCredentials.Insecure);</span><br><span class=\"line\">var client = new Greeter.GreeterClient(channel);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>使用服务器身份验证 SSL/TLS</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var channelCredentials = new SslCredentials(File.ReadAllText(&quot;roots.pem&quot;));  // Load a custom roots file.</span><br><span class=\"line\">var channel = new Channel(&quot;myservice.example.com&quot;, channelCredentials);</span><br><span class=\"line\">var client = new Greeter.GreeterClient(channel);</span><br></pre></td></tr></table></figure>\n<p>通过 Google 验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using Grpc.Auth;  // from Grpc.Auth NuGet package</span><br><span class=\"line\">...</span><br><span class=\"line\">// Loads Google Application Default Credentials with publicly trusted roots.</span><br><span class=\"line\">var channelCredentials = await GoogleGrpcCredentials.GetApplicationDefaultAsync();</span><br><span class=\"line\"></span><br><span class=\"line\">var channel = new Channel(&quot;greeter.googleapis.com&quot;, channelCredentials);</span><br><span class=\"line\">var client = new Greeter.GreeterClient(channel);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>验证单个 RPC 调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var channel = new Channel(&quot;greeter.googleapis.com&quot;, new SslCredentials());  // Use publicly trusted roots.</span><br><span class=\"line\">var client = new Greeter.GreeterClient(channel);</span><br><span class=\"line\">...</span><br><span class=\"line\">var googleCredential = await GoogleCredential.GetApplicationDefaultAsync();</span><br><span class=\"line\">var result = client.SayHello(request, new CallOptions(credentials: googleCredential.ToCallCredentials()));</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h4><p>基本情况 - 没有加密或者身份验证</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> grpc</span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2</span><br><span class=\"line\"></span><br><span class=\"line\">channel = grpc.insecure_channel(<span class=\"string\">'localhost:50051'</span>)</span><br><span class=\"line\">stub = helloworld_pb2.GreeterStub(channel)</span><br></pre></td></tr></table></figure>\n<p>使用服务器身份验证 SSL/TLS</p>\n<p>Client:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> grpc</span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'roots.pem'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    creds = grpc.ssl_channel_credentials(f.read())</span><br><span class=\"line\">channel = grpc.secure_channel(<span class=\"string\">'myservice.example.com:443'</span>, creds)</span><br><span class=\"line\">stub = helloworld_pb2.GreeterStub(channel)</span><br></pre></td></tr></table></figure>\n<p>Server:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> grpc</span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent <span class=\"keyword\">import</span> futures</span><br><span class=\"line\"></span><br><span class=\"line\">server = grpc.server(futures.ThreadPoolExecutor(max_workers=<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'key.pem'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    private_key = f.read()</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'chain.pem'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    certificate_chain = f.read()</span><br><span class=\"line\">server_credentials = grpc.ssl_server_credentials( ( (private_key, certificate_chain), ) )</span><br><span class=\"line\"><span class=\"comment\"># Adding GreeterServicer to server omitted</span></span><br><span class=\"line\">server.add_secure_port(<span class=\"string\">'myservice.example.com:443'</span>, server_credentials)</span><br><span class=\"line\">server.start()</span><br><span class=\"line\"><span class=\"comment\"># Server sleep omitted</span></span><br></pre></td></tr></table></figure>\n<p>使用 JWT 与 Google 进行身份验证</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> grpc</span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> google <span class=\"keyword\">import</span> auth <span class=\"keyword\">as</span> google_auth</span><br><span class=\"line\"><span class=\"keyword\">from</span> google.auth <span class=\"keyword\">import</span> jwt <span class=\"keyword\">as</span> google_auth_jwt</span><br><span class=\"line\"><span class=\"keyword\">from</span> google.auth.transport <span class=\"keyword\">import</span> grpc <span class=\"keyword\">as</span> google_auth_transport_grpc</span><br><span class=\"line\"></span><br><span class=\"line\">credentials, _ = google_auth.default()</span><br><span class=\"line\">jwt_creds = google_auth_jwt.OnDemandCredentials.from_signing_credentials(</span><br><span class=\"line\">    credentials)</span><br><span class=\"line\">channel = google_auth_transport_grpc.secure_authorized_channel(</span><br><span class=\"line\">    jwt_creds, <span class=\"literal\">None</span>, <span class=\"string\">'greeter.googleapis.com:443'</span>)</span><br><span class=\"line\">stub = helloworld_pb2.GreeterStub(channel)</span><br></pre></td></tr></table></figure>\n<p>使用 Oauth2 令牌通过 Google 进行身份验证</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> grpc</span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> google <span class=\"keyword\">import</span> auth <span class=\"keyword\">as</span> google_auth</span><br><span class=\"line\"><span class=\"keyword\">from</span> google.auth.transport <span class=\"keyword\">import</span> grpc <span class=\"keyword\">as</span> google_auth_transport_grpc</span><br><span class=\"line\"><span class=\"keyword\">from</span> google.auth.transport <span class=\"keyword\">import</span> requests <span class=\"keyword\">as</span> google_auth_transport_requests</span><br><span class=\"line\"></span><br><span class=\"line\">credentials, _ = google_auth.default(scopes=(scope,))</span><br><span class=\"line\">request = google_auth_transport_requests.Request()</span><br><span class=\"line\">channel = google_auth_transport_grpc.secure_authorized_channel(</span><br><span class=\"line\">    credentials, request, <span class=\"string\">'greeter.googleapis.com:443'</span>)</span><br><span class=\"line\">stub = helloworld_pb2.GreeterStub(channel)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h4><p>基本情况 - 没有加密或者身份验证</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ManagedChannel channel = ManagedChannelBuilder.forAddress(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">50051</span>)</span><br><span class=\"line\">    .usePlaintext(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">GreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel);</span><br></pre></td></tr></table></figure>\n<p>使用服务器身份验证 SSL/TLS</p>\n<p>在 Java 中，我们建议你在 TLS 上使用 gRPC 时使用 OpenSSL。您可以在 gRPC Java <a href=\"https://github.com/grpc/grpc-java/blob/master/SECURITY.md#transport-security-tls\" target=\"_blank\" rel=\"noopener\">安全文档</a>中找到关于安装和使用 OpenSSL 以及 Android 和非 Android Java 所需的其他库的详细信息。</p>\n<p>要在服务器上启用 TLS，需要以 PEM 格式指定证书链和私钥。这样的私钥不应该使用密码。链中的证书顺序很重要：更具体地说，顶部的证书必须是主机 CA，而最底部的证书必须是根 CA. 标准 TLS 端口是 443，但我们使用下面的8443 以避免需要操作系统的额外权限。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server server = ServerBuilder.forPort(<span class=\"number\">8443</span>)</span><br><span class=\"line\">    <span class=\"comment\">// Enable TLS</span></span><br><span class=\"line\">    .useTransportSecurity(certChainFile, privateKeyFile)</span><br><span class=\"line\">    .addService(TestServiceGrpc.bindService(serviceImplementation))</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">server.start();</span><br></pre></td></tr></table></figure>\n<p>如果客户端不知道颁发证书的权限，则应分别正确配置 <code>SslContext</code> 或 <code>SSLSocketFactory</code> 提供给  <code>NettyChannelBuilder</code> 或 <code>OkHttpChannelBuilder</code>。</p>\n<p>在客户端，使用 SSL/TLS 的服务器身份验证如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// With server authentication SSL/TLS</span></span><br><span class=\"line\">ManagedChannel channel = ManagedChannelBuilder.forAddress(<span class=\"string\">\"myservice.example.com\"</span>, <span class=\"number\">443</span>)</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">GreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// With server authentication SSL/TLS; custom CA root certificates; not on Android</span></span><br><span class=\"line\">ManagedChannel channel = NettyChannelBuilder.forAddress(<span class=\"string\">\"myservice.example.com\"</span>, <span class=\"number\">443</span>)</span><br><span class=\"line\">    .sslContext(GrpcSslContexts.forClient().trustManager(<span class=\"keyword\">new</span> File(<span class=\"string\">\"roots.pem\"</span>)).build())</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">GreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel);</span><br></pre></td></tr></table></figure>\n<p>通过 Google 验证</p>\n<p>以下代码段显示了如何使用带有服务帐户的 gRPC 调用 <a href=\"https://cloud.google.com/pubsub/docs/overview\" target=\"_blank\" rel=\"noopener\">Google Cloud PubSub API</a>。凭据从存储在众所周知的位置的密钥加载，或者通过检测应用程序在可以自动提供应用程序的环境中运行，例如 Google Compute Engine。虽然此示例特定于 Google 及其服务，但其他服务提供商可以遵循类似的模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GoogleCredentials creds = GoogleCredentials.getApplicationDefault();</span><br><span class=\"line\">ManagedChannel channel = ManagedChannelBuilder.forTarget(<span class=\"string\">\"greeter.googleapis.com\"</span>)</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">GreeterGrpc.GreeterStub stub = GreeterGrpc.newStub(channel)</span><br><span class=\"line\">    .withCallCredentials(MoreCallCredentials.from(creds));</span><br></pre></td></tr></table></figure>\n<h4 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h4><p>基本情况 - 没有加密或者身份验证</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stub = <span class=\"keyword\">new</span> helloworld.Greeter(<span class=\"string\">'localhost:50051'</span>, grpc.credentials.createInsecure());</span><br></pre></td></tr></table></figure>\n<p>使用服务器身份验证 SSL/TLS</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ssl_creds = grpc.credentials.createSsl(root_certs);</span><br><span class=\"line\"><span class=\"keyword\">var</span> stub = <span class=\"keyword\">new</span> helloworld.Greeter(<span class=\"string\">'myservice.example.com'</span>, ssl_creds);</span><br></pre></td></tr></table></figure>\n<p>通过 Google 验证</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Authenticating with Google</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> GoogleAuth = <span class=\"built_in\">require</span>(<span class=\"string\">'google-auth-library'</span>); <span class=\"comment\">// from https://www.npmjs.com/package/google-auth-library</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> ssl_creds = grpc.credentials.createSsl(root_certs);</span><br><span class=\"line\">(<span class=\"keyword\">new</span> GoogleAuth()).getApplicationDefault(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, auth</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> call_creds = grpc.credentials.createFromGoogleCredential(auth);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> combined_creds = grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> stub = <span class=\"keyword\">new</span> helloworld.Greeter(<span class=\"string\">'greeter.googleapis.com'</span>, combined_credentials);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用 Oauth2 令牌使用 Google 进行身份验证（传统方法）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> GoogleAuth = <span class=\"built_in\">require</span>(<span class=\"string\">'google-auth-library'</span>); <span class=\"comment\">// from https://www.npmjs.com/package/google-auth-library</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> ssl_creds = grpc.Credentials.createSsl(root_certs); <span class=\"comment\">// load_certs typically loads a CA roots file</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> scope = <span class=\"string\">'https://www.googleapis.com/auth/grpc-testing'</span>;</span><br><span class=\"line\">(<span class=\"keyword\">new</span> GoogleAuth()).getApplicationDefault(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, auth</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (auth.createScopeRequired()) &#123;</span><br><span class=\"line\">    auth = auth.createScoped(scope);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> call_creds = grpc.credentials.createFromGoogleCredential(auth);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> combined_creds = grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> stub = <span class=\"keyword\">new</span> helloworld.Greeter(<span class=\"string\">'greeter.googleapis.com'</span>, combined_credentials);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h4><p>基本情况 - 没有加密或者身份验证</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$client = <span class=\"keyword\">new</span> helloworld\\GreeterClient(<span class=\"string\">'localhost:50051'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'credentials'</span> =&gt; Grpc\\ChannelCredentials::createInsecure(),</span><br><span class=\"line\">]);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>通过 Google 验证</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateAuthMetadataCallback</span><span class=\"params\">($context)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $auth_credentials = ApplicationDefaultCredentials::getCredentials();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $auth_credentials-&gt;updateMetadata($metadata = [], $context-&gt;service_url);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$channel_credentials = Grpc\\ChannelCredentials::createComposite(</span><br><span class=\"line\">    Grpc\\ChannelCredentials::createSsl(file_get_contents(<span class=\"string\">'roots.pem'</span>)),</span><br><span class=\"line\">    Grpc\\CallCredentials::createFromPlugin(<span class=\"string\">'updateAuthMetadataCallback'</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\">$opts = [</span><br><span class=\"line\">  <span class=\"string\">'credentials'</span> =&gt; $channel_credentials</span><br><span class=\"line\">];</span><br><span class=\"line\">$client = <span class=\"keyword\">new</span> helloworld\\GreeterClient(<span class=\"string\">'greeter.googleapis.com'</span>, $opts);</span><br></pre></td></tr></table></figure>\n<p>使用 Oauth2 令牌使用 Google 进行身份验证（传统方法）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the environment variable \"GOOGLE_APPLICATION_CREDENTIALS\" needs to be set</span></span><br><span class=\"line\">$scope = <span class=\"string\">\"https://www.googleapis.com/auth/grpc-testing\"</span>;</span><br><span class=\"line\">$auth = Google\\Auth\\ApplicationDefaultCredentials::getCredentials($scope);</span><br><span class=\"line\">$opts = [</span><br><span class=\"line\">  <span class=\"string\">'credentials'</span> =&gt; Grpc\\Credentials::createSsl(file_get_contents(<span class=\"string\">'roots.pem'</span>));</span><br><span class=\"line\">  <span class=\"string\">'update_metadata'</span> =&gt; $auth-&gt;getUpdateMetadataFunc(),</span><br><span class=\"line\">];</span><br><span class=\"line\">$client = <span class=\"keyword\">new</span> helloworld\\GreeterClient(<span class=\"string\">'greeter.googleapis.com'</span>, $opts);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Dart\"><a href=\"#Dart\" class=\"headerlink\" title=\"Dart\"></a>Dart</h4><p>基本情况 - 没有加密或者身份验证</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> channel = <span class=\"keyword\">new</span> ClientChannel(<span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">      port: <span class=\"number\">50051</span>,</span><br><span class=\"line\">      options: <span class=\"keyword\">const</span> ChannelOptions(</span><br><span class=\"line\">          credentials: <span class=\"keyword\">const</span> ChannelCredentials.insecure()));</span><br><span class=\"line\"><span class=\"keyword\">final</span> stub = <span class=\"keyword\">new</span> GreeterClient(channel);</span><br></pre></td></tr></table></figure>\n<p>使用服务器身份验证 SSL/TLS</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Load a custom roots file.</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> trustedRoot = <span class=\"keyword\">new</span> File(<span class=\"string\">'roots.pem'</span>).readAsBytesSync();</span><br><span class=\"line\"><span class=\"keyword\">final</span> channelCredentials =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ChannelCredentials.secure(certificates: trustedRoot);</span><br><span class=\"line\"><span class=\"keyword\">final</span> channelOptions = <span class=\"keyword\">new</span> ChannelOptions(credentials: channelCredentials);</span><br><span class=\"line\"><span class=\"keyword\">final</span> channel = <span class=\"keyword\">new</span> ClientChannel(<span class=\"string\">'myservice.example.com'</span>,</span><br><span class=\"line\">    options: channelOptions);</span><br><span class=\"line\"><span class=\"keyword\">final</span> client = <span class=\"keyword\">new</span> GreeterClient(channel);</span><br></pre></td></tr></table></figure>\n<p>通过 Google 验证</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Uses publicly trusted roots by default.</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> channel = <span class=\"keyword\">new</span> ClientChannel(<span class=\"string\">'greeter.googleapis.com'</span>);</span><br><span class=\"line\"><span class=\"keyword\">final</span> serviceAccountJson =</span><br><span class=\"line\">     <span class=\"keyword\">new</span> File(<span class=\"string\">'service-account.json'</span>).readAsStringSync();</span><br><span class=\"line\"><span class=\"keyword\">final</span> credentials = <span class=\"keyword\">new</span> JwtServiceAccountAuthenticator(serviceAccountJson);</span><br><span class=\"line\"><span class=\"keyword\">final</span> client =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> GreeterClient(channel, options: credentials.toCallOptions);</span><br></pre></td></tr></table></figure>\n<p>验证单个 RPC 调用</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Uses publicly trusted roots by default.</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> channel = <span class=\"keyword\">new</span> ClientChannel(<span class=\"string\">'greeter.googleapis.com'</span>);</span><br><span class=\"line\"><span class=\"keyword\">final</span> client = <span class=\"keyword\">new</span> GreeterClient(channel);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">final</span> serviceAccountJson =</span><br><span class=\"line\">     <span class=\"keyword\">new</span> File(<span class=\"string\">'service-account.json'</span>).readAsStringSync();</span><br><span class=\"line\"><span class=\"keyword\">final</span> credentials = <span class=\"keyword\">new</span> JwtServiceAccountAuthenticator(serviceAccountJson);</span><br><span class=\"line\"><span class=\"keyword\">final</span> response =</span><br><span class=\"line\">    <span class=\"keyword\">await</span> client.sayHello(request, options: credentials.toCallOptions);</span><br></pre></td></tr></table></figure>\n<h2 id=\"错误处理和调试\"><a href=\"#错误处理和调试\" class=\"headerlink\" title=\"错误处理和调试\"></a>错误处理和调试</h2><h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>此页面描述了gRPC如何处理错误，包括gRPC的内置错误代码。可以在<a href=\"https://github.com/avinassh/grpc-errors\" target=\"_blank\" rel=\"noopener\">此处</a>找到不同语言的示例代码。</p>\n<h3 id=\"标准错误模型\"><a href=\"#标准错误模型\" class=\"headerlink\" title=\"标准错误模型\"></a>标准错误模型</h3><p>正如您在我们的概念文档和示例中所看到的，当 gRPC 调用成功完成时，服务器会向客户端返回一个 OK 状态（取决于语言，OK 可能会或可能不会直接在您的代码中使用）。但如果调用不成功会怎样？</p>\n<p>如果发生错误，gRPC 会返回其错误状态代码之一，并带有可选的字符串错误消息，该消息提供有关所发生情况的更多详细信息。所有支持的语言中的 gRPC 客户端都可以使用错误信息。</p>\n<h3 id=\"更丰富的错误模型\"><a href=\"#更丰富的错误模型\" class=\"headerlink\" title=\"更丰富的错误模型\"></a>更丰富的错误模型</h3><p>上述错误模型是官方 gRPC 错误模型，受所有 gRPC 客户端/服务器库支持，并且独立于 gRPC 数据格式（无论是 protocol buffers 或者其他内容）。你可能已经注意到它非常有限，并且不包括传达错误详细信息的能力。</p>\n<p>如果你在使用 protoco buffers 的数据格式，你不妨考虑使用开发和这里所描述的由谷歌所使用的更丰富的<a href=\"https://cloud.google.com/apis/design/errors#error_model\" target=\"_blank\" rel=\"noopener\">错误模型</a>。这个模型使服务器返回并且客户端能够使用表示为一个或多个 protobuf 消息的错误详细信息。它进一步制定了一组<a href=\"https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto\" target=\"_blank\" rel=\"noopener\">标准的错误消息类型</a>，以满足最常见的需求（例如无效参数，配额违规和堆栈跟踪）。此额外错误信息的 protobuf 二进制编码在响应中作为尾随元数据提供。</p>\n<p>这个更丰富的错误模型已经在 C++，Go，Java，Python 和 Ruby 库中得到支持，并且至少 grpc-web 和 Nodes.js 库存在请求支持它的 issue。如果有需求，其他语言库可能会在将来添加支持，因此如果感兴趣，请检查他们的 github 存储库。但请注意，用 C 语言编写的 grpc-core 库不太可能支持它，因为它是有目的的数据格式不可知的。</p>\n<p>如果你没有使用 protocol buffers，你可以使用类似的方法（在尾随相应元数据中放置错误详细信息），但你可能需要查找或开发用于访问此数据的库支持，以便在你的实际 API 中使用它。</p>\n<p>在决定是否使用这种扩展错误模型时，需要注意一些重要的注意事项，包括：</p>\n<ul>\n<li>在错误细节有效载荷的要求和期望方面，扩展错误模型的库实现可能在语言之间不一致</li>\n<li>现有代理，记录器和其他标准 HTTP 请求处理器无法查看错误详细信息，因此无法将其用于监视或其他目的</li>\n<li>追踪者中的其他错误详细信息会干扰线头阻塞，并且由于更频繁的缓存未命中而会降低 HTTP/2 报头压缩效率</li>\n<li>较大的错误细节有效负载可能会遇到协议限制（如最大 header 大小），从而有效失去原始错误</li>\n</ul>\n<h3 id=\"错误状态代码\"><a href=\"#错误状态代码\" class=\"headerlink\" title=\"错误状态代码\"></a>错误状态代码</h3><p>gRPC 在各种情况下引发错误，从网络故障到未经认证的连接，每个连接都与特定的状态代码相关联。所有 gRPC 语言都支持以下错误状态代码。</p>\n<h4 id=\"一般错误\"><a href=\"#一般错误\" class=\"headerlink\" title=\"一般错误\"></a>一般错误</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">案件</th>\n<th style=\"text-align:left\">状态代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">客户端应用程序取消请求</td>\n<td style=\"text-align:left\">GRPC_STATUS_CANCELLED</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">截止日期在服务器返回状态之前到期</td>\n<td style=\"text-align:left\">GRPC_STATUS_DEADLINE_EXCEEDED</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">在服务器上找不到的方法</td>\n<td style=\"text-align:left\">GRPC_STATUS_UNIMPLEMENTED</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务器关闭</td>\n<td style=\"text-align:left\">GRPC_STATUS_UNAVAILABLE</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">服务器抛出异常（或者做了除了返回状态代码以终止RPC之外的其他操作）</td>\n<td style=\"text-align:left\">GRPC_STATUS_UNKNOWN</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"网络故障\"><a href=\"#网络故障\" class=\"headerlink\" title=\"网络故障\"></a>网络故障</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">案件</th>\n<th style=\"text-align:left\">状态代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">在截止日期到期之前没有传输数据。也适用于在截止日期到期之前传输某些数据且未检测到其他故障的情况</td>\n<td style=\"text-align:left\">GRPC_STATUS_DEADLINE_EXCEEDED</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">在连接中断之前传输了一些数据（例如，请求元数据已写入TCP连接）</td>\n<td style=\"text-align:left\">GRPC_STATUS_UNAVAILABLE</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"协议错误\"><a href=\"#协议错误\" class=\"headerlink\" title=\"协议错误\"></a>协议错误</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">案件</th>\n<th style=\"text-align:left\">状态代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">无法解压缩但支持压缩算法</td>\n<td style=\"text-align:left\">GRPC_STATUS_INTERNAL</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">客户端使用的压缩机制不受服务器支持</td>\n<td style=\"text-align:left\">GRPC_STATUS_UNIMPLEMENTED</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">达到流量控制资源限制</td>\n<td style=\"text-align:left\">GRPC_STATUS_RESOURCE_EXHAUSTED</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">流量控制协议违规</td>\n<td style=\"text-align:left\">GRPC_STATUS_INTERNAL</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">解析返回状态时出错</td>\n<td style=\"text-align:left\">GRPC_STATUS_UNKNOWN</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">未经身份验证：凭据无法获取元数据</td>\n<td style=\"text-align:left\">GRPC_STATUS_UNAUTHENTICATED</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">权限元数据中的主机集无效</td>\n<td style=\"text-align:left\">GRPC_STATUS_UNAUTHENTICATED</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">解析响应协议缓冲区时出错</td>\n<td style=\"text-align:left\">GRPC_STATUS_INTERNAL</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">解析请求协议缓冲区时出错</td>\n<td style=\"text-align:left\">GRPC_STATUS_INTERNAL</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><p>gRPC 旨在支持多种语言的高性能开源RPC。本文档介绍了性能基准测试工具，测试所考虑的方案以及测试基础架构。</p>\n<h3 id=\"概览-1\"><a href=\"#概览-1\" class=\"headerlink\" title=\"概览\"></a>概览</h3><p>gRPC 专为分布式应用的高性能和高生产率设计而设计。持续性能基准测试是 gRPC 开发工作流程的关键部分。针对主分支每小时运行多语言性能测试，并将这些数字报告给仪表板以进行可视化。</p>\n<ul>\n<li><a href=\"https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5636470266134528\" target=\"_blank\" rel=\"noopener\">多语言性能仪表板 @latest_release（最新可能用稳定版）</a></li>\n<li><a href=\"https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5652536396611584\" target=\"_blank\" rel=\"noopener\">多语言性能仪表板@master（最新开发版）</a></li>\n<li><a href=\"https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5685265389584384\" target=\"_blank\" rel=\"noopener\">C ++详细性能仪表板@master（最新开发版）</a></li>\n</ul>\n<p>额外的性能测试可以提供有关 CPU 使用情况的细粒度洞察。</p>\n<ul>\n<li><a href=\"https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5684961520648192\" target=\"_blank\" rel=\"noopener\">C ++全栈微基准测试</a></li>\n<li><a href=\"https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5740240702537728\" target=\"_blank\" rel=\"noopener\">C核心过滤器基准测试</a></li>\n<li><a href=\"https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5641826627223552&amp;container=789696829&amp;widget=512792852\" target=\"_blank\" rel=\"noopener\">C Core共享组件基准测试</a></li>\n<li><a href=\"https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5732910535540736\" target=\"_blank\" rel=\"noopener\">C Core HTTP / 2微基准测试</a></li>\n</ul>\n<h3 id=\"性能测试设计\"><a href=\"#性能测试设计\" class=\"headerlink\" title=\"性能测试设计\"></a>性能测试设计</h3><p>每种语言都实现了一个实现 gRPC <a href=\"https://github.com/grpc/grpc/blob/master/src/proto/grpc/testing/worker_service.proto\" target=\"_blank\" rel=\"noopener\">WorkerService</a> 的性能测试工作者 。此服务指示工作人员充当实际基准测试的客户端或服务器，表示为 <a href=\"https://github.com/grpc/grpc/blob/master/src/proto/grpc/testing/benchmark_service.proto\" target=\"_blank\" rel=\"noopener\">BenchmarkService</a>。该服务有两种方法：</p>\n<ul>\n<li>UnaryCall - 一个简单请求的一元RPC，它指定在响应中返回的字节数</li>\n<li>StreamingCall - 一种流式RPC，允许重复的 ping-pongs 请求和响应消息类似于 UnaryCall</li>\n</ul>\n<p><img src=\"https://grpc.io/img/testing_framework.png\" alt=\"image\"></p>\n<p>这些工作程序由<a href=\"https://github.com/grpc/grpc/blob/master/test/cpp/qps/qps_json_driver.cc\" target=\"_blank\" rel=\"noopener\">驱动程序</a>控制，该驱动程序将该方案描述（采用 JSON 格式）和指定每个工作进程的 hots:port 的环境变量作为输入。</p>\n<h3 id=\"正在测试的语言\"><a href=\"#正在测试的语言\" class=\"headerlink\" title=\"正在测试的语言\"></a>正在测试的语言</h3><p>以下语言作为 master 上的客户端和服务器进行连续性能测试：</p>\n<ul>\n<li>C++</li>\n<li>Java</li>\n<li>Go</li>\n<li>C#</li>\n<li>node.js</li>\n<li>Python</li>\n<li>Ruby</li>\n</ul>\n<p>此外，从 C core 派生的所有语言都在每次拉取请求时进行了有限的性能测试（冒烟测试）。</p>\n<p>除了作为性能测试的客户端和服务器端运行之外，所有语言都作为针对 C++ 服务器的客户端进行测试，并作为针对 C++ 客户端的服务器进行测试。此测试旨在为给定语言的客户端或服务器实现提供当前的性能上限，而无需测试另一方。</p>\n<p>虽然 PHP 或移动环境不支持 gRPC 服务器（我们的性能测试需要），但可以使用另一种语言编写的代理 WorkerService 对其客户端性能进行基准测试。此代码是为 PHP 实现的，但尚未处于连续测试模式。</p>\n<h3 id=\"正在测试的场景\"><a href=\"#正在测试的场景\" class=\"headerlink\" title=\"正在测试的场景\"></a>正在测试的场景</h3><p>有几个重要的方案正在测试中并显示在上面的仪表板中，包括以下内容：</p>\n<ul>\n<li>无争用延迟 - 只有 1 个客户端使用 StreamingCall 一次发送一条消息时看到的中位数和尾部​​响应延迟</li>\n<li>QPS - 当有 2 个客户端和总共 64 个通道时的消息/秒速率，每个通道使用 StreamingCall 一次发送 100 个未完成的消息</li>\n<li>可伸缩性（适用于所选语言） - 每个服务器核心的消息数/秒</li>\n</ul>\n<p>大多数性能测试都使用安全通信和 protobufs。一些 C++ 测试还使用不安全的通信和通用（非 protobuf）API 来显示峰值性能。将来可能会添加其他方案。</p>\n<h3 id=\"测试基础架构\"><a href=\"#测试基础架构\" class=\"headerlink\" title=\"测试基础架构\"></a>测试基础架构</h3><p>所有性能基准测试都通过我们的 Jenkins 测试基础架构作为 GCE 中的实例运行。除了上面描述的 gRPC 性能方案之外，我们还运行基线 <a href=\"http://www.netperf.org/\" target=\"_blank\" rel=\"noopener\">netperf TCP_RR</a> 延迟数，以便了解底层网络特征。这些数字出现在我们的仪表板上，有时会根据我们的实例在 GCE 中的分配位置而有所不同。</p>\n<p>大多数测试实例都是 8 核系统，这些系统用于延迟和 QPS 测量。对于 C++ 和 Java，我们还支持在 32 核系统上进行 QPS 测试。所有 QPS 测试都为每台服务器使用 2 台相同的客户端计算机，以确保 QPS 测量不受客户端限制。</p>"},{"title":"阅读列表","date":"2019-06-29T06:56:10.000Z","toc":true,"_content":"\n本文记录一些已经阅读过的知识点列表，需要整理的会整理到博客中，不需要整理的在本列表体现。\n\n### 一、算法\n\n- [10 分钟带你了解一致性 hash 算法](https://geekshuai.github.io/posts/14aa896.html)\n\n### 二、计算机网络\n\n- [访问网站 DNS 相关的流程](https://geekshuai.github.io/posts/fb1665c6.html)\n\n### 三、Go 语言源码解析\n\n- [Go 深度解密 map](https://www.cnblogs.com/qcrao-2018/p/10903807.html)\n\n- [Go 逃逸分析之变量分配到栈还是堆？](https://www.cnblogs.com/qcrao-2018/p/10453260.html)\n\n- [Go 深度解密 Slice](https://www.cnblogs.com/qcrao-2018/p/10631989.html)\n\n- [Go 深度解密 interface 的 10 个问题](https://www.cnblogs.com/qcrao-2018/p/10766091.html)\n\n- [Go 深度解密反射](https://www.cnblogs.com/qcrao-2018/p/10822655.html)\n\n### 四、Go 语言相关解析\n\n- [Go 中的方法接收器](https://mp.weixin.qq.com/s/US7MnIJfekJRazioxyWQhg)\n\n- [Go Slice 与 Map 效率解析](https://studygolang.com/articles/11799)\n\n- [Go 如何优雅关闭 Channel](https://studygolang.com/articles/20786)\n\n- [Go 减少类型层次结构，用 interface 替代组合基本类型](https://www.ardanlabs.com/blog/2016/10/reducing-type-hierarchies.html)\n\n- [Go HTTP 请求超时入门](https://studygolang.com/articles/14405)","source":"_posts/read.md","raw":"---\ntitle: 阅读列表\ndate: 2019-06-29 14:56:10\ntoc: true\ntags:\n- 已阅\n---\n\n本文记录一些已经阅读过的知识点列表，需要整理的会整理到博客中，不需要整理的在本列表体现。\n\n### 一、算法\n\n- [10 分钟带你了解一致性 hash 算法](https://geekshuai.github.io/posts/14aa896.html)\n\n### 二、计算机网络\n\n- [访问网站 DNS 相关的流程](https://geekshuai.github.io/posts/fb1665c6.html)\n\n### 三、Go 语言源码解析\n\n- [Go 深度解密 map](https://www.cnblogs.com/qcrao-2018/p/10903807.html)\n\n- [Go 逃逸分析之变量分配到栈还是堆？](https://www.cnblogs.com/qcrao-2018/p/10453260.html)\n\n- [Go 深度解密 Slice](https://www.cnblogs.com/qcrao-2018/p/10631989.html)\n\n- [Go 深度解密 interface 的 10 个问题](https://www.cnblogs.com/qcrao-2018/p/10766091.html)\n\n- [Go 深度解密反射](https://www.cnblogs.com/qcrao-2018/p/10822655.html)\n\n### 四、Go 语言相关解析\n\n- [Go 中的方法接收器](https://mp.weixin.qq.com/s/US7MnIJfekJRazioxyWQhg)\n\n- [Go Slice 与 Map 效率解析](https://studygolang.com/articles/11799)\n\n- [Go 如何优雅关闭 Channel](https://studygolang.com/articles/20786)\n\n- [Go 减少类型层次结构，用 interface 替代组合基本类型](https://www.ardanlabs.com/blog/2016/10/reducing-type-hierarchies.html)\n\n- [Go HTTP 请求超时入门](https://studygolang.com/articles/14405)","slug":"read","published":1,"updated":"2019-06-29T07:45:06.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxh80eku00056c9voozyw8zq","content":"<p>本文记录一些已经阅读过的知识点列表，需要整理的会整理到博客中，不需要整理的在本列表体现。</p>\n<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><ul>\n<li><a href=\"https://geekshuai.github.io/posts/14aa896.html\" target=\"_blank\" rel=\"noopener\">10 分钟带你了解一致性 hash 算法</a></li>\n</ul>\n<h3 id=\"二、计算机网络\"><a href=\"#二、计算机网络\" class=\"headerlink\" title=\"二、计算机网络\"></a>二、计算机网络</h3><ul>\n<li><a href=\"https://geekshuai.github.io/posts/fb1665c6.html\" target=\"_blank\" rel=\"noopener\">访问网站 DNS 相关的流程</a></li>\n</ul>\n<h3 id=\"三、Go-语言源码解析\"><a href=\"#三、Go-语言源码解析\" class=\"headerlink\" title=\"三、Go 语言源码解析\"></a>三、Go 语言源码解析</h3><ul>\n<li><p><a href=\"https://www.cnblogs.com/qcrao-2018/p/10903807.html\" target=\"_blank\" rel=\"noopener\">Go 深度解密 map</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/qcrao-2018/p/10453260.html\" target=\"_blank\" rel=\"noopener\">Go 逃逸分析之变量分配到栈还是堆？</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/qcrao-2018/p/10631989.html\" target=\"_blank\" rel=\"noopener\">Go 深度解密 Slice</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/qcrao-2018/p/10766091.html\" target=\"_blank\" rel=\"noopener\">Go 深度解密 interface 的 10 个问题</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/qcrao-2018/p/10822655.html\" target=\"_blank\" rel=\"noopener\">Go 深度解密反射</a></p>\n</li>\n</ul>\n<h3 id=\"四、Go-语言相关解析\"><a href=\"#四、Go-语言相关解析\" class=\"headerlink\" title=\"四、Go 语言相关解析\"></a>四、Go 语言相关解析</h3><ul>\n<li><p><a href=\"https://mp.weixin.qq.com/s/US7MnIJfekJRazioxyWQhg\" target=\"_blank\" rel=\"noopener\">Go 中的方法接收器</a></p>\n</li>\n<li><p><a href=\"https://studygolang.com/articles/11799\" target=\"_blank\" rel=\"noopener\">Go Slice 与 Map 效率解析</a></p>\n</li>\n<li><p><a href=\"https://studygolang.com/articles/20786\" target=\"_blank\" rel=\"noopener\">Go 如何优雅关闭 Channel</a></p>\n</li>\n<li><p><a href=\"https://www.ardanlabs.com/blog/2016/10/reducing-type-hierarchies.html\" target=\"_blank\" rel=\"noopener\">Go 减少类型层次结构，用 interface 替代组合基本类型</a></p>\n</li>\n<li><p><a href=\"https://studygolang.com/articles/14405\" target=\"_blank\" rel=\"noopener\">Go HTTP 请求超时入门</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>本文记录一些已经阅读过的知识点列表，需要整理的会整理到博客中，不需要整理的在本列表体现。</p>\n<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><ul>\n<li><a href=\"https://geekshuai.github.io/posts/14aa896.html\" target=\"_blank\" rel=\"noopener\">10 分钟带你了解一致性 hash 算法</a></li>\n</ul>\n<h3 id=\"二、计算机网络\"><a href=\"#二、计算机网络\" class=\"headerlink\" title=\"二、计算机网络\"></a>二、计算机网络</h3><ul>\n<li><a href=\"https://geekshuai.github.io/posts/fb1665c6.html\" target=\"_blank\" rel=\"noopener\">访问网站 DNS 相关的流程</a></li>\n</ul>\n<h3 id=\"三、Go-语言源码解析\"><a href=\"#三、Go-语言源码解析\" class=\"headerlink\" title=\"三、Go 语言源码解析\"></a>三、Go 语言源码解析</h3><ul>\n<li><p><a href=\"https://www.cnblogs.com/qcrao-2018/p/10903807.html\" target=\"_blank\" rel=\"noopener\">Go 深度解密 map</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/qcrao-2018/p/10453260.html\" target=\"_blank\" rel=\"noopener\">Go 逃逸分析之变量分配到栈还是堆？</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/qcrao-2018/p/10631989.html\" target=\"_blank\" rel=\"noopener\">Go 深度解密 Slice</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/qcrao-2018/p/10766091.html\" target=\"_blank\" rel=\"noopener\">Go 深度解密 interface 的 10 个问题</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/qcrao-2018/p/10822655.html\" target=\"_blank\" rel=\"noopener\">Go 深度解密反射</a></p>\n</li>\n</ul>\n<h3 id=\"四、Go-语言相关解析\"><a href=\"#四、Go-语言相关解析\" class=\"headerlink\" title=\"四、Go 语言相关解析\"></a>四、Go 语言相关解析</h3><ul>\n<li><p><a href=\"https://mp.weixin.qq.com/s/US7MnIJfekJRazioxyWQhg\" target=\"_blank\" rel=\"noopener\">Go 中的方法接收器</a></p>\n</li>\n<li><p><a href=\"https://studygolang.com/articles/11799\" target=\"_blank\" rel=\"noopener\">Go Slice 与 Map 效率解析</a></p>\n</li>\n<li><p><a href=\"https://studygolang.com/articles/20786\" target=\"_blank\" rel=\"noopener\">Go 如何优雅关闭 Channel</a></p>\n</li>\n<li><p><a href=\"https://www.ardanlabs.com/blog/2016/10/reducing-type-hierarchies.html\" target=\"_blank\" rel=\"noopener\">Go 减少类型层次结构，用 interface 替代组合基本类型</a></p>\n</li>\n<li><p><a href=\"https://studygolang.com/articles/14405\" target=\"_blank\" rel=\"noopener\">Go HTTP 请求超时入门</a></p>\n</li>\n</ul>\n"},{"title":"什么是 logrotate ？","date":"2019-04-18T10:28:44.000Z","toc":true,"_content":"\n## 什么是 logrotate\n\nlogrotate 旨在简化生成大量日志文件的系统的管理。它允许自动循环、压缩、删除和邮寄日志文件。每个日志文件可以按每天、每周、每月的粒度来处理，也可以在其增长过大时处理。\n\n通常来说，logrotate 作为日常 cron 作业运行。它一天内修改日志的次数不会超过一次，除非该日志的标准基于日志的大小，并且 logrotate 每天运行一次以上，或者使用 `-f` 或 `-force` 的选项。\n\n在命令行上可以给出任意数量的配置文件。稍后的配置文件可能会覆盖前面文件中给出的选项，因此列出 logrotate 配置文件的顺序很重要。通常，应该使用一个配置文件，其中包含需要的任何其他配置文件。有关如何使用 include 指令来完成此任务的更多信息，请参见 man page。如果在命令行上给出一个目录，则该目录中的每个文件都是配置文件。\n\n如果没有给出命令行参数，logrotate 将打印版本和版权信息，以及一个简短的使用总结。如果在循环日志时发生任何错误，logrotate 将以非零状态退出。\n\n<!-- more -->\n\n## 如何安装 logrotate\n\n### 如何在 Mac 上安装 logrotate\n\n* 先安装 Homebrew\n\n    ```bash\n    /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n    ```\n\n* 利用 Homebrew 安装 logrotate\n\n    ```bash\n    brew install logrotate\n    ```\n\n### 可能会遇到的问题\n\n安装 logroate 后可能会遇到 logrotate 命令找不到的问题，其原因是 logrotate 安装到了 `/usr/local/sbin` 下，如果你的 PATH 环境变量没有该路径就找不到 logrotate，所以你需要将该路径加入 PATH 下。\n\n## 查看 logrotate 文档\n\n* `man logrotate` 命令可以在终端查看 logrotate 文档\n* 如果你没有安装 logrotate 在终端 man page 下是找不到 logrotate 文档的，你可以点击[传送门](https://linux.die.net/man/8/logrotate)查看文档\n\n## 怎么使用 logrotate\n\n* 启动与停止\n\n    ```bash\n    brew services start logrotate   # 启动\n    brew services stop logrotate    # 停止\n    ```\n\n* 选项\n\n  * `-?，--help`：帮助。\n  * `-d，--debug`：打开 debug 模式，日志和 logrotate 的状态文件不会被更新，只会打印 debug 信息。详细显示指令执行过程，便于排错活了解程序执行的情况。\n  * `-f，--force`：让 logrotate 强制执行一次循环。有时，在向 logrotate 配置文件添加新条目之后，或者在手动删除旧日志文件时，这是非常有用的，因为将创建新文件，并且日志记录将正确地继续。\n  * `-l，--log file`：让 logrotate 的 log 详细输出到 log_file 文件中。记录到该文件的详细输出与使用 -v 运行 logrotate 时相同。每次执行 logrotate 时都会覆盖日志文件。\n  * `-m，--mail command`：邮寄日志，接受以下参数\n    1. `-s subject`：标题\n    2. 收件人\n\n    然后命令必须读取标准输入上的消息并将其发送给收件人。默认的邮件命令是 `/bin/mail`。\n  * `-s，--state statefile`：让 logrotate 使用别用状态文件。如果 logrotate 作为不同的用户运行于不同的日志文件集，这将非常有用。默认的状态文件为 `/usr/local/var/lib/logrotate.status`。\n  * `usage`：使用指南\n  * `-v，--verbose`：打开 verbose 模式，例如在循环期间显示消息\n  * `--version`：版本\n","source":"_posts/logrotate.md","raw":"---\ntitle: 什么是 logrotate ？\ndate: 2019-04-18 18:28:44\ntoc: true\ntags:\n- 技术名词\n- 运维\n- Log\n---\n\n## 什么是 logrotate\n\nlogrotate 旨在简化生成大量日志文件的系统的管理。它允许自动循环、压缩、删除和邮寄日志文件。每个日志文件可以按每天、每周、每月的粒度来处理，也可以在其增长过大时处理。\n\n通常来说，logrotate 作为日常 cron 作业运行。它一天内修改日志的次数不会超过一次，除非该日志的标准基于日志的大小，并且 logrotate 每天运行一次以上，或者使用 `-f` 或 `-force` 的选项。\n\n在命令行上可以给出任意数量的配置文件。稍后的配置文件可能会覆盖前面文件中给出的选项，因此列出 logrotate 配置文件的顺序很重要。通常，应该使用一个配置文件，其中包含需要的任何其他配置文件。有关如何使用 include 指令来完成此任务的更多信息，请参见 man page。如果在命令行上给出一个目录，则该目录中的每个文件都是配置文件。\n\n如果没有给出命令行参数，logrotate 将打印版本和版权信息，以及一个简短的使用总结。如果在循环日志时发生任何错误，logrotate 将以非零状态退出。\n\n<!-- more -->\n\n## 如何安装 logrotate\n\n### 如何在 Mac 上安装 logrotate\n\n* 先安装 Homebrew\n\n    ```bash\n    /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n    ```\n\n* 利用 Homebrew 安装 logrotate\n\n    ```bash\n    brew install logrotate\n    ```\n\n### 可能会遇到的问题\n\n安装 logroate 后可能会遇到 logrotate 命令找不到的问题，其原因是 logrotate 安装到了 `/usr/local/sbin` 下，如果你的 PATH 环境变量没有该路径就找不到 logrotate，所以你需要将该路径加入 PATH 下。\n\n## 查看 logrotate 文档\n\n* `man logrotate` 命令可以在终端查看 logrotate 文档\n* 如果你没有安装 logrotate 在终端 man page 下是找不到 logrotate 文档的，你可以点击[传送门](https://linux.die.net/man/8/logrotate)查看文档\n\n## 怎么使用 logrotate\n\n* 启动与停止\n\n    ```bash\n    brew services start logrotate   # 启动\n    brew services stop logrotate    # 停止\n    ```\n\n* 选项\n\n  * `-?，--help`：帮助。\n  * `-d，--debug`：打开 debug 模式，日志和 logrotate 的状态文件不会被更新，只会打印 debug 信息。详细显示指令执行过程，便于排错活了解程序执行的情况。\n  * `-f，--force`：让 logrotate 强制执行一次循环。有时，在向 logrotate 配置文件添加新条目之后，或者在手动删除旧日志文件时，这是非常有用的，因为将创建新文件，并且日志记录将正确地继续。\n  * `-l，--log file`：让 logrotate 的 log 详细输出到 log_file 文件中。记录到该文件的详细输出与使用 -v 运行 logrotate 时相同。每次执行 logrotate 时都会覆盖日志文件。\n  * `-m，--mail command`：邮寄日志，接受以下参数\n    1. `-s subject`：标题\n    2. 收件人\n\n    然后命令必须读取标准输入上的消息并将其发送给收件人。默认的邮件命令是 `/bin/mail`。\n  * `-s，--state statefile`：让 logrotate 使用别用状态文件。如果 logrotate 作为不同的用户运行于不同的日志文件集，这将非常有用。默认的状态文件为 `/usr/local/var/lib/logrotate.status`。\n  * `usage`：使用指南\n  * `-v，--verbose`：打开 verbose 模式，例如在循环期间显示消息\n  * `--version`：版本\n","slug":"logrotate","published":1,"updated":"2019-04-19T07:41:24.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxh80ekv00086c9vnwtior4v","content":"<h2 id=\"什么是-logrotate\"><a href=\"#什么是-logrotate\" class=\"headerlink\" title=\"什么是 logrotate\"></a>什么是 logrotate</h2><p>logrotate 旨在简化生成大量日志文件的系统的管理。它允许自动循环、压缩、删除和邮寄日志文件。每个日志文件可以按每天、每周、每月的粒度来处理，也可以在其增长过大时处理。</p>\n<p>通常来说，logrotate 作为日常 cron 作业运行。它一天内修改日志的次数不会超过一次，除非该日志的标准基于日志的大小，并且 logrotate 每天运行一次以上，或者使用 <code>-f</code> 或 <code>-force</code> 的选项。</p>\n<p>在命令行上可以给出任意数量的配置文件。稍后的配置文件可能会覆盖前面文件中给出的选项，因此列出 logrotate 配置文件的顺序很重要。通常，应该使用一个配置文件，其中包含需要的任何其他配置文件。有关如何使用 include 指令来完成此任务的更多信息，请参见 man page。如果在命令行上给出一个目录，则该目录中的每个文件都是配置文件。</p>\n<p>如果没有给出命令行参数，logrotate 将打印版本和版权信息，以及一个简短的使用总结。如果在循环日志时发生任何错误，logrotate 将以非零状态退出。</p>\n<a id=\"more\"></a>\n<h2 id=\"如何安装-logrotate\"><a href=\"#如何安装-logrotate\" class=\"headerlink\" title=\"如何安装 logrotate\"></a>如何安装 logrotate</h2><h3 id=\"如何在-Mac-上安装-logrotate\"><a href=\"#如何在-Mac-上安装-logrotate\" class=\"headerlink\" title=\"如何在 Mac 上安装 logrotate\"></a>如何在 Mac 上安装 logrotate</h3><ul>\n<li><p>先安装 Homebrew</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用 Homebrew 安装 logrotate</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install logrotate</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"可能会遇到的问题\"><a href=\"#可能会遇到的问题\" class=\"headerlink\" title=\"可能会遇到的问题\"></a>可能会遇到的问题</h3><p>安装 logroate 后可能会遇到 logrotate 命令找不到的问题，其原因是 logrotate 安装到了 <code>/usr/local/sbin</code> 下，如果你的 PATH 环境变量没有该路径就找不到 logrotate，所以你需要将该路径加入 PATH 下。</p>\n<h2 id=\"查看-logrotate-文档\"><a href=\"#查看-logrotate-文档\" class=\"headerlink\" title=\"查看 logrotate 文档\"></a>查看 logrotate 文档</h2><ul>\n<li><code>man logrotate</code> 命令可以在终端查看 logrotate 文档</li>\n<li>如果你没有安装 logrotate 在终端 man page 下是找不到 logrotate 文档的，你可以点击<a href=\"https://linux.die.net/man/8/logrotate\" target=\"_blank\" rel=\"noopener\">传送门</a>查看文档</li>\n</ul>\n<h2 id=\"怎么使用-logrotate\"><a href=\"#怎么使用-logrotate\" class=\"headerlink\" title=\"怎么使用 logrotate\"></a>怎么使用 logrotate</h2><ul>\n<li><p>启动与停止</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start logrotate   <span class=\"comment\"># 启动</span></span><br><span class=\"line\">brew services stop logrotate    <span class=\"comment\"># 停止</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选项</p>\n<ul>\n<li><code>-?，--help</code>：帮助。</li>\n<li><code>-d，--debug</code>：打开 debug 模式，日志和 logrotate 的状态文件不会被更新，只会打印 debug 信息。详细显示指令执行过程，便于排错活了解程序执行的情况。</li>\n<li><code>-f，--force</code>：让 logrotate 强制执行一次循环。有时，在向 logrotate 配置文件添加新条目之后，或者在手动删除旧日志文件时，这是非常有用的，因为将创建新文件，并且日志记录将正确地继续。</li>\n<li><code>-l，--log file</code>：让 logrotate 的 log 详细输出到 log_file 文件中。记录到该文件的详细输出与使用 -v 运行 logrotate 时相同。每次执行 logrotate 时都会覆盖日志文件。</li>\n<li><p><code>-m，--mail command</code>：邮寄日志，接受以下参数</p>\n<ol>\n<li><code>-s subject</code>：标题</li>\n<li>收件人</li>\n</ol>\n<p>然后命令必须读取标准输入上的消息并将其发送给收件人。默认的邮件命令是 <code>/bin/mail</code>。</p>\n</li>\n<li><code>-s，--state statefile</code>：让 logrotate 使用别用状态文件。如果 logrotate 作为不同的用户运行于不同的日志文件集，这将非常有用。默认的状态文件为 <code>/usr/local/var/lib/logrotate.status</code>。</li>\n<li><code>usage</code>：使用指南</li>\n<li><code>-v，--verbose</code>：打开 verbose 模式，例如在循环期间显示消息</li>\n<li><code>--version</code>：版本</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是-logrotate\"><a href=\"#什么是-logrotate\" class=\"headerlink\" title=\"什么是 logrotate\"></a>什么是 logrotate</h2><p>logrotate 旨在简化生成大量日志文件的系统的管理。它允许自动循环、压缩、删除和邮寄日志文件。每个日志文件可以按每天、每周、每月的粒度来处理，也可以在其增长过大时处理。</p>\n<p>通常来说，logrotate 作为日常 cron 作业运行。它一天内修改日志的次数不会超过一次，除非该日志的标准基于日志的大小，并且 logrotate 每天运行一次以上，或者使用 <code>-f</code> 或 <code>-force</code> 的选项。</p>\n<p>在命令行上可以给出任意数量的配置文件。稍后的配置文件可能会覆盖前面文件中给出的选项，因此列出 logrotate 配置文件的顺序很重要。通常，应该使用一个配置文件，其中包含需要的任何其他配置文件。有关如何使用 include 指令来完成此任务的更多信息，请参见 man page。如果在命令行上给出一个目录，则该目录中的每个文件都是配置文件。</p>\n<p>如果没有给出命令行参数，logrotate 将打印版本和版权信息，以及一个简短的使用总结。如果在循环日志时发生任何错误，logrotate 将以非零状态退出。</p>","more":"<h2 id=\"如何安装-logrotate\"><a href=\"#如何安装-logrotate\" class=\"headerlink\" title=\"如何安装 logrotate\"></a>如何安装 logrotate</h2><h3 id=\"如何在-Mac-上安装-logrotate\"><a href=\"#如何在-Mac-上安装-logrotate\" class=\"headerlink\" title=\"如何在 Mac 上安装 logrotate\"></a>如何在 Mac 上安装 logrotate</h3><ul>\n<li><p>先安装 Homebrew</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用 Homebrew 安装 logrotate</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install logrotate</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"可能会遇到的问题\"><a href=\"#可能会遇到的问题\" class=\"headerlink\" title=\"可能会遇到的问题\"></a>可能会遇到的问题</h3><p>安装 logroate 后可能会遇到 logrotate 命令找不到的问题，其原因是 logrotate 安装到了 <code>/usr/local/sbin</code> 下，如果你的 PATH 环境变量没有该路径就找不到 logrotate，所以你需要将该路径加入 PATH 下。</p>\n<h2 id=\"查看-logrotate-文档\"><a href=\"#查看-logrotate-文档\" class=\"headerlink\" title=\"查看 logrotate 文档\"></a>查看 logrotate 文档</h2><ul>\n<li><code>man logrotate</code> 命令可以在终端查看 logrotate 文档</li>\n<li>如果你没有安装 logrotate 在终端 man page 下是找不到 logrotate 文档的，你可以点击<a href=\"https://linux.die.net/man/8/logrotate\" target=\"_blank\" rel=\"noopener\">传送门</a>查看文档</li>\n</ul>\n<h2 id=\"怎么使用-logrotate\"><a href=\"#怎么使用-logrotate\" class=\"headerlink\" title=\"怎么使用 logrotate\"></a>怎么使用 logrotate</h2><ul>\n<li><p>启动与停止</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew services start logrotate   <span class=\"comment\"># 启动</span></span><br><span class=\"line\">brew services stop logrotate    <span class=\"comment\"># 停止</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选项</p>\n<ul>\n<li><code>-?，--help</code>：帮助。</li>\n<li><code>-d，--debug</code>：打开 debug 模式，日志和 logrotate 的状态文件不会被更新，只会打印 debug 信息。详细显示指令执行过程，便于排错活了解程序执行的情况。</li>\n<li><code>-f，--force</code>：让 logrotate 强制执行一次循环。有时，在向 logrotate 配置文件添加新条目之后，或者在手动删除旧日志文件时，这是非常有用的，因为将创建新文件，并且日志记录将正确地继续。</li>\n<li><code>-l，--log file</code>：让 logrotate 的 log 详细输出到 log_file 文件中。记录到该文件的详细输出与使用 -v 运行 logrotate 时相同。每次执行 logrotate 时都会覆盖日志文件。</li>\n<li><p><code>-m，--mail command</code>：邮寄日志，接受以下参数</p>\n<ol>\n<li><code>-s subject</code>：标题</li>\n<li>收件人</li>\n</ol>\n<p>然后命令必须读取标准输入上的消息并将其发送给收件人。默认的邮件命令是 <code>/bin/mail</code>。</p>\n</li>\n<li><code>-s，--state statefile</code>：让 logrotate 使用别用状态文件。如果 logrotate 作为不同的用户运行于不同的日志文件集，这将非常有用。默认的状态文件为 <code>/usr/local/var/lib/logrotate.status</code>。</li>\n<li><code>usage</code>：使用指南</li>\n<li><code>-v，--verbose</code>：打开 verbose 模式，例如在循环期间显示消息</li>\n<li><code>--version</code>：版本</li>\n</ul>\n</li>\n</ul>"},{"title":"MAC 如何配置 PATH 环境变量？","date":"2019-04-19T09:28:10.000Z","toc":true,"_content":"\n之前在配置 MAC 环境变量的时候，总是云里雾里的不知道要怎么配置，都是从网上找配置方案，然后成功了完事大吉，不成功就换一种配置方案，所以并不知道为什么要这么配置，今天就来整理一下 MAC 应该如何来配置环境变量。\n\n## Mac osx 下环境变量的加载顺序\n\nMAC 默认的终端是 bash。\n\n```bash\n/etc/profile    # 系统级，系统启动加载\n/etc/paths      # 系统级，系统启动加载\n~/.bash_profile # 用户级\n~/.bash_login   # 用户级\n~/.profile      # 用户级\n~/.bashrc       # 用户级\n```\n\n<!-- more -->\n\n如果 `~/.bash_profile` 文件存在的话，那么就不会读取 `~/.bash_login` 和 `~/.profile`，而 `~/.bashrc` 是 shell 打开的时候载入的。\n\n如果没有特殊说明，设置 PATH 的语法如下：\n\n```bash\nexport PATH=$PATH:<PATH 1>:<PATH 2>:----:<PATH N>\n```\n\n## 全局配置\n\n下面几个文件设置是全局的，修改的时候需要 root 权限：\n\n- 编辑 `/etc/paths`（全局修改建议修改这个文件）\n\n    ```bash\n    $ sudo vi /etc/paths\n    # 一行一个路径\n    /usr/local/bin\n    /usr/bin\n    /bin\n    /usr/sbin\n    /sbin\n    ```\n\n    需要重启终端来加载环境变量。\n\n    Hint：输入环境变量时，不用一个一个地输入，只要拖动文件夹到 Terminal 里就可以了。\n\n- 编辑 `/etc/profile`（不建议修改）\n\n    全局（共有）配置，不管哪个用户，登陆都会读取此文件。\n\n- 编辑 `/etc/bashrc`（一般在这个文件中添加系统级环境变量）\n\n    全局（共有）变量，bash shell 执行时，不管是何种方式，都会读取此文件(当 .bash_profile 存在且在 .bash_profile 里没有声明 加入 .bashrc 环境的时候，会被忽略)\n\n- 编辑 `/etc/paths.d` 下的文件\n\n    ```bash\n    # 创建名为 mysql 的文件\n    $ sudo vim /etc/paths.d/mysql\n    # 添加下面路径\n    /usr/local/mysql/bin\n    ```\n\n    重启终端加载环境变量\n\n## 使用 bash\n\n添加 ~/.bash_profile 文件并在里面声明 PATH 信息，这种样的配置只在 bash 下才生效：\n\n    ```bash\n    PATH=$PATH:/xxx/xxx\n    ```\n编辑完文件后需要执行 `source ~/.bash_profile` 使其生效并需要重新启动终端来加载环境变量。\n\n## 使用 zsh\n\n如果使用了 zsh 工具，则对 bash_profile 的修改是不起作用的，这时候作为代替，应该编辑 ~/.zshrc 文件。在文件的末尾加上：\n\n    ```bash\n    PATH=$PATH:/xxx/xxx\n    ```\n编辑完文件后需要执行 `source ~/.zshrc` 使其生效并需要重新启动终端来加载环境变量。\n\n## 相关链接\n\n- [MAC 设置环境变量 PATH 的几种方法](https://www.cnblogs.com/shineqiujuan/p/4693404.html)\n- [bash/zsh 的四种运行模式](https://zhuanlan.zhihu.com/p/47819029)","source":"_posts/mac_path.md","raw":"---\ntitle: MAC 如何配置 PATH 环境变量？\ndate: 2019-04-19 17:28:10\ntoc: true\ntags:\n- PATH\n- MAC\n---\n\n之前在配置 MAC 环境变量的时候，总是云里雾里的不知道要怎么配置，都是从网上找配置方案，然后成功了完事大吉，不成功就换一种配置方案，所以并不知道为什么要这么配置，今天就来整理一下 MAC 应该如何来配置环境变量。\n\n## Mac osx 下环境变量的加载顺序\n\nMAC 默认的终端是 bash。\n\n```bash\n/etc/profile    # 系统级，系统启动加载\n/etc/paths      # 系统级，系统启动加载\n~/.bash_profile # 用户级\n~/.bash_login   # 用户级\n~/.profile      # 用户级\n~/.bashrc       # 用户级\n```\n\n<!-- more -->\n\n如果 `~/.bash_profile` 文件存在的话，那么就不会读取 `~/.bash_login` 和 `~/.profile`，而 `~/.bashrc` 是 shell 打开的时候载入的。\n\n如果没有特殊说明，设置 PATH 的语法如下：\n\n```bash\nexport PATH=$PATH:<PATH 1>:<PATH 2>:----:<PATH N>\n```\n\n## 全局配置\n\n下面几个文件设置是全局的，修改的时候需要 root 权限：\n\n- 编辑 `/etc/paths`（全局修改建议修改这个文件）\n\n    ```bash\n    $ sudo vi /etc/paths\n    # 一行一个路径\n    /usr/local/bin\n    /usr/bin\n    /bin\n    /usr/sbin\n    /sbin\n    ```\n\n    需要重启终端来加载环境变量。\n\n    Hint：输入环境变量时，不用一个一个地输入，只要拖动文件夹到 Terminal 里就可以了。\n\n- 编辑 `/etc/profile`（不建议修改）\n\n    全局（共有）配置，不管哪个用户，登陆都会读取此文件。\n\n- 编辑 `/etc/bashrc`（一般在这个文件中添加系统级环境变量）\n\n    全局（共有）变量，bash shell 执行时，不管是何种方式，都会读取此文件(当 .bash_profile 存在且在 .bash_profile 里没有声明 加入 .bashrc 环境的时候，会被忽略)\n\n- 编辑 `/etc/paths.d` 下的文件\n\n    ```bash\n    # 创建名为 mysql 的文件\n    $ sudo vim /etc/paths.d/mysql\n    # 添加下面路径\n    /usr/local/mysql/bin\n    ```\n\n    重启终端加载环境变量\n\n## 使用 bash\n\n添加 ~/.bash_profile 文件并在里面声明 PATH 信息，这种样的配置只在 bash 下才生效：\n\n    ```bash\n    PATH=$PATH:/xxx/xxx\n    ```\n编辑完文件后需要执行 `source ~/.bash_profile` 使其生效并需要重新启动终端来加载环境变量。\n\n## 使用 zsh\n\n如果使用了 zsh 工具，则对 bash_profile 的修改是不起作用的，这时候作为代替，应该编辑 ~/.zshrc 文件。在文件的末尾加上：\n\n    ```bash\n    PATH=$PATH:/xxx/xxx\n    ```\n编辑完文件后需要执行 `source ~/.zshrc` 使其生效并需要重新启动终端来加载环境变量。\n\n## 相关链接\n\n- [MAC 设置环境变量 PATH 的几种方法](https://www.cnblogs.com/shineqiujuan/p/4693404.html)\n- [bash/zsh 的四种运行模式](https://zhuanlan.zhihu.com/p/47819029)","slug":"mac_path","published":1,"updated":"2019-04-19T11:02:42.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxh80ekw000a6c9vs1eu3qcw","content":"<p>之前在配置 MAC 环境变量的时候，总是云里雾里的不知道要怎么配置，都是从网上找配置方案，然后成功了完事大吉，不成功就换一种配置方案，所以并不知道为什么要这么配置，今天就来整理一下 MAC 应该如何来配置环境变量。</p>\n<h2 id=\"Mac-osx-下环境变量的加载顺序\"><a href=\"#Mac-osx-下环境变量的加载顺序\" class=\"headerlink\" title=\"Mac osx 下环境变量的加载顺序\"></a>Mac osx 下环境变量的加载顺序</h2><p>MAC 默认的终端是 bash。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/profile    <span class=\"comment\"># 系统级，系统启动加载</span></span><br><span class=\"line\">/etc/paths      <span class=\"comment\"># 系统级，系统启动加载</span></span><br><span class=\"line\">~/.bash_profile <span class=\"comment\"># 用户级</span></span><br><span class=\"line\">~/.bash_login   <span class=\"comment\"># 用户级</span></span><br><span class=\"line\">~/.profile      <span class=\"comment\"># 用户级</span></span><br><span class=\"line\">~/.bashrc       <span class=\"comment\"># 用户级</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>如果 <code>~/.bash_profile</code> 文件存在的话，那么就不会读取 <code>~/.bash_login</code> 和 <code>~/.profile</code>，而 <code>~/.bashrc</code> 是 shell 打开的时候载入的。</p>\n<p>如果没有特殊说明，设置 PATH 的语法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:&lt;PATH 1&gt;:&lt;PATH 2&gt;:----:&lt;PATH N&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h2><p>下面几个文件设置是全局的，修改的时候需要 root 权限：</p>\n<ul>\n<li><p>编辑 <code>/etc/paths</code>（全局修改建议修改这个文件）</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vi /etc/paths</span><br><span class=\"line\"><span class=\"comment\"># 一行一个路径</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin</span><br><span class=\"line\">/usr/bin</span><br><span class=\"line\">/bin</span><br><span class=\"line\">/usr/sbin</span><br><span class=\"line\">/sbin</span><br></pre></td></tr></table></figure>\n<p>  需要重启终端来加载环境变量。</p>\n<p>  Hint：输入环境变量时，不用一个一个地输入，只要拖动文件夹到 Terminal 里就可以了。</p>\n</li>\n<li><p>编辑 <code>/etc/profile</code>（不建议修改）</p>\n<p>  全局（共有）配置，不管哪个用户，登陆都会读取此文件。</p>\n</li>\n<li><p>编辑 <code>/etc/bashrc</code>（一般在这个文件中添加系统级环境变量）</p>\n<p>  全局（共有）变量，bash shell 执行时，不管是何种方式，都会读取此文件(当 .bash_profile 存在且在 .bash_profile 里没有声明 加入 .bashrc 环境的时候，会被忽略)</p>\n</li>\n<li><p>编辑 <code>/etc/paths.d</code> 下的文件</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建名为 mysql 的文件</span></span><br><span class=\"line\">$ sudo vim /etc/paths.d/mysql</span><br><span class=\"line\"><span class=\"comment\"># 添加下面路径</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/mysql/bin</span><br></pre></td></tr></table></figure>\n<p>  重启终端加载环境变量</p>\n</li>\n</ul>\n<h2 id=\"使用-bash\"><a href=\"#使用-bash\" class=\"headerlink\" title=\"使用 bash\"></a>使用 bash</h2><p>添加 ~/.bash_profile 文件并在里面声明 PATH 信息，这种样的配置只在 bash 下才生效：</p>\n<pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH=<span class=\"variable\">$PATH</span>:/xxx/xxx</span><br></pre></td></tr></table></figure>\n</code></pre><p>编辑完文件后需要执行 <code>source ~/.bash_profile</code> 使其生效并需要重新启动终端来加载环境变量。</p>\n<h2 id=\"使用-zsh\"><a href=\"#使用-zsh\" class=\"headerlink\" title=\"使用 zsh\"></a>使用 zsh</h2><p>如果使用了 zsh 工具，则对 bash_profile 的修改是不起作用的，这时候作为代替，应该编辑 ~/.zshrc 文件。在文件的末尾加上：</p>\n<pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH=<span class=\"variable\">$PATH</span>:/xxx/xxx</span><br></pre></td></tr></table></figure>\n</code></pre><p>编辑完文件后需要执行 <code>source ~/.zshrc</code> 使其生效并需要重新启动终端来加载环境变量。</p>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li><a href=\"https://www.cnblogs.com/shineqiujuan/p/4693404.html\" target=\"_blank\" rel=\"noopener\">MAC 设置环境变量 PATH 的几种方法</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/47819029\" target=\"_blank\" rel=\"noopener\">bash/zsh 的四种运行模式</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>之前在配置 MAC 环境变量的时候，总是云里雾里的不知道要怎么配置，都是从网上找配置方案，然后成功了完事大吉，不成功就换一种配置方案，所以并不知道为什么要这么配置，今天就来整理一下 MAC 应该如何来配置环境变量。</p>\n<h2 id=\"Mac-osx-下环境变量的加载顺序\"><a href=\"#Mac-osx-下环境变量的加载顺序\" class=\"headerlink\" title=\"Mac osx 下环境变量的加载顺序\"></a>Mac osx 下环境变量的加载顺序</h2><p>MAC 默认的终端是 bash。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/profile    <span class=\"comment\"># 系统级，系统启动加载</span></span><br><span class=\"line\">/etc/paths      <span class=\"comment\"># 系统级，系统启动加载</span></span><br><span class=\"line\">~/.bash_profile <span class=\"comment\"># 用户级</span></span><br><span class=\"line\">~/.bash_login   <span class=\"comment\"># 用户级</span></span><br><span class=\"line\">~/.profile      <span class=\"comment\"># 用户级</span></span><br><span class=\"line\">~/.bashrc       <span class=\"comment\"># 用户级</span></span><br></pre></td></tr></table></figure>","more":"<p>如果 <code>~/.bash_profile</code> 文件存在的话，那么就不会读取 <code>~/.bash_login</code> 和 <code>~/.profile</code>，而 <code>~/.bashrc</code> 是 shell 打开的时候载入的。</p>\n<p>如果没有特殊说明，设置 PATH 的语法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:&lt;PATH 1&gt;:&lt;PATH 2&gt;:----:&lt;PATH N&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h2><p>下面几个文件设置是全局的，修改的时候需要 root 权限：</p>\n<ul>\n<li><p>编辑 <code>/etc/paths</code>（全局修改建议修改这个文件）</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vi /etc/paths</span><br><span class=\"line\"><span class=\"comment\"># 一行一个路径</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin</span><br><span class=\"line\">/usr/bin</span><br><span class=\"line\">/bin</span><br><span class=\"line\">/usr/sbin</span><br><span class=\"line\">/sbin</span><br></pre></td></tr></table></figure>\n<p>  需要重启终端来加载环境变量。</p>\n<p>  Hint：输入环境变量时，不用一个一个地输入，只要拖动文件夹到 Terminal 里就可以了。</p>\n</li>\n<li><p>编辑 <code>/etc/profile</code>（不建议修改）</p>\n<p>  全局（共有）配置，不管哪个用户，登陆都会读取此文件。</p>\n</li>\n<li><p>编辑 <code>/etc/bashrc</code>（一般在这个文件中添加系统级环境变量）</p>\n<p>  全局（共有）变量，bash shell 执行时，不管是何种方式，都会读取此文件(当 .bash_profile 存在且在 .bash_profile 里没有声明 加入 .bashrc 环境的时候，会被忽略)</p>\n</li>\n<li><p>编辑 <code>/etc/paths.d</code> 下的文件</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建名为 mysql 的文件</span></span><br><span class=\"line\">$ sudo vim /etc/paths.d/mysql</span><br><span class=\"line\"><span class=\"comment\"># 添加下面路径</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/mysql/bin</span><br></pre></td></tr></table></figure>\n<p>  重启终端加载环境变量</p>\n</li>\n</ul>\n<h2 id=\"使用-bash\"><a href=\"#使用-bash\" class=\"headerlink\" title=\"使用 bash\"></a>使用 bash</h2><p>添加 ~/.bash_profile 文件并在里面声明 PATH 信息，这种样的配置只在 bash 下才生效：</p>\n<pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH=<span class=\"variable\">$PATH</span>:/xxx/xxx</span><br></pre></td></tr></table></figure>\n</code></pre><p>编辑完文件后需要执行 <code>source ~/.bash_profile</code> 使其生效并需要重新启动终端来加载环境变量。</p>\n<h2 id=\"使用-zsh\"><a href=\"#使用-zsh\" class=\"headerlink\" title=\"使用 zsh\"></a>使用 zsh</h2><p>如果使用了 zsh 工具，则对 bash_profile 的修改是不起作用的，这时候作为代替，应该编辑 ~/.zshrc 文件。在文件的末尾加上：</p>\n<pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH=<span class=\"variable\">$PATH</span>:/xxx/xxx</span><br></pre></td></tr></table></figure>\n</code></pre><p>编辑完文件后需要执行 <code>source ~/.zshrc</code> 使其生效并需要重新启动终端来加载环境变量。</p>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li><a href=\"https://www.cnblogs.com/shineqiujuan/p/4693404.html\" target=\"_blank\" rel=\"noopener\">MAC 设置环境变量 PATH 的几种方法</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/47819029\" target=\"_blank\" rel=\"noopener\">bash/zsh 的四种运行模式</a></li>\n</ul>"},{"title":"加锁 Mutex 和 Channel 性能对比","date":"2019-04-19T06:38:40.000Z","toc":true,"_content":"\n## 性能对比\n\n首先在一个目录下新建两个文件：\n\nmain.go\n\n```go\n// main.go\npackage main\n\nimport \"sync\"\n\nvar mutex = sync.Mutex{}\nvar ch = make(chan bool, 1)\n\nfunc UseMutex() {\n    mutex.Lock()\n    mutex.Unlock()\n}\n\nfunc UseChan() {\n    ch <- true\n    <-ch\n}\n```\n\n<!-- more -->\n\nmain_test.go\n\n```go\n// main_test.go\npackage main\n\nimport \"testing\"\n\nfunc BenchmarkUseMutex(b *testing.B) {\n    for n := 0; n < b.N; n++ {\n        UseMutex()\n    }\n}\n\nfunc BenchmarkUseChan(b *testing.B) {\n    for n := 0; n < b.N; n++ {\n        UseChan()\n    }\n}\n```\n\n然后在该文件路径下执行 benchmark：\n\n```bash\ngo test -bench=.\n```\n\n结果如下：\n\n```bash\ngoos: darwin\ngoarch: amd64\npkg: testproject/race\nBenchmarkUseMutex-4     100000000               15.9 ns/op\nBenchmarkUseChan-4      30000000                50.1 ns/op\nPASS\nok      testproject/race        3.173s\n```\n\n从压测结果来看，加锁的方式是使用 Channel 方式的 3.1 倍\n\n## 原因分析\n\n* channel 的成本高于 Mutex\n\n    1. channel 内部有 Mutex，是通过共享内存实现的。(TODO:这里少一个传送门)\n    2. channel 内部可能有 Cond，用来等待或唤醒满足条件的 goroutine(TODO:这里少一个传送门)\n    3. 出让 cpu 并且让另一个 goroutine 获得执行机会，这个切换周期不低，远高于 Mutex 检查竞争状态的成本（后者通常只是一个原子操作）\n\n## 相关链接\n\n* [加锁 Mutex 和 Channel 性能对比](https://www.colabug.com/278134.html)\n* [Golang并发：再也不愁选channel还是选锁](http://lessisbetter.site/2019/01/14/golang-channel-and-mutex/)\n","source":"_posts/mutex_or_channel.md","raw":"---\ntitle: 加锁 Mutex 和 Channel 性能对比\ndate: 2019-04-19 14:38:40\ntoc: true\ntags:\n- Go\n---\n\n## 性能对比\n\n首先在一个目录下新建两个文件：\n\nmain.go\n\n```go\n// main.go\npackage main\n\nimport \"sync\"\n\nvar mutex = sync.Mutex{}\nvar ch = make(chan bool, 1)\n\nfunc UseMutex() {\n    mutex.Lock()\n    mutex.Unlock()\n}\n\nfunc UseChan() {\n    ch <- true\n    <-ch\n}\n```\n\n<!-- more -->\n\nmain_test.go\n\n```go\n// main_test.go\npackage main\n\nimport \"testing\"\n\nfunc BenchmarkUseMutex(b *testing.B) {\n    for n := 0; n < b.N; n++ {\n        UseMutex()\n    }\n}\n\nfunc BenchmarkUseChan(b *testing.B) {\n    for n := 0; n < b.N; n++ {\n        UseChan()\n    }\n}\n```\n\n然后在该文件路径下执行 benchmark：\n\n```bash\ngo test -bench=.\n```\n\n结果如下：\n\n```bash\ngoos: darwin\ngoarch: amd64\npkg: testproject/race\nBenchmarkUseMutex-4     100000000               15.9 ns/op\nBenchmarkUseChan-4      30000000                50.1 ns/op\nPASS\nok      testproject/race        3.173s\n```\n\n从压测结果来看，加锁的方式是使用 Channel 方式的 3.1 倍\n\n## 原因分析\n\n* channel 的成本高于 Mutex\n\n    1. channel 内部有 Mutex，是通过共享内存实现的。(TODO:这里少一个传送门)\n    2. channel 内部可能有 Cond，用来等待或唤醒满足条件的 goroutine(TODO:这里少一个传送门)\n    3. 出让 cpu 并且让另一个 goroutine 获得执行机会，这个切换周期不低，远高于 Mutex 检查竞争状态的成本（后者通常只是一个原子操作）\n\n## 相关链接\n\n* [加锁 Mutex 和 Channel 性能对比](https://www.colabug.com/278134.html)\n* [Golang并发：再也不愁选channel还是选锁](http://lessisbetter.site/2019/01/14/golang-channel-and-mutex/)\n","slug":"mutex_or_channel","published":1,"updated":"2019-04-24T11:07:46.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxh80eky000c6c9vsg5wdg2u","content":"<h2 id=\"性能对比\"><a href=\"#性能对比\" class=\"headerlink\" title=\"性能对比\"></a>性能对比</h2><p>首先在一个目录下新建两个文件：</p>\n<p>main.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"sync\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mutex = sync.Mutex&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ch = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UseMutex</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mutex.Lock()</span><br><span class=\"line\">    mutex.Unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UseChan</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    ch &lt;- <span class=\"literal\">true</span></span><br><span class=\"line\">    &lt;-ch</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>main_test.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main_test.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"testing\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkUseMutex</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> n := <span class=\"number\">0</span>; n &lt; b.N; n++ &#123;</span><br><span class=\"line\">        UseMutex()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkUseChan</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> n := <span class=\"number\">0</span>; n &lt; b.N; n++ &#123;</span><br><span class=\"line\">        UseChan()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在该文件路径下执行 benchmark：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go <span class=\"built_in\">test</span> -bench=.</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goos: darwin</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: testproject/race</span><br><span class=\"line\">BenchmarkUseMutex-4     100000000               15.9 ns/op</span><br><span class=\"line\">BenchmarkUseChan-4      30000000                50.1 ns/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      testproject/race        3.173s</span><br></pre></td></tr></table></figure>\n<p>从压测结果来看，加锁的方式是使用 Channel 方式的 3.1 倍</p>\n<h2 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h2><ul>\n<li><p>channel 的成本高于 Mutex</p>\n<ol>\n<li>channel 内部有 Mutex，是通过共享内存实现的。(TODO:这里少一个传送门)</li>\n<li>channel 内部可能有 Cond，用来等待或唤醒满足条件的 goroutine(TODO:这里少一个传送门)</li>\n<li>出让 cpu 并且让另一个 goroutine 获得执行机会，这个切换周期不低，远高于 Mutex 检查竞争状态的成本（后者通常只是一个原子操作）</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li><a href=\"https://www.colabug.com/278134.html\" target=\"_blank\" rel=\"noopener\">加锁 Mutex 和 Channel 性能对比</a></li>\n<li><a href=\"http://lessisbetter.site/2019/01/14/golang-channel-and-mutex/\" target=\"_blank\" rel=\"noopener\">Golang并发：再也不愁选channel还是选锁</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"性能对比\"><a href=\"#性能对比\" class=\"headerlink\" title=\"性能对比\"></a>性能对比</h2><p>首先在一个目录下新建两个文件：</p>\n<p>main.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"sync\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mutex = sync.Mutex&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ch = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UseMutex</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mutex.Lock()</span><br><span class=\"line\">    mutex.Unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UseChan</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    ch &lt;- <span class=\"literal\">true</span></span><br><span class=\"line\">    &lt;-ch</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>main_test.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main_test.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"testing\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkUseMutex</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> n := <span class=\"number\">0</span>; n &lt; b.N; n++ &#123;</span><br><span class=\"line\">        UseMutex()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkUseChan</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> n := <span class=\"number\">0</span>; n &lt; b.N; n++ &#123;</span><br><span class=\"line\">        UseChan()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在该文件路径下执行 benchmark：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go <span class=\"built_in\">test</span> -bench=.</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goos: darwin</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: testproject/race</span><br><span class=\"line\">BenchmarkUseMutex-4     100000000               15.9 ns/op</span><br><span class=\"line\">BenchmarkUseChan-4      30000000                50.1 ns/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      testproject/race        3.173s</span><br></pre></td></tr></table></figure>\n<p>从压测结果来看，加锁的方式是使用 Channel 方式的 3.1 倍</p>\n<h2 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h2><ul>\n<li><p>channel 的成本高于 Mutex</p>\n<ol>\n<li>channel 内部有 Mutex，是通过共享内存实现的。(TODO:这里少一个传送门)</li>\n<li>channel 内部可能有 Cond，用来等待或唤醒满足条件的 goroutine(TODO:这里少一个传送门)</li>\n<li>出让 cpu 并且让另一个 goroutine 获得执行机会，这个切换周期不低，远高于 Mutex 检查竞争状态的成本（后者通常只是一个原子操作）</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li><a href=\"https://www.colabug.com/278134.html\" target=\"_blank\" rel=\"noopener\">加锁 Mutex 和 Channel 性能对比</a></li>\n<li><a href=\"http://lessisbetter.site/2019/01/14/golang-channel-and-mutex/\" target=\"_blank\" rel=\"noopener\">Golang并发：再也不愁选channel还是选锁</a></li>\n</ul>"},{"title":"什么是 RSS ？","date":"2019-04-14T10:28:44.000Z","toc":true,"_content":"\n## 什么是 RSS ？\n\n\b在解释 RSS 是什么之前，让我先来打一个比方。\n\n读大学的时候，我有个习惯，就是每天要去看食堂后面的海报栏。在那里，会贴出各种各样最新的消息，比如哪个系要开讲座了、星期二晚上的电影放什么、二手货转让等等。只要看一下海报栏，就会对学校的各种活动心中有数。\n\n如果没有海报栏的话，要想知道这些消息就会很麻烦。讲座消息会贴在各个系自己的公告栏里，电影排片表是贴在电影院里的，二手货消息则会贴在各幢宿舍的楼道里。我所在的大学有 20 几个系，一万多人，要想知道所有这些消息的话，即使是可能的话，也会相当的麻烦。\n\n从这个例子出发，让我们来考虑一下互联网。\n\n<!-- more -->\n\n互联网是什么？最直观的说，就是一个杂乱无章的巨大信息源，其丰富和杂乱的程度，不仅是巨大的，而且几乎是无限的。\n\n一个使用者，要想及时掌握的互联网上出现的最新信息，有办法吗？\n\n答案是没有办法，他只有一个网站一个网站的打开，去看有什么最新内容，就好比每天都必须去每一个系里走一遍，看有什么最新讲座。如果是几个网站，哪倒也不难，都去看一遍也花不了多少时间。但是随着你关注的网站数量上升，这项工作会迅速的变为 \"Mission Impossible\"。想象一下，如果你每天关注几十个、甚至几百个网站，会是怎样的情景。光是打开它们的首页，就要花费多少时间啊，更别说浏览花去的时间了。\n\n也许有人会说，普通人的话，谁会关心那么多网站啊？\n\n我要说，哪怕你只是一个网络的初级或最单纯的使用者，与你发生关系的网站数量也在急剧增加，因为 Blog 出现了。越来越多的人开始写作网络日志（Blog），把自己的想法和生活在网上展示，其中也必然包括你的朋友，或者其他你感兴趣的人。你想知道他/她的最新动向，就势必要留心他/她的 Blog。所以，你的网站浏览清单总有一天会和你的电话本、MSN Message 好友列表一样多，甚至更多。\n\n那时，你会发现浏览网站会变成一种困难和低效率的行为。\n\n有没有办法找到互联网上的\"海报栏\"，只去一个地方就知道你所想知道的所有最新内容？\n\n有，那就是 RSS。\n\n## 如何使用？\n\n准确的说，RSS 就像一个网站的海报，里面包括这个网站的最新内容，会自动更新。所以，我们只要订阅了 RSS，就不会错过自己喜欢的网站的更新了。\n\n但是光有海报还不行，还必须有海报栏，也就是说必须有 RSS 阅读器才行。因为 RSS 只是数据源，它本身是写给程序看的，必须经过阅读器转换，才能成为可以浏览的格式。\n\nRSS 阅读器多种多样，大致分为两种，一种是桌面型的，需要安装；另一种是在线型，直接使用浏览器进行阅读。\n\n在浏览器中订阅 RSS，就必须先知道 RSS 的地址。一般来说，各个网站的首页都会用显著位置标明。名称可能会有些不同，比如 RSS、XML、FEED，大家知道它们指的都是同样的东西就可以了。有时 RSS 后面还会带有版本号，比如 2.0、1.0，甚至 0.92，这个不必理会，它们只是内部格式不同，内容都是一样。\n\n将 RSS 地址复制下来以后，你就可以在在线阅读器中添加。\n\n以后，只用打开这一个网页，就可以看到所有你喜欢的网站的最新内容了。\n\n## 相关链接\n\n- wiki：https://en.wikipedia.org/wiki/RSS\n- 菜鸟教程：http://www.runoob.com/rss/rss-tutorial.html\n- [转自]阮一峰：http://www.ruanyifeng.com/blog/2006/01/rss.html","source":"_posts/rss.md","raw":"---\ntitle: 什么是 RSS ？\ndate: 2019-04-14 18:28:44\ntoc: true\ntags:\n- 技术名词\n---\n\n## 什么是 RSS ？\n\n\b在解释 RSS 是什么之前，让我先来打一个比方。\n\n读大学的时候，我有个习惯，就是每天要去看食堂后面的海报栏。在那里，会贴出各种各样最新的消息，比如哪个系要开讲座了、星期二晚上的电影放什么、二手货转让等等。只要看一下海报栏，就会对学校的各种活动心中有数。\n\n如果没有海报栏的话，要想知道这些消息就会很麻烦。讲座消息会贴在各个系自己的公告栏里，电影排片表是贴在电影院里的，二手货消息则会贴在各幢宿舍的楼道里。我所在的大学有 20 几个系，一万多人，要想知道所有这些消息的话，即使是可能的话，也会相当的麻烦。\n\n从这个例子出发，让我们来考虑一下互联网。\n\n<!-- more -->\n\n互联网是什么？最直观的说，就是一个杂乱无章的巨大信息源，其丰富和杂乱的程度，不仅是巨大的，而且几乎是无限的。\n\n一个使用者，要想及时掌握的互联网上出现的最新信息，有办法吗？\n\n答案是没有办法，他只有一个网站一个网站的打开，去看有什么最新内容，就好比每天都必须去每一个系里走一遍，看有什么最新讲座。如果是几个网站，哪倒也不难，都去看一遍也花不了多少时间。但是随着你关注的网站数量上升，这项工作会迅速的变为 \"Mission Impossible\"。想象一下，如果你每天关注几十个、甚至几百个网站，会是怎样的情景。光是打开它们的首页，就要花费多少时间啊，更别说浏览花去的时间了。\n\n也许有人会说，普通人的话，谁会关心那么多网站啊？\n\n我要说，哪怕你只是一个网络的初级或最单纯的使用者，与你发生关系的网站数量也在急剧增加，因为 Blog 出现了。越来越多的人开始写作网络日志（Blog），把自己的想法和生活在网上展示，其中也必然包括你的朋友，或者其他你感兴趣的人。你想知道他/她的最新动向，就势必要留心他/她的 Blog。所以，你的网站浏览清单总有一天会和你的电话本、MSN Message 好友列表一样多，甚至更多。\n\n那时，你会发现浏览网站会变成一种困难和低效率的行为。\n\n有没有办法找到互联网上的\"海报栏\"，只去一个地方就知道你所想知道的所有最新内容？\n\n有，那就是 RSS。\n\n## 如何使用？\n\n准确的说，RSS 就像一个网站的海报，里面包括这个网站的最新内容，会自动更新。所以，我们只要订阅了 RSS，就不会错过自己喜欢的网站的更新了。\n\n但是光有海报还不行，还必须有海报栏，也就是说必须有 RSS 阅读器才行。因为 RSS 只是数据源，它本身是写给程序看的，必须经过阅读器转换，才能成为可以浏览的格式。\n\nRSS 阅读器多种多样，大致分为两种，一种是桌面型的，需要安装；另一种是在线型，直接使用浏览器进行阅读。\n\n在浏览器中订阅 RSS，就必须先知道 RSS 的地址。一般来说，各个网站的首页都会用显著位置标明。名称可能会有些不同，比如 RSS、XML、FEED，大家知道它们指的都是同样的东西就可以了。有时 RSS 后面还会带有版本号，比如 2.0、1.0，甚至 0.92，这个不必理会，它们只是内部格式不同，内容都是一样。\n\n将 RSS 地址复制下来以后，你就可以在在线阅读器中添加。\n\n以后，只用打开这一个网页，就可以看到所有你喜欢的网站的最新内容了。\n\n## 相关链接\n\n- wiki：https://en.wikipedia.org/wiki/RSS\n- 菜鸟教程：http://www.runoob.com/rss/rss-tutorial.html\n- [转自]阮一峰：http://www.ruanyifeng.com/blog/2006/01/rss.html","slug":"rss","published":1,"updated":"2019-04-15T03:00:22.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxh80ekz000d6c9vwfn95dmp","content":"<h2 id=\"什么是-RSS-？\"><a href=\"#什么是-RSS-？\" class=\"headerlink\" title=\"什么是 RSS ？\"></a>什么是 RSS ？</h2><p>\b在解释 RSS 是什么之前，让我先来打一个比方。</p>\n<p>读大学的时候，我有个习惯，就是每天要去看食堂后面的海报栏。在那里，会贴出各种各样最新的消息，比如哪个系要开讲座了、星期二晚上的电影放什么、二手货转让等等。只要看一下海报栏，就会对学校的各种活动心中有数。</p>\n<p>如果没有海报栏的话，要想知道这些消息就会很麻烦。讲座消息会贴在各个系自己的公告栏里，电影排片表是贴在电影院里的，二手货消息则会贴在各幢宿舍的楼道里。我所在的大学有 20 几个系，一万多人，要想知道所有这些消息的话，即使是可能的话，也会相当的麻烦。</p>\n<p>从这个例子出发，让我们来考虑一下互联网。</p>\n<a id=\"more\"></a>\n<p>互联网是什么？最直观的说，就是一个杂乱无章的巨大信息源，其丰富和杂乱的程度，不仅是巨大的，而且几乎是无限的。</p>\n<p>一个使用者，要想及时掌握的互联网上出现的最新信息，有办法吗？</p>\n<p>答案是没有办法，他只有一个网站一个网站的打开，去看有什么最新内容，就好比每天都必须去每一个系里走一遍，看有什么最新讲座。如果是几个网站，哪倒也不难，都去看一遍也花不了多少时间。但是随着你关注的网站数量上升，这项工作会迅速的变为 “Mission Impossible”。想象一下，如果你每天关注几十个、甚至几百个网站，会是怎样的情景。光是打开它们的首页，就要花费多少时间啊，更别说浏览花去的时间了。</p>\n<p>也许有人会说，普通人的话，谁会关心那么多网站啊？</p>\n<p>我要说，哪怕你只是一个网络的初级或最单纯的使用者，与你发生关系的网站数量也在急剧增加，因为 Blog 出现了。越来越多的人开始写作网络日志（Blog），把自己的想法和生活在网上展示，其中也必然包括你的朋友，或者其他你感兴趣的人。你想知道他/她的最新动向，就势必要留心他/她的 Blog。所以，你的网站浏览清单总有一天会和你的电话本、MSN Message 好友列表一样多，甚至更多。</p>\n<p>那时，你会发现浏览网站会变成一种困难和低效率的行为。</p>\n<p>有没有办法找到互联网上的”海报栏”，只去一个地方就知道你所想知道的所有最新内容？</p>\n<p>有，那就是 RSS。</p>\n<h2 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h2><p>准确的说，RSS 就像一个网站的海报，里面包括这个网站的最新内容，会自动更新。所以，我们只要订阅了 RSS，就不会错过自己喜欢的网站的更新了。</p>\n<p>但是光有海报还不行，还必须有海报栏，也就是说必须有 RSS 阅读器才行。因为 RSS 只是数据源，它本身是写给程序看的，必须经过阅读器转换，才能成为可以浏览的格式。</p>\n<p>RSS 阅读器多种多样，大致分为两种，一种是桌面型的，需要安装；另一种是在线型，直接使用浏览器进行阅读。</p>\n<p>在浏览器中订阅 RSS，就必须先知道 RSS 的地址。一般来说，各个网站的首页都会用显著位置标明。名称可能会有些不同，比如 RSS、XML、FEED，大家知道它们指的都是同样的东西就可以了。有时 RSS 后面还会带有版本号，比如 2.0、1.0，甚至 0.92，这个不必理会，它们只是内部格式不同，内容都是一样。</p>\n<p>将 RSS 地址复制下来以后，你就可以在在线阅读器中添加。</p>\n<p>以后，只用打开这一个网页，就可以看到所有你喜欢的网站的最新内容了。</p>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li>wiki：<a href=\"https://en.wikipedia.org/wiki/RSS\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/RSS</a></li>\n<li>菜鸟教程：<a href=\"http://www.runoob.com/rss/rss-tutorial.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/rss/rss-tutorial.html</a></li>\n<li>[转自]阮一峰：<a href=\"http://www.ruanyifeng.com/blog/2006/01/rss.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2006/01/rss.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是-RSS-？\"><a href=\"#什么是-RSS-？\" class=\"headerlink\" title=\"什么是 RSS ？\"></a>什么是 RSS ？</h2><p>\b在解释 RSS 是什么之前，让我先来打一个比方。</p>\n<p>读大学的时候，我有个习惯，就是每天要去看食堂后面的海报栏。在那里，会贴出各种各样最新的消息，比如哪个系要开讲座了、星期二晚上的电影放什么、二手货转让等等。只要看一下海报栏，就会对学校的各种活动心中有数。</p>\n<p>如果没有海报栏的话，要想知道这些消息就会很麻烦。讲座消息会贴在各个系自己的公告栏里，电影排片表是贴在电影院里的，二手货消息则会贴在各幢宿舍的楼道里。我所在的大学有 20 几个系，一万多人，要想知道所有这些消息的话，即使是可能的话，也会相当的麻烦。</p>\n<p>从这个例子出发，让我们来考虑一下互联网。</p>","more":"<p>互联网是什么？最直观的说，就是一个杂乱无章的巨大信息源，其丰富和杂乱的程度，不仅是巨大的，而且几乎是无限的。</p>\n<p>一个使用者，要想及时掌握的互联网上出现的最新信息，有办法吗？</p>\n<p>答案是没有办法，他只有一个网站一个网站的打开，去看有什么最新内容，就好比每天都必须去每一个系里走一遍，看有什么最新讲座。如果是几个网站，哪倒也不难，都去看一遍也花不了多少时间。但是随着你关注的网站数量上升，这项工作会迅速的变为 “Mission Impossible”。想象一下，如果你每天关注几十个、甚至几百个网站，会是怎样的情景。光是打开它们的首页，就要花费多少时间啊，更别说浏览花去的时间了。</p>\n<p>也许有人会说，普通人的话，谁会关心那么多网站啊？</p>\n<p>我要说，哪怕你只是一个网络的初级或最单纯的使用者，与你发生关系的网站数量也在急剧增加，因为 Blog 出现了。越来越多的人开始写作网络日志（Blog），把自己的想法和生活在网上展示，其中也必然包括你的朋友，或者其他你感兴趣的人。你想知道他/她的最新动向，就势必要留心他/她的 Blog。所以，你的网站浏览清单总有一天会和你的电话本、MSN Message 好友列表一样多，甚至更多。</p>\n<p>那时，你会发现浏览网站会变成一种困难和低效率的行为。</p>\n<p>有没有办法找到互联网上的”海报栏”，只去一个地方就知道你所想知道的所有最新内容？</p>\n<p>有，那就是 RSS。</p>\n<h2 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h2><p>准确的说，RSS 就像一个网站的海报，里面包括这个网站的最新内容，会自动更新。所以，我们只要订阅了 RSS，就不会错过自己喜欢的网站的更新了。</p>\n<p>但是光有海报还不行，还必须有海报栏，也就是说必须有 RSS 阅读器才行。因为 RSS 只是数据源，它本身是写给程序看的，必须经过阅读器转换，才能成为可以浏览的格式。</p>\n<p>RSS 阅读器多种多样，大致分为两种，一种是桌面型的，需要安装；另一种是在线型，直接使用浏览器进行阅读。</p>\n<p>在浏览器中订阅 RSS，就必须先知道 RSS 的地址。一般来说，各个网站的首页都会用显著位置标明。名称可能会有些不同，比如 RSS、XML、FEED，大家知道它们指的都是同样的东西就可以了。有时 RSS 后面还会带有版本号，比如 2.0、1.0，甚至 0.92，这个不必理会，它们只是内部格式不同，内容都是一样。</p>\n<p>将 RSS 地址复制下来以后，你就可以在在线阅读器中添加。</p>\n<p>以后，只用打开这一个网页，就可以看到所有你喜欢的网站的最新内容了。</p>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li>wiki：<a href=\"https://en.wikipedia.org/wiki/RSS\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/RSS</a></li>\n<li>菜鸟教程：<a href=\"http://www.runoob.com/rss/rss-tutorial.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/rss/rss-tutorial.html</a></li>\n<li>[转自]阮一峰：<a href=\"http://www.ruanyifeng.com/blog/2006/01/rss.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2006/01/rss.html</a></li>\n</ul>"},{"title":"Linux 中硬连接（hard link）与软连接（symbolic link）的区别","date":"2019-04-22T04:17:10.000Z","toc":true,"_content":"\n首先要简单了解一下 Linux 的 Ext 文件系统，此处[传送门](https://www.cnblogs.com/justmine/p/9128730.html)。\n\n## Linux Ext文件系统\n\nLinux 的 Ext 文件系统是如何与磁盘内存产生对应的呢？我们知道，在使用磁盘内存之前，需要为磁盘分区，然后为所分区域格式化出一个统一的文件系统（也有例外，如LVM与磁盘阵列技术）。那么，在这样一个统一的文件系统中，根据数据的不同，就可以将内存分为以下 3 种类型：\n\n- inode：记录文件的属性，一个文件占用一个 inode，同时记录此文件的数据所在的 block 号码。当用户搜索或者访问一个文件时，UNIX 系统通过 inode 表查找正确的 inode 编号。在找到 inode 编号之后，相关的命令才可以访问该 inode，并对其进行适当的更改。\n\n    > 例如使用vi来编辑一个文件。当您键入vi <filename> 时，在 inode 表中找到 inode 编号之后，才允许您打开该inode。在 vi 的编辑会话期间，更改了该inode中的某些属性，当您完成操作并键入 :wq 时，将关闭并释放该 inode。通过这种方式，如果两个用户试图对同一个文件进行编辑， inode 已经在第一个编辑会话期间分配给了另一个用户 ID (UID)，因此第二个编辑任务就必须等待，直到该 inode 释放为止。\n\n<!-- more -->\n\n- block：存储的文件内容，也叫数据区块(data block)，每个block都有自己的编号，Ext2支持的单位block容量仅为1k、2k、4k。如果文件太大，则会占用多个block。\n\n- super block：记录文件系统的整体信息，包括inode/block的总量、使用量、剩余量，以及文件系统的格式与相关信息等。\n\n因此对于一个文件来说，它的inode号就类似于id的作用，用于存放关于该文件的一些基本信息。\n\n## 硬连接（hard link）\n\n若两个文件，拥有同样的 inode，那么就产生了所谓的硬连接。\n\n1、创建文件 a，并查看属性\n\n```bash\n$ touch a\n$ ll a\n-rw-r--r--  1 nobody  staff     0B  4 22 12:29 a\n```\n\ntips：如果不是很懂 Linux 中文档属性、拥有者、群组、权限、差异等，点击[传送门](https://www.cnblogs.com/justmine/p/9053419.html)。\n\n2、创建 a 的硬连接 b，并查看 a 和 b 的属性\n\n```bash\n$ ln a b\n$ ll a b\n-rw-r--r--  2 nobody  staff     0B  4 22 12:29 a\n-rw-r--r--  2 nobody  staff     0B  4 22 12:29 b\n```\n\n可以发现，a和b的属性完全一致，注意其中第二列数字表示的就是该文件的硬连接数。\n\n3、对于硬连接来说，它的好处就是“安全”。你将其中任何一个文件名删除(rm -f)，文件都是存在的，因为文件的inode一直存在\n\n```bash\n$ rm -f a\n$ ll b\n-rw-r--r--  1 nobody  staff     0B  4 22 12:29 b\n```\n\n`并且由于两个文件都是对应的相同的 inode 和 block，因此对任何其中一个进行修改编辑，结果都会生效。`\n\n4、如果此时重建 a，则新建的 a 与 b 没有任何关系，故存在硬连接关系\n\n```bash\n-rw-r--r--  1 nobody  staff     0B  4 22 12:40 a\n-rw-r--r--  1 nobody  staff     0B  4 22 12:29 b\n```\n\n## 软连接（symbolic link）\n\n软连接的意义就如同 windows 平台下的快捷方式，它是一个类型为 l 的文件，拥有自己的 inode 和 block，对它进行操作也相当于对被 link 文件进行操作。\n\n`语法： ln -s source_file target_file`\n\n1、创建 a 和 a 的软连接 b\n\n```bash\n$ touch a\n$ ll a\n-rw-r--r--  1 nobody  staff     0B  4 22 12:47 a\n$ ln -s a b\n$ ll a b\n-rw-r--r--  1 nobody  staff     0B  4 22 12:47 a\nlrwxr-xr-x  1 nobody  staff     1B  4 22 12:49 b -> a\n```\n\n2、为 a 写入数据，查看 b 中的内容。删除 a，再查看 b 的内容会发现 b 的连接失效了\n\n```bash\n$ cat > a <<EOF\nheredoc> This is a test !\nheredoc> EOF\n$ cat b\nThis is a test !\n$ rm -f a\n$ cat b\ncat: b: No such file or directory\n```\n\n3、重新创建文件 a，然后查看 b 的内容会发现b重新连接成功了，并且连接至了原来同名的a文件。\n\n```bash\n$ ll b\nlrwxr-xr-x  1 nobody  staff     1B  4 22 12:49 b -> a\n$ touch a\n$ cat > a << EOF\nheredoc> This is another test !\nheredoc> EOF\n$ cat b\nThis is another test !\n```\n\n## 总结\n\n对于硬连接来说，共享的是 inode，重新创建的同名文件不具有相同的 inode，因此于原来毫无干系。而对于软连接来说，它连接记录的是一个文件的绝对路径，因此当重新创建同名文件时候，软连接又重新生效了。\n\n## 相关链接\n\n- [Linux 中硬连接（hard link）与软连接（symbolic link）的区别](https://blog.csdn.net/gxzc936733992/article/details/49340429)","source":"_posts/soft_hard_link.md","raw":"---\ntitle: Linux 中硬连接（hard link）与软连接（symbolic link）的区别\ndate: 2019-04-22 12:17:10\ntoc: true\ntags:\n- 技术名词\n- Linux\n---\n\n首先要简单了解一下 Linux 的 Ext 文件系统，此处[传送门](https://www.cnblogs.com/justmine/p/9128730.html)。\n\n## Linux Ext文件系统\n\nLinux 的 Ext 文件系统是如何与磁盘内存产生对应的呢？我们知道，在使用磁盘内存之前，需要为磁盘分区，然后为所分区域格式化出一个统一的文件系统（也有例外，如LVM与磁盘阵列技术）。那么，在这样一个统一的文件系统中，根据数据的不同，就可以将内存分为以下 3 种类型：\n\n- inode：记录文件的属性，一个文件占用一个 inode，同时记录此文件的数据所在的 block 号码。当用户搜索或者访问一个文件时，UNIX 系统通过 inode 表查找正确的 inode 编号。在找到 inode 编号之后，相关的命令才可以访问该 inode，并对其进行适当的更改。\n\n    > 例如使用vi来编辑一个文件。当您键入vi <filename> 时，在 inode 表中找到 inode 编号之后，才允许您打开该inode。在 vi 的编辑会话期间，更改了该inode中的某些属性，当您完成操作并键入 :wq 时，将关闭并释放该 inode。通过这种方式，如果两个用户试图对同一个文件进行编辑， inode 已经在第一个编辑会话期间分配给了另一个用户 ID (UID)，因此第二个编辑任务就必须等待，直到该 inode 释放为止。\n\n<!-- more -->\n\n- block：存储的文件内容，也叫数据区块(data block)，每个block都有自己的编号，Ext2支持的单位block容量仅为1k、2k、4k。如果文件太大，则会占用多个block。\n\n- super block：记录文件系统的整体信息，包括inode/block的总量、使用量、剩余量，以及文件系统的格式与相关信息等。\n\n因此对于一个文件来说，它的inode号就类似于id的作用，用于存放关于该文件的一些基本信息。\n\n## 硬连接（hard link）\n\n若两个文件，拥有同样的 inode，那么就产生了所谓的硬连接。\n\n1、创建文件 a，并查看属性\n\n```bash\n$ touch a\n$ ll a\n-rw-r--r--  1 nobody  staff     0B  4 22 12:29 a\n```\n\ntips：如果不是很懂 Linux 中文档属性、拥有者、群组、权限、差异等，点击[传送门](https://www.cnblogs.com/justmine/p/9053419.html)。\n\n2、创建 a 的硬连接 b，并查看 a 和 b 的属性\n\n```bash\n$ ln a b\n$ ll a b\n-rw-r--r--  2 nobody  staff     0B  4 22 12:29 a\n-rw-r--r--  2 nobody  staff     0B  4 22 12:29 b\n```\n\n可以发现，a和b的属性完全一致，注意其中第二列数字表示的就是该文件的硬连接数。\n\n3、对于硬连接来说，它的好处就是“安全”。你将其中任何一个文件名删除(rm -f)，文件都是存在的，因为文件的inode一直存在\n\n```bash\n$ rm -f a\n$ ll b\n-rw-r--r--  1 nobody  staff     0B  4 22 12:29 b\n```\n\n`并且由于两个文件都是对应的相同的 inode 和 block，因此对任何其中一个进行修改编辑，结果都会生效。`\n\n4、如果此时重建 a，则新建的 a 与 b 没有任何关系，故存在硬连接关系\n\n```bash\n-rw-r--r--  1 nobody  staff     0B  4 22 12:40 a\n-rw-r--r--  1 nobody  staff     0B  4 22 12:29 b\n```\n\n## 软连接（symbolic link）\n\n软连接的意义就如同 windows 平台下的快捷方式，它是一个类型为 l 的文件，拥有自己的 inode 和 block，对它进行操作也相当于对被 link 文件进行操作。\n\n`语法： ln -s source_file target_file`\n\n1、创建 a 和 a 的软连接 b\n\n```bash\n$ touch a\n$ ll a\n-rw-r--r--  1 nobody  staff     0B  4 22 12:47 a\n$ ln -s a b\n$ ll a b\n-rw-r--r--  1 nobody  staff     0B  4 22 12:47 a\nlrwxr-xr-x  1 nobody  staff     1B  4 22 12:49 b -> a\n```\n\n2、为 a 写入数据，查看 b 中的内容。删除 a，再查看 b 的内容会发现 b 的连接失效了\n\n```bash\n$ cat > a <<EOF\nheredoc> This is a test !\nheredoc> EOF\n$ cat b\nThis is a test !\n$ rm -f a\n$ cat b\ncat: b: No such file or directory\n```\n\n3、重新创建文件 a，然后查看 b 的内容会发现b重新连接成功了，并且连接至了原来同名的a文件。\n\n```bash\n$ ll b\nlrwxr-xr-x  1 nobody  staff     1B  4 22 12:49 b -> a\n$ touch a\n$ cat > a << EOF\nheredoc> This is another test !\nheredoc> EOF\n$ cat b\nThis is another test !\n```\n\n## 总结\n\n对于硬连接来说，共享的是 inode，重新创建的同名文件不具有相同的 inode，因此于原来毫无干系。而对于软连接来说，它连接记录的是一个文件的绝对路径，因此当重新创建同名文件时候，软连接又重新生效了。\n\n## 相关链接\n\n- [Linux 中硬连接（hard link）与软连接（symbolic link）的区别](https://blog.csdn.net/gxzc936733992/article/details/49340429)","slug":"soft_hard_link","published":1,"updated":"2019-04-22T07:07:41.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxh80el2000g6c9v7jj5mhfu","content":"<p>首先要简单了解一下 Linux 的 Ext 文件系统，此处<a href=\"https://www.cnblogs.com/justmine/p/9128730.html\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<h2 id=\"Linux-Ext文件系统\"><a href=\"#Linux-Ext文件系统\" class=\"headerlink\" title=\"Linux Ext文件系统\"></a>Linux Ext文件系统</h2><p>Linux 的 Ext 文件系统是如何与磁盘内存产生对应的呢？我们知道，在使用磁盘内存之前，需要为磁盘分区，然后为所分区域格式化出一个统一的文件系统（也有例外，如LVM与磁盘阵列技术）。那么，在这样一个统一的文件系统中，根据数据的不同，就可以将内存分为以下 3 种类型：</p>\n<ul>\n<li><p>inode：记录文件的属性，一个文件占用一个 inode，同时记录此文件的数据所在的 block 号码。当用户搜索或者访问一个文件时，UNIX 系统通过 inode 表查找正确的 inode 编号。在找到 inode 编号之后，相关的命令才可以访问该 inode，并对其进行适当的更改。</p>\n<blockquote>\n<p>例如使用vi来编辑一个文件。当您键入vi <filename> 时，在 inode 表中找到 inode 编号之后，才允许您打开该inode。在 vi 的编辑会话期间，更改了该inode中的某些属性，当您完成操作并键入 :wq 时，将关闭并释放该 inode。通过这种方式，如果两个用户试图对同一个文件进行编辑， inode 已经在第一个编辑会话期间分配给了另一个用户 ID (UID)，因此第二个编辑任务就必须等待，直到该 inode 释放为止。</filename></p>\n</blockquote>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>block：存储的文件内容，也叫数据区块(data block)，每个block都有自己的编号，Ext2支持的单位block容量仅为1k、2k、4k。如果文件太大，则会占用多个block。</p>\n</li>\n<li><p>super block：记录文件系统的整体信息，包括inode/block的总量、使用量、剩余量，以及文件系统的格式与相关信息等。</p>\n</li>\n</ul>\n<p>因此对于一个文件来说，它的inode号就类似于id的作用，用于存放关于该文件的一些基本信息。</p>\n<h2 id=\"硬连接（hard-link）\"><a href=\"#硬连接（hard-link）\" class=\"headerlink\" title=\"硬连接（hard link）\"></a>硬连接（hard link）</h2><p>若两个文件，拥有同样的 inode，那么就产生了所谓的硬连接。</p>\n<p>1、创建文件 a，并查看属性</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch a</span><br><span class=\"line\">$ ll a</span><br><span class=\"line\">-rw-r--r--  1 nobody  staff     0B  4 22 12:29 a</span><br></pre></td></tr></table></figure>\n<p>tips：如果不是很懂 Linux 中文档属性、拥有者、群组、权限、差异等，点击<a href=\"https://www.cnblogs.com/justmine/p/9053419.html\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<p>2、创建 a 的硬连接 b，并查看 a 和 b 的属性</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ln a b</span><br><span class=\"line\">$ ll a b</span><br><span class=\"line\">-rw-r--r--  2 nobody  staff     0B  4 22 12:29 a</span><br><span class=\"line\">-rw-r--r--  2 nobody  staff     0B  4 22 12:29 b</span><br></pre></td></tr></table></figure>\n<p>可以发现，a和b的属性完全一致，注意其中第二列数字表示的就是该文件的硬连接数。</p>\n<p>3、对于硬连接来说，它的好处就是“安全”。你将其中任何一个文件名删除(rm -f)，文件都是存在的，因为文件的inode一直存在</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -f a</span><br><span class=\"line\">$ ll b</span><br><span class=\"line\">-rw-r--r--  1 nobody  staff     0B  4 22 12:29 b</span><br></pre></td></tr></table></figure>\n<p><code>并且由于两个文件都是对应的相同的 inode 和 block，因此对任何其中一个进行修改编辑，结果都会生效。</code></p>\n<p>4、如果此时重建 a，则新建的 a 与 b 没有任何关系，故存在硬连接关系</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw-r--r--  1 nobody  staff     0B  4 22 12:40 a</span><br><span class=\"line\">-rw-r--r--  1 nobody  staff     0B  4 22 12:29 b</span><br></pre></td></tr></table></figure>\n<h2 id=\"软连接（symbolic-link）\"><a href=\"#软连接（symbolic-link）\" class=\"headerlink\" title=\"软连接（symbolic link）\"></a>软连接（symbolic link）</h2><p>软连接的意义就如同 windows 平台下的快捷方式，它是一个类型为 l 的文件，拥有自己的 inode 和 block，对它进行操作也相当于对被 link 文件进行操作。</p>\n<p><code>语法： ln -s source_file target_file</code></p>\n<p>1、创建 a 和 a 的软连接 b</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch a</span><br><span class=\"line\">$ ll a</span><br><span class=\"line\">-rw-r--r--  1 nobody  staff     0B  4 22 12:47 a</span><br><span class=\"line\">$ ln -s a b</span><br><span class=\"line\">$ ll a b</span><br><span class=\"line\">-rw-r--r--  1 nobody  staff     0B  4 22 12:47 a</span><br><span class=\"line\">lrwxr-xr-x  1 nobody  staff     1B  4 22 12:49 b -&gt; a</span><br></pre></td></tr></table></figure>\n<p>2、为 a 写入数据，查看 b 中的内容。删除 a，再查看 b 的内容会发现 b 的连接失效了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; a &lt;&lt;EOF</span><br><span class=\"line\">heredoc&gt; This is a <span class=\"built_in\">test</span> !</span><br><span class=\"line\">heredoc&gt; EOF</span><br><span class=\"line\">$ cat b</span><br><span class=\"line\">This is a <span class=\"built_in\">test</span> !</span><br><span class=\"line\">$ rm -f a</span><br><span class=\"line\">$ cat b</span><br><span class=\"line\">cat: b: No such file or directory</span><br></pre></td></tr></table></figure>\n<p>3、重新创建文件 a，然后查看 b 的内容会发现b重新连接成功了，并且连接至了原来同名的a文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ll b</span><br><span class=\"line\">lrwxr-xr-x  1 nobody  staff     1B  4 22 12:49 b -&gt; a</span><br><span class=\"line\">$ touch a</span><br><span class=\"line\">$ cat &gt; a &lt;&lt; EOF</span><br><span class=\"line\">heredoc&gt; This is another <span class=\"built_in\">test</span> !</span><br><span class=\"line\">heredoc&gt; EOF</span><br><span class=\"line\">$ cat b</span><br><span class=\"line\">This is another <span class=\"built_in\">test</span> !</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>对于硬连接来说，共享的是 inode，重新创建的同名文件不具有相同的 inode，因此于原来毫无干系。而对于软连接来说，它连接记录的是一个文件的绝对路径，因此当重新创建同名文件时候，软连接又重新生效了。</p>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li><a href=\"https://blog.csdn.net/gxzc936733992/article/details/49340429\" target=\"_blank\" rel=\"noopener\">Linux 中硬连接（hard link）与软连接（symbolic link）的区别</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>首先要简单了解一下 Linux 的 Ext 文件系统，此处<a href=\"https://www.cnblogs.com/justmine/p/9128730.html\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<h2 id=\"Linux-Ext文件系统\"><a href=\"#Linux-Ext文件系统\" class=\"headerlink\" title=\"Linux Ext文件系统\"></a>Linux Ext文件系统</h2><p>Linux 的 Ext 文件系统是如何与磁盘内存产生对应的呢？我们知道，在使用磁盘内存之前，需要为磁盘分区，然后为所分区域格式化出一个统一的文件系统（也有例外，如LVM与磁盘阵列技术）。那么，在这样一个统一的文件系统中，根据数据的不同，就可以将内存分为以下 3 种类型：</p>\n<ul>\n<li><p>inode：记录文件的属性，一个文件占用一个 inode，同时记录此文件的数据所在的 block 号码。当用户搜索或者访问一个文件时，UNIX 系统通过 inode 表查找正确的 inode 编号。在找到 inode 编号之后，相关的命令才可以访问该 inode，并对其进行适当的更改。</p>\n<blockquote>\n<p>例如使用vi来编辑一个文件。当您键入vi <filename> 时，在 inode 表中找到 inode 编号之后，才允许您打开该inode。在 vi 的编辑会话期间，更改了该inode中的某些属性，当您完成操作并键入 :wq 时，将关闭并释放该 inode。通过这种方式，如果两个用户试图对同一个文件进行编辑， inode 已经在第一个编辑会话期间分配给了另一个用户 ID (UID)，因此第二个编辑任务就必须等待，直到该 inode 释放为止。</filename></p>\n</blockquote>\n</li>\n</ul>","more":"<ul>\n<li><p>block：存储的文件内容，也叫数据区块(data block)，每个block都有自己的编号，Ext2支持的单位block容量仅为1k、2k、4k。如果文件太大，则会占用多个block。</p>\n</li>\n<li><p>super block：记录文件系统的整体信息，包括inode/block的总量、使用量、剩余量，以及文件系统的格式与相关信息等。</p>\n</li>\n</ul>\n<p>因此对于一个文件来说，它的inode号就类似于id的作用，用于存放关于该文件的一些基本信息。</p>\n<h2 id=\"硬连接（hard-link）\"><a href=\"#硬连接（hard-link）\" class=\"headerlink\" title=\"硬连接（hard link）\"></a>硬连接（hard link）</h2><p>若两个文件，拥有同样的 inode，那么就产生了所谓的硬连接。</p>\n<p>1、创建文件 a，并查看属性</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch a</span><br><span class=\"line\">$ ll a</span><br><span class=\"line\">-rw-r--r--  1 nobody  staff     0B  4 22 12:29 a</span><br></pre></td></tr></table></figure>\n<p>tips：如果不是很懂 Linux 中文档属性、拥有者、群组、权限、差异等，点击<a href=\"https://www.cnblogs.com/justmine/p/9053419.html\" target=\"_blank\" rel=\"noopener\">传送门</a>。</p>\n<p>2、创建 a 的硬连接 b，并查看 a 和 b 的属性</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ln a b</span><br><span class=\"line\">$ ll a b</span><br><span class=\"line\">-rw-r--r--  2 nobody  staff     0B  4 22 12:29 a</span><br><span class=\"line\">-rw-r--r--  2 nobody  staff     0B  4 22 12:29 b</span><br></pre></td></tr></table></figure>\n<p>可以发现，a和b的属性完全一致，注意其中第二列数字表示的就是该文件的硬连接数。</p>\n<p>3、对于硬连接来说，它的好处就是“安全”。你将其中任何一个文件名删除(rm -f)，文件都是存在的，因为文件的inode一直存在</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -f a</span><br><span class=\"line\">$ ll b</span><br><span class=\"line\">-rw-r--r--  1 nobody  staff     0B  4 22 12:29 b</span><br></pre></td></tr></table></figure>\n<p><code>并且由于两个文件都是对应的相同的 inode 和 block，因此对任何其中一个进行修改编辑，结果都会生效。</code></p>\n<p>4、如果此时重建 a，则新建的 a 与 b 没有任何关系，故存在硬连接关系</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw-r--r--  1 nobody  staff     0B  4 22 12:40 a</span><br><span class=\"line\">-rw-r--r--  1 nobody  staff     0B  4 22 12:29 b</span><br></pre></td></tr></table></figure>\n<h2 id=\"软连接（symbolic-link）\"><a href=\"#软连接（symbolic-link）\" class=\"headerlink\" title=\"软连接（symbolic link）\"></a>软连接（symbolic link）</h2><p>软连接的意义就如同 windows 平台下的快捷方式，它是一个类型为 l 的文件，拥有自己的 inode 和 block，对它进行操作也相当于对被 link 文件进行操作。</p>\n<p><code>语法： ln -s source_file target_file</code></p>\n<p>1、创建 a 和 a 的软连接 b</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch a</span><br><span class=\"line\">$ ll a</span><br><span class=\"line\">-rw-r--r--  1 nobody  staff     0B  4 22 12:47 a</span><br><span class=\"line\">$ ln -s a b</span><br><span class=\"line\">$ ll a b</span><br><span class=\"line\">-rw-r--r--  1 nobody  staff     0B  4 22 12:47 a</span><br><span class=\"line\">lrwxr-xr-x  1 nobody  staff     1B  4 22 12:49 b -&gt; a</span><br></pre></td></tr></table></figure>\n<p>2、为 a 写入数据，查看 b 中的内容。删除 a，再查看 b 的内容会发现 b 的连接失效了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; a &lt;&lt;EOF</span><br><span class=\"line\">heredoc&gt; This is a <span class=\"built_in\">test</span> !</span><br><span class=\"line\">heredoc&gt; EOF</span><br><span class=\"line\">$ cat b</span><br><span class=\"line\">This is a <span class=\"built_in\">test</span> !</span><br><span class=\"line\">$ rm -f a</span><br><span class=\"line\">$ cat b</span><br><span class=\"line\">cat: b: No such file or directory</span><br></pre></td></tr></table></figure>\n<p>3、重新创建文件 a，然后查看 b 的内容会发现b重新连接成功了，并且连接至了原来同名的a文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ll b</span><br><span class=\"line\">lrwxr-xr-x  1 nobody  staff     1B  4 22 12:49 b -&gt; a</span><br><span class=\"line\">$ touch a</span><br><span class=\"line\">$ cat &gt; a &lt;&lt; EOF</span><br><span class=\"line\">heredoc&gt; This is another <span class=\"built_in\">test</span> !</span><br><span class=\"line\">heredoc&gt; EOF</span><br><span class=\"line\">$ cat b</span><br><span class=\"line\">This is another <span class=\"built_in\">test</span> !</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>对于硬连接来说，共享的是 inode，重新创建的同名文件不具有相同的 inode，因此于原来毫无干系。而对于软连接来说，它连接记录的是一个文件的绝对路径，因此当重新创建同名文件时候，软连接又重新生效了。</p>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ul>\n<li><a href=\"https://blog.csdn.net/gxzc936733992/article/details/49340429\" target=\"_blank\" rel=\"noopener\">Linux 中硬连接（hard link）与软连接（symbolic link）的区别</a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjxh80ekt00046c9vpmvv9oj2","tag_id":"cjxh80ekq00026c9vilbcki8c","_id":"cjxh80ekv00076c9voof828cl"},{"post_id":"cjxh80ekk00006c9v5bd3xf4y","tag_id":"cjxh80ekq00026c9vilbcki8c","_id":"cjxh80ekw00096c9v7w7mlcr5"},{"post_id":"cjxh80eky000c6c9vsg5wdg2u","tag_id":"cjxh80ekv00066c9vo0y4zo25","_id":"cjxh80el1000f6c9vwwwjrswe"},{"post_id":"cjxh80ekz000d6c9vwfn95dmp","tag_id":"cjxh80ekq00026c9vilbcki8c","_id":"cjxh80el4000h6c9vewmog11k"},{"post_id":"cjxh80eko00016c9vypej3wux","tag_id":"cjxh80ekv00066c9vo0y4zo25","_id":"cjxh80el6000j6c9vlhnk56my"},{"post_id":"cjxh80eko00016c9vypej3wux","tag_id":"cjxh80ekx000b6c9v3x31apq4","_id":"cjxh80el6000k6c9vbmuw26lh"},{"post_id":"cjxh80eko00016c9vypej3wux","tag_id":"cjxh80ekq00026c9vilbcki8c","_id":"cjxh80el6000m6c9v0lbs6ca5"},{"post_id":"cjxh80ekr00036c9vm1w08jco","tag_id":"cjxh80ekv00066c9vo0y4zo25","_id":"cjxh80el7000n6c9vi7i9o1n9"},{"post_id":"cjxh80eku00056c9voozyw8zq","tag_id":"cjxh80el6000l6c9v8zjf7gvo","_id":"cjxh80el7000p6c9vpl4g1wny"},{"post_id":"cjxh80ekv00086c9vnwtior4v","tag_id":"cjxh80ekq00026c9vilbcki8c","_id":"cjxh80el9000s6c9vdwtiqtas"},{"post_id":"cjxh80ekv00086c9vnwtior4v","tag_id":"cjxh80el7000o6c9v376ha72g","_id":"cjxh80el9000t6c9vrw534yus"},{"post_id":"cjxh80ekv00086c9vnwtior4v","tag_id":"cjxh80el7000q6c9vc94lfqib","_id":"cjxh80ela000v6c9vlu1d6rzy"},{"post_id":"cjxh80ekw000a6c9vs1eu3qcw","tag_id":"cjxh80el8000r6c9vqu2hcb1d","_id":"cjxh80ela000x6c9v50fp5iat"},{"post_id":"cjxh80ekw000a6c9vs1eu3qcw","tag_id":"cjxh80el9000u6c9vz25fwche","_id":"cjxh80ela000y6c9vudnqawku"},{"post_id":"cjxh80el2000g6c9v7jj5mhfu","tag_id":"cjxh80ekq00026c9vilbcki8c","_id":"cjxh80ela000z6c9v7bbctz0f"},{"post_id":"cjxh80el2000g6c9v7jj5mhfu","tag_id":"cjxh80ela000w6c9vzbtykr6w","_id":"cjxh80elb00106c9vy7nl75gp"}],"Tag":[{"name":"技术名词","_id":"cjxh80ekq00026c9vilbcki8c"},{"name":"Go","_id":"cjxh80ekv00066c9vo0y4zo25"},{"name":"Javascript","_id":"cjxh80ekx000b6c9v3x31apq4"},{"name":"已阅","_id":"cjxh80el6000l6c9v8zjf7gvo"},{"name":"运维","_id":"cjxh80el7000o6c9v376ha72g"},{"name":"Log","_id":"cjxh80el7000q6c9vc94lfqib"},{"name":"PATH","_id":"cjxh80el8000r6c9vqu2hcb1d"},{"name":"MAC","_id":"cjxh80el9000u6c9vz25fwche"},{"name":"Linux","_id":"cjxh80ela000w6c9vzbtykr6w"}]}}